diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/commerce_kickstart.info drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/commerce_kickstart.info
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/commerce_kickstart.info	2014-06-11 16:09:51.000000000 +0200
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/commerce_kickstart.info	2014-06-26 16:04:33.273327516 +0200
@@ -120,6 +120,7 @@ php_memory_limit = 128M
 ; Information added by Drupal.org packaging script on 2014-06-11
 version = "7.x-2.15"
 core = "7.x"
+project status url = http://drupal.epe.si
 project = "commerce_kickstart"
 datestamp = "1402495791"
 
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/commerce_kickstart.install drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/commerce_kickstart.install
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/commerce_kickstart.install	2014-06-11 16:03:12.000000000 +0200
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/commerce_kickstart.install	2014-06-11 18:13:08.328376582 +0200
@@ -20,14 +20,12 @@ function commerce_kickstart_install_task
 
   $tasks = array();
   $current_task = variable_get('install_task', 'done');
-  $install_demo_store = variable_get('commerce_kickstart_demo_store', FALSE);
-
   $tasks['commerce_kickstart_configure_store_form'] = array(
     'display_name' => st('Configure store'),
     'type' => 'form',
   );
   $tasks['commerce_kickstart_install_additional_modules'] = array(
-    'display_name' => $install_demo_store ? st('Install demo store') : st('Install additional functionality'),
+    'display_name' => st('Install additional functionality'),
     'type' => 'batch',
     // Show this task only after the Kickstart steps have bene reached.
     'display' => strpos($current_task, 'commerce_kickstart_') !== FALSE,
@@ -198,23 +196,6 @@ function commerce_kickstart_configure_st
     '#type' => 'fieldset',
     '#title' => st('Functionality'),
   );
-  $form['functionality']['install_demo_store'] = array(
-    '#type' => 'radios',
-    '#title' => st('Do you want to install the demo store?'),
-    '#description' => st('Shows you everything Commerce Kickstart can do. Includes a custom theme, sample content and products.'),
-    '#options' => $options,
-    '#default_value' => '1',
-  );
-  $form['localization'] = array(
-    '#type' => 'fieldset',
-    '#title' => st('Localization'),
-  );
-  $form['localization']['install_localization'] = array(
-    '#type' => 'radios',
-    '#title' => st('Do you want to be able to translate the interface of your store?'),
-    '#options' => $options,
-    '#default_value' => '0',
-  );
 
   $options_selection = array(
     'anonymous_checkout' => 'Allow checkout for <strong>anonymous users</strong>.',
@@ -229,11 +210,6 @@ function commerce_kickstart_configure_st
     '#type' => 'checkboxes',
     '#options' => $options_selection,
     '#title' => t("Install additional functionality"),
-    '#states' => array(
-      'visible' => array(
-        ':input[name="install_demo_store"]' => array('value' => '0'),
-      ),
-    ),
   );
 
   // Build a currency options list from all defined currencies.
@@ -292,8 +268,6 @@ function commerce_kickstart_configure_st
  */
 function commerce_kickstart_configure_store_form_submit(&$form, &$form_state) {
   variable_set('commerce_kickstart_store_country', $form_state['values']['country_list']);
-  variable_set('commerce_kickstart_demo_store', $form_state['values']['install_demo_store']);
-  variable_set('commerce_kickstart_localization', $form_state['values']['install_localization']);
   variable_set('commerce_kickstart_selected_extras', $form_state['values']['extras']);
   variable_set('commerce_kickstart_choose_tax_country', $form_state['values']['commerce_kickstart_choose_tax_country']);
   variable_set('commerce_default_currency', $form_state['values']['commerce_default_currency']);
@@ -312,29 +286,11 @@ function commerce_kickstart_configure_st
  */
 function commerce_kickstart_install_additional_modules() {
   global $install_state;
-  $install_demo_store = variable_get('commerce_kickstart_demo_store', FALSE);
-  if ($install_demo_store) {
-    $modules = array(
-      'commerce_kickstart_reset',
-      'commerce_kickstart_block',
-      'commerce_kickstart_user',
-      'commerce_checkout_redirect',
-      'commerce_kickstart_social',
-      'commerce_kickstart_product',
-      'commerce_kickstart_product_ui',
-      'commerce_kickstart_blog',
-      'commerce_kickstart_slideshow',
-      'commerce_kickstart_merchandising',
-      'commerce_kickstart_menus',
-      'commerce_kickstart_search',
-      'commerce_kickstart_taxonomy',
-    );
-  }
-  else {
     $modules = array(
       'commerce_kickstart_block',
       'commerce_kickstart_user',
       'commerce_kickstart_lite_product',
+      'epesi_commerce',
       'commerce_kickstart_product_ui',
       'commerce_kickstart_search',
       'commerce_kickstart_taxonomy',
@@ -361,15 +317,11 @@ function commerce_kickstart_install_addi
     if (!empty($selected_extras['zoom_cloud'])) {
       variable_set('commerce_kickstart_product_zoom_enabled', TRUE);
     }
-  }
 
-  $install_localization = variable_get('commerce_kickstart_localization', FALSE);
-  if ($install_localization) {
-    $modules[] = 'locale';
-    $modules[] = 'variable';
-    $modules[] = 'i18n';
-    $modules[] = 'i18n_field';
-  }
+  $modules[] = 'locale';
+  $modules[] = 'variable';
+  $modules[] = 'i18n';
+  $modules[] = 'i18n_field';
 
   $store_country = variable_get('commerce_kickstart_store_country', 'US');
   // Enable Payleap and Paypal for North America.
@@ -404,19 +356,17 @@ function commerce_kickstart_install_addi
 
   $operations = array();
   // Enable and set as default the correct theme.
-  $theme = $install_demo_store ? 'commerce_kickstart_theme' : 'omega_kickstart';
+  $theme = 'omega_kickstart';
   $operations[] = array('_commerce_kickstart_enable_theme', array($theme));
   // Enable the selected modules.
   foreach ($modules_sorted as $module => $weight) {
     $operations[] = array('_commerce_kickstart_enable_module', array($module, $files[$module]->info['name']));
   }
-  if ($install_localization) {
-    $operations[] = array('_commerce_kickstart_setup_localization', array(t('Configured localization.')));
-  }
+  $operations[] = array('_commerce_kickstart_setup_localization', array(t('Configured localization.')));
   $operations[] = array('_commerce_kickstart_flush_caches', array(t('Flushed caches.')));
 
   $batch = array(
-    'title' => $install_demo_store ? t('Installing demo store') : t('Installing additional functionality'),
+    'title' => t('Installing additional functionality'),
     'operations' => $operations,
     'file' => drupal_get_path('profile', 'commerce_kickstart') . '/commerce_kickstart.install_callbacks.inc',
   );
@@ -442,7 +392,6 @@ function commerce_kickstart_import_conte
   $operations = array();
   $operations[] = array('_commerce_kickstart_example_taxes', array(t('Setting up taxes.')));
 
-  $install_demo_store = variable_get('commerce_kickstart_demo_store', FALSE);
   $operations[] = array('_commerce_kickstart_taxonomy_menu', array(t('Setting up menus.')));
 
   // Run all available migrations.
@@ -451,9 +400,6 @@ function commerce_kickstart_import_conte
     $operations[] = array('_commerce_kickstart_import', array($machine_name, t('Importing content.')));
   }
 
-  if ($install_demo_store) {
-    $operations[] = array('_commerce_kickstart_example_user', array(t('Setting up users.')));
-  }
   // Perform post-import tasks.
   $operations[] = array('_commerce_kickstart_post_import', array(t('Completing setup.')));
 
@@ -848,7 +794,6 @@ function commerce_kickstart_update_7204(
  * Replace the collection view by a view based on the product display index.
  */
 function commerce_kickstart_update_7205(&$sandbox) {
-  $install_demo_store = variable_get('commerce_kickstart_demo_store', FALSE);
   // Batching the update
   if (!isset($sandbox['progress'])) {
     $sandbox['progress'] = 1;
@@ -880,12 +825,7 @@ function commerce_kickstart_update_7205(
   }
   elseif ($sandbox['progress'] == 3) {
     // Set up taxonomy main menu..
-    if ($install_demo_store) {
-      $vocabulary_machine_name = 'collection';
-    }
-    else {
-      $vocabulary_machine_name = 'product_category';
-    }
+    $vocabulary_machine_name = 'product_category';
     if (($collection = taxonomy_vocabulary_machine_name_load($vocabulary_machine_name)) && module_exists('taxonomy_menu')) {
       drupal_load('module', 'taxonomy_menu');
       $variable_name = _taxonomy_menu_build_variable('vocab_menu', $collection->vid);
@@ -921,13 +861,6 @@ function commerce_kickstart_update_7205(
             'type' => 'integer',
           ),
         );
-        if ($install_demo_store) {
-          $options['fields'] += array(
-            'field_category:name' => array(
-              'type' => 'string',
-            ),
-          );
-        }
         if (!$index->update(array('options' => $options))) {
           $sandbox['error_message'] = '<strong style="color: red;">' . t("Important: We couldn't add the new fields to the index.") . '</strong>';
         }
@@ -969,12 +902,10 @@ function commerce_kickstart_update_7205(
  * Enable the commerce_kickstart_product_ui on the no demo store.
  */
 function commerce_kickstart_update_7206() {
-  if (!variable_get('commerce_kickstart_demo_store', FALSE)) {
     // Disable the removed lite modules.
     _commerce_kickstart_disable_modules(array('commerce_kickstart_lite_product_ui', 'commerce_kickstart_lite_product_zoom'));
     drupal_flush_all_caches();
     module_enable(array('commerce_kickstart_product_ui'));
-  }
 }
 
 /**
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/commerce_kickstart.install_callbacks.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/commerce_kickstart.install_callbacks.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/commerce_kickstart.install_callbacks.inc	2014-06-11 16:03:12.000000000 +0200
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/commerce_kickstart.install_callbacks.inc	2014-06-11 18:13:08.344376582 +0200
@@ -181,7 +181,7 @@ function _commerce_kickstart_taxonomy_me
 
 
   // Set up taxonomy main menu.
-  $vocabulary_machine_name = variable_get('commerce_kickstart_demo_store', FALSE) ? 'collection' : 'product_category';
+  $vocabulary_machine_name = 'product_category';
   if ($collection = taxonomy_vocabulary_machine_name_load($vocabulary_machine_name)) {
     $variable_name = _taxonomy_menu_build_variable('vocab_menu', $collection->vid);
     variable_set($variable_name, 'main-menu');
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/commerce_kickstart.profile drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/commerce_kickstart.profile
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/commerce_kickstart.profile	2014-06-11 16:03:12.000000000 +0200
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/commerce_kickstart.profile	2014-06-11 18:13:08.344376582 +0200
@@ -131,17 +131,9 @@ function commerce_kickstart_system_info_
     return;
   }
 
-  $install_demo_store = variable_get('commerce_kickstart_demo_store', FALSE);
-  if ($install_demo_store) {
-    $hide_modules = array(
-      'commerce_kickstart_lite_product',
-    );
-  }
-  else {
-    $hide_modules = array(
-      'commerce_kickstart_product',
-    );
-  }
+  $hide_modules = array(
+    'commerce_kickstart_product',
+  );
 
   if ($type == 'module' && in_array($file->name, $hide_modules)) {
     $info['hidden'] = TRUE;
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_epesi_payment/commerce_epesi_payment.info drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_epesi_payment/commerce_epesi_payment.info
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_epesi_payment/commerce_epesi_payment.info	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_epesi_payment/commerce_epesi_payment.info	2014-06-26 15:47:18.000000000 +0200
@@ -0,0 +1,19 @@
+name = Commerce Epesi Payment
+description = Implements Epesi Payment payments in Drupal Commerce checkout.
+package = Commerce (contrib)
+dependencies[] = commerce
+dependencies[] = commerce_ui
+dependencies[] = commerce_payment
+dependencies[] = commerce_order
+core = 7.x
+
+; Base module files
+files[] = commerce_epesi_payment.module
+
+; Information added by drupal.org packaging script on 2013-09-30
+version = "7.x-1.0"
+core = "7.x"
+project = "commerce_epesi_payment"
+project status url = http://drupal.epe.si
+datestamp = "1403782451"
+
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_epesi_payment/commerce_epesi_payment.module drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_epesi_payment/commerce_epesi_payment.module
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_epesi_payment/commerce_epesi_payment.module	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_epesi_payment/commerce_epesi_payment.module	2014-04-16 14:25:46.000000000 +0200
@@ -0,0 +1,123 @@
+<?php
+/**
+ * @file
+ * Implements transferuj.pl Payments in Drupal Commerce checkout.
+ */
+
+function commerce_epesi_payment_commerce_payment_method_info() {
+  $payment_methods = array();
+
+  $payment_methods['epesi_payment'] = array(
+    'base' => 'commerce_epesi_payment',
+    'title' => t('Epesi Premium Payment module'),
+    'short_title' => t('Epesi'),
+    'description' => t('Pay with Epesi Premium payment module'),
+    'terminal' => FALSE,
+    'offsite' => TRUE,
+  );
+
+  return $payment_methods;
+}
+
+function commerce_epesi_payment_settings_form($settings = NULL) {
+  $form = array();
+
+  $form['epesi_payment_url'] = array(
+    '#title' => t('Epesi payment URL'),
+    '#type' => 'textfield',
+    '#default_value' => isset($settings['epesi_payment_url'])?$settings['epesi_payment_url']:'',
+    '#description' => t('Epesi Payment module Gateway URL.'),
+    '#required' => TRUE,
+  );
+
+  $form['epesi_payment_drupal_id'] = array(
+    '#title' => t('Drupal configuration record ID on Epesi'),
+    '#type' => 'textfield',
+    '#default_value' => isset($settings['epesi_payment_drupal_id'])?$settings['epesi_payment_drupal_id']:'',
+    '#description' => t('Drupal configuration record ID on Epesi'),
+    '#required' => TRUE,
+  );
+
+  return $form;
+}
+
+function commerce_epesi_payment_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
+  if (empty($payment_method['settings']['epesi_payment_url'])) {
+    drupal_set_message(t('Epesi Payment is not configured for use.'), 'error');
+  }
+
+  $form = array();
+
+  if (!empty($order->data['commerce_payment_epesi_payment'])) {
+    $pane_values += $order->data['commerce_payment_epesi_payment'];
+  }
+
+  return $form;
+}
+
+function commerce_epesi_payment_redirect_form($form, &$form_state, $order, $payment_method) {
+  if (empty($payment_method['settings']['epesi_payment_url'])) {
+    drupal_set_message(t('Epesi Payment is not configured for use.'), 'error');
+  }
+
+  $wrapper = entity_metadata_wrapper('commerce_order', $order);
+
+  $currency_code = $wrapper->commerce_order_total->currency_code->value();
+  $amount = $wrapper->commerce_order_total->amount->value();
+
+
+  $ts = time();
+  $url_fail = "checkout/" . $order->order_id . "/payment/back/" . $order->data['payment_redirect_key'];
+  $url_ok = "checkout/" . $order->order_id . "/payment/return/" . $order->data['payment_redirect_key'];
+
+  $data = array(
+    'record_hash'           => 'drupal:'.$payment_method['settings']['epesi_payment_drupal_id'].':'.$order->order_id,
+    'record_type'          => 'premium_warehouse_items_orders',
+    'amount'       => $amount/100,//TODO/100
+    'currency'     => $currency_code,
+    'description'  => t('Order @order_number (@store)', array('@order_number' => $order->order_number, '@store' => variable_get('site_name', url('<front>', array('absolute' => TRUE))))),
+    'limit'        => 1,
+    'first_name'   => '',
+    'last_name'    => '',
+    'address_1'    => '',
+    'city'         => '',
+    'postal_code'  => '',
+    'country'      => '',
+    'email'        => $order->mail,
+    'phone'        => '',
+    'url_ok'       => url($url_ok, array('absolute' => TRUE)),
+    'url_error'    => url($url_fail, array('absolute' => TRUE)),
+  );
+
+  $params_map = array(
+    'last_name' => 'name_line',
+    'address_1' => 'thoroughfare',
+    'city' => 'locality',
+    'postal_code' => 'postal_code',
+    'country' => 'country',
+  );
+
+  foreach ($params_map as $key => $value) {
+    if (isset($wrapper->commerce_customer_billing->commerce_customer_address->$value)) {
+      $data[$key] = $wrapper->commerce_customer_billing->commerce_customer_address->$value->value();
+    }
+    else {
+    }
+  }
+
+  $form['#action'] = $payment_method['settings']['epesi_payment_url'];
+
+  foreach ($data as $name => $value) {
+    if (!empty($value)) {
+      $form[$name] = array('#type' => 'hidden', '#value' => $value);
+    }
+  }
+  //drupal_set_message('<pre>'.print_r($data, 1).'<pre>');
+
+  $form['submit'] = array(
+    '#type' => 'submit',
+    '#value' => t('Make a payment'),
+  );
+
+  return $form;
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_epesi_payment/LICENSE.txt drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_epesi_payment/LICENSE.txt
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_epesi_payment/LICENSE.txt	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_epesi_payment/LICENSE.txt	2014-04-16 14:25:46.000000000 +0200
@@ -0,0 +1,339 @@
+                    GNU GENERAL PUBLIC LICENSE
+                       Version 2, June 1991
+
+ Copyright (C) 1989, 1991 Free Software Foundation, Inc.,
+ 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+                            Preamble
+
+  The licenses for most software are designed to take away your
+freedom to share and change it.  By contrast, the GNU General Public
+License is intended to guarantee your freedom to share and change free
+software--to make sure the software is free for all its users.  This
+General Public License applies to most of the Free Software
+Foundation's software and to any other program whose authors commit to
+using it.  (Some other Free Software Foundation software is covered by
+the GNU Lesser General Public License instead.)  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+this service if you wish), that you receive source code or can get it
+if you want it, that you can change the software or use pieces of it
+in new free programs; and that you know you can do these things.
+
+  To protect your rights, we need to make restrictions that forbid
+anyone to deny you these rights or to ask you to surrender the rights.
+These restrictions translate to certain responsibilities for you if you
+distribute copies of the software, or if you modify it.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must give the recipients all the rights that
+you have.  You must make sure that they, too, receive or can get the
+source code.  And you must show them these terms so they know their
+rights.
+
+  We protect your rights with two steps: (1) copyright the software, and
+(2) offer you this license which gives you legal permission to copy,
+distribute and/or modify the software.
+
+  Also, for each author's protection and ours, we want to make certain
+that everyone understands that there is no warranty for this free
+software.  If the software is modified by someone else and passed on, we
+want its recipients to know that what they have is not the original, so
+that any problems introduced by others will not reflect on the original
+authors' reputations.
+
+  Finally, any free program is threatened constantly by software
+patents.  We wish to avoid the danger that redistributors of a free
+program will individually obtain patent licenses, in effect making the
+program proprietary.  To prevent this, we have made it clear that any
+patent must be licensed for everyone's free use or not licensed at all.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+                    GNU GENERAL PUBLIC LICENSE
+   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
+
+  0. This License applies to any program or other work which contains
+a notice placed by the copyright holder saying it may be distributed
+under the terms of this General Public License.  The "Program", below,
+refers to any such program or work, and a "work based on the Program"
+means either the Program or any derivative work under copyright law:
+that is to say, a work containing the Program or a portion of it,
+either verbatim or with modifications and/or translated into another
+language.  (Hereinafter, translation is included without limitation in
+the term "modification".)  Each licensee is addressed as "you".
+
+Activities other than copying, distribution and modification are not
+covered by this License; they are outside its scope.  The act of
+running the Program is not restricted, and the output from the Program
+is covered only if its contents constitute a work based on the
+Program (independent of having been made by running the Program).
+Whether that is true depends on what the Program does.
+
+  1. You may copy and distribute verbatim copies of the Program's
+source code as you receive it, in any medium, provided that you
+conspicuously and appropriately publish on each copy an appropriate
+copyright notice and disclaimer of warranty; keep intact all the
+notices that refer to this License and to the absence of any warranty;
+and give any other recipients of the Program a copy of this License
+along with the Program.
+
+You may charge a fee for the physical act of transferring a copy, and
+you may at your option offer warranty protection in exchange for a fee.
+
+  2. You may modify your copy or copies of the Program or any portion
+of it, thus forming a work based on the Program, and copy and
+distribute such modifications or work under the terms of Section 1
+above, provided that you also meet all of these conditions:
+
+    a) You must cause the modified files to carry prominent notices
+    stating that you changed the files and the date of any change.
+
+    b) You must cause any work that you distribute or publish, that in
+    whole or in part contains or is derived from the Program or any
+    part thereof, to be licensed as a whole at no charge to all third
+    parties under the terms of this License.
+
+    c) If the modified program normally reads commands interactively
+    when run, you must cause it, when started running for such
+    interactive use in the most ordinary way, to print or display an
+    announcement including an appropriate copyright notice and a
+    notice that there is no warranty (or else, saying that you provide
+    a warranty) and that users may redistribute the program under
+    these conditions, and telling the user how to view a copy of this
+    License.  (Exception: if the Program itself is interactive but
+    does not normally print such an announcement, your work based on
+    the Program is not required to print an announcement.)
+
+These requirements apply to the modified work as a whole.  If
+identifiable sections of that work are not derived from the Program,
+and can be reasonably considered independent and separate works in
+themselves, then this License, and its terms, do not apply to those
+sections when you distribute them as separate works.  But when you
+distribute the same sections as part of a whole which is a work based
+on the Program, the distribution of the whole must be on the terms of
+this License, whose permissions for other licensees extend to the
+entire whole, and thus to each and every part regardless of who wrote it.
+
+Thus, it is not the intent of this section to claim rights or contest
+your rights to work written entirely by you; rather, the intent is to
+exercise the right to control the distribution of derivative or
+collective works based on the Program.
+
+In addition, mere aggregation of another work not based on the Program
+with the Program (or with a work based on the Program) on a volume of
+a storage or distribution medium does not bring the other work under
+the scope of this License.
+
+  3. You may copy and distribute the Program (or a work based on it,
+under Section 2) in object code or executable form under the terms of
+Sections 1 and 2 above provided that you also do one of the following:
+
+    a) Accompany it with the complete corresponding machine-readable
+    source code, which must be distributed under the terms of Sections
+    1 and 2 above on a medium customarily used for software interchange; or,
+
+    b) Accompany it with a written offer, valid for at least three
+    years, to give any third party, for a charge no more than your
+    cost of physically performing source distribution, a complete
+    machine-readable copy of the corresponding source code, to be
+    distributed under the terms of Sections 1 and 2 above on a medium
+    customarily used for software interchange; or,
+
+    c) Accompany it with the information you received as to the offer
+    to distribute corresponding source code.  (This alternative is
+    allowed only for noncommercial distribution and only if you
+    received the program in object code or executable form with such
+    an offer, in accord with Subsection b above.)
+
+The source code for a work means the preferred form of the work for
+making modifications to it.  For an executable work, complete source
+code means all the source code for all modules it contains, plus any
+associated interface definition files, plus the scripts used to
+control compilation and installation of the executable.  However, as a
+special exception, the source code distributed need not include
+anything that is normally distributed (in either source or binary
+form) with the major components (compiler, kernel, and so on) of the
+operating system on which the executable runs, unless that component
+itself accompanies the executable.
+
+If distribution of executable or object code is made by offering
+access to copy from a designated place, then offering equivalent
+access to copy the source code from the same place counts as
+distribution of the source code, even though third parties are not
+compelled to copy the source along with the object code.
+
+  4. You may not copy, modify, sublicense, or distribute the Program
+except as expressly provided under this License.  Any attempt
+otherwise to copy, modify, sublicense or distribute the Program is
+void, and will automatically terminate your rights under this License.
+However, parties who have received copies, or rights, from you under
+this License will not have their licenses terminated so long as such
+parties remain in full compliance.
+
+  5. You are not required to accept this License, since you have not
+signed it.  However, nothing else grants you permission to modify or
+distribute the Program or its derivative works.  These actions are
+prohibited by law if you do not accept this License.  Therefore, by
+modifying or distributing the Program (or any work based on the
+Program), you indicate your acceptance of this License to do so, and
+all its terms and conditions for copying, distributing or modifying
+the Program or works based on it.
+
+  6. Each time you redistribute the Program (or any work based on the
+Program), the recipient automatically receives a license from the
+original licensor to copy, distribute or modify the Program subject to
+these terms and conditions.  You may not impose any further
+restrictions on the recipients' exercise of the rights granted herein.
+You are not responsible for enforcing compliance by third parties to
+this License.
+
+  7. If, as a consequence of a court judgment or allegation of patent
+infringement or for any other reason (not limited to patent issues),
+conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot
+distribute so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you
+may not distribute the Program at all.  For example, if a patent
+license would not permit royalty-free redistribution of the Program by
+all those who receive copies directly or indirectly through you, then
+the only way you could satisfy both it and this License would be to
+refrain entirely from distribution of the Program.
+
+If any portion of this section is held invalid or unenforceable under
+any particular circumstance, the balance of the section is intended to
+apply and the section as a whole is intended to apply in other
+circumstances.
+
+It is not the purpose of this section to induce you to infringe any
+patents or other property right claims or to contest validity of any
+such claims; this section has the sole purpose of protecting the
+integrity of the free software distribution system, which is
+implemented by public license practices.  Many people have made
+generous contributions to the wide range of software distributed
+through that system in reliance on consistent application of that
+system; it is up to the author/donor to decide if he or she is willing
+to distribute software through any other system and a licensee cannot
+impose that choice.
+
+This section is intended to make thoroughly clear what is believed to
+be a consequence of the rest of this License.
+
+  8. If the distribution and/or use of the Program is restricted in
+certain countries either by patents or by copyrighted interfaces, the
+original copyright holder who places the Program under this License
+may add an explicit geographical distribution limitation excluding
+those countries, so that distribution is permitted only in or among
+countries not thus excluded.  In such case, this License incorporates
+the limitation as if written in the body of this License.
+
+  9. The Free Software Foundation may publish revised and/or new versions
+of the General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+Each version is given a distinguishing version number.  If the Program
+specifies a version number of this License which applies to it and "any
+later version", you have the option of following the terms and conditions
+either of that version or of any later version published by the Free
+Software Foundation.  If the Program does not specify a version number of
+this License, you may choose any version ever published by the Free Software
+Foundation.
+
+  10. If you wish to incorporate parts of the Program into other free
+programs whose distribution conditions are different, write to the author
+to ask for permission.  For software which is copyrighted by the Free
+Software Foundation, write to the Free Software Foundation; we sometimes
+make exceptions for this.  Our decision will be guided by the two goals
+of preserving the free status of all derivatives of our free software and
+of promoting the sharing and reuse of software generally.
+
+                            NO WARRANTY
+
+  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
+FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
+OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
+PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
+OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
+TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
+PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
+REPAIR OR CORRECTION.
+
+  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
+REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
+INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
+OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
+TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
+YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
+PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
+POSSIBILITY OF SUCH DAMAGES.
+
+                     END OF TERMS AND CONDITIONS
+
+            How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+convey the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    <one line to give the program's name and a brief idea of what it does.>
+    Copyright (C) <year>  <name of author>
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License along
+    with this program; if not, write to the Free Software Foundation, Inc.,
+    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+
+Also add information on how to contact you by electronic and paper mail.
+
+If the program is interactive, make it output a short notice like this
+when it starts in an interactive mode:
+
+    Gnomovision version 69, Copyright (C) year name of author
+    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, the commands you use may
+be called something other than `show w' and `show c'; they could even be
+mouse-clicks or menu items--whatever suits your program.
+
+You should also get your employer (if you work as a programmer) or your
+school, if any, to sign a "copyright disclaimer" for the program, if
+necessary.  Here is a sample; alter the names:
+
+  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
+  `Gnomovision' (which makes passes at compilers) written by James Hacker.
+
+  <signature of Ty Coon>, 1 April 1989
+  Ty Coon, President of Vice
+
+This General Public License does not permit incorporating your program into
+proprietary programs.  If your program is a subroutine library, you may
+consider it more useful to permit linking proprietary applications with the
+library.  If this is what you want to do, use the GNU Lesser General
+Public License instead of this License.
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/commerce_multicurrency.admin.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/commerce_multicurrency.admin.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/commerce_multicurrency.admin.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/commerce_multicurrency.admin.inc	2014-05-21 21:43:07.000000000 +0200
@@ -0,0 +1,267 @@
+<?php
+/**
+ * @file
+ * Administrative UI for commerce currency.
+ */
+
+/**
+ * Form to configure conversion settings.
+ */
+function commerce_multicurrency_conversion_settings_form($form, &$form_state) {
+  $enabled_currencies = commerce_currencies(TRUE);
+  $default_currency_code = commerce_default_currency();
+  $conversion_settings = variable_get('commerce_multicurrency_conversion_settings', array());
+  $use_cross_sync = variable_get('commerce_multicurrency_use_cross_conversion', TRUE);
+
+  $sync_providers = array();
+  foreach (commerce_multicurrency_commerce_multicurrency_exchange_rate_sync_provider() as $provider_code => $provider) {
+    $sync_providers[$provider_code] = $provider['title'];
+  }
+  $form['sync_provider'] = array(
+    '#type' => 'select',
+    '#options' => $sync_providers,
+    '#default_value' => variable_get('commerce_multicurrency_sync_provider', NULL),
+    '#title' => t('Service to fetch exchange rates from:'),
+  );
+  $form['use_cross_sync'] = array(
+    '#type' => 'checkbox',
+    '#default_value' => $use_cross_sync,
+    '#title' => t('Use cross conversion between non default currencies.'),
+    '#description' => t('If enabled only the rates between the default currency and the other currencies have to be managed. The rates between the other currencies is derived from their rates relative to the default currency.'),
+  );
+  $form['sync_now'] = array(
+    '#type' => 'checkbox',
+    '#title' => t('Synchronize rates on save.'),
+  );
+  $form['demo_amount'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Amount for example conversions:'),
+    '#size' => 5,
+    '#default_value' => 100,
+  );
+
+  $form['conversion_settings'] = array(
+    '#attached' => array(
+      'js' => array(
+        drupal_get_path('module', 'commerce_multicurrency') . '/commerce_multicurrency.admin.js',
+      ),
+    ),
+    '#tree' => TRUE,
+  );
+
+  if (count($enabled_currencies) > 1) {
+    foreach ($enabled_currencies as $currency) {
+      if ($use_cross_sync && $currency['code'] != $default_currency_code) {
+        continue;
+      }
+      if (!isset($conversion_settings[$currency['code']])) {
+        $conversion_settings[$currency['code']] = array();
+      }
+      $conversion_settings[$currency['code']] += array(
+        'sync' => '1',
+        'rates' => array(),
+      );
+
+      $form['conversion_settings'][$currency['code']] = array(
+        '#type' => 'fieldset',
+        '#collapsible' => TRUE,
+        '#collapsed' => TRUE,
+        '#title' => $currency['name'],
+      );
+      if ($currency['code'] == $default_currency_code) {
+        $form['conversion_settings'][$currency['code']]['#weight'] = -1;
+      }
+      $form['conversion_settings'][$currency['code']]['sync'] = array(
+        '#type' => 'checkbox',
+        '#title' => t('Synchronize all rates of this currency.'),
+        '#states' => array(
+          'checked' => array(
+            '#edit-' . $currency['code'] . ' fieldset input[type="checkbox"]' => array('checked' => TRUE),
+          ),
+        ),
+        '#default_value' => $conversion_settings[$currency['code']]['sync'],
+      );
+
+      foreach ($enabled_currencies as $conversion_currency) {
+        if ($conversion_currency == $currency) {
+          continue;
+        }
+        if (!isset($conversion_settings[$currency['code']]['rates'][$conversion_currency['code']])) {
+          $conversion_settings[$currency['code']]['rates'][$conversion_currency['code']] = array();
+        }
+        $conversion_settings[$currency['code']]['rates'][$conversion_currency['code']] += array(
+          'sync' => '1',
+          'rate' => 0,
+        );
+
+        $form['conversion_settings'][$currency['code']]['sync']['#states']['checked']['input[name="conversion_settings[' . $currency['code'] . '][rates][' . $conversion_currency['code'] . '][sync]"]'] = array('checked' => TRUE);
+
+        $form['conversion_settings'][$currency['code']]['rates'][$conversion_currency['code']] = array(
+          '#type' => 'fieldset',
+          '#attributes' => array('class' => array('conversion-rates')),
+          '#collapsible' => TRUE,
+          '#collapsed' => FALSE,
+          '#title' => $conversion_currency['code'],
+        );
+        $form['conversion_settings'][$currency['code']]['rates'][$conversion_currency['code']]['sync'] = array(
+          '#type' => 'checkbox',
+          '#title' => t('Synchronize this conversion rate.'),
+          '#default_value' => $conversion_settings[$currency['code']]['rates'][$conversion_currency['code']]['sync'],
+        );
+        $form['conversion_settings'][$currency['code']]['rates'][$conversion_currency['code']]['rate'] = array(
+          '#type' => 'textfield',
+          '#title' => t('Exchange rate'),
+          '#attributes' => array('class' => array('conversion-rate')),
+          '#description' => t(
+            'Exchange rate from @currency_code to @conversion_currency_code.',
+            array('@currency_code' => $currency['name'], '@conversion_currency_code' => $conversion_currency['name'])
+          ),
+          '#states' => array(
+            'disabled' => array(
+              'input[name="conversion_settings[' . $currency['code'] . '][rates][' . $conversion_currency['code'] . '][sync]"]' => array('checked' => TRUE),
+            ),
+          ),
+          '#size' => 13,
+          '#element_validate' => array('commerce_multicurrency_conversion_settings_form_rate_validate'),
+          '#default_value' => $conversion_settings[$currency['code']]['rates'][$conversion_currency['code']]['rate'],
+          '#field_suffix' => t(
+            '* !demo_amount @currency_symbol = !amount @conversion_currency_symbol',
+            array(
+              '!demo_amount' => '<span class="demo-amount">100</span>',
+              '@currency_symbol' => $currency['symbol'],
+              '@conversion_currency_symbol' => $conversion_currency['symbol'],
+              '!amount' => '<span class="demo-amount-converted">' . (100 * $conversion_settings[$currency['code']]['rates'][$conversion_currency['code']]['rate']) . '</span>',
+            )
+          ),
+        );
+      }
+    }
+  }
+  else {
+    drupal_set_message(t('Please enable the needed currencies to configure first.'), 'warning', FALSE);
+  }
+
+  $form['save'] = array(
+    '#type' => 'submit',
+    '#value' => t('Save Settings'),
+  );
+
+  return $form;
+}
+
+/**
+ * Validate a rate.
+ *
+ * Heavy borrowed from number module:
+ *
+ * @see number_field_widget_validate()
+ */
+function commerce_multicurrency_conversion_settings_form_rate_validate($element, &$form_state) {
+  $value = trim($element['#value']);
+  // Reject invalid characters.
+  if (!empty($value)) {
+    $regexp = '@[^0-9\\.]@';
+    $message = t('Only numbers and the decimal separator (@separator) allowed.', array('@separator' => '.'));
+    if ($value != preg_replace($regexp, '', $value)) {
+      form_error($element, $message);
+    }
+  }
+}
+
+/**
+ * Submit handler for the conversion settings form.
+ */
+function commerce_multicurrency_conversion_settings_form_submit($form, &$form_state) {
+  variable_set('commerce_multicurrency_conversion_settings', $form_state['values']['conversion_settings']);
+  variable_set('commerce_multicurrency_sync_provider', $form_state['values']['sync_provider']);
+  variable_set('commerce_multicurrency_use_cross_conversion', $form_state['values']['use_cross_sync']);
+  if (!empty($form_state['values']['sync_now'])) {
+    commerce_multicurrency_sync_exchange_rates_now();
+  }
+  else {
+    // Ensure the settings are in sync.
+    commerce_currencies(FALSE, TRUE);
+  }
+}
+
+
+/**
+ * Form to configure handling settings.
+ */
+function commerce_multicurrency_handling_settings_form($form, &$form_state) {
+  $enabled_currencies = commerce_currencies(TRUE);
+
+  $form['currency_fields'] = array(
+    '#tree' => TRUE,
+  );
+
+  foreach (commerce_product_types() as $commerce_product_type => $type_info) {
+    $form['currency_fields'][$commerce_product_type] = array(
+      '#title' => t('Enable dedicated price fields for %type:', array('%type' => $type_info['name'])),
+      '#type' => 'fieldset',
+      '#collapsible' => TRUE,
+      '#collapsed' => FALSE,
+      '#description' => t('For each enabled currency a dedicated price field in the commerce product type %type will be created.', array('%type' => $type_info['name'])),
+    );
+
+    foreach ($enabled_currencies as $currency_code => $currency_info) {
+      $field_name = 'commerce_price_' . strtolower($currency_code);
+      $field_instance = field_info_instance('commerce_product', $field_name, $commerce_product_type);
+      $form['currency_fields'][$commerce_product_type][$currency_code] = array(
+        '#title' => t($currency_info['name']),
+        '#type' => 'checkbox',
+        '#default_value' => (int) !empty($field_instance),
+      );
+    }
+  }
+
+  $form['save'] = array(
+    '#type' => 'submit',
+    '#value' => t('Save Settings'),
+  );
+
+  drupal_set_message(t('Attention: Changing this configuration can lead to data loss.'), 'warning', FALSE);
+
+  return $form;
+}
+
+/**
+ * Submit handler for the handling settings form.
+ */
+function commerce_multicurrency_handling_settings_form_submit($form, &$form_state) {
+  foreach ($form_state['values']['currency_fields'] as $commerce_product_type => $currency_fields) {
+    foreach ($currency_fields as $currency_code => $has_field) {
+      $field_name = 'commerce_price_' . strtolower($currency_code);
+      $field_instance = field_info_instance('commerce_product', $field_name, $commerce_product_type);
+      switch (TRUE) {
+        // Field enabled but none created yet.
+        case $has_field && !$field_instance:
+          // Reuse commerce code to create the initial field instance.
+          commerce_price_create_instance($field_name, 'commerce_product', $commerce_product_type, 'Price in ' . $currency_code);
+          // Fetch the new instance and modify it.
+          $new_field_instance = field_info_instance('commerce_product', $field_name, $commerce_product_type);
+          $new_field_instance['widget']['settings']['currency_code'] = $currency_code;
+          $new_field_instance['widget']['type'] = 'commerce_price_simple';
+          field_update_instance($new_field_instance);
+          drupal_set_message(t('Field %fieldname on %type created.', array('%fieldname' => $field_name, '%type' => $commerce_product_type)), 'status', FALSE);
+          break;
+
+        // Field enabled and already created.
+        case $has_field && !$field_instance:
+          // Done.
+          break;
+
+        // Field disabled but still there.
+        case !$has_field && $field_instance:
+          field_delete_instance($field_instance);
+          drupal_set_message(t('Field %fieldname on %type deleted.', array('%fieldname' => $field_name, '%type' => $commerce_product_type)), 'status', FALSE);
+          break;
+
+        // Field disabled and already removed.
+        case !$has_field && $field_instance:
+          // Done.
+          break;
+      }
+    }
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/commerce_multicurrency.admin.js drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/commerce_multicurrency.admin.js
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/commerce_multicurrency.admin.js	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/commerce_multicurrency.admin.js	2014-05-21 21:43:07.000000000 +0200
@@ -0,0 +1,25 @@
+(function ($) {
+  $(document).ready(function() {
+    $('.conversion-rates input.conversion-rate').keyup(function(){
+      var rate = $(this).val();
+      if ($(this).val().search(',')) {
+        $(this).val($(this).val().replace(',', '.'));
+      }
+      var example = '--';
+      if (Number(rate)) {
+        example = rate * $('#edit-demo-amount').val();
+      }
+      $(this).parent().find('.demo-amount-converted').html(example);
+    });
+    $('#edit-demo-amount').keyup(function(){
+      if ($(this).val().search(',')) {
+        $(this).val($(this).val().replace(',', '.'));
+      }
+      if (!Number($(this).val())) {
+        $(this).val(100);
+      }
+      $('.demo-amount').html($(this).val());
+      $('.conversion-rates input.conversion-rate').trigger('keyup');
+    });
+  });
+})(jQuery);
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/commerce_multicurrency.api.php drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/commerce_multicurrency.api.php
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/commerce_multicurrency.api.php	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/commerce_multicurrency.api.php	2014-05-21 21:43:07.000000000 +0200
@@ -0,0 +1,46 @@
+<?php
+/**
+ * @file
+ * This file contains no working PHP code; it exists to provide additional
+ * documentation for doxygen as well as to document hooks in the standard
+ * Drupal manner.
+ */
+
+/**
+ * Defines currency exchange rate sync providers.
+ *
+ * @return array
+ *   An array of information about the callback.
+ *   The array contains a sub-array for each callback, with a machine name
+ *   as the key.
+ *   Possible attributes for each sub-array are:
+ *   - title: The human readable title displayed in the settings form. Should
+ *      be wrapped in t().
+ *   - callback: The function to call.
+ *      The function will recive the source currency as first and an array of
+ *      target currencies as second parameter.
+ *      As return an assiocative array keyed by the currency code with the rate
+ *      as value is expected.
+ *   - file: Optional. A file to include.
+ */
+function hook_commerce_multicurrency_exchange_rate_sync_provider_info() {
+  return array(
+    'ecb' => array(
+      'title' => t('European Central Bank'),
+      'callback' => 'commerce_multicurrency_exchange_rate_sync_provider_ecb',
+      'file' => drupal_get_path('module', 'commerce_multicurrency') . '/commerce_multicurrency.ecb.inc',
+    ),
+  );
+}
+
+/**
+ * Alter currency exchange rate sync providers.
+ *
+ * This hook allows you to change the formatting properties of existing
+ * definitions.
+ *
+ * @see hook_commerce_multicurrency_exchange_rate_sync_provider_info()
+ */
+function hook_commerce_multicurrency_exchange_rate_sync_provider_info_alter(&$providers) {
+  $currencies['ecb']['callback'] = 'commerce_multicurrency_exchange_rate_sync_provider_ecb_different';
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/commerce_multicurrency.ecb.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/commerce_multicurrency.ecb.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/commerce_multicurrency.ecb.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/commerce_multicurrency.ecb.inc	2014-05-21 21:43:07.000000000 +0200
@@ -0,0 +1,59 @@
+<?php
+/**
+ * @file
+ * Default currency sync callback
+ */
+
+/**
+ * Fetch the currency exchange rates for the requested currency combination.
+ *
+ * Return an array with the array(target_currency_code => rate) combination.
+ *
+ * @param string $currency_code
+ *   Source currency code.
+ * @param array $target_currencies
+ *   Array with the target currency codes.
+ *
+ * @return array
+ *   Array with the array(target_currency_code => rate) combination.
+ */
+function commerce_multicurrency_exchange_rate_sync_provider_ecb($currency_code, $target_currencies) {
+  $data = cache_get(__FUNCTION__, 'cache');
+
+  if (!$data) {
+    $ecb_rates = array();
+    if (($xml = @simplexml_load_file('http://www.ecb.europa.eu/stats/eurofxref/eurofxref-daily.xml')) && @count($xml->Cube->Cube->Cube)) {
+      foreach ($xml->Cube->Cube->Cube as $rate) {
+        $ecb_rates[(string) $rate["currency"]] = (string) $rate["rate"];
+      }
+      // Cache six hours.
+      cache_set(__FUNCTION__, $ecb_rates, 'cache', time() + (3600 * 6));
+    }
+    else {
+      watchdog(
+        'commerce_multicurrency', 'Rate provider ECB: Unable to fetch / process the currency data of @url',
+        array('@url' => 'http://www.ecb.europa.eu/stats/eurofxref/eurofxref-daily.xml'),
+        WATCHDOG_ERROR
+      );
+    }
+  }
+  else {
+    $ecb_rates = $data->data;
+  }
+
+  $rates = array();
+  foreach ($target_currencies as $target_currency_code) {
+    if ($currency_code == 'EUR' && isset($ecb_rates[$target_currency_code])) {
+      $rates[$target_currency_code] = $ecb_rates[$target_currency_code];
+    }
+    elseif (isset($ecb_rates[$currency_code]) && $target_currency_code == 'EUR') {
+      // Reverse rate calculation.
+      $rates[$target_currency_code] = 1 / $ecb_rates[$currency_code];
+    }
+    elseif (isset($ecb_rates[$currency_code]) && isset($ecb_rates[$target_currency_code])) {
+      // Cross rate calculation.
+      $rates[$target_currency_code] = $ecb_rates[$target_currency_code] / $ecb_rates[$currency_code];
+    }
+  }
+  return $rates;
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/commerce_multicurrency.info drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/commerce_multicurrency.info
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/commerce_multicurrency.info	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/commerce_multicurrency.info	2014-05-21 21:43:07.000000000 +0200
@@ -0,0 +1,19 @@
+name = "Commerce Multicurrency"
+package = "Commerce"
+description = "Commerce multicurrency support enhancements"
+
+core = "7.x"
+configure = admin/commerce/config/currency
+
+dependencies[]="commerce"
+dependencies[]="commerce_product_pricing"
+
+; Tests
+files[] = tests/commerce_multicurrency.test
+
+; Information added by drupal.org packaging script on 2013-03-04
+version = "7.x-1.3"
+core = "7.x"
+project = "commerce_multicurrency"
+datestamp = "1362382812"
+
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/commerce_multicurrency.install drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/commerce_multicurrency.install
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/commerce_multicurrency.install	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/commerce_multicurrency.install	2014-05-21 21:43:07.000000000 +0200
@@ -0,0 +1,14 @@
+<?php
+/**
+ * @file
+ * Enhancements for the commerce currency support.
+ */
+
+/**
+ * Implements hook_uninstall().
+ */
+function commerce_multicurrency_uninstall() {
+  variable_del('commerce_multicurrency_conversion_settings');
+  variable_del('commerce_multicurrency_sync_provider');
+  variable_del('commerce_multicurrency_use_cross_conversion');
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/commerce_multicurrency.js drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/commerce_multicurrency.js
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/commerce_multicurrency.js	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/commerce_multicurrency.js	2014-05-21 21:43:07.000000000 +0200
@@ -0,0 +1,14 @@
+(function ($) {
+  /**
+    * Hide the submit button and submit the form as soon as the currency is
+    * changed.
+    */
+  Drupal.behaviors.commerce_multicurrency = {
+    attach: function (context, settings) {
+      $('input#edit-save-selected-currency.form-submit').hide();
+      $('#edit-selected-currency.form-select').change(function() {
+        $(this).parent().closest('form').submit();
+      });
+    }
+  };
+})(jQuery);
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/commerce_multicurrency.module drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/commerce_multicurrency.module
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/commerce_multicurrency.module	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/commerce_multicurrency.module	2014-05-21 21:43:07.000000000 +0200
@@ -0,0 +1,542 @@
+<?php
+/**
+ * @file
+ * Enhancements for the commerce currency support.
+ */
+
+/**
+ * Implements hook_menu().
+ */
+function commerce_multicurrency_menu() {
+  $items = array();
+  $items['admin/commerce/config/currency/conversion'] = array(
+    'title' => 'Currency conversion',
+    'description' => 'Configure currency conversion.',
+    'page provider' => 'drupal_get_form',
+    'page arguments' => array('commerce_multicurrency_conversion_settings_form'),
+    'access arguments' => array('configure store'),
+    'type' => MENU_LOCAL_TASK,
+    'file' => 'commerce_multicurrency.admin.inc',
+    'weight' => 1,
+  );
+  $items['admin/commerce/config/currency/handling'] = array(
+    'title' => 'Currency handling',
+    'description' => 'Configure currency handling.',
+    'page provider' => 'drupal_get_form',
+    'page arguments' => array('commerce_multicurrency_handling_settings_form'),
+    'access arguments' => array('configure store'),
+    'type' => MENU_LOCAL_TASK,
+    'file' => 'commerce_multicurrency.admin.inc',
+    'weight' => 2,
+  );
+  $items['commerce_currency_select/%'] = array(
+    'title' => 'Set Active Currency',
+    'page callback' => 'commerce_multicurrency_set_user_currency_code_callback',
+    'access arguments' => array('access content'),
+    'type' => MENU_CALLBACK,
+    'page arguments' => array(1),
+  );
+  return $items;
+}
+
+/**
+ * Implements hook_menu_alter().
+ */
+function commerce_multicurrency_menu_alter(&$items) {
+  $items['admin/commerce/config/currency/settings'] = $items['admin/commerce/config/currency'];
+  $items['admin/commerce/config/currency/settings']['type'] = MENU_DEFAULT_LOCAL_TASK;
+}
+
+/**
+ * Implements hook_hook_info().
+ */
+function commerce_multicurrency_hook_info() {
+  $hooks = array(
+    'commerce_multicurrency_exchange_rate_sync_provider_info' => array(
+      'group' => 'commerce_multicurrency',
+    ),
+    'commerce_multicurrency_exchange_rate_sync_provider_info_alter' => array(
+      'group' => 'commerce_multicurrency',
+    ),
+  );
+  return $hooks;
+}
+
+/**
+ * Implements hook_theme().
+ */
+function commerce_multicurrency_theme() {
+  return array(
+    'commerce_multicurrency_selector_menu' => array(
+      'variables' => array(
+        'current_currency' => commerce_multicurrency_get_user_currency_code(),
+        'enabled_currencies' => commerce_currencies(TRUE),
+      ),
+      'path' => drupal_get_path('module', 'commerce_multicurrency') . '/theme',
+      'template' => 'commerce-multicurrency-selector-menu',
+    ),
+  );
+}
+
+/**
+ * Returns currency exchange rate sync providers.
+ *
+ * Returns all available  currency exchange rate sync providers or as single
+ * provider if a code is defined. If no matching provider was found FALSE is
+ * returned.
+ *
+ * @param string $code
+ *   The code of the currency exchange rate sync provider to return.
+ *
+ * @return array|FALSE
+ *   List of providers, provider or FALSE on failure.
+ */
+function commerce_multicurrency_commerce_multicurrency_exchange_rate_sync_provider($code = NULL) {
+  $providers = module_invoke_all('commerce_multicurrency_exchange_rate_sync_provider_info');
+  drupal_alter('commerce_multicurrency_exchange_rate_sync_provider_info', $providers);
+  if ($code) {
+    if (isset($providers[$code])) {
+      return $providers[$code];
+    }
+    return FALSE;
+  }
+  return $providers;
+}
+
+/**
+ * Implements hook_commerce_multicurrency_exchange_rate_sync_provider_info().
+ */
+function commerce_multicurrency_commerce_multicurrency_exchange_rate_sync_provider_info() {
+  return array(
+    'ecb' => array(
+      'title' => t('European Central Bank'),
+      'callback' => 'commerce_multicurrency_exchange_rate_sync_provider_ecb',
+      'file' => drupal_get_path('module', 'commerce_multicurrency') . '/commerce_multicurrency.ecb.inc',
+    ),
+  );
+}
+
+/**
+ * Implements hook_commerce_currency_info_alter().
+ *
+ * On disabled cross conversion inject dedicated currency conversion callback.
+ * Set's the synced conversion rates into the default conversion_rate setting.
+ */
+function commerce_multicurrency_commerce_currency_info_alter(&$currencies, $langcode) {
+  $default_currency_code = commerce_default_currency();
+  $conversion_callback = NULL;
+  $conversion_settings = FALSE;
+  if (!variable_get('commerce_multicurrency_use_cross_conversion', TRUE)) {
+    $conversion_callback = 'commerce_multicurrency_conversion';
+  }
+  else {
+    $conversion_settings = variable_get('commerce_multicurrency_conversion_settings', array());
+  }
+
+  foreach ($currencies as $currency_code => &$currency_info) {
+    $currency_info['conversion_callback'] = $conversion_callback;
+    if ($conversion_settings
+      && !empty($conversion_settings[$default_currency_code]['rates'][$currency_code])
+      && $conversion_settings[$default_currency_code]['rates'][$currency_code]['rate'] != 0
+    ) {
+      $currency_info['conversion_rate'] = 1 / $conversion_settings[$default_currency_code]['rates'][$currency_code]['rate'];
+    }
+  }
+}
+
+/**
+ * Converts a currency amount into another.
+ *
+ * @param integer $amount
+ *   The amount to convert.
+ * @param string $currency_code
+ *   The currency code of the amount.
+ * @param string $target_currency_code
+ *   The currency code to convert the amount to.
+ *
+ * @return integer|FALSE
+ *   The converted amount or FALSE on failure.
+ */
+function commerce_multicurrency_conversion($amount, $currency_code, $target_currency_code) {
+  $conversion_settings = &drupal_static(__FUNCTION__, FALSE);
+
+  // Skip - makes no sense to calculate here.
+  if ($currency_code == $target_currency_code) {
+    return $amount;
+  }
+
+  // Check if there are conversion settings.
+  if ($conversion_settings == FALSE && !($conversion_settings = variable_get('commerce_multicurrency_conversion_settings', FALSE))) {
+    watchdog(
+      'commerce_multicurrency', 'No conversion rates found - please configure them!',
+      array(),
+      WATCHDOG_ERROR,
+      url('admin/commerce/config/currency/conversion')
+    );
+    return FALSE;
+  }
+
+  // Check if there are conversion settings for the specified currencies.
+  if (empty($conversion_settings[$currency_code]['rates'][$target_currency_code]['rate'])) {
+    watchdog(
+      'commerce_multicurrency', 'No conversion rate from %source_currency to  %target_currency found - please configure it!',
+      array('%source_currency' => $currency_code, '%target_currency' => $target_currency_code),
+      WATCHDOG_ERROR,
+      url('admin/commerce/config/currency/conversion')
+    );
+    return FALSE;
+  }
+
+  return $amount * $conversion_settings[$currency_code]['rates'][$target_currency_code]['rate'];
+}
+
+/**
+ * Implements hook_cron().
+ *
+ * Queues currencies for updates.
+ */
+function commerce_multicurrency_cron() {
+  $currencies = commerce_currencies(TRUE);
+
+  if (!($conversion_settings = variable_get('commerce_multicurrency_conversion_settings', FALSE))) {
+    return;
+  }
+
+  $queue = DrupalQueue::get('commerce_multicurrency_sync_exchange_rates');
+  foreach ($currencies as $currency_code => $currency) {
+    $currencies_to_sync = $currencies;
+    unset($currencies_to_sync[$currency_code]);
+    $currency_sync_item = array(
+      'currency_code' => $currency_code,
+      'target_currencies' => array_combine(array_keys($currencies_to_sync), array_keys($currencies_to_sync)),
+    );
+
+    // Check if there are inividual settings per currency to currency rate.
+    if (!empty($conversion_settings[$currency_code]) && empty($conversion_settings[$currency_code]['sync'])) {
+      foreach ($conversion_settings[$currency_code]['rates'] as $target_currency_code => $settings) {
+        // If this combination is excluded from autosync remove it.
+        if (empty($settings['sync'])) {
+          unset($currency_sync_item['target_currencies'][$target_currency_code]);
+        }
+      }
+    }
+    $queue->createItem($currency_sync_item);
+  }
+  $queue->createItem('finish');
+}
+
+/**
+ * Implements hook_cron_queue_info().
+ */
+function commerce_multicurrency_cron_queue_info() {
+  $queues['commerce_multicurrency_sync_exchange_rates'] = array(
+    'worker callback' => 'commerce_multicurrency_sync_exchange_rates',
+    'time' => 60,
+  );
+  return $queues;
+}
+
+/**
+ * Update the currency exchange rates.
+ *
+ * Use the configured sync provider to do so.
+ *
+ * @see commerce_multicurrency_cron()
+ * @see commerce_multicurrency_cron_queue_info()
+ */
+function commerce_multicurrency_sync_exchange_rates($currency_sync_item) {
+  if ($currency_sync_item == 'finish') {
+    // Make sure the core commerce settings are in sync.
+    commerce_currencies(FALSE, TRUE);
+    return;
+  }
+
+  $sync_provider = commerce_multicurrency_commerce_multicurrency_exchange_rate_sync_provider(variable_get('commerce_multicurrency_sync_provider', 'ecb'));
+  if (!empty($sync_provider['file'])) {
+    require_once $sync_provider['file'];
+  }
+  $rates = $sync_provider['callback']($currency_sync_item['currency_code'], $currency_sync_item['target_currencies']);
+  $conversion_settings = variable_get('commerce_multicurrency_conversion_settings', array());
+  foreach ($rates as $target_currency_code => $rate) {
+    $conversion_settings[$currency_sync_item['currency_code']]['rates'][$target_currency_code]['rate'] = $rate;
+  }
+  variable_set('commerce_multicurrency_conversion_settings', $conversion_settings);
+}
+
+/**
+ * Function to trigger the currency exchange rate synchronization.
+ */
+function commerce_multicurrency_sync_exchange_rates_now() {
+  $queue = DrupalQueue::get('commerce_multicurrency_sync_exchange_rates');
+  $queue->createQueue();
+
+  commerce_multicurrency_cron();
+
+  // Build batch.
+  $batch = array(
+    'title' => t('Synchronize currencyexchange rates.'),
+    'operations' => array(),
+    'init_message' => t('Synchronisation is starting.'),
+    'progress_message' => t('Processed @current out of @total currencies.'),
+    'error_message' => t('Synchronisation has encountered an error.'),
+    'file' => drupal_get_path('module', 'commerce_multicurrency') . '/commerce_multicurrency.module',
+  );
+
+  // Register queue items to process in batch.
+  while (($item = $queue->claimItem())) {
+    $batch['operations'][] = array(
+      'commerce_multicurrency_sync_exchange_rates',
+      array($item->data),
+    );
+  }
+  $queue->deleteQueue();
+  batch_set($batch);
+}
+
+/**
+ * Implements hook_help().
+ */
+function commerce_multicurrency_help($path, $arg) {
+  switch ($path) {
+    // Main module help for the block module.
+    case 'admin/commerce/config/currency/handling':
+      $text_1 = t('There are two fundamental different ways of how to handle multiple currencies:');
+      $list_item_1 = t('Use a conversion to get the appropriate amount for a currency.');
+      $list_item_2 = t('Use a dedicated price field for each currency.');
+      $text_2 = t(
+        'While the <a href="!conversion_settings_page_url">conversion settings page</a> of this modules help you to manage  your conversion this settings are dedicated to the second approach. If you enable the dedicated currency price fields you\'ll also get a new rule to set the appropriate currency price on the rules event "Calculating the sell price of a product"',
+        array('!conversion_settings_page_url' => url('admin/commerce/config/currency/conversion'))
+      );
+      return
+        '<p>' .  $text_1 . '<ul><li>' . $list_item_1 . '</li><li>' . $list_item_2 . '</li></ul>' .
+        $text_2 . '</p>';
+  }
+}
+
+/**
+ * Implements hook_block_info().
+ */
+function commerce_multicurrency_block_info() {
+  $blocks = array();
+  $blocks['currency_selector'] = array(
+    'info' => t('Currency Selector'),
+    'cache' => DRUPAL_NO_CACHE,
+  );
+  $blocks['currency_menu'] = array(
+    'info' => t('Currency Menu Selector'),
+    'cache' => DRUPAL_NO_CACHE,
+  );
+  return $blocks;
+}
+
+/**
+ * Implements hook_block_view().
+ */
+function commerce_multicurrency_block_view($delta) {
+  $block = array();
+  switch ($delta) {
+    case 'currency_selector':
+      $block['subject'] = t('Select currency');
+      $block['content'] = drupal_get_form('commerce_multicurrency_selector_form');
+      break;
+
+    case 'currency_menu':
+      $block['subject'] = t('Select currency');
+      $block['content'] = theme('commerce_multicurrency_selector_menu', array(
+        'user_currency' => commerce_multicurrency_get_user_currency_code(),
+        'enabled_currencies' => commerce_currencies(TRUE),
+      ));
+      break;
+  }
+  return $block;
+}
+
+/**
+ * Form for the currency selector block.
+ */
+function commerce_multicurrency_selector_form($form, &$form_state) {
+  $form['#attached']['js'] = array(
+    drupal_get_path('module', 'commerce_multicurrency') . '/commerce_multicurrency.js',
+  );
+  $form['selected_currency'] = array(
+    '#type' => 'select',
+    '#options' => commerce_currency_code_options_list(),
+    '#default_value' => commerce_multicurrency_get_user_currency_code(),
+  );
+  $form['save_selected_currency'] = array(
+    '#value' => t('Save'),
+    '#type' => 'submit',
+  );
+  return $form;
+}
+
+/**
+ * Submit handler for the currency selector block form.
+ */
+function commerce_multicurrency_selector_form_submit($form, &$form_state) {
+  commerce_multicurrency_set_user_currency_code($form_state['values']['selected_currency']);
+}
+
+/**
+ * Handles requests to the currency set menu callback.
+ *
+ * @param string $currency_code
+ *   The currency code to set the user currency to.
+ */
+function commerce_multicurrency_set_user_currency_code_callback($currency_code) {
+  // Ensure this page isn't cached.
+  drupal_page_is_cacheable(FALSE);
+  commerce_multicurrency_set_user_currency_code($currency_code);
+  drupal_goto('<front>');
+}
+
+/**
+ * Store the currency_code to use for the user.
+ *
+ * Invokes the rules event commerce_multicurrency_user_currency_set.
+ *
+ * @param string $currency_code
+ *   The currency code to set the user currency to.
+ * @param boolean $overwrite_cookie
+ *   Set to FALSE if the currency shouldn't be changed if the cookie already
+ *   exists.
+ */
+function commerce_multicurrency_set_user_currency_code($currency_code, $overwrite_cookie = TRUE) {
+  if ($overwrite_cookie || empty($_COOKIE['Drupal_visitor_commerce_currency'])) {
+    $enabled_currencies = commerce_currencies(TRUE);
+    if (isset($enabled_currencies[$currency_code])) {
+      $old_currency_code = commerce_multicurrency_get_user_currency_code();
+
+      // Inject currency into the static cache.
+      $current_currency_code = &drupal_static('commerce_multicurrency_get_user_currency_code', FALSE);
+      $current_currency_code = $currency_code;
+
+      // Set cookie.
+      user_cookie_save(array('commerce_currency' => $currency_code));
+
+      rules_invoke_event('commerce_multicurrency_user_currency_set', $currency_code, $old_currency_code);
+    }
+  }
+}
+
+/**
+ * Returns the currency code to use for the current user.
+ * @return string
+ *   The currency code.
+ */
+function commerce_multicurrency_get_user_currency_code() {
+  $currency_code = &drupal_static(__FUNCTION__, FALSE);
+  if ($currency_code) {
+    return $currency_code;
+  }
+
+  // If there's a cookie with a selected currency ensure it's a available one.
+  if (isset($_COOKIE['Drupal_visitor_commerce_currency'])) {
+    $enabled_currencies = commerce_currencies(TRUE);
+    if (!empty($enabled_currencies[$_COOKIE['Drupal_visitor_commerce_currency']])) {
+      return $currency_code = $_COOKIE['Drupal_visitor_commerce_currency'];
+    }
+  }
+
+  return $currency_code = commerce_default_currency();
+}
+
+/**
+ * Implements hook_entity_property_info_alter().
+ */
+function commerce_multicurrency_entity_property_info_alter(&$info) {
+  // Add the current user's currency to the site information.
+  $info['site']['properties']['commerce_currency'] = array(
+    'label' => t("User's currency"),
+    'description' => t('The currency to use for the current user.'),
+    'getter callback' => 'commerce_multicurrency_get_properties',
+    'type' => 'text',
+  );
+}
+
+/**
+ * Entity metadata callback: returns the current user's currency.
+ *
+ * @see commerce_multicurrency_entity_property_info_alter()
+ */
+function commerce_multicurrency_get_properties($data, array $options, $name) {
+  switch ($name) {
+    case 'commerce_currency':
+      return commerce_multicurrency_get_user_currency_code();
+  }
+}
+
+/**
+ * Implements hook_commerce_price_field_calculation_options().
+ *
+ * @see commerce_multicurrency_commerce_price_field_formatter_prepare_view()
+ */
+function commerce_multicurrency_commerce_price_field_calculation_options($field, $instance, $view_mode) {
+  // If this is a single value custom price field attached to a product.
+  if (($instance['entity_type'] == 'commerce_product' || $field['entity_types'] == array('commerce_product')) &&
+    $field['field_name'] != 'commerce_price' && $field['cardinality'] == 1) {
+    return array('currency_specific_price' => t('Commerce Multicurrency: Display the price in a specific currency.'));
+  }
+}
+
+/**
+ * Implements hook_commerce_price_field_formatter_prepare_view().
+ *
+ * Allows to configure which fields are send to the rules processing.
+ *
+ * @see commerce_product_pricing_commerce_price_field_formatter_prepare_view()
+ */
+function commerce_multicurrency_commerce_price_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
+  // If this is a single value purchase price field attached to a product...
+  if ($entity_type == 'commerce_product' && $field['module'] == 'commerce_price' && $field['cardinality'] == 1 && $field['field_name'] != 'commerce_price') {
+
+    // Prepare the items for each entity passed in.
+    foreach ($entities as $product_id => $product) {
+      // If this price should be converted...
+      if (!empty($displays[$product_id]['settings']['calculation']) &&
+        $displays[$product_id]['settings']['calculation'] == 'currency_specific_price') {
+        // If this price has already been converted, reset it to its original
+        // value so it can be re-converted afresh in the current context.
+        if (isset($items[$product_id][0]['original'])) {
+          $original = $items[$product_id][0]['original'];
+          $items[$product_id] = array(0 => $original);
+
+          // Reset the price field value on the product object used to perform
+          // the conversion.
+          foreach ($product->commerce_price as $langcode => $value) {
+            $product->commerce_price[$langcode] = $items[$product_id];
+          }
+        }
+        else {
+          // Save the original value for use in subsequent conversions.
+          $original = isset($items[$product_id][0]) ? $items[$product_id][0] : NULL;
+        }
+
+        // First create a pseudo product line item that we will pass to Rules.
+        $line_item = commerce_product_line_item_new($product);
+        // Overwrite the unit price by the value of the current field.
+        $line_item->commerce_unit_price = $product->{$field['field_name']};
+        // If the current field doesn't contain a value - fake an empty one.
+        if (empty($line_item->commerce_unit_price)) {
+          $line_item->commerce_unit_price = array(
+            LANGUAGE_NONE => array(
+              array(
+                'amount' => 0,
+                'currency_code' => commerce_default_currency(),
+                'data' => array(),
+              ),
+            ),
+          );
+        }
+
+        // Fire the rules event to handle the display currency.
+        rules_invoke_event('commerce_multicurrency_set_display_price', $line_item, $field['field_name']);
+
+        // Replace the data being displayed with data from the converted price.
+        $items[$product_id] = array();
+        $items[$product_id][0] = entity_metadata_wrapper('commerce_line_item', $line_item)->commerce_unit_price->value();
+        $items[$product_id][0]['original'] = $original;
+      }
+    }
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/commerce_multicurrency.rules_defaults.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/commerce_multicurrency.rules_defaults.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/commerce_multicurrency.rules_defaults.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/commerce_multicurrency.rules_defaults.inc	2014-05-21 21:43:07.000000000 +0200
@@ -0,0 +1,146 @@
+<?php
+/**
+ * @file
+ * Defines default currency selection components and rules.
+ */
+
+/**
+ * Implements hook_default_rules_configuration().
+ */
+function commerce_multicurrency_default_rules_configuration() {
+  $rules = array();
+
+  // Ensure the commerce constants are set.
+  drupal_load('module', 'commerce');
+
+  // Create component for simple currency conversion.
+  $rules_component = rule(array(
+    'commerce_line_item' => array(
+      'label' => 'Line Item',
+      'type' => 'commerce_line_item',
+    ),
+  ));
+  $rules_component->label = t('Convert price to user currency');
+  $rules_component->active = TRUE;
+  $rules_component->action('commerce_line_item_unit_price_currency_convert', array(
+    'commerce-line-item:select' => 'commerce-line-item',
+    'currency_code:select' => 'site:commerce-currency',
+  ));
+  $rules['commerce_multicurrency_convert_price_to_user_currency'] = $rules_component;
+
+  $reaction_rule = rules_reaction_rule();
+  $reaction_rule->label = t('Set the currency price');
+  $reaction_rule->active = TRUE;
+  $reaction_rule->weight = -9;
+
+  $has_currency_specific_fields = FALSE;
+  foreach (commerce_currencies(TRUE) as $currency_code => $currency_info) {
+    $field_name = 'commerce_price_' . strtolower($currency_code);
+    $rule_name = 'commerce_multicurrency_use_' . strtolower($currency_code);
+    $field_info = field_info_field($field_name);
+    if (!$field_info) {
+      $saved_rule = rules_config_load($rule_name);
+      if ($saved_rule !== FALSE && ($saved_rule->status | ENTITY_IN_CODE)) {
+        $saved_rule->delete();
+      }
+      continue;
+    }
+    $has_currency_specific_fields = TRUE;
+
+    // Check if the rule exists, if so don't recreate it. This allows to
+    // customize and export the rule.
+    $existing_rule = rules_config_load('commerce_multicurrency_set_currency_price');
+    if ($existing_rule && ($existing_rule->module != 'commerce_multicurrency' || $existing_rule->status & ENTITY_OVERRIDDEN)) {
+      continue;
+    }
+
+    $rule = rule(array(
+      'commerce_line_item' => array(
+        'type' => 'commerce_line_item',
+        'label' => t('Line item'),
+      ),
+    ));
+
+    // Version dependent parameters for commerce_line_item_unit_price_amount.
+    $commerce_line_item_unit_price_amount_params = array(
+      'commerce-line-item:select' => 'commerce-line-item',
+      'amount:select' => 'commerce-line-item:commerce-product:' . $field_name . ':amount',
+      'component_name' => 'base_price',
+    );
+    // Rounding introduced with this commit:
+    // http://drupalcode.org/project/commerce.git/commit/72c9efa8949c97e35b7afdda2352bed006b557e5
+    if (defined('COMMERCE_ROUND_HALF_UP')) {
+      $commerce_line_item_unit_price_amount_params['round_mode'] = COMMERCE_ROUND_HALF_UP;
+    }
+
+    $rule->label = t('Use the @currency_code price', array('@currency_code' => $currency_code));
+    $rule->active = TRUE;
+    $rule
+      ->condition('data_is', array(
+        'data:select' => 'site:commerce-currency',
+        'value' => $currency_code,
+      ))
+      ->condition('entity_has_field', array(
+        'entity:select' => 'commerce-line-item',
+        'field' => 'commerce_product',
+      ))
+      ->condition('entity_has_field', array(
+        'entity:select' => 'commerce-line-item:commerce-product',
+        'field' => $field_name,
+      ))
+      ->condition($empty_condition = rules_condition('data_is_empty', array(
+        'data:select' => 'commerce-line-item:commerce-product:' . $field_name,
+      )))
+      ->action('commerce_line_item_unit_price_amount', $commerce_line_item_unit_price_amount_params)
+      ->action('commerce_line_item_unit_price_currency_code', array(
+        'commerce-line-item:select' => 'commerce-line-item',
+        'currency_code:select' => 'commerce-line-item:commerce-product:' . $field_name . ':currency_code',
+      ));
+
+    $empty_condition->negate();
+
+    $rules[$rule_name] = $rule;
+    $reaction_rule->action('component_' . $rule_name, array(
+      'commerce_line_item:select' => 'commerce-line-item',
+    ));
+  }
+
+  // If there aren't any currency specific fields simply use conversion.
+  if (!$has_currency_specific_fields) {
+    $reaction_rule->action('component_commerce_multicurrency_convert_price_to_user_currency', array(
+      'commerce_line_item:select' => 'commerce-line-item',
+    ));
+  }
+  $reaction_rule
+    ->event('commerce_product_calculate_sell_price');
+  $rules['commerce_multicurrency_set_currency_price'] = $reaction_rule;
+
+
+  // Display currency specific price.
+  $reaction_rule = rules_reaction_rule();
+  $reaction_rule->label = t('Display currency specific price');
+  $reaction_rule->active = TRUE;
+  $reaction_rule->action('component_commerce_multicurrency_convert_price_to_user_currency', array(
+    'commerce_line_item:select' => 'commerce-line-item',
+  ));
+  $reaction_rule
+    ->event('commerce_multicurrency_set_display_price');
+  $rules['commerce_multicurrency_display_currency_specific_price'] = $reaction_rule;
+
+
+  // Convert shipping rate.
+  if (module_exists('commerce_shipping')) {
+    $reaction_rule = rules_reaction_rule();
+    $reaction_rule->label = t('Set shipping rate currency');
+    $reaction_rule->active = TRUE;
+    $reaction_rule->action('component_commerce_multicurrency_convert_price_to_user_currency', array(
+      'commerce_line_item:select' => 'commerce-line-item',
+    ));
+    $reaction_rule
+      ->event('commerce_shipping_calculate_rate');
+    $rules['commerce_multicurrency_set_shipping_rate_currency'] = $reaction_rule;
+
+  }
+
+  return $rules;
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/commerce_multicurrency.rules.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/commerce_multicurrency.rules.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/commerce_multicurrency.rules.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/commerce_multicurrency.rules.inc	2014-05-21 21:43:07.000000000 +0200
@@ -0,0 +1,76 @@
+<?php
+/**
+ * @file
+ * Commerce Multicurrency rules integration.
+ */
+
+/**
+ * Implements hook_rules_event_info().
+ */
+function commerce_multicurrency_rules_event_info() {
+  $events = array();
+
+  $events['commerce_multicurrency_user_currency_set'] = array(
+    'label' => t('After the user currency has been set'),
+    'group' => t('Commerce Multicurrency'),
+    'variables' => array(
+      'currency_code' => array(
+        'type' => 'text',
+        'label' => t('The currency code to use'),
+      ),
+      'old_currency_code' => array(
+        'type' => 'text',
+        'label' => t('The currency code used before'),
+      ),
+    ),
+    'access callback' => 'commerce_order_rules_access',
+  );
+
+  $events['commerce_multicurrency_set_display_price'] = array(
+    'label' => t('Set the display price'),
+    'group' => t('Commerce Multicurrency'),
+    'variables' => array(
+      'commerce_line_item' => array(
+        'label' => t('Product line item'),
+        'type' => 'commerce_line_item',
+        'skip save' => TRUE,
+      ),
+      'field_name' => array(
+        'type' => 'text',
+        'label' => t('The name of the handled price field.'),
+        'skip save' => TRUE,
+      ),
+    ),
+    'access callback' => 'commerce_order_rules_access',
+  );
+  return $events;
+}
+
+/**
+ * Implements hook_rules_action_info().
+ */
+function commerce_multicurrency_rules_action_info() {
+  $actions = array();
+
+  // Register method to set currency code as rules action.
+  $actions['commerce_multicurrency_set_user_currency_code'] = array(
+    'label' => t('Set the user currency to use'),
+    'parameter' => array(
+      'currency_code' => array(
+        'type' => 'text',
+        'label' => t('The currency code to use'),
+        'options list' => 'commerce_currency_code_options_list',
+        'save' => FALSE,
+      ),
+      'overwrite_cookie' => array(
+        'type' => 'boolean',
+        'label' => t("Set currency even if it's defined in a cookie."),
+        'optional' => TRUE,
+        'default value' => TRUE,
+        'save' => FALSE,
+      ),
+    ),
+    'group' => t('Commerce Multicurrency'),
+  );
+  return $actions;
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/commerce_multicurrency.tokens.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/commerce_multicurrency.tokens.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/commerce_multicurrency.tokens.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/commerce_multicurrency.tokens.inc	2014-05-21 21:43:07.000000000 +0200
@@ -0,0 +1,32 @@
+<?php
+/**
+ * @file
+ * Token callbacks for the commerce_multicurrency module.
+ */
+
+/**
+ * Implements hook_token_info().
+ */
+function commerce_multicurrency_token_info() {
+  $tokens['commerce-currency-code'] = array(
+    'name' => t('The user currency'),
+    'description' => t('The currence code of the currency to use for the current user.'),
+  );
+
+  return array(
+    'tokens' => array('user' => $tokens),
+  );
+}
+
+/**
+ * Implements hook_tokens().
+ */
+function commerce_multicurrency_tokens($type, $tokens, array $data = array(), array $options = array()) {
+  $replacements = array();
+  if ($type == 'user') {
+    if (isset($tokens['commerce-currency-code'])) {
+      $replacements[$tokens['commerce-currency-code']] = commerce_multicurrency_get_user_currency_code();
+    }
+  }
+  return $replacements;
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/LICENSE.txt drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/LICENSE.txt
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/LICENSE.txt	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/LICENSE.txt	2014-05-21 21:43:07.000000000 +0200
@@ -0,0 +1,339 @@
+                    GNU GENERAL PUBLIC LICENSE
+                       Version 2, June 1991
+
+ Copyright (C) 1989, 1991 Free Software Foundation, Inc.,
+ 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+                            Preamble
+
+  The licenses for most software are designed to take away your
+freedom to share and change it.  By contrast, the GNU General Public
+License is intended to guarantee your freedom to share and change free
+software--to make sure the software is free for all its users.  This
+General Public License applies to most of the Free Software
+Foundation's software and to any other program whose authors commit to
+using it.  (Some other Free Software Foundation software is covered by
+the GNU Lesser General Public License instead.)  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+this service if you wish), that you receive source code or can get it
+if you want it, that you can change the software or use pieces of it
+in new free programs; and that you know you can do these things.
+
+  To protect your rights, we need to make restrictions that forbid
+anyone to deny you these rights or to ask you to surrender the rights.
+These restrictions translate to certain responsibilities for you if you
+distribute copies of the software, or if you modify it.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must give the recipients all the rights that
+you have.  You must make sure that they, too, receive or can get the
+source code.  And you must show them these terms so they know their
+rights.
+
+  We protect your rights with two steps: (1) copyright the software, and
+(2) offer you this license which gives you legal permission to copy,
+distribute and/or modify the software.
+
+  Also, for each author's protection and ours, we want to make certain
+that everyone understands that there is no warranty for this free
+software.  If the software is modified by someone else and passed on, we
+want its recipients to know that what they have is not the original, so
+that any problems introduced by others will not reflect on the original
+authors' reputations.
+
+  Finally, any free program is threatened constantly by software
+patents.  We wish to avoid the danger that redistributors of a free
+program will individually obtain patent licenses, in effect making the
+program proprietary.  To prevent this, we have made it clear that any
+patent must be licensed for everyone's free use or not licensed at all.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+                    GNU GENERAL PUBLIC LICENSE
+   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
+
+  0. This License applies to any program or other work which contains
+a notice placed by the copyright holder saying it may be distributed
+under the terms of this General Public License.  The "Program", below,
+refers to any such program or work, and a "work based on the Program"
+means either the Program or any derivative work under copyright law:
+that is to say, a work containing the Program or a portion of it,
+either verbatim or with modifications and/or translated into another
+language.  (Hereinafter, translation is included without limitation in
+the term "modification".)  Each licensee is addressed as "you".
+
+Activities other than copying, distribution and modification are not
+covered by this License; they are outside its scope.  The act of
+running the Program is not restricted, and the output from the Program
+is covered only if its contents constitute a work based on the
+Program (independent of having been made by running the Program).
+Whether that is true depends on what the Program does.
+
+  1. You may copy and distribute verbatim copies of the Program's
+source code as you receive it, in any medium, provided that you
+conspicuously and appropriately publish on each copy an appropriate
+copyright notice and disclaimer of warranty; keep intact all the
+notices that refer to this License and to the absence of any warranty;
+and give any other recipients of the Program a copy of this License
+along with the Program.
+
+You may charge a fee for the physical act of transferring a copy, and
+you may at your option offer warranty protection in exchange for a fee.
+
+  2. You may modify your copy or copies of the Program or any portion
+of it, thus forming a work based on the Program, and copy and
+distribute such modifications or work under the terms of Section 1
+above, provided that you also meet all of these conditions:
+
+    a) You must cause the modified files to carry prominent notices
+    stating that you changed the files and the date of any change.
+
+    b) You must cause any work that you distribute or publish, that in
+    whole or in part contains or is derived from the Program or any
+    part thereof, to be licensed as a whole at no charge to all third
+    parties under the terms of this License.
+
+    c) If the modified program normally reads commands interactively
+    when run, you must cause it, when started running for such
+    interactive use in the most ordinary way, to print or display an
+    announcement including an appropriate copyright notice and a
+    notice that there is no warranty (or else, saying that you provide
+    a warranty) and that users may redistribute the program under
+    these conditions, and telling the user how to view a copy of this
+    License.  (Exception: if the Program itself is interactive but
+    does not normally print such an announcement, your work based on
+    the Program is not required to print an announcement.)
+
+These requirements apply to the modified work as a whole.  If
+identifiable sections of that work are not derived from the Program,
+and can be reasonably considered independent and separate works in
+themselves, then this License, and its terms, do not apply to those
+sections when you distribute them as separate works.  But when you
+distribute the same sections as part of a whole which is a work based
+on the Program, the distribution of the whole must be on the terms of
+this License, whose permissions for other licensees extend to the
+entire whole, and thus to each and every part regardless of who wrote it.
+
+Thus, it is not the intent of this section to claim rights or contest
+your rights to work written entirely by you; rather, the intent is to
+exercise the right to control the distribution of derivative or
+collective works based on the Program.
+
+In addition, mere aggregation of another work not based on the Program
+with the Program (or with a work based on the Program) on a volume of
+a storage or distribution medium does not bring the other work under
+the scope of this License.
+
+  3. You may copy and distribute the Program (or a work based on it,
+under Section 2) in object code or executable form under the terms of
+Sections 1 and 2 above provided that you also do one of the following:
+
+    a) Accompany it with the complete corresponding machine-readable
+    source code, which must be distributed under the terms of Sections
+    1 and 2 above on a medium customarily used for software interchange; or,
+
+    b) Accompany it with a written offer, valid for at least three
+    years, to give any third party, for a charge no more than your
+    cost of physically performing source distribution, a complete
+    machine-readable copy of the corresponding source code, to be
+    distributed under the terms of Sections 1 and 2 above on a medium
+    customarily used for software interchange; or,
+
+    c) Accompany it with the information you received as to the offer
+    to distribute corresponding source code.  (This alternative is
+    allowed only for noncommercial distribution and only if you
+    received the program in object code or executable form with such
+    an offer, in accord with Subsection b above.)
+
+The source code for a work means the preferred form of the work for
+making modifications to it.  For an executable work, complete source
+code means all the source code for all modules it contains, plus any
+associated interface definition files, plus the scripts used to
+control compilation and installation of the executable.  However, as a
+special exception, the source code distributed need not include
+anything that is normally distributed (in either source or binary
+form) with the major components (compiler, kernel, and so on) of the
+operating system on which the executable runs, unless that component
+itself accompanies the executable.
+
+If distribution of executable or object code is made by offering
+access to copy from a designated place, then offering equivalent
+access to copy the source code from the same place counts as
+distribution of the source code, even though third parties are not
+compelled to copy the source along with the object code.
+
+  4. You may not copy, modify, sublicense, or distribute the Program
+except as expressly provided under this License.  Any attempt
+otherwise to copy, modify, sublicense or distribute the Program is
+void, and will automatically terminate your rights under this License.
+However, parties who have received copies, or rights, from you under
+this License will not have their licenses terminated so long as such
+parties remain in full compliance.
+
+  5. You are not required to accept this License, since you have not
+signed it.  However, nothing else grants you permission to modify or
+distribute the Program or its derivative works.  These actions are
+prohibited by law if you do not accept this License.  Therefore, by
+modifying or distributing the Program (or any work based on the
+Program), you indicate your acceptance of this License to do so, and
+all its terms and conditions for copying, distributing or modifying
+the Program or works based on it.
+
+  6. Each time you redistribute the Program (or any work based on the
+Program), the recipient automatically receives a license from the
+original licensor to copy, distribute or modify the Program subject to
+these terms and conditions.  You may not impose any further
+restrictions on the recipients' exercise of the rights granted herein.
+You are not responsible for enforcing compliance by third parties to
+this License.
+
+  7. If, as a consequence of a court judgment or allegation of patent
+infringement or for any other reason (not limited to patent issues),
+conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot
+distribute so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you
+may not distribute the Program at all.  For example, if a patent
+license would not permit royalty-free redistribution of the Program by
+all those who receive copies directly or indirectly through you, then
+the only way you could satisfy both it and this License would be to
+refrain entirely from distribution of the Program.
+
+If any portion of this section is held invalid or unenforceable under
+any particular circumstance, the balance of the section is intended to
+apply and the section as a whole is intended to apply in other
+circumstances.
+
+It is not the purpose of this section to induce you to infringe any
+patents or other property right claims or to contest validity of any
+such claims; this section has the sole purpose of protecting the
+integrity of the free software distribution system, which is
+implemented by public license practices.  Many people have made
+generous contributions to the wide range of software distributed
+through that system in reliance on consistent application of that
+system; it is up to the author/donor to decide if he or she is willing
+to distribute software through any other system and a licensee cannot
+impose that choice.
+
+This section is intended to make thoroughly clear what is believed to
+be a consequence of the rest of this License.
+
+  8. If the distribution and/or use of the Program is restricted in
+certain countries either by patents or by copyrighted interfaces, the
+original copyright holder who places the Program under this License
+may add an explicit geographical distribution limitation excluding
+those countries, so that distribution is permitted only in or among
+countries not thus excluded.  In such case, this License incorporates
+the limitation as if written in the body of this License.
+
+  9. The Free Software Foundation may publish revised and/or new versions
+of the General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+Each version is given a distinguishing version number.  If the Program
+specifies a version number of this License which applies to it and "any
+later version", you have the option of following the terms and conditions
+either of that version or of any later version published by the Free
+Software Foundation.  If the Program does not specify a version number of
+this License, you may choose any version ever published by the Free Software
+Foundation.
+
+  10. If you wish to incorporate parts of the Program into other free
+programs whose distribution conditions are different, write to the author
+to ask for permission.  For software which is copyrighted by the Free
+Software Foundation, write to the Free Software Foundation; we sometimes
+make exceptions for this.  Our decision will be guided by the two goals
+of preserving the free status of all derivatives of our free software and
+of promoting the sharing and reuse of software generally.
+
+                            NO WARRANTY
+
+  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
+FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
+OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
+PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
+OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
+TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
+PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
+REPAIR OR CORRECTION.
+
+  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
+REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
+INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
+OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
+TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
+YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
+PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
+POSSIBILITY OF SUCH DAMAGES.
+
+                     END OF TERMS AND CONDITIONS
+
+            How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+convey the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    <one line to give the program's name and a brief idea of what it does.>
+    Copyright (C) <year>  <name of author>
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License along
+    with this program; if not, write to the Free Software Foundation, Inc.,
+    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+
+Also add information on how to contact you by electronic and paper mail.
+
+If the program is interactive, make it output a short notice like this
+when it starts in an interactive mode:
+
+    Gnomovision version 69, Copyright (C) year name of author
+    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, the commands you use may
+be called something other than `show w' and `show c'; they could even be
+mouse-clicks or menu items--whatever suits your program.
+
+You should also get your employer (if you work as a programmer) or your
+school, if any, to sign a "copyright disclaimer" for the program, if
+necessary.  Here is a sample; alter the names:
+
+  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
+  `Gnomovision' (which makes passes at compilers) written by James Hacker.
+
+  <signature of Ty Coon>, 1 April 1989
+  Ty Coon, President of Vice
+
+This General Public License does not permit incorporating your program into
+proprietary programs.  If your program is a subroutine library, you may
+consider it more useful to permit linking proprietary applications with the
+library.  If this is what you want to do, use the GNU Lesser General
+Public License instead of this License.
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/README.txt drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/README.txt
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/README.txt	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/README.txt	2014-05-21 21:43:07.000000000 +0200
@@ -0,0 +1,36 @@
+
+-- SUMMARY --
+
+This module enhances some of the multi-currency capabilities of commerce
+http://drupal.org/project/commerce
+
+It provides these features:
+ - UI for fine granular definition of exchange rates.
+   (Every currency combination can be defined separately if needed)
+ - Syncronization of currency exchange rates directly from the European Central Bank (ECB).
+ - UI to specify which rates shall be syncornized and which are handled manually.
+ - Generation of currency specific price fields inclusive generation of rule-set to handle them.
+ - hooks for easy integration of custom currency exchange rate sources.
+
+
+-- REQUIREMENTS --
+
+Commerce: http://drupal.org/project/commerce
+
+
+-- INSTALLATION --
+
+* Install as usual, see http://drupal.org/documentation/install/modules-themes/modules-7 for further information.
+
+* Configure the currency conversion: admin/commerce/config/currency/conversion and/or
+  the currency handling: admin/commerce/config/currency/handling
+
+* Run cron or sync manually to synchronize the rates.
+
+
+-- API --
+It is possible to add own functions / services to sync the conversion rates.
+Check commerce_multicurrency.api.php and commerce_multicurrency.ecb.inc for further
+information and examples.
+
+The sync is triggered manually or by cron.
\ Brak znaku nowej linii na końcu pliku
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/tests/commerce_multicurrency.test drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/tests/commerce_multicurrency.test
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/tests/commerce_multicurrency.test	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/tests/commerce_multicurrency.test	2014-05-21 21:43:07.000000000 +0200
@@ -0,0 +1,121 @@
+<?php
+
+/**
+ * @file
+ * Tests for the commerce currency module.
+ */
+
+/**
+ * Tests for the commerce currency module.
+ */
+class CommerceMulticurrencyTestCase extends DrupalWebTestCase {
+
+  /**
+   * Defines the cookie name used to store the set currency.
+   * @var string
+   */
+  protected $cookieName = 'Drupal_visitor_commerce_currency';
+
+  /**
+   * Implementation of getInfo().
+   */
+  public static function getInfo() {
+    return array(
+      'name' => 'Commerce Multicurrency',
+      'description' => 'Test multicurrency features.',
+      'group' => 'Commerce Multicurrency',
+    );
+  }
+
+  /**
+   * Setup.
+   */
+  public function setUp() {
+    $modules = func_get_args();
+    $modules = isset($modules[0]) ? $modules[0] : $modules;
+    $modules[] = 'commerce';
+    $modules[] = 'commerce_price';
+    parent::setUp($modules);
+
+    // Enable currencies.
+    variable_set('commerce_enabled_currencies', array(
+      commerce_default_currency() => commerce_default_currency(),
+      'CHF' => 'CHF',
+      'EUR' => 'EUR',
+    ));
+  }
+
+  /**
+   * Test that the currency retrieving works.
+   */
+  public function testGetCurrency() {
+    // Ensure environment is clean.
+    $currency_code = &drupal_static('commerce_multicurrency_get_user_currency_code', FALSE);
+    $currency_code = FALSE;
+    unset($_COOKIE[$this->cookieName]);
+
+    // Check fallback behaviour if no currency is explicitly set.
+    $this->assertEqual(commerce_default_currency(), commerce_multicurrency_get_user_currency_code(), 'Default: ' . commerce_default_currency() . ' returned.');
+
+    // Inject currency.
+    $currency_code = 'CHF';
+    $this->assertEqual($currency_code, commerce_multicurrency_get_user_currency_code(), 'Static cache: CHF returned.');
+
+    // Reset currency code, but set cookie.
+    $currency_code = FALSE;
+    $_COOKIE[$this->cookieName] = 'EUR';
+    $this->assertEqual('EUR', commerce_multicurrency_get_user_currency_code(), 'Cookie: EUR returned.');
+
+    // Check if the static cache works.
+    unset($_COOKIE[$this->cookieName]);
+    $this->assertEqual('EUR', commerce_multicurrency_get_user_currency_code(), 'Static Cache follow up: EUR returned.');
+
+    // Ensure only valid currencies are accepted from cookies.
+    $_COOKIE[$this->cookieName] = 'NOP';
+    $currency_code = FALSE;
+    $this->assertEqual(commerce_default_currency(), commerce_multicurrency_get_user_currency_code(), 'Invalid currency was not returned.');
+  }
+
+  /**
+   * Test that the currency switching works as expected.
+   */
+  public function testSetCurrency() {
+    // Reset currency to default.
+    $currency_code = &drupal_static('commerce_multicurrency_get_user_currency_code', FALSE);
+    $currency_code = commerce_default_currency();
+    // Ensure no cookie is set.
+    unset($_COOKIE[$this->cookieName]);
+
+    commerce_multicurrency_set_user_currency_code('CHF');
+    $this->assertEqual('CHF', commerce_multicurrency_get_user_currency_code(), 'Currency set to CHF.');
+    $this->assertEqual('CHF', $currency_code, 'Static cache reference contains CHF.');
+    // We can't check if cookie is set in unit tests.
+
+    // Ensure only valid currency can be set.
+    commerce_multicurrency_set_user_currency_code('NOP');
+    $this->assertEqual('CHF', commerce_multicurrency_get_user_currency_code(), 'Invalid currency was not set.');
+  }
+
+  /**
+   * Test that the currency switching works as expected.
+   */
+  public function testNotOverwrittingCurrency() {
+    // Reset currency to default.
+    $currency_code = &drupal_static('commerce_multicurrency_get_user_currency_code', FALSE);
+    $currency_code = commerce_default_currency();
+
+    // Set currency only if no cookie is set.
+    $_COOKIE[$this->cookieName] = $currency_code;
+    commerce_multicurrency_set_user_currency_code('CHF', FALSE);
+    $this->assertEqual(commerce_default_currency(), commerce_multicurrency_get_user_currency_code(), 'Currency is not overwritten if cookie is set.');
+    $this->assertEqual(commerce_default_currency(), $currency_code, 'Staic cache currency is not overwritten if cookie is set.');
+    $this->assertEqual(commerce_default_currency(), $_COOKIE[$this->cookieName], 'Cookie currency is not overwritten if cookie is set.');
+
+    // Set currency only if no cookie is set.
+    unset($_COOKIE[$this->cookieName]);
+    commerce_multicurrency_set_user_currency_code('EUR', FALSE);
+    $this->assertEqual('EUR', commerce_multicurrency_get_user_currency_code(), 'Currency is set if no cookie is set.');
+    $this->assertEqual('EUR', $currency_code, 'Staic cache currency is set if no cookie is set.');
+    // We can't check if cookie is set in unit tests.
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/theme/commerce-multicurrency-selector-menu.tpl.php drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/theme/commerce-multicurrency-selector-menu.tpl.php
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/theme/commerce-multicurrency-selector-menu.tpl.php	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_multicurrency/theme/commerce-multicurrency-selector-menu.tpl.php	2014-05-21 21:43:07.000000000 +0200
@@ -0,0 +1,17 @@
+<?php
+/**
+ * @file
+ * Currency selector menu.
+ *
+ * Available variables:
+ * $enabled_currencies
+ * $user_currency
+ */
+?>
+<ul class="currency_select_menu">
+<?php foreach($enabled_currencies as $currency) : ?>
+  <li class="<?php print $currency['code'] . (($currency['code'] == $user_currency) ? ' active' : NULL); ?>">
+    <a href="<?php print url('commerce_currency_select/' . $currency['code'], array('query' => drupal_get_destination())); ?>"><?php print $currency['code']; ?></a>
+  </li>
+<?php endforeach;?>
+</ul>
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_services/commerce_services.info drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_services/commerce_services.info
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_services/commerce_services.info	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_services/commerce_services.info	2014-06-26 15:48:04.000000000 +0200
@@ -0,0 +1,13 @@
+name = Commerce Services
+description = Defines Services resources for Drupal Commerce entities and systems.
+package = Services
+dependencies[] = entity
+core = 7.x
+
+; Information added by drupal.org packaging script on 2013-09-30
+version = "7.x-1.x-dev"
+core = "7.x"
+project = "commerce_services"
+project status url = http://drupal.epe.si
+datestamp = "1380560842"
+
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_services/commerce_services.module drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_services/commerce_services.module
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_services/commerce_services.module	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_services/commerce_services.module	2014-04-16 14:25:46.000000000 +0200
@@ -0,0 +1,2163 @@
+<?php
+
+/**
+ * @file
+ * Defines Services resources for Drupal Commerce entities and systems.
+ */
+
+
+/**
+ * Implements hook_services_resources().
+ */
+function commerce_services_services_resources() {
+  $resources = array();
+
+  if (module_exists('node') && module_exists('commerce_product_reference')) {
+    // Define a resource for product display nodes, which returns node and
+    // product data together that is more useful for building complex Add to
+    // Cart forms than just product data.
+    $resources['product-display'] = array(
+      '#api_version' => 3002,
+      'operations' => array(
+        // Define the index callback for a GET to /product-display.
+        'index' => array(
+          'help' => 'Returns a pageable list of product displays.',
+          'callback' => 'commerce_services_product_display_index',
+          'file' => array('type' => 'inc', 'module' => 'commerce_services', 'name' => 'resources/product_display'),
+          'access arguments' => array('access content'),
+          'args' => array(
+            array(
+              'name' => 'fields',
+              'type' => 'string',
+              'description' => 'A comma separated list of field or property names from product display nodes to include in the result set. Will be converted to an array before being passed to the operation callback.',
+              'optional' => TRUE,
+              'source' => array('param' => 'fields'),
+              'default value' => '',
+              'commerce_services_explode' => ',',
+              'commerce_services_required_fields' => array('nid'),
+            ),
+            array(
+              'name' => 'expand_entities',
+              'type' => 'int',
+              'description' => 'An integer depth to which entity reference field values should be expanded into full entities in a corresponding property on returned entities.',
+              'optional' => TRUE,
+              'source' => array('param' => 'expand_entities'),
+              'default value' => 1,
+            ),
+            array(
+              'name' => 'flatten_fields',
+              'type' => 'string',
+              'description' => 'A string indicating whether or not field value arrays should be flattened; accepts true or false.',
+              'optional' => TRUE,
+              'source' => array('param' => 'flatten_fields'),
+              'default value' => 'true',
+            ),
+            array(
+              'name' => 'filter',
+              'type' => 'array',
+              'description' => 'An array of field or property names from product display nodes paired with values to use to filter the result set.',
+              'optional' => TRUE,
+              'source' => array('param' => 'filter'),
+              'default value' => array('status' => 1),
+              'commerce_services_field_populate' => 'node',
+            ),
+            array(
+              'name' => 'filter_op',
+              'type' => 'array',
+              'description' => 'An array of field or property names from product display nodes paired with the operator to use when filtering the result set.',
+              'optional' => TRUE,
+              'source' => array('param' => 'filter_op'),
+              'default value' => array(),
+              'commerce_services_match_keys' => array(
+                'arg' => 'filter',
+                'default value' => '=',
+              ),
+            ),
+            array(
+              'name' => 'sort_by',
+              'type' => 'string',
+              'description' => 'A comma separated list of field or property names from product display nodes by which to sort the result set.',
+              'optional' => TRUE,
+              'source' => array('param' => 'sort_by'),
+              'default value' => 'created',
+              'commerce_services_explode' => ',',
+            ),
+            array(
+              'name' => 'sort_order',
+              'type' => 'string',
+              'description' => 'A comma separated list of order specifiers (DESC or ASC) indicating the direction the sort_by values should be applied to the result set.',
+              'optional' => TRUE,
+              'source' => array('param' => 'sort_order'),
+              'default value' => 'DESC',
+              'commerce_services_explode' => ',',
+            ),
+            array(
+              'name' => 'limit',
+              'type' => 'int',
+              'description' => 'The number of product displays to retrieve.',
+              'optional' => TRUE,
+              'source' => array('param' => 'limit'),
+              'default value' => 10,
+            ),
+            array(
+              'name' => 'offset',
+              'type' => 'int',
+              'description' => 'The zero-based index from which to start retrieving product displays.',
+              'optional' => TRUE,
+              'source' => array('param' => 'offset'),
+              'default value' => 0,
+            ),
+          ),
+        ),
+
+        // Define the retrieve callback for a GET to /product-display/%node.
+        'retrieve' => array(
+          'help' => 'Returns a single product display specified by its node ID.',
+          'callback' => 'commerce_services_product_display_retrieve',
+          'file' => array('type' => 'inc', 'module' => 'commerce_services', 'name' => 'resources/product_display'),
+          'access callback' => 'commerce_services_product_display_access',
+          'access arguments' => array('view'),
+          'access arguments append' => TRUE,
+          'args' => array(
+            array(
+              'name' => 'nid',
+              'type' => 'int',
+              'description' => 'The node ID of the product display to retrieve.',
+              'optional' => FALSE,
+              'source' => array('path' => 0),
+            ),
+            array(
+              'name' => 'expand_entities',
+              'type' => 'int',
+              'description' => 'An integer depth to which entity reference field values should be expanded into full entities in a corresponding property on the returned entity.',
+              'optional' => TRUE,
+              'source' => array('param' => 'expand_entities'),
+              'default value' => 1,
+            ),
+            array(
+              'name' => 'flatten_fields',
+              'type' => 'string',
+              'description' => 'A string indicating whether or not field value arrays should be flattened; accepts true or false.',
+              'optional' => TRUE,
+              'source' => array('param' => 'flatten_fields'),
+              'default value' => 'true',
+            ),
+          ),
+        ),
+      ),
+    );
+  }
+
+  if (module_exists('commerce_product')) {
+    // Define a resource for actual Commerce Product entities.
+    $resources['product'] = array(
+      '#api_version' => 3002,
+      'operations' => array(
+        // Define the index callback for a GET to /product.
+        'index' => array(
+          'help' => 'Returns a pageable list of products.',
+          'callback' => 'commerce_services_product_index',
+          'file' => array('type' => 'inc', 'module' => 'commerce_services', 'name' => 'resources/product'),
+          'access callback' => 'commerce_services_product_index_access',
+          'args' => array(
+            array(
+              'name' => 'fields',
+              'type' => 'string',
+              'description' => 'A comma separated list of field or property names from products to include in the result set.  Will be converted to an array before being passed to the operation callback.',
+              'optional' => TRUE,
+              'source' => array('param' => 'fields'),
+              'default value' => '',
+              'commerce_services_explode' => ',',
+              'commerce_services_required_fields' => array('product_id'),
+            ),
+            array(
+              'name' => 'expand_entities',
+              'type' => 'int',
+              'description' => 'An integer depth to which entity reference field values should be expanded into full entities in a corresponding property on returned entities.',
+              'optional' => TRUE,
+              'source' => array('param' => 'expand_entities'),
+              'default value' => 1,
+            ),
+            array(
+              'name' => 'flatten_fields',
+              'type' => 'string',
+              'description' => 'A string indicating whether or not field value arrays should be flattened; accepts true or false.',
+              'optional' => TRUE,
+              'source' => array('param' => 'flatten_fields'),
+              'default value' => 'true',
+            ),
+            array(
+              'name' => 'filter',
+              'type' => 'array',
+              'description' => 'An array of field or property names from products paired with values to use to filter the result set.',
+              'optional' => TRUE,
+              'source' => array('param' => 'filter'),
+              'default value' => array(),
+              'commerce_services_field_populate' => 'commerce_product',
+            ),
+            array(
+              'name' => 'filter_op',
+              'type' => 'array',
+              'description' => 'An array of field or property names from products paired with the operator to use when filtering the result set.',
+              'optional' => TRUE,
+              'source' => array('param' => 'filter_op'),
+              'default value' => array(),
+              'commerce_services_match_keys' => array(
+                'arg' => 'filter',
+                'default value' => '=',
+              ),
+            ),
+            array(
+              'name' => 'sort_by',
+              'type' => 'string',
+              'description' => 'A comma separated list of field or property names from products by which to sort the result set.',
+              'optional' => TRUE,
+              'source' => array('param' => 'sort_by'),
+              'default value' => 'product_id',
+              'commerce_services_explode' => ',',
+            ),
+            array(
+              'name' => 'sort_order',
+              'type' => 'string',
+              'description' => 'A comma separated list of sort order specifiers (DESC or ASC) indicating the direction the sort_by values should be applied to the result set.',
+              'optional' => TRUE,
+              'source' => array('param' => 'sort_order'),
+              'default value' => 'ASC',
+              'commerce_services_explode' => ',',
+            ),
+            array(
+              'name' => 'limit',
+              'type' => 'int',
+              'description' => 'The number of products to retrieve.',
+              'optional' => TRUE,
+              'source' => array('param' => 'limit'),
+              'default value' => 10,
+            ),
+            array(
+              'name' => 'offset',
+              'type' => 'int',
+              'description' => 'The zero-based index from which to start retrieving products.',
+              'optional' => TRUE,
+              'source' => array('param' => 'offset'),
+              'default value' => 0,
+            ),
+          ),
+        ),
+
+        // Define the retrieve callback for a GET to /product/%commerce_product.
+        'retrieve' => array(
+          'help' => 'Returns a single product specified by its product ID.',
+          'callback' => 'commerce_services_product_retrieve',
+          'file' => array('type' => 'inc', 'module' => 'commerce_services', 'name' => 'resources/product'),
+          'access callback' => 'commerce_services_product_retrieve_access',
+          'access arguments append' => TRUE,
+          'args' => array(
+            array(
+              'name' => 'product_id',
+              'type' => 'int',
+              'description' => 'The product ID of the product to retrieve.',
+              'optional' => FALSE,
+              'source' => array('path' => 0),
+            ),
+            array(
+              'name' => 'expand_entities',
+              'type' => 'int',
+              'description' => 'An integer depth to which entity reference field values should be expanded into full entities in a corresponding property on returned entities.',
+              'optional' => TRUE,
+              'source' => array('param' => 'expand_entities'),
+              'default value' => 1,
+            ),
+            array(
+              'name' => 'flatten_fields',
+              'type' => 'string',
+              'description' => 'A string indicating whether or not field value arrays should be flattened; accepts true or false.',
+              'optional' => TRUE,
+              'source' => array('param' => 'flatten_fields'),
+              'default value' => 'true',
+            ),
+          ),
+        ),
+
+        // Define the create callback for a POST to /product.
+        'create' => array(
+          'help' => 'Creates a new product for the current API user.',
+          'callback' => 'commerce_services_product_create',
+          'file' => array('type' => 'inc', 'module' => 'commerce_services', 'name' => 'resources/product'),
+          'access callback' => 'commerce_services_product_create_access',
+          'args' => array(
+            // The data array must include valid values for the type, sku, and
+            // title properties and at least an amount and currency_code value
+            // for the default commerce_price field.
+            array(
+              'name' => 'data',
+              'type' => 'array',
+              'description' => 'The product data to set on create.',
+              'optional' => FALSE,
+              'source' => 'data',
+            ),
+            array(
+              'name' => 'flatten_fields',
+              'type' => 'string',
+              'description' => 'A string indicating whether or not field value arrays are flattened; accepts true or false.',
+              'optional' => TRUE,
+              'source' => array('param' => 'flatten_fields'),
+              'default value' => 'true',
+            ),
+          ),
+        ),
+
+        // Define the update callback for a PUT to /product/%commerce_product.
+        'update' => array(
+          'help' => 'Updates a single product specified by its product ID.',
+          'callback' => 'commerce_services_product_update',
+          'file' => array('type' => 'inc', 'module' => 'commerce_services', 'name' => 'resources/product'),
+          'access callback' => 'commerce_services_product_update_access',
+          'access arguments append' => TRUE,
+          'args' => array(
+            array(
+              'name' => 'product_id',
+              'type' => 'int',
+              'description' => 'The product ID of the product to delete.',
+              'optional' => FALSE,
+              'source' => array('path' => 0),
+            ),
+            array(
+              'name' => 'data',
+              'type' => 'array',
+              'description' => 'The product data to update.',
+              'optional' => FALSE,
+              'source' => 'data',
+            ),
+            array(
+              'name' => 'flatten_fields',
+              'type' => 'string',
+              'description' => 'A string indicating whether or not field value arrays are flattened; accepts true or false.',
+              'optional' => TRUE,
+              'source' => array('param' => 'flatten_fields'),
+              'default value' => 'true',
+            ),
+          ),
+        ),
+
+        // Define the delete callback for a DELETE to /product/%commerce_product.
+        'delete' => array(
+          'help' => 'Deletes a single product specified by its product ID.',
+          'callback' => 'commerce_services_product_delete',
+          'file' => array('type' => 'inc', 'module' => 'commerce_services', 'name' => 'resources/product'),
+          'access callback' => 'commerce_services_product_delete_access',
+          'access arguments append' => TRUE,
+          'args' => array(
+            array(
+              'name' => 'product_id',
+              'type' => 'int',
+              'description' => 'The product ID of the product to delete.',
+              'optional' => FALSE,
+              'source' => array('path' => 0),
+            ),
+          ),
+        ),
+      ),
+    );
+  }
+
+  if (module_exists('commerce_cart')) {
+    // Define a resource for retrieving a collection of the user's cart orders.
+    $resources['cart'] = array(
+      '#api_version' => 3002,
+      'operations' => array(
+        // Define the index callback for a GET to /cart.
+        'index' => array(
+          'help' => "Returns a pageable list of the current API user's shopping cart orders, currently limited to just the current cart.",
+          'callback' => 'commerce_services_cart_index',
+          'file' => array('type' => 'inc', 'module' => 'commerce_services', 'name' => 'resources/cart'),
+          'access callback' => 'commerce_services_cart_index_access',
+          'args' => array(
+            array(
+              'name' => 'fields',
+              'type' => 'string',
+              'description' => 'A comma separated list of field or property names from carts to include in the result set.  Will be converted to an array before being passed to the operation callback.',
+              'optional' => TRUE,
+              'source' => array('param' => 'fields'),
+              'default value' => '',
+              'commerce_services_explode' => ',',
+              'commerce_services_required_fields' => array('order_id', 'uid'),
+            ),
+            // We currently only expand order entities to the first depth, but
+            // we can choose in the future to update this to expand them to the
+            // second depth by default to embed referenced line items in the
+            // order data and referenced products in the line item data.
+            array(
+              'name' => 'expand_entities',
+              'type' => 'int',
+              'description' => 'An integer depth to which entity reference field values should be expanded into full entities in a corresponding property on returned entities.',
+              'optional' => TRUE,
+              'source' => array('param' => 'expand_entities'),
+              'default value' => 1,
+            ),
+            array(
+              'name' => 'flatten_fields',
+              'type' => 'string',
+              'description' => 'A string indicating whether or not field value arrays should be flattened; accepts true or false.',
+              'optional' => TRUE,
+              'source' => array('param' => 'flatten_fields'),
+              'default value' => 'true',
+            ),
+            array(
+              // Note that even though the filter argument does not include a
+              // default value here, the index callback currently ensures that
+              // the resource filters by the current user's cart order ID.
+              'name' => 'filter',
+              'type' => 'array',
+              'description' => 'An array of field or property names from orders paired with values to use to filter the result set.',
+              'optional' => TRUE,
+              'source' => array('param' => 'filter'),
+              'default value' => array(),
+              'commerce_services_field_populate' => 'commerce_order',
+            ),
+            array(
+              'name' => 'filter_op',
+              'type' => 'array',
+              'description' => 'An array of field or property names from orders paired with the operator to use when filtering the result set.',
+              'optional' => TRUE,
+              'source' => array('param' => 'filter_op'),
+              'default value' => array(),
+              'commerce_services_match_keys' => array(
+                'arg' => 'filter',
+                'default value' => '=',
+              ),
+            ),
+            array(
+              'name' => 'sort_by',
+              'type' => 'string',
+              'description' => 'A comma separated list of field or property names from cart orders by which to sort the result set.',
+              'optional' => TRUE,
+              'source' => array('param' => 'sort_by'),
+              'default value' => 'order_id',
+              'commerce_services_explode' => ',',
+            ),
+            array(
+              'name' => 'sort_order',
+              'type' => 'string',
+              'description' => 'A comma separated list of sort order specifiers (DESC or ASC) indicating the direction the sort_by values should be applied to the result set.',
+              'optional' => TRUE,
+              'source' => array('param' => 'sort_order'),
+              'default value' => 'DESC',
+              'commerce_services_explode' => ',',
+            ),
+            array(
+              'name' => 'limit',
+              'type' => 'int',
+              'description' => 'The number of cart orders to retrieve.',
+              'optional' => TRUE,
+              'source' => array('param' => 'limit'),
+              'default value' => 1,
+            ),
+            array(
+              'name' => 'offset',
+              'type' => 'int',
+              'description' => 'The zero-based index from which to start retrieving cart orders.',
+              'optional' => TRUE,
+              'source' => array('param' => 'offset'),
+              'default value' => 0,
+            ),
+          ),
+        ),
+
+        // Define the create callback for a POST to /cart.
+        'create' => array(
+          'help' => 'Creates a new cart order for the current API user.',
+          'callback' => 'commerce_services_cart_create',
+          'file' => array('type' => 'inc', 'module' => 'commerce_services', 'name' => 'resources/cart'),
+          'access callback' => 'commerce_services_cart_create_access',
+          'args' => array(
+            // Even though the data array could technically accept a uid value,
+            // since the resource is designed to work for the current API user
+            // this value will be ignored and result in an error.
+            array(
+              'name' => 'data',
+              'type' => 'array',
+              'description' => 'The cart order data to set on create.',
+              'optional' => FALSE,
+              'source' => 'data',
+            ),
+            array(
+              'name' => 'flatten_fields',
+              'type' => 'string',
+              'description' => 'A string indicating whether or not field value arrays are flattened; accepts true or false.',
+              'optional' => TRUE,
+              'source' => array('param' => 'flatten_fields'),
+              'default value' => 'true',
+            ),
+          ),
+        ),
+      ),
+    );
+  }
+
+  if (module_exists('commerce_order')) {
+    // Define a resource for Commerce Order entities.
+    $resources['order'] = array(
+      '#api_version' => 3002,
+      'operations' => array(
+        // Define the index callback for a GET to /order.
+        'index' => array(
+          'help' => 'Returns a pageable list of orders.',
+          'callback' => 'commerce_services_order_index',
+          'file' => array('type' => 'inc', 'module' => 'commerce_services', 'name' => 'resources/order'),
+          'access callback' => 'commerce_services_order_index_access',
+          'args' => array(
+            array(
+              'name' => 'fields',
+              'type' => 'string',
+              'description' => 'A comma separated list of field or property names from orders to include in the result set.  Will be converted to an array before being passed to the operation callback.',
+              'optional' => TRUE,
+              'source' => array('param' => 'fields'),
+              'default value' => '',
+              'commerce_services_explode' => ',',
+              'commerce_services_required_fields' => array('order_id'),
+            ),
+            // We currently only expand order entities to the first depth, but
+            // we can choose in the future to update this to expand them to the
+            // second depth by default to embed referenced line items in the
+            // order data and referenced products in the line item data.
+            array(
+              'name' => 'expand_entities',
+              'type' => 'int',
+              'description' => 'An integer depth to which entity reference field values should be expanded into full entities in a corresponding property on returned entities.',
+              'optional' => TRUE,
+              'source' => array('param' => 'expand_entities'),
+              'default value' => 1,
+            ),
+            array(
+              'name' => 'flatten_fields',
+              'type' => 'string',
+              'description' => 'A string indicating whether or not field value arrays should be flattened; accepts true or false.',
+              'optional' => TRUE,
+              'source' => array('param' => 'flatten_fields'),
+              'default value' => 'true',
+            ),
+            array(
+              'name' => 'filter',
+              'type' => 'array',
+              'description' => 'An array of field or property names from orders paired with values to use to filter the result set.',
+              'optional' => TRUE,
+              'source' => array('param' => 'filter'),
+              'default value' => array(),
+              'commerce_services_field_populate' => 'commerce_order',
+            ),
+            array(
+              'name' => 'filter_op',
+              'type' => 'array',
+              'description' => 'An array of field or property names from orders paired with the operator to use when filtering the result set.',
+              'optional' => TRUE,
+              'source' => array('param' => 'filter_op'),
+              'default value' => array(),
+              'commerce_services_match_keys' => array(
+                'arg' => 'filter',
+                'default value' => '=',
+              ),
+            ),
+            array(
+              'name' => 'sort_by',
+              'type' => 'string',
+              'description' => 'A comma separated list of field or property names from orders by which to sort the result set.',
+              'optional' => TRUE,
+              'source' => array('param' => 'sort_by'),
+              'default value' => 'order_id',
+              'commerce_services_explode' => ',',
+            ),
+            array(
+              'name' => 'sort_order',
+              'type' => 'string',
+              'description' => 'A comma separated list of sort order specifiers (DESC or ASC) indicating the direction the sort_by values should be applied to the result set.',
+              'optional' => TRUE,
+              'source' => array('param' => 'sort_order'),
+              'default value' => 'ASC',
+              'commerce_services_explode' => ',',
+            ),
+            array(
+              'name' => 'limit',
+              'type' => 'int',
+              'description' => 'The number of orders to retrieve.',
+              'optional' => TRUE,
+              'source' => array('param' => 'limit'),
+              'default value' => 10,
+            ),
+            array(
+              'name' => 'offset',
+              'type' => 'int',
+              'description' => 'The zero-based index from which to start retrieving orders.',
+              'optional' => TRUE,
+              'source' => array('param' => 'offset'),
+              'default value' => 0,
+            ),
+          ),
+        ),
+
+        // Define the retrieve callback for a GET to /order/%commerce_order.
+        'retrieve' => array(
+          'help' => 'Returns a single order specified by its order ID.',
+          'callback' => 'commerce_services_order_retrieve',
+          'file' => array('type' => 'inc', 'module' => 'commerce_services', 'name' => 'resources/order'),
+          'access callback' => 'commerce_services_order_retrieve_access',
+          'access arguments append' => TRUE,
+          'args' => array(
+            array(
+              'name' => 'order_id',
+              'type' => 'int',
+              'description' => 'The order ID of the order to retrieve.',
+              'optional' => FALSE,
+              'source' => array('path' => 0),
+            ),
+            array(
+              'name' => 'expand_entities',
+              'type' => 'int',
+              'description' => 'An integer depth to which entity reference field values should be expanded into full entities in a corresponding property on returned entities.',
+              'optional' => TRUE,
+              'source' => array('param' => 'expand_entities'),
+              'default value' => 1,
+            ),
+            array(
+              'name' => 'flatten_fields',
+              'type' => 'string',
+              'description' => 'A string indicating whether or not field value arrays should be flattened; accepts true or false.',
+              'optional' => TRUE,
+              'source' => array('param' => 'flatten_fields'),
+              'default value' => 'true',
+            ),
+          ),
+        ),
+
+        // Define the update callback for a PUT to /order/%commerce_order.
+        'update' => array(
+          'help' => 'Updates a single order specified by its order ID.',
+          'callback' => 'commerce_services_order_update',
+          'file' => array('type' => 'inc', 'module' => 'commerce_services', 'name' => 'resources/order'),
+          'access callback' => 'commerce_services_order_update_access',
+          'access arguments append' => TRUE,
+          'args' => array(
+            array(
+              'name' => 'order_id',
+              'type' => 'int',
+              'description' => 'The order ID of the order to delete.',
+              'optional' => FALSE,
+              'source' => array('path' => 0),
+            ),
+            array(
+              'name' => 'data',
+              'type' => 'array',
+              'description' => 'The order data to update.',
+              'optional' => FALSE,
+              'source' => 'data',
+            ),
+            array(
+              'name' => 'flatten_fields',
+              'type' => 'string',
+              'description' => 'A string indicating whether or not field value arrays are flattened; accepts true or false.',
+              'optional' => TRUE,
+              'source' => array('param' => 'flatten_fields'),
+              'default value' => 'true',
+            ),
+          ),
+        ),
+
+        // Define the delete callback for a DELETE to /order/%commerce_order.
+        'delete' => array(
+          'help' => 'Deletes a single order specified by its order ID.',
+          'callback' => 'commerce_services_order_delete',
+          'file' => array('type' => 'inc', 'module' => 'commerce_services', 'name' => 'resources/order'),
+          'access callback' => 'commerce_services_order_delete_access',
+          'access arguments append' => TRUE,
+          'args' => array(
+            array(
+              'name' => 'order_id',
+              'type' => 'int',
+              'description' => 'The order ID of the order to delete.',
+              'optional' => FALSE,
+              'source' => array('path' => 0),
+            ),
+          ),
+        ),
+      ),
+      'relationships' => array(
+        // Define the line item relationship for a GET to /order/%commerce_order/line-items.
+        'line-items' => array(
+          'help' => "Returns a list of line items on the order.",
+          'callback' => 'commerce_services_order_line_item_index',
+          'file' => array('type' => 'inc', 'module' => 'commerce_services', 'name' => 'resources/order'),
+          'access callback' => 'commerce_services_order_line_item_index_access',
+          'access arguments append' => TRUE,
+          'args' => array(
+            array(
+              'name' => 'order_id',
+              'type' => 'int',
+              'description' => 'The order ID of the order whose line items should be retrieved.',
+              'optional' => FALSE,
+              'source' => array('path' => 0),
+            ),
+            array(
+              'name' => 'fields',
+              'type' => 'string',
+              'description' => 'A comma separated list of field or property names from line items to include in the result set.  Will be converted to an array before being passed to the operation callback.',
+              'optional' => TRUE,
+              'source' => array('param' => 'fields'),
+              'default value' => '',
+              'commerce_services_explode' => ',',
+              'commerce_services_required_fields' => array('line_item_id'),
+            ),
+            array(
+              'name' => 'expand_entities',
+              'type' => 'int',
+              'description' => 'An integer depth to which entity reference field values should be expanded into full entities in a corresponding property on returned entities.',
+              'optional' => TRUE,
+              'source' => array('param' => 'expand_entities'),
+              'default value' => 1,
+            ),
+            array(
+              'name' => 'flatten_fields',
+              'type' => 'string',
+              'description' => 'A string indicating whether or not field value arrays should be flattened; accepts true or false.',
+              'optional' => TRUE,
+              'source' => array('param' => 'flatten_fields'),
+              'default value' => 'true',
+            ),
+            array(
+              'name' => 'filter',
+              'type' => 'array',
+              'description' => 'An array of field or property names from line items paired with values to use to filter the result set.',
+              'optional' => TRUE,
+              'source' => array('param' => 'filter'),
+              'default value' => array(),
+              'commerce_services_field_populate' => 'commerce_line_item',
+            ),
+            array(
+              'name' => 'filter_op',
+              'type' => 'array',
+              'description' => 'An array of field or property names from line items paired with the operator to use when filtering the result set.',
+              'optional' => TRUE,
+              'source' => array('param' => 'filter_op'),
+              'default value' => array(),
+              'commerce_services_match_keys' => array(
+                'arg' => 'filter',
+                'default value' => '=',
+              ),
+            ),
+            array(
+              'name' => 'sort_by',
+              'type' => 'string',
+              'description' => 'A comma separated list of field or property names from line items by which to sort the result set.',
+              'optional' => TRUE,
+              'source' => array('param' => 'sort_by'),
+              'default value' => 'line_item_id',
+              'commerce_services_explode' => ',',
+            ),
+            array(
+              'name' => 'sort_order',
+              'type' => 'string',
+              'description' => 'A comma separated list of sort order specifiers (DESC or ASC) indicating the direction the sort_by values should be applied to the result set.',
+              'optional' => TRUE,
+              'source' => array('param' => 'sort_order'),
+              'default value' => 'DESC',
+              'commerce_services_explode' => ',',
+            ),
+            array(
+              'name' => 'limit',
+              'type' => 'int',
+              'description' => 'The number of line items to retrieve.',
+              'optional' => TRUE,
+              'source' => array('param' => 'limit'),
+              'default value' => 100,
+            ),
+            array(
+              'name' => 'offset',
+              'type' => 'int',
+              'description' => 'The zero-based index from which to start retrieving line items.',
+              'optional' => TRUE,
+              'source' => array('param' => 'offset'),
+              'default value' => 0,
+            ),
+          ),
+        ),
+      ),
+    );
+  }
+
+  if (module_exists('commerce_line_item')) {
+    // Define a resource for retrieving a collection of line items.
+    $resources['line-item'] = array(
+      '#api_version' => 3002,
+      'operations' => array(
+        // Define the index callback for a GET to /line-item.
+        'index' => array(
+          'help' => "Returns a pageable list of line items.",
+          'callback' => 'commerce_services_line_item_index',
+          'file' => array('type' => 'inc', 'module' => 'commerce_services', 'name' => 'resources/line_item'),
+          'access callback' => 'commerce_services_line_item_index_access',
+          'args' => array(
+            array(
+              'name' => 'fields',
+              'type' => 'string',
+              'description' => 'A comma separated list of field or property names from line items to include in the result set.  Will be converted to an array before being passed to the operation callback.',
+              'optional' => TRUE,
+              'source' => array('param' => 'fields'),
+              'default value' => '',
+              'commerce_services_explode' => ',',
+              'commerce_services_required_fields' => array('line_item_id', 'order_id'),
+            ),
+            array(
+              'name' => 'expand_entities',
+              'type' => 'int',
+              'description' => 'An integer depth to which entity reference field values should be expanded into full entities in a corresponding property on returned entities.',
+              'optional' => TRUE,
+              'source' => array('param' => 'expand_entities'),
+              'default value' => 1,
+            ),
+            array(
+              'name' => 'flatten_fields',
+              'type' => 'string',
+              'description' => 'A string indicating whether or not field value arrays should be flattened; accepts true or false.',
+              'optional' => TRUE,
+              'source' => array('param' => 'flatten_fields'),
+              'default value' => 'true',
+            ),
+            array(
+              'name' => 'filter',
+              'type' => 'array',
+              'description' => 'An array of field or property names from line items paired with values to use to filter the result set.',
+              'optional' => TRUE,
+              'source' => array('param' => 'filter'),
+              'default value' => array(),
+              'commerce_services_field_populate' => 'commerce_line_item',
+            ),
+            array(
+              'name' => 'filter_op',
+              'type' => 'array',
+              'description' => 'An array of field or property names from line items paired with the operator to use when filtering the result set.',
+              'optional' => TRUE,
+              'source' => array('param' => 'filter_op'),
+              'default value' => array(),
+              'commerce_services_match_keys' => array(
+                'arg' => 'filter',
+                'default value' => '=',
+              ),
+            ),
+            array(
+              'name' => 'sort_by',
+              'type' => 'string',
+              'description' => 'A comma separated list of field or property names from line items by which to sort the result set.',
+              'optional' => TRUE,
+              'source' => array('param' => 'sort_by'),
+              'default value' => 'line_item_id',
+              'commerce_services_explode' => ',',
+            ),
+            array(
+              'name' => 'sort_order',
+              'type' => 'string',
+              'description' => 'A comma separated list of sort order specifiers (DESC or ASC) indicating the direction the sort_by values should be applied to the result set.',
+              'optional' => TRUE,
+              'source' => array('param' => 'sort_order'),
+              'default value' => 'DESC',
+              'commerce_services_explode' => ',',
+            ),
+            array(
+              'name' => 'limit',
+              'type' => 'int',
+              'description' => 'The number of line items to retrieve.',
+              'optional' => TRUE,
+              'source' => array('param' => 'limit'),
+              'default value' => 10,
+            ),
+            array(
+              'name' => 'offset',
+              'type' => 'int',
+              'description' => 'The zero-based index from which to start retrieving line items.',
+              'optional' => TRUE,
+              'source' => array('param' => 'offset'),
+              'default value' => 0,
+            ),
+          ),
+        ),
+
+        // Define the retrieve callback for a GET to /line-item/%commerce_line_item.
+        'retrieve' => array(
+          'help' => 'Returns a single line item specified by its line item ID.',
+          'callback' => 'commerce_services_line_item_retrieve',
+          'file' => array('type' => 'inc', 'module' => 'commerce_services', 'name' => 'resources/line_item'),
+          'access callback' => 'commerce_services_line_item_retrieve_access',
+          'access arguments append' => TRUE,
+          'args' => array(
+            array(
+              'name' => 'line_item_id',
+              'type' => 'int',
+              'description' => 'The line item ID of the line item to retrieve.',
+              'optional' => FALSE,
+              'source' => array('path' => 0),
+            ),
+            array(
+              'name' => 'expand_entities',
+              'type' => 'int',
+              'description' => 'An integer depth to which entity reference field values should be expanded into full entities in a corresponding property on the returned entity.',
+              'optional' => TRUE,
+              'source' => array('param' => 'expand_entities'),
+              'default value' => 1,
+            ),
+            array(
+              'name' => 'flatten_fields',
+              'type' => 'string',
+              'description' => 'A string indicating whether or not field value arrays should be flattened; accepts true or false.',
+              'optional' => TRUE,
+              'source' => array('param' => 'flatten_fields'),
+              'default value' => 'true',
+            ),
+          ),
+        ),
+
+        // Define the create callback for a POST to /line-items.
+        'create' => array(
+          'help' => 'Creates a new line item for an existing order.',
+          'callback' => 'commerce_services_line_item_create',
+          'file' => array('type' => 'inc', 'module' => 'commerce_services', 'name' => 'resources/line_item'),
+          'access callback' => 'commerce_services_line_item_create_access',
+          'args' => array(
+            // The data array must include at least an order_id and type or it
+            // will result in an error. Individual line item types may require
+            // specific field data to be submitted as well, such as a
+            // commerce_product value for product line items. If left empty, the
+            // quantity is assumed to be 1.
+            array(
+              'name' => 'data',
+              'type' => 'array',
+              'description' => 'The line item data to set on create.',
+              'optional' => FALSE,
+              'source' => 'data',
+            ),
+            array(
+              'name' => 'flatten_fields',
+              'type' => 'string',
+              'description' => 'A string indicating whether or not field value arrays are flattened; accepts true or false.',
+              'optional' => TRUE,
+              'source' => array('param' => 'flatten_fields'),
+              'default value' => 'true',
+            ),
+          ),
+        ),
+
+        // Define the update callback for a PUT to /line-item/%commerce_line_item.
+        'update' => array(
+          'help' => 'Updates a single line item specified by its line item ID.',
+          'callback' => 'commerce_services_line_item_update',
+          'file' => array('type' => 'inc', 'module' => 'commerce_services', 'name' => 'resources/line_item'),
+          'access callback' => 'commerce_services_line_item_update_access',
+          'access arguments append' => TRUE,
+          'args' => array(
+            array(
+              'name' => 'line_item_id',
+              'type' => 'int',
+              'description' => 'The line item ID of the line item to delete.',
+              'optional' => FALSE,
+              'source' => array('path' => 0),
+            ),
+            // If the unit price amount or currency_code is updated but its data
+            // array is not updated to include the necessary price components
+            // updates, the line item unit price will be "rebased" as if the
+            // unit price amount had been updated on the order edit form. This
+            // sets a new base_price component reflecting the full amount value
+            // of the unit price. Updates to the total price field will be
+            // discarded on save.
+            array(
+              'name' => 'data',
+              'type' => 'array',
+              'description' => 'The line item data to update.',
+              'optional' => FALSE,
+              'source' => 'data',
+            ),
+            array(
+              'name' => 'flatten_fields',
+              'type' => 'string',
+              'description' => 'A string indicating whether or not field value arrays are flattened; accepts true or false.',
+              'optional' => TRUE,
+              'source' => array('param' => 'flatten_fields'),
+              'default value' => 'true',
+            ),
+          ),
+        ),
+
+        // Define the delete callback for a DELETE to /line-item/%commerce_line_item.
+        'delete' => array(
+          'help' => 'Deletes a single line item specified by its line item ID.',
+          'callback' => 'commerce_services_line_item_delete',
+          'file' => array('type' => 'inc', 'module' => 'commerce_services', 'name' => 'resources/line_item'),
+          'access callback' => 'commerce_services_line_item_delete_access',
+          'access arguments append' => TRUE,
+          'args' => array(
+            array(
+              'name' => 'line_item_id',
+              'type' => 'int',
+              'description' => 'The line item ID of the line item to delete.',
+              'optional' => FALSE,
+              'source' => array('path' => 0),
+            ),
+          ),
+        ),
+      ),
+    );
+  }
+
+  return $resources;
+}
+
+/**
+ * Implements hook_services_request_preprocess_alter().
+ *
+ * This preprocess function performs a variety of Commerce Services specific
+ * operations on resource arguments. Any argument using one of the following
+ * keys on any resource will be preprocessed:
+ *
+ * commerce_services_explode:
+ *
+ * For certain resources, we define arguments as strings that should be exploded
+ * into arrays prior to being passed to the resource callback. To indicate this,
+ * our argument definitions may include a commerce_services_explode key whose
+ * value is the delimiter this preprocess function will use to explode the value
+ * of that argument into an array.
+ *
+ * Example: the product-display resource includes an index callback definition
+ * that may accept a fields argument. This argument was defined as a string
+ * derived from the GET parameters of the API request, but prior to invoking the
+ * index callback, this preprocess function will see that the argument indicates
+ * it is a comma delimited string and explode it accordingly.
+ *
+ * commerce_services_required_fields:
+ *
+ * Additionally, when a fields argument contains a value from the API request,
+ * there may be certain fields or properties that should always be returned even
+ * if not included in the argument value. These may be indicated in argument
+ * definitions via the commerce_services_required_fields array. This preprocess
+ * function will ensure that the fields array always includes required fields.
+ *
+ * commerce_services_field_populate:
+ *
+ * As a best practice, we really try to avoid array notation in our query
+ * parameters. However, if you want a resource callback argument to be an
+ * associative array, this would typically be your only option. The primary use
+ * case in Commerce Services is to apply a filter to an index query, where you
+ * would specify a field or property name and the corresponding value that the
+ * query should be filtered by: GET /product-display?filter[status]=1
+ *
+ * To avoid this, we make the commerce_services_field_populate option available.
+ * Its value should be the entity type for the query that will be used to
+ * generate the response. During preprocessing, this function will look for any
+ * query parameter whose key matches a field or property name on the given
+ * entity type and add it directly to the argument's array. Thus, instead of the
+ * array notation demonstrated above, you could: GET /product-display?status=1
+ *
+ * The only exception to this will be field or property names that collide with
+ * actual argument names for the operation callback. Thus, if the index
+ * operation actually had an argument called status, you would have to revert to
+ * array notation to apply a filter on the status property.
+ *
+ * commerce_services_match_keys:
+ *
+ * Finally, this preprocess function also accommodates key matching between
+ * related array arguments. One argument may specify another argument whose keys
+ * should all be represented in its own value array, providing a default value
+ * to fill in for any keys that are missing.
+ *
+ * Example: the product-display resource includes an index callback definition
+ * that may accept filter and filter_op array arguments. In the event that an
+ * operator is not specified for a particular filter, it should default to a
+ * simple equality check with the '=' operator. Therefore, the filter_op
+ * argument uses the commerce_services_match_keys property to specify that its
+ * array keys should match those of the filter argument, using '=' as the
+ * default value.
+ */
+function commerce_services_services_request_preprocess_alter($controller, &$args) {
+  // Build an associative array of arguments whose keys are their names and
+  // values their numeric key in the $args array.
+  $arg_names = array();
+
+  foreach ($controller['args'] as $key => $value) {
+    $arg_names[$value['name']] = $key;
+  }
+
+  // Loop over the argument metadata in the controller looking for any that
+  // include any of our special keys.
+  foreach ($controller['args'] as $key => $value) {
+    // If this argument needs to be exploded into an array...
+    if (!empty($value['commerce_services_explode'])) {
+      // Explode the argument using the specified delimiter.
+      if (!empty($args[$key])) {
+        $args[$key] = explode($value['commerce_services_explode'], $args[$key]);
+      }
+      else {
+        // Otherwise ensure it is just converted to an array.
+        $args[$key] = array();
+      }
+    }
+
+    // If this argument is for a fields array that we want to ensure contains
+    // one or more required values...
+    if (!empty($value['commerce_services_required_fields']) && !empty($args[$key])) {
+      foreach ($value['commerce_services_required_fields'] as $required_field) {
+        if (!in_array($required_field, $args[$key])) {
+          $args[$key][] = $required_field;
+        }
+      }
+    }
+
+    // If this argument should be populated from other query parameters that
+    // don't match other arguments on the operation...
+    if (!empty($value['commerce_services_field_populate'])) {
+      // Loop over the query parameters.
+      foreach ($_GET as $param_key => $param_value) {
+        // Continue if this is either the 'q' parameter or the name of an
+        // argument for the operation callback.
+        if ($param_key === 'q' || in_array($param_key, array_keys($arg_names), TRUE)) {
+          continue;
+        }
+
+        // If this parameter key is a property for the specified entity type,
+        // add it to the argument's value array now.
+        if (in_array($param_key, array_keys(commerce_services_entity_type_properties($value['commerce_services_field_populate'])), TRUE)) {
+          $args[$key][$param_key] = $param_value;
+        }
+        else {
+          // Otherwise look and see if the parameter key begins with a field
+          // name, assuming it must be either a field name or field column name.
+          foreach (array_keys(commerce_services_entity_type_fields($value['commerce_services_field_populate'])) as $field_name) {
+            if (strpos($param_key, $field_name) === 0) {
+              $field_info = field_info_field($field_name);
+
+              // If it is the field name and the field type has a single column
+              // schema, add it to the argument's value array now.
+              if ($field_name == $param_key && count($field_info['columns']) == 1) {
+                $args[$key][$param_key] = $param_value;
+                break;
+              }
+              else {
+                // Otherwise if the parameter key contains a valid column
+                // specification for the field type, add it to the argument's
+                // value array as well.
+                $column = substr($param_key, strlen($field_name) + 1);
+
+                if (in_array($column, array_keys($field_info['columns']))) {
+                  $args[$key][$param_key] = $param_value;
+                  break;
+                }
+              }
+            }
+          }
+        }
+      }
+    }
+
+    // If this argument is an associative array that needs keys matching some
+    // other array argument...
+    if (!empty($value['commerce_services_match_keys'])) {
+      $matching_arg_key = $arg_names[$value['commerce_services_match_keys']['arg']];
+
+      if (!empty($args[$matching_arg_key])) {
+        // Loop over the argument value that this argument's keys should match.
+        foreach ($args[$matching_arg_key] as $arg_key => $arg_value) {
+          if (empty($args[$key][$arg_key])) {
+            $args[$key][$arg_key] = $value['commerce_services_match_keys']['default value'];
+          }
+        }
+      }
+    }
+  }
+}
+
+/**
+ * Unsets properties from a stdClass object so that only those desired remain.
+ *
+ * @param $object
+ *   A stdClass object typically representing an entity.
+ * @param $fields
+ *   An array of field or property names to leave on the object. All others will
+ *   be unset.
+ */
+function commerce_services_object_filter($object, $fields) {
+  foreach ((array) $object as $key => $value) {
+    if (!in_array($key, $fields)) {
+      unset($object->$key);
+    }
+  }
+}
+
+/**
+ * Returns a list of properties for the specified entity type.
+ *
+ * For the purpose of the Commerce Services module, the properties returned are
+ * those that correspond to a database column as determined by the Entity API.
+ * These may be used to filter and sort index queries.
+ *
+ * @param $entity_type
+ *   Machine-name of the entity type whose properties should be returned.
+ *
+ * @return
+ *   An associative array of properties for the specified entity type with the
+ *   key being the property name and the value being the corresponding schema
+ *   field on the entity type's base table.
+ */
+function commerce_services_entity_type_properties($entity_type) {
+  $properties = drupal_static(__FUNCTION__);
+
+  if (!isset($properties[$entity_type])) {
+    $entity_info = entity_get_info($entity_type);
+    $info = entity_get_property_info($entity_type);
+    $properties[$entity_type] = array();
+
+    // Loop over only the properties of the entity type.
+    foreach ($info['properties'] as $key => $value) {
+      // If the value specifies a schema field...
+      if (!empty($value['schema field'])) {
+        $properties[$entity_type][$key] = $value['schema field'];
+      }
+    }
+
+    // If the entity type supports revisions, add revision and log to the array
+    // of acceptable properties.
+    if (!empty($entity_info['revision table'])) {
+      $properties[$entity_type] += array('revision', 'log');
+    }
+  }
+
+  return $properties[$entity_type];
+}
+
+/**
+ * Returns a list of fields for the specified entity type.
+ *
+ * @param $entity_type
+ *   Machine-name of the entity type whose properties should be returned.
+ * @param $bundle
+ *   Optional bundle name to limit the returned fields to.
+ *
+ * @return
+ *   An associative array of fields for the specified entity type with the key
+ *   being the field name and the value being the Entity API property type.
+ */
+function commerce_services_entity_type_fields($entity_type, $bundle = NULL) {
+  $fields = drupal_static(__FUNCTION__);
+
+  if (!isset($fields[$entity_type])) {
+    $info = entity_get_property_info($entity_type);
+    $fields = array();
+
+    // Loop over the bundles info to inspect their fields.
+    foreach ($info['bundles'] as $bundle_name => $bundle_info) {
+      // Loop over the properties on the bundle to find field information.
+      foreach ($bundle_info['properties'] as $key => $value) {
+        if (!empty($value['field'])) {
+          $fields[$entity_type][$bundle_name][$key] = $value['type'];
+        }
+      }
+    }
+  }
+
+  // If a specific bundle's fields was requested, return just those.
+  if (!empty($bundle)) {
+    return $fields[$entity_type][$bundle];
+  }
+  else {
+    // Otherwise combine all the fields for various bundles of the entity type
+    // into a single return value.
+    $combined_fields = array();
+
+    foreach ($fields[$entity_type] as $bundle_name => $bundle_fields) {
+      $combined_fields += $bundle_fields;
+    }
+
+    return $combined_fields;
+  }
+}
+
+/**
+ * Validates a value to be assigned to a property on an entity.
+ *
+ * @param $entity_type
+ *   The type of entity requiring validation.
+ * @param $entity
+ *   The actual entity.
+ * @param $property
+ *   The name of the property.
+ * @param $value
+ *   The value to be validated for the property.
+ *
+ * @return
+ *   Boolean indicating whether or not the given value is valid for the
+ *   specified property; TRUE if validity simply cannot be determined.
+ */
+function commerce_services_validate_property_value($entity_type, $entity, $property, $value) {
+  // Do not allow array values to be set to properties.
+  if (is_array($value)) {
+    return FALSE;
+  }
+
+  $properties = entity_get_property_info($entity_type);
+
+  $wrapper = entity_metadata_wrapper($entity_type, $entity);
+
+  // If the property has an options list callback...
+  if (!empty($wrapper->{$property}) && $options = $wrapper->{$property}->optionsList('edit')) {
+    // Ensure the proposed value is an available option, supporting single depth
+    // options arrays and arrays that use options groups.
+    $match = FALSE;
+
+    foreach ($options as $option_key => $option_value) {
+      if (is_array($option_value)) {
+        if (in_array($value, array_keys($option_value))) {
+          $match = TRUE;
+          break;
+        }
+      }
+      elseif ($option_key == $value) {
+        $match = TRUE;
+        break;
+      }
+    }
+
+    if (!$match) {
+      return FALSE;
+    }
+  }
+
+  // If the property is an integer or a date, ensure an integer was given.
+  if (!empty($properties['properties'][$property]) &&
+    in_array($properties['properties'][$property]['type'], array('integer', 'date')) &&
+    !is_int($value)) {
+    return FALSE;
+  }
+
+  return TRUE;
+}
+
+/**
+ * Validates a value to be assigned to a field on an entity.
+ *
+ * @param $entity_type
+ *   The type of entity requiring validation.
+ * @param $entity
+ *   The actual entity.
+ * @param $field_name
+ *   The name of the field.
+ * @param $value
+ *   The value to be validated for the field.
+ *
+ * @return
+ *   Boolean indicating whether or not the given value is valid for the
+ *   specified field; TRUE if validity simply cannot be determined.
+ */
+function commerce_services_validate_field_value($entity_type, $entity, $field_name, $value) {
+  $field_info = field_info_field($field_name);
+
+  // Do not allow array values to be set to single column fields.
+  if (is_array($value) && count($field_info['columns']) == 1) {
+    return FALSE;
+  }
+
+  // Convert $value to an array to simplify further validation.
+  if (!is_array($value)) {
+    $value = array($value);
+  }
+
+  $wrapper = entity_metadata_wrapper($entity_type, $entity);
+
+  // If the field has an options list callback...
+  if ($options = $wrapper->{$field_name}->optionsList('edit')) {
+    // Ensure each proposed value is an available option.
+    foreach ($value as $field_value) {
+      if (!in_array($field_value, array_keys($options))) {
+        return FALSE;
+      }
+    }
+  }
+
+  return TRUE;
+}
+
+/**
+ * Updates the field value array on the given entity.
+ *
+ * @param $entity_type
+ *   The type of entity being updated.
+ * @param $entity
+ *   The actual entity.
+ * @param $field_info
+ *   The field info array for the field being updated.
+ * @param $value
+ *   The single or multi-value field value array to update the field to either
+ *   through a wrapper or the given language.
+ * @param $langcode
+ *   The language to set the field value to if given.
+ */
+function commerce_services_update_field_value($entity_type, $entity, $field_info, $value, $langcode = NULL, $delta = NULL) {
+  $field_name = $field_info['field_name'];
+
+  // If the value given is an array...
+  if (is_array($value)) {
+    // Ensure the keys given for the value array all match columns in the field
+    // type's schema.
+    if (count(array_diff_key($value, $field_info['columns'])) > 0) {
+      return services_error(t('Invalid @field value given', array('@field' => $field_name)), 400);
+    }
+  }
+  elseif (count($field_info['columns']) == 1) {
+    // Otherwise, if a scalar was given for a single column field, rewrite the
+    // value to be an array keyed by the column name.
+    $value = array(key($field_info['columns']) => $value);
+  }
+  else {
+    // Return an error if an array was given for a single column field instead
+    // of a scalar.
+    return services_error(t('Invalid @field value given', array('@field' => $field_name)), 400);
+  }
+
+  // Default to the entity language if $langcode is not set.
+  if ($langcode === NULL) {
+    $langcode = entity_language($entity_type, $entity);
+
+    if (empty($langcode)) {
+      $langcode = LANGUAGE_NONE;
+    }
+  }
+
+  // Return an error if a delta value over 0 is given for a single value field.
+  if ($field_info['cardinality'] == 1 && !empty($delta)) {
+    return services_error(t('Invalid delta value @delta given for single-value field @field', array('@delta' => $delta, '@field' => $field_name)), 400);
+  }
+  elseif ($field_info['cardinality'] != 1 && $delta === NULL) {
+    // Return an error if a delta value was not specified for a multi-value field.
+    return services_error(t('Delta value required for multi-value field @field', array('@field' => $field_name)), 400);
+  }
+
+  // If updating a single value field, ensure the delta value matches the
+  // current single delta value. There may be instances where for some reason it
+  // was not zero, so we ensure this is the case by changing the delta key of
+  // the field value array.
+  if ($field_info['cardinality'] == 1) {
+    $current_delta = key($entity->{$field_name}[$langcode]);
+
+    if ($current_delta != 0) {
+      $entity->{$field_name}[$langcode][0] = $entity->{$field_name}[$langcode][$current_delta];
+      unset($entity->{$field_name}[$langcode][$current_delta]);
+    }
+
+    // Also, ensure the $delta value is changed from NULL to 0 if necessary.
+    $delta = 0;
+  }
+
+  // Update only the columns that were specified in the update request.
+  // @todo Add individual column validation.
+  foreach ($value as $column => $column_value) {
+    $entity->{$field_name}[$langcode][$delta][$column] = $column_value;
+  }
+}
+
+/**
+ * Builds and processes an index query for an entity type's collection resource.
+ *
+ * @param $entity_type
+ *   The machine-name of the entity type the query should be built for.
+ * @param $fields
+ *   An array of field and property names to include in the returned entity
+ *   data. If empty, entities will be returned as loaded.
+ * @param $expand_entities
+ *   An integer depth to which entity reference field values should be expanded
+ *   into full entities in a corresponding property on returned entities;
+ *   defaults to 1.
+ * @param $flatten_fields
+ *   A string indicating whether or not field value arrays should be flattened;
+ *   accepts true or false, defaults to true.
+ * @param $filter
+ *   An associative array of property names, single column field names, or
+ *   multi-column field column names with their values to use to filter the
+ *   result set of the index request.
+ * @param $filter_op
+ *   An associative array of field and property names with the operators to use
+ *   when applying their filter conditions to the index request query.
+ * @param $sort_by
+ *   An array of database fields to sort the query by, with sort fields being
+ *   valid properties, single column field names, or multi-column field column
+ *   names for the matching entity type.
+ * @param $sort_order
+ *   The corresponding sort orders for the fields specified in the $sort_by
+ *   array; one of either 'DESC' or 'ASC'.
+ * @param $limit
+ *   The number of entities to retrieve.
+ * @param $offset
+ *   The zero-based index from which to start retrieving entities.
+ *
+ * @return
+ *   An array of entities satisfying the query conditions and processed as
+ *   specified to include additional read-only properties or flattened field
+ *   value arrays.
+ */
+function commerce_services_index_entities($entity_type, $fields, $expand_entities, $flatten_fields, $filter, $filter_op, $sort_by, $sort_order, $limit, $offset) {
+  $entity_info = entity_get_info($entity_type);
+
+  // Build a query to load all accessible entities.
+  $query = new EntityFieldQuery();
+  $query
+    ->entityCondition('entity_type', $entity_type)
+    ->range($offset, $limit);
+
+  // Add the access query tag if specified for the entity type.
+  if (!empty($entity_info['access arguments']['access tag'])) {
+    $query->addTag($entity_info['access arguments']['access tag']);
+  }
+
+  // Add the specified property and field condtions to the query.
+  commerce_services_index_query_filter($query, $entity_type, $filter, $filter_op);
+
+  // Add the specified sort conditions to the query.
+  commerce_services_index_query_sort($query, $entity_type, $sort_by, $sort_order);
+
+  // Execute the query and load the entities it returns if any.
+  $result = $query->execute();
+  $entities = array();
+
+  if (!empty($result[$entity_type])) {
+    $entities = entity_load($entity_type, array_keys($result[$entity_type]));
+
+    foreach ($entities as $entity_id => &$entity) {
+      // Add simplified fields to the entity object for certain field types.
+      commerce_services_decorate_entity($entity_type, $entity);
+
+      // Expand referenced entities into the full entity to the specified depth.
+      if ($expand_entities > 0) {
+        commerce_services_expand_entities($entity_type, $entity, $expand_entities, $flatten_fields == 'true');
+      }
+
+      // Flatten field value arrays if specified. This must be the last operation
+      // performed as it breaks the standard field data model. An entity whose
+      // fields have thus been flattened is no longer wrappable or writable.
+      if ($flatten_fields == 'true') {
+        $entity = clone($entity);
+        commerce_services_flatten_fields($entity_type, $entity);
+      }
+
+      // Filter out the properties based on the field list if given.
+      if (!empty($fields)) {
+        commerce_services_object_filter($entity, $fields);
+      }
+    }
+  }
+
+  return $entities;
+}
+
+/**
+ * Adds property and field conditions to an index EntityFieldQuery.
+ *
+ * @param $query
+ *   The EntityFieldQuery object being built for the index query.
+ * @param $entity_type
+ *   Machine-name of the entity type of the index query.
+ * @param $filter
+ *   An associative array of property names, single column field names, or
+ *   multi-column field column names with their values to use to filter the
+ *   result set of the index request.
+ * @param $filter_op
+ *   An associative array of field and property names with the operators to use
+ *   when applying their filter conditions to the index request query.
+ */
+function commerce_services_index_query_filter($query, $entity_type, $filter, $filter_op) {
+  // Loop over each filter field to add them as property or field conditions on
+  // the query object. This function assumes the $filter and $filter_op arrays
+  // contain matching keys to set the correct operator to the filter fields.
+  foreach ($filter as $filter_field => $filter_value) {
+    // Determine the corresponding operator for this filter field, defaulting to
+    // = in case of an erroneous request.
+    $operator = '=';
+
+    if (!empty($filter_op[$filter_field])) {
+      $operator = $filter_op[$filter_field];
+    }
+
+    // If the current filter field is a property, use a property condition.
+    $properties = commerce_services_entity_type_properties($entity_type);
+
+    if (in_array($filter_field, array_keys($properties))) {
+      $query->propertyCondition($properties[$filter_field], $filter_value, $operator);
+    }
+    else {
+      // Look for the field name among the entity type's field list.
+      foreach (commerce_services_entity_type_fields($entity_type) as $field_name => $field_type) {
+        // If the filter field begins with a field name, then either the filter
+        // field is the field name or is a column of the field.
+        if (strpos($filter_field, $field_name) === 0) {
+          $field_info = field_info_field($field_name);
+
+          // If it is the field name and the field type has a single column
+          // schema, add the field condition to the index query.
+          if ($field_name == $filter_field && count($field_info['columns']) == 1) {
+            $column = key($field_info['columns']);
+            $query->fieldCondition($field_name, $column, $filter_value, $operator);
+            break;
+          }
+          else {
+            // Otherwise if the filter field contains a valid column specification
+            // for the field type, add the field condition to the index query.
+            $column = substr($filter_field, strlen($field_name) + 1);
+
+            if (in_array($column, array_keys($field_info['columns']))) {
+              $query->fieldCondition($field_name, $column, $filter_value, $operator);
+              break;
+            }
+          }
+        }
+      }
+    }
+  }
+}
+
+/**
+ * Adds property and field order by directions to an index EntityFieldQuery.
+ *
+ * @param $query
+ *   The EntityFieldQuery object being built for the index query.
+ * @param $entity_type
+ *   Machine-name of the entity type of the index query.
+ * @param $sort_by
+ *   An array of database fields to sort the query by, with sort fields being
+ *   valid properties, single column field names, or multi-column field column
+ *   names for the matching entity type.
+ * @param $sort_order
+ *   The corresponding sort orders for the fields specified in the $sort_by
+ *   array; one of either 'DESC' or 'ASC'.
+ */
+function commerce_services_index_query_sort($query, $entity_type, $sort_by, $sort_order) {
+  // Loop over each sort field to add them as property or field order by
+  // directions on the query object. This function assumes the $sort_by and
+  // $sort_order arrays contain an equal number of elements with keys matching
+  // the sort field to the appropriate sort order.
+  foreach ($sort_by as $sort_key => $sort_field) {
+    // Determine the corresponding sort direction for this sort field,
+    // defaulting to DESC in case of an erroneous request.
+    $direction = 'DESC';
+
+    if (!empty($sort_order[$sort_key])) {
+      $direction = strtoupper($sort_order[$sort_key]);
+    }
+
+    // If the current sort field is a property, use a property condition.
+    $properties = commerce_services_entity_type_properties($entity_type);
+
+    if (in_array($sort_field, array_keys($properties))) {
+      $query->propertyOrderBy($properties[$sort_field], $direction);
+    }
+    else {
+      // Look for the field name among the entity type's field list.
+      foreach (commerce_services_entity_type_fields($entity_type) as $field_name => $field_type) {
+        // If the sort field begins with a field name, then either the sort
+        // field is the field name or is a column of the field.
+        if (strpos($sort_field, $field_name) === 0) {
+          $field_info = field_info_field($field_name);
+
+          // If it is the field name and the field type has a single column
+          // schema, add the field condition to the index query.
+          if ($field_name == $sort_field && count($field_info['columns']) == 1) {
+            $column = key($field_info['columns']);
+            $query->fieldOrderBy($field_name, $column, $direction);
+            break;
+          }
+          else {
+            // Otherwise if the sort field contains a valid column specification
+            // for the field type, add the field condition to the index query.
+            $column = substr($sort_field, strlen($field_name) + 1);
+
+            if (in_array($column, array_keys($field_info['columns']))) {
+              $query->fieldOrderBy($field_name, $column, $direction);
+              break;
+            }
+          }
+        }
+      }
+    }
+  }
+}
+
+/**
+ * Returns a single entity.
+ *
+ * @param $entity_type
+ *   The machine-name of the type of entity to retrieve.
+ * @param $entity_id
+ *   The ID of the entity to retrieve.
+ * @param $expand_entities
+ *   An integer depth to which entity reference field values should be expanded
+ *   into full entities in a corresponding property on returned entities;
+ *   defaults to 1.
+ * @param $flatten_fields
+ *   A string indicating whether or not field value arrays should be flattened;
+ *   accepts true or false, defaults to true.
+ *
+ * @return
+ *   The requested entity processed as specified to include additional read-only
+ *   properties or flattened field value arrays or FALSE if not found.
+ */
+function commerce_services_retrieve_entity($entity_type, $entity_id, $expand_entities, $flatten_fields) {
+  $entity = entity_load_single($entity_type, $entity_id);
+
+  if (!empty($entity)) {
+    // Add simplified fields to the entity object for certain field types.
+    commerce_services_decorate_entity($entity_type, $entity);
+
+    // Expand referenced entities into the full entity to the specified depth.
+    if ($expand_entities > 0) {
+      commerce_services_expand_entities($entity_type, $entity, $expand_entities, $flatten_fields == 'true');
+    }
+
+    // Flatten field value arrays if specified. This must be the last operation
+    // performed as it breaks the standard field data model. An entity whose
+    // fields have thus been flattened is no longer wrappable.
+    if ($flatten_fields == 'true') {
+      $entity = clone($entity);
+      commerce_services_flatten_fields($entity_type, $entity);
+    }
+  }
+
+  return $entity;
+}
+
+/**
+ * Updates an entity.
+ *
+ * @param $entity_type
+ *   The machine-name of the type of entity to update.
+ * @param $entity_id
+ *   The ID of the entity to update.
+ * @param $data
+ *   The entity data to update.
+ * @param $flatten_fields
+ *   A string indicating whether or not field value arrays in the data are
+ *   flattened as in GET requests; accepts true or false, defaults to true.
+ *
+ * @return
+ *   The updated entity processed as specified to include additional read-only
+ *   properties or flattened field value arrays.
+ */
+function commerce_services_update_entity($entity_type, $entity_id, $data, $flatten_fields) {
+  // Load the entity.
+  $entity = entity_load_single($entity_type, $entity_id);
+
+  // Set field values using the data provided.
+  commerce_services_set_field_values($entity_type, $entity, $data, $flatten_fields);
+
+  // Save the updates to the entity.
+  entity_save($entity_type, $entity);
+
+  // Add simplified fields to the entity object for certain field types.
+  commerce_services_decorate_entity($entity_type, $entity);
+
+  // Flatten field value arrays if specified. This must be the last operation
+  // performed as it breaks the standard field data model. An entity whose
+  // fields have thus been flattened is no longer wrappable or writable.
+  if ($flatten_fields == 'true') {
+    $entity = clone($entity);
+    commerce_services_flatten_fields($entity_type, $entity);
+  }
+
+  return $entity;
+}
+
+/**
+ * Updates the field and property values on an entity with the data provided.
+ *
+ * @param $entity_type
+ *   The machine-name of the type of entity to update.
+ * @param $entity
+ *   The entity to update.
+ * @param $data
+ *   The entity data to update.
+ * @param $flatten_fields
+ *   A string indicating whether or not field value arrays in the data are
+ *   flattened as in GET requests; accepts true or false, defaults to true.
+ */
+function commerce_services_set_field_values($entity_type, $entity, $data, $flatten_fields) {
+  // Build an array of protected properties, preventing update requests from
+  // changing IDs and other immutable properties of the entity.
+  $entity_info = entity_get_info($entity_type);
+  $entity_keys = array_diff_key($entity_info['entity keys'], array('label' => ''));
+
+  $protected_properties = array_values($entity_keys);
+
+  // Loop over the data submitted with the request.
+  foreach ($data as $key => $value) {
+    // If the key is a property name...
+    if (in_array($key, commerce_services_entity_type_properties($entity_type))) {
+      // If it attempts to change a protected property, return the error.
+      if (in_array($key, $protected_properties) && $entity->{$key} != $value) {
+        return services_error(t('Property @property cannot be changed', array('@property' => $key)), 400);
+      }
+
+      // If valid, set it directly to the entity.
+      if (commerce_services_validate_property_value($entity_type, $entity, $key, $value)) {
+        $entity->{$key} = $value;
+
+        // If the key was a log message, ensure a new revision is triggered.
+        $entity->revision = TRUE;
+      }
+      else {
+        return services_error(t('Invalid @property value given', array('@property' => $key)), 400);
+      }
+    }
+    else {
+      // Look for the key as a field name in the entity type's field list.
+      $known_field = FALSE;
+
+      foreach (commerce_services_entity_type_fields($entity_type) as $field_name => $field_type) {
+        // If the key begins with a field name, then either the key is the field
+        // name or is a column of the field.
+        if (strpos($key, $field_name) === 0) {
+          $field_info = field_info_field($field_name);
+
+          // Because the entity metadata wrapper treats text fields differently
+          // based on whether or not they enable format selection, we also
+          // accommodate the inconsistency here. If a text field does not have
+          // text formatting enabled, we unset that column from the field schema
+          // so it can be set independently as if it were the only column in the
+          // field value.
+          if (in_array($field_info['type'], array('text', 'text_long'))) {
+            $instance_info = field_info_instance($entity_type, $field_name, $entity->type);
+
+            if (empty($instance_info['settings']['text_processing'])) {
+              unset($field_info['columns']['format']);
+            }
+          }
+
+          if ($field_name == $key) {
+            // If the update request sent fields in a flattened format...
+            if ($flatten_fields == 'true') {
+              // Update the field value without specifying a language code.
+              if ($field_info['cardinality'] == 1) {
+                commerce_services_update_field_value($entity_type, $entity, $field_info, $value);
+              }
+              else {
+                // For multi-value fields, loop over the value array and pass
+                // the delta value to the update function.
+                foreach ($value as $delta => $item) {
+                  commerce_services_update_field_value($entity_type, $entity, $field_info, $item, NULL, $delta);
+                }
+              }
+            }
+            else {
+              // Otherwise, loop over the languages given and attempt to update
+              // the field value individually for each language code. Since
+              // field values are not flattened, the value array must include a
+              // language code and delta values even for single-value fields.
+              foreach ($value as $langcode => $items) {
+                // Return an error if the $langcode is unknown or if $items is
+                // not an array.
+                if ($langcode != LANGUAGE_NONE && !in_array($langcode, array_keys(language_list()))) {
+                  return services_error(t('Unknown language @langcode in @field value', array('@langcode' => $langcode, '@field' => $field_name)), 400);
+                }
+                elseif (!is_array($items)) {
+                  return services_error(t('Invalid @field value given', array('@field' => $field_name)), 400);
+                }
+
+                foreach ($items as $delta => $item) {
+                  // If $item is empty, simply unset it at the delta value.
+                  if (empty($item)) {
+                    unset($entity->{$field_name}[$langcode][$delta]);
+                  }
+                  else {
+                    // Otherwise update the field value for the delta value.
+                    commerce_services_update_field_value($entity_type, $entity, $field_info, $item, $langcode, $delta);
+                  }
+                }
+              }
+            }
+
+            $known_field = TRUE;
+            break;
+          }
+          else {
+            // Otherwise if the key contains a valid column specification for
+            // the field type, create a value array to set the column directly.
+            $column = substr($key, strlen($field_name) + 1);
+
+            if (in_array($column, array_keys($field_info['columns']))) {
+              if ($flatten_fields == 'true') {
+                // Directly set single value fields.
+                if ($field_info['cardinality'] == 1) {
+                  commerce_services_update_field_value($entity_type, $entity, $field_info, array($column => $value));
+                }
+                else {
+                  // For multi-value fields, loop over the value array and pass
+                  // the delta value to the update function.
+                  foreach ($value as $delta => $item) {
+                    commerce_services_update_field_value($entity_type, $entity, $field_info, array($column => $item), NULL, $delta);
+                  }
+                }
+              }
+              else {
+                // If field values are not flattened, they must include both a
+                // language code and delta values even for single-value fields.
+                foreach ($value as $langcode => $items) {
+                  foreach ($items as $delta => $item) {
+                    commerce_services_update_field_value($entity_type, $entity, $field_info, array($column => $item), $langcode, $delta);
+                  }
+                }
+              }
+
+              $known_field = TRUE;
+              break;
+            }
+          }
+        }
+      }
+
+      // If no known field matched, return a 400 error.
+      if (!$known_field) {
+        return services_error(t('Unknown property @name', array('@name' => $key)), 400);
+      }
+    }
+  }
+
+  // @todo Post-process textfields by invoking text_field_load() on their values
+  // to get the updated summary and safe_value values.
+}
+
+/**
+ * Expands entity reference field values into full entities in a corresponding
+ * property on the given entity to a specified depth of child entities.
+ *
+ * @param $entity_type
+ *   The machine-name entity type of the given entity.
+ * @param $entity
+ *   The entity whose reference field values should be expanded.
+ * @param $depth
+ *   The depth to which referenced entities should be expanded; a depth of 1
+ *   means only the reference field values on the entity passed to the function
+ *   should be expanded, 2 means those and the entities they reference, etc.
+ * @param $flatten_fields
+ *   Boolean indicating whether or not field value arrays should be flattened.
+ */
+function commerce_services_expand_entities($entity_type, $entity, $depth, $flatten_fields) {
+  // Extract the bundle name.
+  list(, , $bundle) = entity_extract_ids($entity_type, $entity);
+
+  // Look for each type of Commerce reference field on the given entity.
+  foreach (array('commerce_product_reference', 'commerce_line_item_reference', 'commerce_customer_profile_reference', 'taxonomy_term_reference') as $field_type) {
+    // Look for reference field instances of each type on the entity.
+    foreach (field_info_instances($entity_type, $bundle) as $field_name => $instance) {
+      $entities_field_name = $field_name . '_entities';
+      $field_info = field_info_field($field_name);
+
+      if ($field_info['type'] == $field_type) {
+        // Extract the type of referenced entity from the property info.
+        $property_info = entity_get_property_info($entity_type);
+
+        if (!empty($property_info['bundles'][$bundle]['properties'][$field_name]['type'])) {
+          $referenced_entity_type = $property_info['bundles'][$bundle]['properties'][$field_name]['type'];
+          $entity_wrapper = entity_metadata_wrapper($entity_type, $entity);
+
+          // If the field is multi-value, extract the entity type from within
+          // the list markup and expand the whole list.
+          if (substr($referenced_entity_type, 0, 5) == 'list<') {
+            $referenced_entity_type = substr($referenced_entity_type, 5, strlen($referenced_entity_type) - 6);
+
+            foreach ($entity_wrapper->{$field_name} as $delta => $referenced_entity_wrapper) {
+              // Extract the entity from the wrapper.
+              $referenced_entity_id = $referenced_entity_wrapper->raw();
+
+              if (!empty($referenced_entity_id)) {
+                $referenced_entity = clone($referenced_entity_wrapper->value());
+
+                // Decorate the entity.
+                commerce_services_decorate_entity($referenced_entity_type, $referenced_entity);
+
+                // If our entity traversal depth has not reduced to 1, then we
+                // need to recurse to expand any entity reference fields present
+                // on the referenced entity.
+                if ($depth > 1) {
+                  commerce_services_expand_entities($referenced_entity_type, $referenced_entity, $depth - 1, $flatten_fields);
+                }
+
+                // Flatten field value arrays on the referenced entity if directed.
+                if ($flatten_fields) {
+                  commerce_services_flatten_fields($referenced_entity_type, $referenced_entity);
+                }
+
+                // And finally set the referenced entity to be the new value at
+                // the current delta in the reference field value array.
+                $entity->{$entities_field_name}[$referenced_entity_id] = $referenced_entity;
+              }
+            }
+          }
+          else {
+            // Extract the entity and its ID from the wrapper.
+            $referenced_entity_id = $entity_wrapper->{$field_name}->raw();
+
+            if (!empty($referenced_entity_id)) {
+              $referenced_entity = clone($entity_wrapper->{$field_name}->value());
+
+              // Decorate the entity.
+              commerce_services_decorate_entity($referenced_entity_type, $referenced_entity);
+
+              // If our entity traversal depth has not reduced to 1, then we
+              // need to recurse to expand any entity reference fields present
+              // on the referenced entity.
+              if ($depth > 1) {
+                commerce_services_expand_entities($referenced_entity_type, $referenced_entity, $depth - 1, $flatten_fields);
+              }
+
+              // Flatten field value arrays on the referenced entity if directed.
+              if ($flatten_fields) {
+                commerce_services_flatten_fields($referenced_entity_type, $referenced_entity);
+              }
+
+              // And finally set the referenced entity to be the new value at the
+              // current delta in the reference field value array.
+              $entity->{$entities_field_name}[$referenced_entity_id] = $referenced_entity;
+            }
+          }
+        }
+      }
+    }
+  }
+}
+
+/**
+ * Flattens field value arrays on the given entity.
+ *
+ * Field flattening in Commerce Services involves reducing their value arrays to
+ * just the current language of the entity and reducing fields with single
+ * column schemas to simple scalar values or arrays of scalar values.
+ *
+ * Note that because this function irreparably alters an entity's structure, it
+ * should only be called using a clone of the entity whose field value arrays
+ * should be flattened. Otherwise the flattening will affect the entity as
+ * stored in the entity cache, causing potential errors should that entity be
+ * loaded and manipulated later in the same request.
+ *
+ * @param $entity_type
+ *   The machine-name entity type of the given entity.
+ * @param $cloned_entity
+ *   A clone of the entity whose field value arrays should be flattened.
+ */
+function commerce_services_flatten_fields($entity_type, $cloned_entity) {
+  list(, , $bundle) = entity_extract_ids($entity_type, $cloned_entity);
+  $clone_wrapper = entity_metadata_wrapper($entity_type, $cloned_entity);
+
+  // Loop over every field instance on the given entity.
+  foreach (field_info_instances($entity_type, $bundle) as $field_name => $instance) {
+    // Set the field property to the raw wrapper value, which applies the
+    // desired flattening of the value array.
+    $cloned_entity->{$field_name} = $clone_wrapper->{$field_name}->raw();
+  }
+}
+
+/**
+ * Decorate the given entity with additional helper properties based on its type.
+ *
+ * Product entities will be given an attribute_fields property whose value is an
+ * array of product attribute fields on the product.
+ *
+ * Any instance of a price field will be given a corresponding property named
+ * [field_name]_formatted whose value is the currency formatted price.
+ *
+ * Any instance of a file or image field will be given a corresponding property
+ * named [field_name]_url whose value is the URL to the file or image.
+ *
+ * @param $entity_type
+ *   The machine-name entity type of the given entity.
+ * @param $entity
+ *   The entity whose field value arrays should be flattened.
+ */
+function commerce_services_decorate_entity($entity_type, $entity) {
+  list(, , $bundle) = entity_extract_ids($entity_type, $entity);
+
+  // If the entity is a line item, add its title to it.
+  if ($entity_type == 'commerce_line_item') {
+    $entity->line_item_title = commerce_line_item_title($entity);
+  }
+
+  // If the entity is a product, add a list of its attribute fields to it.
+  if ($entity_type == 'commerce_product') {
+    $entity->attribute_fields = array();
+  }
+
+  // Loop over every field instance on the given entity.
+  foreach (field_info_instances($entity_type, $bundle) as $field_name => $instance) {
+    $field_info = field_info_field($field_name);
+
+    // If the current field instance functions as a product attribute field, add
+    // it to the array.
+    if (module_exists('commerce_cart')) {
+      if (commerce_cart_field_attribute_eligible($field_info) && commerce_cart_field_instance_is_attribute($instance)) {
+        $entity->attribute_fields[] = $field_name;
+      }
+    }
+
+    // Add formatted price fields to correspond with every price field instance.
+    if ($field_info['type'] == 'commerce_price') {
+      $entity_wrapper = entity_metadata_wrapper($entity_type, $entity);
+      $formatted_field_name = $field_name . '_formatted';
+
+      // Set the formatted price for a single value field.
+      if ($field_info['cardinality'] == 1) {
+        $entity->{$formatted_field_name} = commerce_currency_format($entity_wrapper->{$field_name}->amount->value(), $entity_wrapper->{$field_name}->currency_code->value(), $entity);
+      }
+      else {
+        // Otherwise loop over the field and format each value.
+        foreach ($entity_wrapper->{$field_name} as $delta => $price_wrapper) {
+          $entity->{$formatted_field_name}[$delta] = commerce_currency_format($price_wrapper->amount->value(), $price_wrapper->currency_code->value(), $entity);
+        }
+      }
+    }
+
+    // Add a direct URL to correspond with every file field instance.
+    if (in_array($field_info['type'], array('file', 'image'))) {
+      $entity_wrapper =  entity_metadata_wrapper($entity_type, $entity);
+      $url_field_name = $field_name . '_url';
+
+      // Set the formatted price for a single value field.
+      if ($field_info['cardinality'] == 1) {
+        $field_value = $entity_wrapper->{$field_name}->raw();
+        $entity->{$url_field_name} = '';
+        $url = NULL;
+
+        // If the field value contains a URI...
+        if (!empty($field_value['uri'])) {
+          // And we can generate a URL to the file at that URI...
+          $url = file_create_url($field_value['uri']);
+
+          if (!empty($url)) {
+            // Add it to the entity using the URL field name.
+            $entity->{$url_field_name} = $url;
+          }
+        }
+      }
+      else {
+        // Otherwise loop over the field and generate each URL.
+        $entity->{$url_field_name} = array();
+
+        foreach ($entity_wrapper->{$field_name} as $delta => $field_wrapper) {
+          $field_value = $field_wrapper->raw();
+          $url = NULL;
+
+          // If the field value contains a URI...
+          if (!empty($field_value['uri'])) {
+            // And we can generate a URL to the file at that URI...
+            $url = file_create_url($field_value['uri']);
+
+            if (!empty($url)) {
+              // Add it to the entity using the URL field name.
+              $entity->{$url_field_name}[$delta] = $url;
+            }
+          }
+
+          // If the field value did not have a URI or the URL to the file could not
+          // be determined, add an empty URL string to the entity.
+          if (empty($url)) {
+            $entity->{$url_field_name}[$delta] = '';
+          }
+        }
+      }
+    }
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_services/LICENSE.txt drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_services/LICENSE.txt
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_services/LICENSE.txt	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_services/LICENSE.txt	2014-04-16 14:25:46.000000000 +0200
@@ -0,0 +1,339 @@
+                    GNU GENERAL PUBLIC LICENSE
+                       Version 2, June 1991
+
+ Copyright (C) 1989, 1991 Free Software Foundation, Inc.,
+ 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+                            Preamble
+
+  The licenses for most software are designed to take away your
+freedom to share and change it.  By contrast, the GNU General Public
+License is intended to guarantee your freedom to share and change free
+software--to make sure the software is free for all its users.  This
+General Public License applies to most of the Free Software
+Foundation's software and to any other program whose authors commit to
+using it.  (Some other Free Software Foundation software is covered by
+the GNU Lesser General Public License instead.)  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+this service if you wish), that you receive source code or can get it
+if you want it, that you can change the software or use pieces of it
+in new free programs; and that you know you can do these things.
+
+  To protect your rights, we need to make restrictions that forbid
+anyone to deny you these rights or to ask you to surrender the rights.
+These restrictions translate to certain responsibilities for you if you
+distribute copies of the software, or if you modify it.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must give the recipients all the rights that
+you have.  You must make sure that they, too, receive or can get the
+source code.  And you must show them these terms so they know their
+rights.
+
+  We protect your rights with two steps: (1) copyright the software, and
+(2) offer you this license which gives you legal permission to copy,
+distribute and/or modify the software.
+
+  Also, for each author's protection and ours, we want to make certain
+that everyone understands that there is no warranty for this free
+software.  If the software is modified by someone else and passed on, we
+want its recipients to know that what they have is not the original, so
+that any problems introduced by others will not reflect on the original
+authors' reputations.
+
+  Finally, any free program is threatened constantly by software
+patents.  We wish to avoid the danger that redistributors of a free
+program will individually obtain patent licenses, in effect making the
+program proprietary.  To prevent this, we have made it clear that any
+patent must be licensed for everyone's free use or not licensed at all.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+                    GNU GENERAL PUBLIC LICENSE
+   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
+
+  0. This License applies to any program or other work which contains
+a notice placed by the copyright holder saying it may be distributed
+under the terms of this General Public License.  The "Program", below,
+refers to any such program or work, and a "work based on the Program"
+means either the Program or any derivative work under copyright law:
+that is to say, a work containing the Program or a portion of it,
+either verbatim or with modifications and/or translated into another
+language.  (Hereinafter, translation is included without limitation in
+the term "modification".)  Each licensee is addressed as "you".
+
+Activities other than copying, distribution and modification are not
+covered by this License; they are outside its scope.  The act of
+running the Program is not restricted, and the output from the Program
+is covered only if its contents constitute a work based on the
+Program (independent of having been made by running the Program).
+Whether that is true depends on what the Program does.
+
+  1. You may copy and distribute verbatim copies of the Program's
+source code as you receive it, in any medium, provided that you
+conspicuously and appropriately publish on each copy an appropriate
+copyright notice and disclaimer of warranty; keep intact all the
+notices that refer to this License and to the absence of any warranty;
+and give any other recipients of the Program a copy of this License
+along with the Program.
+
+You may charge a fee for the physical act of transferring a copy, and
+you may at your option offer warranty protection in exchange for a fee.
+
+  2. You may modify your copy or copies of the Program or any portion
+of it, thus forming a work based on the Program, and copy and
+distribute such modifications or work under the terms of Section 1
+above, provided that you also meet all of these conditions:
+
+    a) You must cause the modified files to carry prominent notices
+    stating that you changed the files and the date of any change.
+
+    b) You must cause any work that you distribute or publish, that in
+    whole or in part contains or is derived from the Program or any
+    part thereof, to be licensed as a whole at no charge to all third
+    parties under the terms of this License.
+
+    c) If the modified program normally reads commands interactively
+    when run, you must cause it, when started running for such
+    interactive use in the most ordinary way, to print or display an
+    announcement including an appropriate copyright notice and a
+    notice that there is no warranty (or else, saying that you provide
+    a warranty) and that users may redistribute the program under
+    these conditions, and telling the user how to view a copy of this
+    License.  (Exception: if the Program itself is interactive but
+    does not normally print such an announcement, your work based on
+    the Program is not required to print an announcement.)
+
+These requirements apply to the modified work as a whole.  If
+identifiable sections of that work are not derived from the Program,
+and can be reasonably considered independent and separate works in
+themselves, then this License, and its terms, do not apply to those
+sections when you distribute them as separate works.  But when you
+distribute the same sections as part of a whole which is a work based
+on the Program, the distribution of the whole must be on the terms of
+this License, whose permissions for other licensees extend to the
+entire whole, and thus to each and every part regardless of who wrote it.
+
+Thus, it is not the intent of this section to claim rights or contest
+your rights to work written entirely by you; rather, the intent is to
+exercise the right to control the distribution of derivative or
+collective works based on the Program.
+
+In addition, mere aggregation of another work not based on the Program
+with the Program (or with a work based on the Program) on a volume of
+a storage or distribution medium does not bring the other work under
+the scope of this License.
+
+  3. You may copy and distribute the Program (or a work based on it,
+under Section 2) in object code or executable form under the terms of
+Sections 1 and 2 above provided that you also do one of the following:
+
+    a) Accompany it with the complete corresponding machine-readable
+    source code, which must be distributed under the terms of Sections
+    1 and 2 above on a medium customarily used for software interchange; or,
+
+    b) Accompany it with a written offer, valid for at least three
+    years, to give any third party, for a charge no more than your
+    cost of physically performing source distribution, a complete
+    machine-readable copy of the corresponding source code, to be
+    distributed under the terms of Sections 1 and 2 above on a medium
+    customarily used for software interchange; or,
+
+    c) Accompany it with the information you received as to the offer
+    to distribute corresponding source code.  (This alternative is
+    allowed only for noncommercial distribution and only if you
+    received the program in object code or executable form with such
+    an offer, in accord with Subsection b above.)
+
+The source code for a work means the preferred form of the work for
+making modifications to it.  For an executable work, complete source
+code means all the source code for all modules it contains, plus any
+associated interface definition files, plus the scripts used to
+control compilation and installation of the executable.  However, as a
+special exception, the source code distributed need not include
+anything that is normally distributed (in either source or binary
+form) with the major components (compiler, kernel, and so on) of the
+operating system on which the executable runs, unless that component
+itself accompanies the executable.
+
+If distribution of executable or object code is made by offering
+access to copy from a designated place, then offering equivalent
+access to copy the source code from the same place counts as
+distribution of the source code, even though third parties are not
+compelled to copy the source along with the object code.
+
+  4. You may not copy, modify, sublicense, or distribute the Program
+except as expressly provided under this License.  Any attempt
+otherwise to copy, modify, sublicense or distribute the Program is
+void, and will automatically terminate your rights under this License.
+However, parties who have received copies, or rights, from you under
+this License will not have their licenses terminated so long as such
+parties remain in full compliance.
+
+  5. You are not required to accept this License, since you have not
+signed it.  However, nothing else grants you permission to modify or
+distribute the Program or its derivative works.  These actions are
+prohibited by law if you do not accept this License.  Therefore, by
+modifying or distributing the Program (or any work based on the
+Program), you indicate your acceptance of this License to do so, and
+all its terms and conditions for copying, distributing or modifying
+the Program or works based on it.
+
+  6. Each time you redistribute the Program (or any work based on the
+Program), the recipient automatically receives a license from the
+original licensor to copy, distribute or modify the Program subject to
+these terms and conditions.  You may not impose any further
+restrictions on the recipients' exercise of the rights granted herein.
+You are not responsible for enforcing compliance by third parties to
+this License.
+
+  7. If, as a consequence of a court judgment or allegation of patent
+infringement or for any other reason (not limited to patent issues),
+conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot
+distribute so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you
+may not distribute the Program at all.  For example, if a patent
+license would not permit royalty-free redistribution of the Program by
+all those who receive copies directly or indirectly through you, then
+the only way you could satisfy both it and this License would be to
+refrain entirely from distribution of the Program.
+
+If any portion of this section is held invalid or unenforceable under
+any particular circumstance, the balance of the section is intended to
+apply and the section as a whole is intended to apply in other
+circumstances.
+
+It is not the purpose of this section to induce you to infringe any
+patents or other property right claims or to contest validity of any
+such claims; this section has the sole purpose of protecting the
+integrity of the free software distribution system, which is
+implemented by public license practices.  Many people have made
+generous contributions to the wide range of software distributed
+through that system in reliance on consistent application of that
+system; it is up to the author/donor to decide if he or she is willing
+to distribute software through any other system and a licensee cannot
+impose that choice.
+
+This section is intended to make thoroughly clear what is believed to
+be a consequence of the rest of this License.
+
+  8. If the distribution and/or use of the Program is restricted in
+certain countries either by patents or by copyrighted interfaces, the
+original copyright holder who places the Program under this License
+may add an explicit geographical distribution limitation excluding
+those countries, so that distribution is permitted only in or among
+countries not thus excluded.  In such case, this License incorporates
+the limitation as if written in the body of this License.
+
+  9. The Free Software Foundation may publish revised and/or new versions
+of the General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+Each version is given a distinguishing version number.  If the Program
+specifies a version number of this License which applies to it and "any
+later version", you have the option of following the terms and conditions
+either of that version or of any later version published by the Free
+Software Foundation.  If the Program does not specify a version number of
+this License, you may choose any version ever published by the Free Software
+Foundation.
+
+  10. If you wish to incorporate parts of the Program into other free
+programs whose distribution conditions are different, write to the author
+to ask for permission.  For software which is copyrighted by the Free
+Software Foundation, write to the Free Software Foundation; we sometimes
+make exceptions for this.  Our decision will be guided by the two goals
+of preserving the free status of all derivatives of our free software and
+of promoting the sharing and reuse of software generally.
+
+                            NO WARRANTY
+
+  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
+FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
+OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
+PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
+OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
+TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
+PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
+REPAIR OR CORRECTION.
+
+  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
+REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
+INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
+OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
+TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
+YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
+PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
+POSSIBILITY OF SUCH DAMAGES.
+
+                     END OF TERMS AND CONDITIONS
+
+            How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+convey the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    <one line to give the program's name and a brief idea of what it does.>
+    Copyright (C) <year>  <name of author>
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License along
+    with this program; if not, write to the Free Software Foundation, Inc.,
+    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+
+Also add information on how to contact you by electronic and paper mail.
+
+If the program is interactive, make it output a short notice like this
+when it starts in an interactive mode:
+
+    Gnomovision version 69, Copyright (C) year name of author
+    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, the commands you use may
+be called something other than `show w' and `show c'; they could even be
+mouse-clicks or menu items--whatever suits your program.
+
+You should also get your employer (if you work as a programmer) or your
+school, if any, to sign a "copyright disclaimer" for the program, if
+necessary.  Here is a sample; alter the names:
+
+  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
+  `Gnomovision' (which makes passes at compilers) written by James Hacker.
+
+  <signature of Ty Coon>, 1 April 1989
+  Ty Coon, President of Vice
+
+This General Public License does not permit incorporating your program into
+proprietary programs.  If your program is a subroutine library, you may
+consider it more useful to permit linking proprietary applications with the
+library.  If this is what you want to do, use the GNU Lesser General
+Public License instead of this License.
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_services/README.txt drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_services/README.txt
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_services/README.txt	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_services/README.txt	2014-04-16 14:25:46.000000000 +0200
@@ -0,0 +1,37 @@
+Commerce Services resources (1.x)
+
+Commerce Services defines Services module resources for Drupal Commerce entities
+and systems, allowing any site to expose an API for displaying and manipulating
+its eCommerce data remotely.
+
+This module does not currently provide a comprehensive set of resources, because
+the goal is to target "high priority" resources that are most likely to be used
+in remote applications, like master / slave sites and mobile applications.
+
+The following grid indicates what callbacks have been defined so far out of the
+current target set of resources:
+
+Resource         | Index | Retrieve | Create | Update | Delete
+-----------------|-------|----------|--------|--------|--------
+product-displays |   Y   |    Y     |   -    |   -    |   -
+products         |   N   |    N     |   -    |   -    |   -
+carts            |   N   |    -     |   -    |   -    |   -
+orders           |   N   |    N     |   N    |   N    |   N
+
+The additional relationships and targeted actions are slated for development:
+
+product-displays: products
+products: add to cart
+carts: empty, convert
+orders: payments
+
+The orders resource will be a combined resource that is able to perform CRUD
+operations on not just the order but also the entities an order may reference,
+including customer profiles and line items.
+
+For help understanding how REST APIs work, you might refer to:
+
+- http://offers.apigee.com/api-design-ebook-rr/
+- http://drupal.org/node/783254
+- http://www.xfront.com/REST-Web-Services.html
+- http://blog.steveklabnik.com/posts/2011-07-03-nobody-understands-rest-or-http
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_services/resources/cart.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_services/resources/cart.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_services/resources/cart.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_services/resources/cart.inc	2014-04-16 14:25:46.000000000 +0200
@@ -0,0 +1,101 @@
+<?php
+
+/**
+ * @file
+ * Contains the resource callbacks for cart orders.
+ */
+
+
+/**
+ * Returns a collection of cart orders for the current user.
+ *
+ * @see commerce_services_index_entities()
+ */
+function commerce_services_cart_index($fields, $expand_entities, $flatten_fields, $filter, $filter_op, $sort_by, $sort_order, $limit, $offset) {
+  global $user;
+
+  // For now, this resource only returns the current cart order of the given API
+  // user. We can expand the collection to include all cart orders sorted so the
+  // current order is first in the list at a later time.
+  $uid = !empty($user->uid) ? $user->uid : 0;
+  $order_id = commerce_cart_order_id($uid);
+
+  if (!empty($order_id)) {
+    $filter['order_id'] = $order_id;
+    $filter_op['order_id'] = '=';
+  }
+  else {
+    return array();
+  }
+
+  return commerce_services_index_entities('commerce_order', $fields, $expand_entities, $flatten_fields, $filter, $filter_op, $sort_by, $sort_order, $limit, $offset);
+}
+
+/**
+ * Determines an API user's access to index cart orders.
+ */
+function commerce_services_cart_index_access() {
+  // Because the entity access control system will filter any result sets,
+  // there's no reason to limit a particular user's access.
+  return TRUE;
+}
+
+/**
+ * Creates a new cart order for the current API user.
+ */
+function commerce_services_cart_create($data, $flatten_fields) {
+  global $user;
+  $uid = !empty($user->uid) ? $user->uid : 0;
+
+  // Even though the data array could technically accept a uid value, since the
+  // resource is designed to work for the current API user this value will be
+  // ignored and result in an error.
+  if (isset($data['uid'])) {
+    return services_error(t('Creating a cart does not permit you to set a uid value'), 400);
+  }
+
+  // Create the new order with the customer's uid and the cart order status.
+  // Instead of using commerce_cart_order_new() directly, its contents have been
+  // copied here to allow for setting field and property data before saving so
+  // any errors in the data prevent saving a new order.
+  $order = commerce_order_new($uid, 'cart');
+  $order->log = t('Created as a shopping cart order.');
+
+  // Set the field and property data and save the new order.
+  commerce_services_set_field_values('commerce_order', $order, $data, $flatten_fields);
+  commerce_order_save($order);
+
+  // Reset the cart cache
+  commerce_cart_order_ids_reset();
+
+  // If the user is not logged in, ensure the order ID is stored in the session.
+  if (!$uid && empty($user->uid)) {
+    commerce_cart_order_session_save($order->order_id);
+  }
+
+  // Add simplified fields to the order object for certain field types.
+  commerce_services_decorate_entity('commerce_order', $order);
+
+  // Flatten field value arrays if specified. This must be the last operation
+  // performed as it breaks the standard field data model. An entity whose
+  // fields have thus been flattened is no longer wrappable or writable.
+  if ($flatten_fields == 'true') {
+    $order = clone($order);
+    commerce_services_flatten_fields('commerce_order', $order);
+  }
+
+  return $order;
+}
+
+/**
+ * Determines an API user's access to create new cart orders.
+ */
+function commerce_services_cart_create_access() {
+  // If the user has access to perform the operation...
+  if (commerce_order_access('create')) {
+    return TRUE;
+  }
+  else {
+    return services_error(t('Access to this operation not granted'), 401);
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_services/resources/line_item.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_services/resources/line_item.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_services/resources/line_item.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_services/resources/line_item.inc	2014-04-16 14:25:46.000000000 +0200
@@ -0,0 +1,274 @@
+<?php
+
+/**
+ * @file
+ * Contains the resource callbacks for orders.
+ */
+
+
+/**
+ * Returns a collection of line items.
+ *
+ * @see commerce_services_index_entities()
+ */
+function commerce_services_line_item_index($fields, $expand_entities, $flatten_fields, $filter, $filter_op, $sort_by, $sort_order, $limit, $offset) {
+  return commerce_services_index_entities('commerce_line_item', $fields, $expand_entities, $flatten_fields, $filter, $filter_op, $sort_by, $sort_order, $limit, $offset);
+}
+
+/**
+ * Determines an API user's access to index line items.
+ */
+function commerce_services_line_item_index_access() {
+  // Because the entity access control system will filter any result sets,
+  // there's no reason to limit a particular user's access. Users with the
+  // administer line item permission will have access to view any line item but
+  // other users will only have access to line items on orders they can view.
+  return TRUE;
+}
+
+/**
+ * Returns a single line item.
+ *
+ * @see commerce_services_retrieve_entity()
+ */
+function commerce_services_line_item_retrieve($line_item_id, $expand_entities, $flatten_fields) {
+  return commerce_services_retrieve_entity('commerce_line_item', $line_item_id, $expand_entities, $flatten_fields);
+}
+
+/**
+ * Determines an API user's access to retrieve a given line item.
+ *
+ * @param $line_item_id
+ *   The ID of the line item to be retrieved.
+ *
+ * @return
+ *   Boolean indicating the user's access to retrieve the line item.
+ */
+function commerce_services_line_item_retrieve_access($line_item_id) {
+  // Attempt to load the line item.
+  if ($line_item = commerce_line_item_load($line_item_id)) {
+    // And perform the view access check.
+    if (commerce_line_item_access('view', $line_item)) {
+      return TRUE;
+    }
+    else {
+      return services_error(t('Access to this operation not granted'), 401);
+    }
+  }
+  else {
+    return services_error(t('Line item not found'), 404);
+  }
+}
+
+/**
+ * Creates a new line item on an order.
+ */
+function commerce_services_line_item_create($data, $flatten_fields) {
+  // Ensure the create request specifies a valid line item type.
+  if (empty($data['type']) || !in_array($data['type'], array_keys(commerce_line_item_types()))) {
+    return services_error(t('You must specify a valid line item type'), 400);
+  }
+
+  // Default the quantity to 1.
+  if (empty($data['quantity'])) {
+    $data['quantity'] = 1;
+  }
+
+  // Create the new line item.
+  $line_item = commerce_line_item_new($data['type'], $data['order_id']);
+
+  // Remove the type and order_id from the data array since they've been set.
+  unset($data['type'], $data['order_id']);
+
+  // If the line item is a product line item, ensure a commerce_product value
+  // was passed referencing a valid product ID and populate the line item.
+  if (in_array($line_item->type, commerce_product_line_item_types())) {
+    $product = NULL;
+
+    if (!empty($data['commerce_product'])) {
+      if ($flatten_fields == 'true') {
+        $product = commerce_product_load($data['commerce_product']);
+      }
+      else {
+        $product = commerce_product_load($data['commerce_product']['und'][0]);
+      }
+    }
+
+    // Bail now if the product wasn't found.
+    if (empty($product)) {
+      return services_error(t('You must specify a valid commerce_product value'), 400);
+    }
+
+    // Populate the line item.
+    commerce_product_line_item_populate($line_item, $product);
+  }
+
+  // Set the field and property data and save the line item.
+  commerce_services_set_field_values('commerce_line_item', $line_item, $data, $flatten_fields);
+  commerce_line_item_save($line_item);
+
+  // Add the line item to its order.
+  $order = commerce_order_load($line_item->order_id);
+  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
+  $order_wrapper->commerce_line_items[] = $line_item;
+  commerce_order_save($order);
+
+  // Add simplified fields to the line item object for certain field types.
+  commerce_services_decorate_entity('commerce_line_item', $line_item);
+
+  // Flatten field value arrays if specified. This must be the last operation
+  // performed as it breaks the standard field data model. An entity whose
+  // fields have thus been flattened is no longer wrappable or writable.
+  if ($flatten_fields == 'true') {
+    $line_item = clone($line_item);
+    commerce_services_flatten_fields('commerce_line_item', $line_item);
+  }
+
+  return $line_item;
+}
+
+/**
+ * Determines an API user's access to create new line items.
+ */
+function commerce_services_line_item_create_access($data) {
+  // Load the order from the data array to determine access to create line items
+  // on it.
+  $order = NULL;
+
+  if (!empty($data['order_id'])) {
+    $order = commerce_order_load($data['order_id']);
+  }
+
+  if (empty($order)) {
+    return services_error(t('You must specify a valid order ID', 400));
+  }
+
+  // If the user has access to update the order...
+  if (commerce_order_access('update', $order)) {
+    return TRUE;
+  }
+  else {
+    return services_error(t('Access to this operation not granted'), 401);
+  }
+}
+
+/**
+ * Updates a line item.
+ *
+ * This callback does not use commerce_services_update_entity(), because we must
+ * ensure that the unit price is rebased if its amount or currency code change
+ * but the data array is not updated to include the requisite price component.
+ */
+function commerce_services_line_item_update($line_item_id, $data, $flatten_fields) {
+  // Load the line item.
+  $line_item = commerce_line_item_load($line_item_id);
+
+  // Set field values using the data provided.
+  commerce_services_set_field_values('commerce_line_item', $line_item, $data, $flatten_fields);
+
+  // Loop over the update data to determine if the unit price amount or
+  // currency_code is updated without the data array being updated to include
+  // price component updates...
+  $rebase = FALSE;
+
+  foreach (array_keys($data) as $key) {
+    if (in_array($key, array('commerce_unit_price_amount', 'commerce_unit_price_currency_code')) &&
+      !in_array('commerce_unit_price_data', array(array_keys($data)))) {
+      $rebase = TRUE;
+    }
+    elseif ($key == 'commerce_unit_price' && empty($data[$key]['data']['components'])) {
+      $rebase = TRUE;
+    }
+  }
+
+  // Rebase the unit price if necessary.
+  if ($rebase) {
+    commerce_line_item_rebase_unit_price($line_item);
+  }
+
+  // Save the updates to the line item.
+  commerce_line_item_save($line_item);
+
+  // Add simplified fields to the line item for certain field types.
+  commerce_services_decorate_entity('commerce_line_item', $line_item);
+
+  // Flatten field value arrays if specified. This must be the last operation
+  // performed as it breaks the standard field data model. An entity whose
+  // fields have thus been flattened is no longer wrappable or writable.
+  if ($flatten_fields == 'true') {
+    $line_item = clone($line_item);
+    commerce_services_flatten_fields('commerce_line_item', $line_item);
+  }
+
+  // If the line item quantity or unit price was updated, load and save the
+  // order to recalculate the order total.
+  foreach (array_keys($data) as $key) {
+    if (in_array($key, array('quantity', 'commerce_unit_price')) || strpos($key, 'commerce_unit_price_') === 0) {
+      $order = commerce_order_load($line_item->order_id);
+      commerce_order_save($order);
+      break;
+    }
+  }
+
+  return $line_item;
+}
+
+/**
+ * Determines an API user's access to update a given line item.
+ *
+ * @param $line_item_id
+ *   The ID of the line item to be updated.
+ *
+ * @return
+ *   Boolean indicating the user's access to update the line item.
+ */
+function commerce_services_line_item_update_access($line_item_id) {
+  // Attempt to load the line item.
+  if ($line_item = commerce_line_item_load($line_item_id)) {
+    // If the user has access to perform the operation...
+    if (commerce_line_item_access('update', $line_item)) {
+      return TRUE;
+    }
+    else {
+      return services_error(t('Access to this operation not granted'), 401);
+    }
+  }
+  else {
+    return services_error(t('Line item not found'), 404);
+  }
+}
+
+/**
+ * Deletes a line item.
+ *
+ * @param $line_item_id
+ *   The ID of the line item to be deleted.
+ */
+function commerce_services_line_item_delete($line_item_id) {
+  commerce_line_item_delete($line_item_id);
+}
+
+/**
+ * Determines an API user's access to delete a given line item.
+ *
+ * @param $line_item_id
+ *   The ID of the line item to be deleted.
+ *
+ * @return
+ *   Boolean indicating the user's access to delete the line item.
+ */
+function commerce_services_line_item_delete_access($line_item_id) {
+  // Attempt to load the line item.
+  if ($line_item = commerce_line_item_load($line_item_id)) {
+    // If the user has access to perform the operation...
+    if (commerce_line_item_access('delete', $line_item)) {
+      return TRUE;
+    }
+    else {
+      return services_error(t('Access to this operation not granted'), 401);
+    }
+  }
+  else {
+    return services_error(t('Line item not found'), 404);
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_services/resources/order.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_services/resources/order.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_services/resources/order.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_services/resources/order.inc	2014-04-16 14:25:46.000000000 +0200
@@ -0,0 +1,160 @@
+<?php
+
+/**
+ * @file
+ * Contains the resource callbacks for orders.
+ */
+
+
+/**
+ * Returns a collection of orders.
+ *
+ * @see commerce_services_index_entities()
+ */
+function commerce_services_order_index($fields, $expand_entities, $flatten_fields, $filter, $filter_op, $sort_by, $sort_order, $limit, $offset) {
+  return commerce_services_index_entities('commerce_order', $fields, $expand_entities, $flatten_fields, $filter, $filter_op, $sort_by, $sort_order, $limit, $offset);
+}
+
+/**
+ * Determines an API user's access to index orders.
+ */
+function commerce_services_order_index_access() {
+  // Because the entity access control system will filter any result sets,
+  // there's no reason to limit a particular user's access.
+  return TRUE;
+}
+
+/**
+ * Returns a single order.
+ *
+ * @see commerce_services_retrieve_entity()
+ */
+function commerce_services_order_retrieve($order_id, $expand_entities, $flatten_fields) {
+  return commerce_services_retrieve_entity('commerce_order', $order_id, $expand_entities, $flatten_fields);
+}
+
+/**
+ * Determines an API user's access to retrieve a given order.
+ *
+ * @param $order_id
+ *   The ID of the order to be retrieved.
+ *
+ * @return
+ *   Boolean indicating the user's access to retrieve the order.
+ */
+function commerce_services_order_retrieve_access($order_id) {
+  // Attempt to load the order.
+  if ($order = commerce_order_load($order_id)) {
+    // And perform the view access check.
+    if (commerce_order_access('view', $order)) {
+      return TRUE;
+    }
+    else {
+      return services_error(t('Access to this operation not granted'), 401);
+    }
+  }
+  else {
+    return services_error(t('Order not found'), 404);
+  }
+}
+
+/**
+ * Updates an order.
+ *
+ * @see commerce_services_update_entity()
+ */
+function commerce_services_order_update($order_id, $data, $flatten_fields) {
+  return commerce_services_update_entity('commerce_order', $order_id, $data, $flatten_fields);
+}
+
+/**
+ * Determines an API user's access to update a given order.
+ *
+ * @param $order_id
+ *   The ID of the order to be updated.
+ *
+ * @return
+ *   Boolean indicating the user's access to update the order.
+ */
+function commerce_services_order_update_access($order_id) {
+  // Attempt to load the order.
+  if ($order = commerce_order_load($order_id)) {
+    // If the user has access to perform the operation...
+    if (commerce_order_access('update', $order)) {
+      return TRUE;
+    }
+    else {
+      return services_error(t('Access to this operation not granted'), 401);
+    }
+  }
+  else {
+    return services_error(t('Order not found'), 404);
+  }
+}
+
+/**
+ * Deletes an order.
+ *
+ * @param $order_id
+ *   The ID of the order to be deleted.
+ */
+function commerce_services_order_delete($order_id) {
+  commerce_order_delete($order_id);
+}
+
+/**
+ * Determines an API user's access to delete a given order.
+ *
+ * @param $order_id
+ *   The ID of the order to be deleted.
+ *
+ * @return
+ *   Boolean indicating the user's access to delete the order.
+ */
+function commerce_services_order_delete_access($order_id) {
+  // Attempt to load the order.
+  if ($order = commerce_order_load($order_id)) {
+    // If the user has access to perform the operation...
+    if (commerce_order_access('delete', $order)) {
+      return TRUE;
+    }
+    else {
+      return services_error(t('Access to this operation not granted'), 401);
+    }
+  }
+  else {
+    return services_error(t('Order not found'), 404);
+  }
+}
+
+/**
+ * Returns a collection of line items on an order.
+ *
+ * @see commerce_services_index_entities()
+ */
+function commerce_services_order_line_item_index($order_id, $fields, $expand_entities, $flatten_fields, $filter, $filter_op, $sort_by, $sort_order, $limit, $offset) {
+  // Add the order ID to the filter list.
+  $filter['order_id'] = $order_id;
+  $filter_op['order_id'] = '=';
+
+  return commerce_services_index_entities('commerce_line_item', $fields, $expand_entities, $flatten_fields, $filter, $filter_op, $sort_by, $sort_order, $limit, $offset);
+}
+
+/**
+ * Determines an API user's access to index line items on an order.
+ */
+function commerce_services_order_line_item_index_access($order_id) {
+  // Attempt to load the order.
+  if ($order = commerce_order_load($order_id)) {
+    // And perform the view access check.
+    if (commerce_order_access('view', $order)) {
+      return TRUE;
+    }
+    else {
+      return services_error(t('Access to this operation not granted'), 401);
+    }
+  }
+  else {
+    return services_error(t('Order not found'), 404);
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_services/resources/product_display.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_services/resources/product_display.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_services/resources/product_display.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_services/resources/product_display.inc	2014-04-16 14:25:46.000000000 +0200
@@ -0,0 +1,207 @@
+<?php
+
+/**
+ * @file
+ * Contains the resource callbacks for product display nodes.
+ */
+
+
+/**
+ * Returns a collection of product display nodes.
+ *
+ * @param $fields
+ *   An array of field and property names to include in the returned product
+ *   display node data. If empty, nodes will be returned as loaded with the
+ *   exception of rdf_mapping data, which will only ever be included in an index
+ *   if it is explicitly requested.
+ * @param $expand_entities
+ *   An integer depth to which entity reference field values should be expanded
+ *   into full entities in a corresponding property on returned entities;
+ *   defaults to 1.
+ * @param $flatten_fields
+ *   A string indicating whether or not field value arrays should be flattened;
+ *   accepts true or false, defaults to true.
+ * @param $filter
+ *   An associative array of property names, single column field names, or
+ *   multi-column field column names with their values to use to filter the
+ *   result set of the index request.
+ * @param $filter_op
+ *   An associative array of field and property names with the operators to use
+ *   when applying their filter conditions to the index request query.
+ * @param $sort_by
+ *   An array of database fields to sort the query by, with sort fields being
+ *   valid properties, single column field names, or multi-column field column
+ *   names for the matching entity type.
+ * @param $sort_order
+ *   The corresponding sort orders for the fields specified in the $sort_by
+ *   array; one of either 'DESC' or 'ASC'.
+ * @param $limit
+ *   The number of product displays to retrieve.
+ * @param $offset
+ *   The zero-based index from which to start retrieving product displays.
+ *
+ * @return
+ *   An array of product display nodes.
+ */
+function commerce_services_product_display_index($fields, $expand_entities, $flatten_fields, $filter, $filter_op, $sort_by, $sort_order, $limit, $offset) {
+  // Build a query to load all accessible nodes that contain product reference
+  // fields, whether those fields have data or not.
+  $query = new EntityFieldQuery();
+  $query
+    ->addTag('node_access')
+    ->addMetaData('op', 'view')
+    ->addMetaData('base_table', 'node')
+    ->entityCondition('entity_type', 'node')
+    ->entityCondition('bundle', array_keys(commerce_product_reference_node_types()))
+    ->range($offset, $limit);
+
+  // Add the specified property and field condtions to the query.
+  commerce_services_index_query_filter($query, 'node', $filter, $filter_op);
+
+  // Add the specified sort conditions to the query.
+  commerce_services_index_query_sort($query, 'node', $sort_by, $sort_order);
+
+  // Execute the query and load the nodes it returns if any.
+  $result = $query->execute();
+  $nodes = array();
+
+  if (!empty($result['node'])) {
+    $nodes = node_load_multiple(array_keys($result['node']));
+
+    foreach ($nodes as $nid => &$node) {
+      // Add simplified fields to the entity object for certain field types.
+      commerce_services_decorate_entity('node', $node);
+
+      // Expand referenced entities into the full entity to the specified depth.
+      if ($expand_entities > 0) {
+        commerce_services_expand_entities('node', $node, $expand_entities, $flatten_fields == 'true');
+      }
+
+      // Flatten field value arrays if specified. This must be the last operation
+      // performed as it breaks the standard field data model. An entity whose
+      // fields have thus been flattened is no longer wrappable.
+      if ($flatten_fields == 'true') {
+        $node = clone($node);
+        commerce_services_flatten_fields('node', $node);
+      }
+
+      // Unset the rdf_mapping key from any loaded node unless explicitly included
+      // in the $fields array.
+      if (!in_array('rdf_mapping', $fields)) {
+        unset($node->rdf_mapping);
+      }
+
+      // Filter out the node properties based on the field list if given; always
+      // remove rdf_mapping unless explicitly requested in the field list.
+      if (!empty($fields)) {
+        commerce_services_object_filter($node, $fields);
+      }
+    }
+  }
+
+  return $nodes;
+}
+
+/**
+ * Determines access to perform product display operations.
+ *
+ * @param $op
+ *   The operation being performed. One of 'view', 'update', 'create' or
+ *   'delete'.
+ * @param $args
+ *   Resource arguments passed through from the original request.
+ *
+ * @return
+ *   Boolean indicating whether or not the requested operation should be allowed.
+ */
+function commerce_services_product_display_access($op, $args) {
+  // First load the node ID from the arguments if available.
+  if ($op != 'create' && !empty($args[0])) {
+    $node = node_load($args[0]);
+
+    if (empty($node)) {
+      return services_error(t('Product display not found'), 404);
+    }
+  }
+  else {
+    $node = NULL;
+  }
+
+  // If the request operation is a node create...
+  if ($op == 'create') {
+    // And the POSTed node object has a valid product display node type...
+    if (!empty($args[0]->type) && in_array($args[0]->type, commerce_product_reference_node_types())) {
+      // Return the user's access to create nodes of that type.
+      if (!node_access($op, $args[0]->type)) {
+        return services_error(t('Access to this operation not granted'), 401);
+      }
+      else {
+        return TRUE;
+      }
+    }
+    else {
+      // Otherwise throw an error with an appropriate error message.
+      return services_error(t('Valid product display node type required'), 400);
+    }
+  }
+
+  // If the node could be loaded, return the node_access() value for the operation.
+  if (!empty($node->nid)) {
+    if (!node_access($op, $node)) {
+      return services_error(t('Access to this operation not granted'), 401);
+    }
+    else {
+      return TRUE;
+    }
+  }
+  else {
+    return services_error(t('Product display not found'), 404);
+  }
+}
+
+/**
+ * Returns a single product display node.
+ *
+ * @param $nid
+ *   The node ID of the product display to retrieve.
+ * @param $expand_entities
+ *   An integer depth to which entity reference field values should be expanded
+ *   into full entities in a corresponding property on returned entities;
+ *   defaults to 1.
+ * @param $flatten_fields
+ *   A string indicating whether or not field value arrays should be flattened;
+ *   accepts true or false, defaults to true.
+ *
+ * @return
+ *   The requested product display node or FALSE if not found.
+ */
+function commerce_services_product_display_retrieve($nid, $expand_entities, $flatten_fields) {
+  $node = node_load($nid);
+
+  // If the node exists, determine its URI and add it to the node.
+  if ($node) {
+    $uri = entity_uri('node', $node);
+    $node->path = url($uri['path'], array('absolute' => TRUE));
+
+    // Unset the uri property if it's on the node to prevent recursion.
+    unset($node->uri);
+
+    // Add simplified fields to the entity object for certain field types.
+    commerce_services_decorate_entity('node', $node);
+
+    // Expand referenced entities into the full entity to the specified depth.
+    if ($expand_entities > 0) {
+      commerce_services_expand_entities('node', $node, $expand_entities, $flatten_fields == 'true');
+    }
+
+    // Flatten field value arrays if specified. This must be the last operation
+    // performed as it breaks the standard field data model. An entity whose
+    // fields have thus been flattened is no longer wrappable.
+    if ($flatten_fields == 'true') {
+      $node = clone($node);
+      commerce_services_flatten_fields('node', $node);
+    }
+  }
+
+  return $node;
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_services/resources/product.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_services/resources/product.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_services/resources/product.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_services/resources/product.inc	2014-04-16 14:25:46.000000000 +0200
@@ -0,0 +1,242 @@
+<?php
+
+/**
+ * @file
+ * Contains the resource callbacks for products.
+ */
+
+
+/**
+ * Returns a collection of products.
+ *
+ * @see commerce_services_index_entities()
+ */
+function commerce_services_product_index($fields, $expand_entities, $flatten_fields, $filter, $filter_op, $sort_by, $sort_order, $limit, $offset) {
+  return commerce_services_index_entities('commerce_product', $fields, $expand_entities, $flatten_fields, $filter, $filter_op, $sort_by, $sort_order, $limit, $offset);
+}
+
+/**
+ * Determines an API user's access to index products.
+ */
+function commerce_services_product_index_access() {
+  // Because the entity access control system will filter any result sets,
+  // there's no reason to limit a particular user's access.
+  return TRUE;
+}
+
+/**
+ * Returns a single product.
+ *
+ * @see commerce_services_retrieve_entity()
+ */
+function commerce_services_product_retrieve($product_id, $expand_entities, $flatten_fields) {
+  return commerce_services_retrieve_entity('commerce_product', $product_id, $expand_entities, $flatten_fields);
+}
+
+/**
+ * Determines an API user's access to retrieve a given product.
+ *
+ * @param $product_id
+ *   The ID of the product to be retrieved.
+ *
+ * @return
+ *   Boolean indicating the user's access to retrieve the product.
+ */
+function commerce_services_product_retrieve_access($product_id) {
+  // Attempt to load the product.
+  if ($product = commerce_product_load($product_id)) {
+    // And perform the view access check.
+    if (commerce_product_access('view', $product)) {
+      return TRUE;
+    }
+    else {
+      return services_error(t('Access to this operation not granted'), 401);
+    }
+  }
+  else {
+    return services_error(t('Product not found'), 404);
+  }
+}
+
+/**
+ * Creates a new product.
+ */
+function commerce_services_product_create($data, $flatten_fields) {
+  // Ensure the request specifies a unique, valid SKU.
+  if (isset($data['sku'])) {
+    $data['sku'] = trim($data['sku']);
+  }
+
+  if (empty($data['sku'])) {
+    return services_error(t('You must specify a sku value'), 400);
+  }
+  elseif (!commerce_product_validate_sku($data['sku'])) {
+    return services_error(t('Invalid sku value given'), 400);
+  }
+  elseif (!commerce_product_validate_sku_unique($data['sku'], NULL)) {
+    return services_error(t('You must specify a unique sku value'), 400);
+  }
+
+  // Ensure the request specifies a title.
+  if (empty($data['title'])) {
+    return services_error(t('You must specify a title value'), 400);
+  }
+
+  // Ensure the request specifies a commerce_price amount and currency_code.
+  $amount = NULL;
+  $currency_code = NULL;
+
+  // If the commerce_price field is set in the data array, examine its values
+  // for a price amount and currency code.
+  if (!empty($data['commerce_price'])) {
+    if ($flatten_fields == 'true') {
+      if (isset($data['commerce_price']['amount']) && is_numeric($data['commerce_price']['amount'])) {
+        $amount = $data['commerce_price']['amount'];
+      }
+      if (!empty($data['commerce_price']['currency_code']) && commerce_currency_load($data['commerce_price']['currency_code'])) {
+        $currency_code = $data['commerce_price']['currency_code'];
+      }
+    }
+    else {
+      $langcode = key($data['commerce_price']);
+
+      if (isset($data['commerce_price'][$langcode][0]['amount']) && is_numeric($data['commerce_price'][$langcode][0]['amount'])) {
+        $amount = $data['commerce_price'][$langcode][0]['amount'];
+      }
+      if (!empty($data['commerce_price'][$langcode][0]['currency_code']) && commerce_currency_load($data['commerce_price'][$langcode][0]['currency_code'])) {
+        $currency_code = $data['commerce_price'][$langcode][0]['currency_code'];
+      }
+    }
+  }
+
+  // If not, look also in the column specific properties.
+  if (isset($data['commerce_price_amount']) && is_numeric($data['commerce_price_amount'])) {
+    $amount = $data['commerce_price_amount'];
+  }
+  if (!empty($data['commerce_price_currency_code']) && commerce_currency_load($data['commerce_price_currency_code'])) {
+    $currency_code = $data['commerce_price_currency_code'];
+  }
+
+  if (is_null($amount)) {
+    return services_error(t('You must specify a numeric commerce_price_amount value'), 400);
+  }
+  elseif (is_null($currency_code)) {
+    return services_error(t('You must specify a valid commerce_price_currency_code value'), 400);
+  }
+
+  // Create the new product.
+  $product = commerce_product_new($data['type']);
+
+  // Remove the type from the data array since it's been set.
+  unset($data['type']);
+
+  // Set the field and property data and save the product.
+  commerce_services_set_field_values('commerce_product', $product, $data, $flatten_fields);
+  commerce_product_save($product);
+
+  // Add simplified fields to the product object for certain field types.
+  commerce_services_decorate_entity('commerce_product', $product);
+
+  // Flatten field value arrays if specified. This must be the last operation
+  // performed as it breaks the standard field data model. An entity whose
+  // fields have thus been flattened is no longer wrappable or writable.
+  if ($flatten_fields == 'true') {
+    $product = clone($product);
+    commerce_services_flatten_fields('commerce_product', $product);
+  }
+
+  return $product;
+}
+
+/**
+ * Determines an API user's access to create a new product.
+ */
+function commerce_services_product_create_access($data) {
+  // Ensure the request specifies a valid product type.
+  if (empty($data['type']) || !in_array($data['type'], array_keys(commerce_product_types()))) {
+    return services_error(t('You must specify a valid product type'), 400);
+  }
+
+  // Check the user's access to create products of the specified type.
+  if (commerce_product_access('create', commerce_product_new($data['type']))) {
+    return TRUE;
+  }
+  else {
+    return services_error(t('Access to this operation not granted'), 401);
+  }
+}
+
+/**
+ * Updates a product.
+ *
+ * @see commerce_services_update_entity()
+ */
+function commerce_services_product_update($product_id, $data, $flatten_fields) {
+  return commerce_services_update_entity('commerce_product', $product_id, $data, $flatten_fields);
+}
+
+/**
+ * Determines an API user's access to update a given product.
+ *
+ * @param $product_id
+ *   The ID of the product to be updated.
+ *
+ * @return
+ *   Boolean indicating the user's access to update the product.
+ */
+function commerce_services_product_update_access($product_id) {
+  // Attempt to load the product.
+  if ($product = commerce_product_load($product_id)) {
+    // If the user has access to perform the operation...
+    if (commerce_product_access('update', $product)) {
+      return TRUE;
+    }
+    else {
+      return services_error(t('Access to this operation not granted'), 401);
+    }
+  }
+  else {
+    return services_error(t('Product not found'), 404);
+  }
+}
+
+/**
+ * Deletes a product.
+ *
+ * @param $product_id
+ *   The ID of the product to be deleted.
+ */
+function commerce_services_product_delete($product_id) {
+  commerce_product_delete($product_id);
+}
+
+/**
+ * Determines an API user's access to delete a given product.
+ *
+ * @param $product_id
+ *   The ID of the product to be deleted.
+ *
+ * @return
+ *   Boolean indicating the user's access to delete the product.
+ */
+function commerce_services_product_delete_access($product_id) {
+  // Attempt to load the product.
+  if ($product = commerce_product_load($product_id)) {
+    // If the user has access to perform the operation...
+    if (commerce_product_access('delete', $product)) {
+      // And the product can safely be deleted...
+      if (commerce_product_can_delete($product)) {
+        return TRUE;
+      }
+      else {
+        return services_error(t('Product cannot be deleted'), 403);
+      }
+    }
+    else {
+      return services_error(t('Access to this operation not granted'), 401);
+    }
+  }
+  else {
+    return services_error(t('Product not found'), 404);
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/commerce_stock.info drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/commerce_stock.info
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/commerce_stock.info	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/commerce_stock.info	2014-05-21 21:43:23.000000000 +0200
@@ -0,0 +1,16 @@
+name = Commerce Stock API
+description = Provides a stock management framework based on rules to manage stock levels of commerce products.
+package = Commerce (stock)
+dependencies[] = number
+dependencies[] = commerce_product
+dependencies[] = commerce_order
+dependencies[] = rules
+core = 7.x
+configure = admin/commerce/config/stock
+
+; Information added by Drupal.org packaging script on 2014-05-15
+version = "7.x-2.0"
+core = "7.x"
+project = "commerce_stock"
+datestamp = "1400182728"
+
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/commerce_stock.install drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/commerce_stock.install
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/commerce_stock.install	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/commerce_stock.install	2014-05-21 21:43:23.000000000 +0200
@@ -0,0 +1,7 @@
+<?php
+
+/**
+ * @file
+ * Install, update and uninstall functions for the commerce_stock module.
+ */
+
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/commerce_stock.module drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/commerce_stock.module
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/commerce_stock.module	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/commerce_stock.module	2014-05-21 21:43:23.000000000 +0200
@@ -0,0 +1,489 @@
+<?php
+
+/**
+ * @file
+ * Provides an rules based api for implementing order quantity
+ * and stock validation
+ *
+ * This module provides the events to trigger the stock checks and
+ * configurable actions to take if the check fails "out of stock:
+ * It is the job of sub modules to implement the stock check by
+ * configuring rules and their conditions.
+ */
+
+/**
+ * Implements hook_menu().
+ */
+function commerce_stock_menu() {
+  $items = array();
+
+  $items['admin/commerce/config/stock'] = array(
+    'title' => 'Stock management',
+    'description' => 'Configure stock management.',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('commerce_stock_admin_form'),
+    'access arguments' => array('administer commerce_stock settings'),
+    'file' => 'includes/commerce_stock.admin.inc',
+    'type'  => MENU_NORMAL_ITEM,
+  );
+  $items['admin/commerce/config/stock/api'] = array(
+    'title' => 'Stock management API',
+    'description' => 'Configure stock management API.',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('commerce_stock_admin_form'),
+    'access arguments' => array('administer commerce_stock settings'),
+    'file' => 'includes/commerce_stock.admin.inc',
+    'type'  => MENU_DEFAULT_LOCAL_TASK,
+    'weight' => -10,
+  );
+
+  return $items;
+}
+
+/**
+ * Implements hook_permission().
+ */
+function commerce_stock_permission() {
+  return array(
+    'administer commerce_stock settings' => array(
+      'title' => t('Administer commerce stock settings'),
+    ),
+    'make rule based changes to commerce_stock' => array(
+      'title' => t('Make rule based changes to commerce stock'),
+    ),
+
+  );
+}
+
+
+/**
+ * Implements hook_form_alter().
+ *
+ * Alters the add-to-cart form to show out-of-stock items and add a validator.
+ */
+function commerce_stock_form_alter(&$form, &$form_state, $form_id) {
+  if (strpos($form_id, "commerce_cart_add_to_cart_form") === 0) {
+    // Check if product is disabled.
+    if (isset($form['submit']['#attributes']['disabled']) && ($form['submit']['#attributes']['disabled'] == 'disabled')) {
+      return;
+    }
+    // Check to see if product has options (multiple products using
+    // the default dropdown).
+    if (isset($form['product_id']['#options'])) {
+      // Set validation.
+      $form['#validate'][] = 'commerce_stock_add_to_cart_validate';
+      commerce_stock_cart_state_validate_options($form_id, $form, $form_state);
+    }
+    // A single product or uses attributes (like colour & size).
+    elseif (isset($form['product_id']['#value'])) {
+      // @todo new rules event for handling options - do we need it?
+      // Add validation to the add to cart
+      $form['#validate'][] = 'commerce_stock_add_to_cart_validate';
+      // Check if the add to cart form should be enabled (in stock).
+      commerce_stock_cart_state_validate($form_id, $form, $form_state);
+    }
+  }
+  elseif ($form_id == 'views_form_commerce_cart_form_default') {
+    // Add validate function to the cart form.
+    $form['#validate'][] = 'commerce_stock_form_commerce_cart_validate';
+  }
+  elseif ($form_id == 'commerce_checkout_form_checkout') {
+    // Add validate function to the checkout form.
+    $form['buttons']['continue']['#validate'][] = 'commerce_stock_checkout_form_validate';
+  }
+  elseif ($form_id == 'commerce_checkout_form_review') {
+    // Add validate function to the review form.
+    // @todo: would be good to prompt the user with some contextual info
+    // as he was about to pay.
+    $form['buttons']['continue']['#validate'][] = 'commerce_stock_checkout_form_validate';
+  }
+
+}
+
+/**
+ * Implements hook_commerce_checkout_pane_info().
+ *
+ * This creates the stock checkout pane. It should be placed on the first stage
+ * of checkout. It checks if all items are in stock and if not redirects the
+ * user to their cart.
+ */
+function commerce_stock_commerce_checkout_pane_info() {
+  $checkout_panes = array();
+
+  $checkout_panes['stock_validation_checkout_pane'] = array(
+    'title' => t('check if all items are in stock at checkout'),
+    'base' => 'commerce_stock_commerce_checkout_pane',
+    'page' => 'checkout',
+    'fieldset' => FALSE,
+  );
+
+  return $checkout_panes;
+}
+
+/**
+ * Form validation handler for commerce_cart_add_to_cart_form().
+ *
+ * For products with options (product dropdown) checks if the add to cart form
+ * should be enabled (in stock).
+ *
+ * @see commerce_cart_add_to_cart_form()
+ */
+function commerce_stock_cart_state_validate_options($form_id, &$form, &$form_state) {
+  $product_id = $form['product_id']['#default_value'];
+  $product = commerce_product_load($product_id);
+  $qty_ordered = commerce_stock_check_cart_product_level($product_id);
+
+  // Initialize the form.
+  $form['submit']['#value'] = t('Add to cart');
+  $form['submit']['#disabled'] = FALSE;
+  $form['#attributes']['class']['stock'] = 'in-stock';
+
+  // Set global form for stock actions.
+  global $stock_cart_check_data;
+  $stock_cart_check_data = array(
+    'form' => &$form,
+  );
+
+  // Integration with rules_form_alter().
+  if (module_exists('rules_form_alter')) {
+    // make sure rules_form_alter actions work from the stock event.
+    $rules_form_alter_data = &drupal_static('rules_form_alter_data', array());
+    // Set the form data that will be used by rules.
+    $rules_form_alter_data['id'] = $form_id;
+    $rules_form_alter_data['form'] = &$form;
+    $rules_form_alter_data['state'] = &$form_state;
+  }
+  // Invoke the stock check event.
+  rules_invoke_event('commerce_stock_check_add_to_cart_form_state', $product, $qty_ordered, $form);
+}
+
+/**
+ * Form validation handler for commerce_cart_add_to_cart_form().
+ *
+ * For product display with one product or attributes. Validates the product and
+ * quantity to add to the cart. Also checks if the add to cart form should be
+ * enabled (in stock).
+ *
+ * @see commerce_cart_add_to_cart_form()
+ */
+function commerce_stock_add_to_cart_validate($form, &$form_state) {
+  if ($form_state['submitted']) {
+    // Get product and quantity.
+    $qty = $form_state['values']['quantity'];
+    $product_id = $form_state['values']['product_id'];
+    $product = commerce_product_load($product_id);
+    $qty_ordered = commerce_stock_check_cart_product_level($product_id);
+    // Check using rules.
+    commerce_stock_check_product_rule($product, $qty, $qty_ordered, $stock_state, $message);
+    // Action.
+    if ($stock_state == 1) {
+      form_set_error("stock_error", $message);
+    }
+    elseif ($stock_state == 2) {
+      $form_state['values']['quantity'] = $qty;
+      drupal_set_message($message);
+    }
+  }
+}
+
+/**
+ * Form validation handler for views_form_commerce_cart_form_default().
+ *
+ * Checks each line item to make sure that they have not requested more items
+ * than are in stock.
+ */
+function commerce_stock_form_commerce_cart_validate($form, &$form_state) {
+  // If a user choses to remove an item, then ts valid.
+  if ($form_state['triggering_element']['#value'] == t('Remove')) {
+    return;
+  }
+  $line_item_index = array_keys($form_state['line_items']);
+  if (isset($form_state['input']['edit_quantity'])) {
+    foreach ($form_state['values']['edit_quantity'] as $index => $qty) {
+      $line_item = $form_state['line_items'][$line_item_index[$index]];
+      $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
+      if (in_array($line_item_wrapper->getBundle(), commerce_product_line_item_types())) {
+        $product_id = $line_item_wrapper->commerce_product->product_id->value();
+        $product = commerce_product_load($product_id);
+        // Check using rules.
+        commerce_stock_check_product_checkout_rule($product, $qty, $stock_state, $message);
+        // @todo: TEST and update error structure.
+        if ($stock_state == 1) {
+          form_set_error("stock_error", $message);
+        }
+        elseif ($stock_state == 2) {
+          drupal_set_message($message);
+        }
+      }
+    }
+  }
+}
+
+/**
+ * Form validation handler for commerce_checkout_form_checkout().
+ *
+ * Make sure all items in the cart are in stock before continuing. This should
+ * not be reached as this is now handled by the stock checkout pane, but as that
+ * can be disabled it may be safe to keep this extra check.
+ */
+function commerce_stock_checkout_form_validate($form, &$form_state) {
+  $order_wrapper = entity_metadata_wrapper('commerce_order', $form_state['order']);
+  commerce_stock_checkout_validate($order_wrapper);
+}
+
+/**
+ * Form constructor for the stock checkout pane form.
+ *
+ * Validating the stock when displaying this form will allow redirecting the
+ * user before they start checkout.
+ */
+function commerce_stock_commerce_checkout_pane_checkout_form($form, &$form_state, $checkout_pane, $order) {
+  $order_wrapper = entity_metadata_wrapper('commerce_order', $form_state['order']);
+  commerce_stock_checkout_validate($order_wrapper);
+}
+
+/**
+ * Form validation handler for commerce_cart_add_to_cart_form().
+ *
+ * Checks if the add to cart form should be enabled (in stock).
+ */
+function commerce_stock_cart_state_validate($form_id, &$form, &$form_state) {
+  $product_id = $form['product_id']['#value'];
+  $product = commerce_product_load($product_id);
+  $qty_ordered = commerce_stock_check_cart_product_level($product_id);
+
+  // Initialize the form.
+  $form['submit']['#value'] = t('Add to cart');
+  $form['submit']['#disabled'] = FALSE;
+  $form['#attributes']['class']['stock'] = 'in-stock';
+
+  global $stock_cart_check_data;
+  $stock_cart_check_data = array(
+    'form' => &$form,
+  );
+
+  // Integration with rules_form_alter().
+  if (module_exists('rules_form_alter')) {
+    // make sure rules_form_alter actions work from the stock event.
+    $rules_form_alter_data = &drupal_static('rules_form_alter_data', array());
+    // Set the form data that will be used by rules.
+    $rules_form_alter_data['id'] = $form_id;
+    $rules_form_alter_data['form'] = &$form;
+    $rules_form_alter_data['state'] = &$form_state;
+  }
+
+  // Invoke the stock check event.
+  rules_invoke_event('commerce_stock_check_add_to_cart_form_state', $product, $qty_ordered);
+}
+
+/**
+ * Implements hook_token_info().
+ */
+function commerce_stock_token_info() {
+  $info['tokens']['commerce-product']['user-quantity-ordered'] = array(
+    'name' => t('Quantity already ordered'),
+    'description' => t('The quantity already ordered (in the basket) for the user'),
+  );
+  return $info;
+}
+
+
+/**
+ * Implements hook_tokens().
+ */
+function commerce_stock_tokens($type, $tokens, array $data = array(), array $options = array()) {
+  $replacements = array();
+  if ($type == 'commerce-product' && !empty($data['commerce-product'])) {
+    $product = entity_metadata_wrapper('commerce_product', $data['commerce-product']);
+    foreach ($tokens as $name => $original) {
+      switch ($name) {
+        case 'user-quantity-ordered':
+          $replacements[$original] = commerce_stock_check_cart_product_level($product->product_id->value());
+          break;
+      }
+    }
+  }
+  return $replacements;
+}
+
+/**
+ * Checks and returns quanity of the product and returns the value.
+ *
+ * The value is cached as is called more then once (including tokens)
+ */
+function commerce_stock_check_cart_product_level($product_id) {
+
+  static $cart_product_level = array();
+
+  if (isset($cart_product_level[$product_id])) {
+    return $cart_product_level[$product_id];
+  }
+  else {
+    $cart_qty = 0;
+    global $user;
+    // Load the current cart if it exists.
+    $order = commerce_cart_order_load($user->uid);
+    if (!$order) {
+      $cart_qty = 0;
+    }
+    else {
+      $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
+      if ($order_wrapper) {
+        // Cycle throw each line item ID.
+        foreach ($order_wrapper->commerce_line_items as $index => $line_item_wrapper) {
+          if (in_array($line_item_wrapper->getBundle(), commerce_product_line_item_types())) {
+            if ($line_item_wrapper->commerce_product->product_id->value() == $product_id){
+              $cart_qty += $line_item_wrapper->quantity->value();
+            }
+          }
+        }
+      }
+    }
+    $cart_product_level[$product_id] = $cart_qty;
+    return $cart_qty;
+  }
+}
+
+/**
+ * Check the stock using rules.
+ *
+ * Invokes the rule event and return the result of its action.
+ */
+function commerce_stock_check_product_rule($product, &$qty, $qty_ordered, &$stock_state, &$message) {
+  // Set defaults to the global stock check array.
+  global $stock_check_data;
+  $stock_check_data = array(
+    'state' => '0',
+    'message' => '',
+    'qty' => $qty
+  );
+
+  // Invoke the stock check event.
+  rules_invoke_event('commerce_stock_add_to_cart_check_product', $product, $qty, $qty_ordered, $qty + $qty_ordered);
+
+  // If state not ok, do nothing then return the value set by the action.
+  if ($stock_check_data['state'] <> 0) {
+    $stock_state = $stock_check_data['state'];
+    $message = $stock_check_data['message'];
+    $qty = $stock_check_data['qty'];
+  }
+}
+
+/**
+ * Check stock using rules at the point of checkout.
+ *
+ * Invoke the rule event and return the result of its action.
+ */
+function commerce_stock_check_product_checkout_rule($product, $qty_ordered, &$stock_state, &$message) {
+  // Set defaults to the global stock check array.
+  global $stock_check_data;
+  $stock_check_data = array(
+    'state' => '0',
+    'message' => '',
+    'qty' => $qty_ordered
+  );
+
+  // Invoke the stock check event.
+  rules_invoke_event('commerce_stock_check_product_checkout', $product, $qty_ordered);
+
+  // If state not ok, do nothing then return the value set by the action.
+  if ($stock_check_data['state'] <> 0) {
+    $stock_state = $stock_check_data['state'];
+    $message = $stock_check_data['message'];
+    $qty = $stock_check_data['qty'];
+  }
+}
+
+/**
+ * Form after_build handler: Validates that the product is in stock.
+ */
+function commerce_stock_form_after_build($form, &$form_state) {
+  $prod_id = $form['product_id']['#value'];
+  if (isset($form['product_id']['#stock_enabled']) && isset($form['product_id']['#stock_enabled'][$prod_id]) && $form['product_id']['#stock_enabled'][$prod_id]) {
+    if (isset($form['product_id']['#stock']) && isset($form['product_id']['#stock'][$prod_id])) {
+      $prod_stock = $form['product_id']['#stock'][$prod_id];
+      if ($prod_stock <= 0) {
+        // Remove the add to cart button.
+        $form['submit']['#access'] = FALSE;
+        // Remove quantity if enabled.
+        if (isset($form['submit'])) {
+          $form['quantity']['#access'] = FALSE;
+        }
+      }
+    }
+  }
+  return $form;
+}
+
+/**
+ * Common stock validation function.
+ */
+function commerce_stock_checkout_validate($order_wrapper) {
+  $found_errors = FALSE;
+  // Check each line item.
+  foreach ($order_wrapper->commerce_line_items as $index => $line_item_wrapper) {
+    if (in_array($line_item_wrapper->getBundle(), commerce_product_line_item_types())) {
+      $product_id = $line_item_wrapper->commerce_product->product_id->value();
+      $product = commerce_product_load($product_id);
+      $qty_ordered = commerce_stock_check_cart_product_level($product_id);
+      // Check using rules.
+      commerce_stock_check_product_checkout_rule($product, $qty_ordered, $stock_state, $message);
+      // @todo: TEST and update error structure
+      if ($stock_state == 1) {
+        form_set_error("stock_error", $message);
+        $found_errors = TRUE;
+      }
+      elseif ($stock_state == 2) {
+        drupal_set_message($message);
+      }
+    }
+  }
+  // If out of stock items send back to the cart form.
+  if ($found_errors) {
+    drupal_set_message(t('Please adjust quantities before continuing to checkout.'));
+    $cart_url = url('cart', array('absolute' => TRUE));
+    drupal_goto($cart_url);
+  }
+}
+
+/**
+ * Determine whether an order has items which are out of stock.
+ *
+ * @return bool
+ *   TRUE if the order has items which are out of stock, FALSE otherwise.
+ */
+function commerce_stock_order_has_out_of_stock($order) {
+  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
+  $outofstock = FALSE;
+  // Check each line item.
+  foreach ($order_wrapper->commerce_line_items as $index => $line_item_wrapper) {
+    if (in_array($line_item_wrapper->getBundle(), commerce_product_line_item_types())) {
+      $product_id = $line_item_wrapper->commerce_product->product_id->value();
+      $product = commerce_product_load($product_id);
+      $qty_ordered = commerce_stock_check_cart_product_level($product_id);
+      // Check using rules.
+      commerce_stock_check_product_checkout_rule($product, $qty_ordered, $stock_state, $message);
+      // Both 1 and 2 are errors.
+      if (($stock_state == 1)|| ($stock_state == 2)) {
+        $outofstock = TRUE;
+        break;
+      }
+    }
+  }
+  return $outofstock;
+}
+
+/**
+ * A demo action for the "Advanced configuration of the add to cart form".
+ *
+ * Demonstrates how you can write your own custom actions to handle the add to
+ * cart.
+ */
+function commerce_stock_test_cart_action($form, &$form_state) {
+  $product_id = $form_state['values']['product_id'];
+  $product = commerce_product_load($product_id);
+  drupal_set_message(t('%title was not added to your cart as this is a test action only.', array('%title' => $product->title)), 'error');
+  // Ensure that page redirects back to its original URL without losing query parameters, such as pagers.
+  // @todo Remove when http://drupal.org/node/171267 is fixed.
+  $form_state['redirect'] = array(current_path(), array('query' => drupal_get_query_parameters()));
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/commerce_stock.rules_defaults.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/commerce_stock.rules_defaults.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/commerce_stock.rules_defaults.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/commerce_stock.rules_defaults.inc	2014-05-21 21:43:23.000000000 +0200
@@ -0,0 +1,6 @@
+<?php
+
+/**
+ * @file
+ * Default rule configurations for Commerce Stock.
+ */
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/commerce_stock.rules.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/commerce_stock.rules.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/commerce_stock.rules.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/commerce_stock.rules.inc	2014-05-21 21:43:23.000000000 +0200
@@ -0,0 +1,439 @@
+<?php
+
+/**
+ * @file
+ * Rules integration for Commerce Stock.
+ */
+
+/**
+ * Implements hook_rules_action_info().
+ *
+ * Provides an action to adjust stock level of a certain product
+ * by a certain quantity.
+ */
+
+/**
+ * Implements hook_rules_event_info().
+ */
+function commerce_stock_rules_event_info() {
+  $events = array();
+
+  $events['commerce_stock_add_to_cart_check_product'] = array(
+    'label' => t('Check if a product is in stock when adding to cart'),
+    'group' => t('Commerce Stock'),
+    'variables' => commerce_stock_rules_event_variables(),
+    'access callback' => 'commerce_stock_rules_access',
+  );
+
+  $events['commerce_stock_check_add_to_cart_form_state'] = array(
+    'label' => t('Check if a product add to cart form should be enabled (is in stock)'),
+    'group' => t('Commerce Stock'),
+    'variables' => commerce_stock_rules_cart_event_variables(),
+    'access callback' => 'commerce_stock_rules_access',
+  );
+
+  $events['commerce_stock_check_product_checkout'] = array(
+    'label' => t('Check if a product is in stock before continuing to checkout'),
+    'group' => t('Commerce Stock'),
+    'variables' => commerce_stock_rules_cart_event_variables(),
+    'access callback' => 'commerce_stock_rules_access',
+  );
+
+  return $events;
+}
+
+/**
+ * Returns a variables array for stock check event.
+ */
+function commerce_stock_rules_event_variables() {
+  $variables = array(
+    'commerce_product' => array(
+      'label' => t('Product'),
+      'type' => 'commerce_product',
+    ),
+    'stock_requested_quantity' => array(
+      'label' => t('Requested Quantity'),
+      'type' => 'decimal',
+    ),
+    'stock_already_ordered' => array(
+      'label' => t('Quantity already ordered (in the cart)'),
+      'type' => 'decimal',
+    ),
+    'stock_requested_total' => array(
+      'label' => t('Quantity requested + already ordered'),
+      'type' => 'decimal',
+    ),
+  );
+  return $variables;
+}
+
+/**
+ * Returns a variables array for stock enable cart check event.
+ */
+function commerce_stock_rules_cart_event_variables() {
+  $variables = array(
+    'commerce_product' => array(
+      'label' => t('Product'),
+      'type' => 'commerce_product',
+    ),
+    'stock_already_ordered' => array(
+      'label' => t('Quantity already ordered (in the cart)'),
+      'type' => 'decimal',
+    ),
+  );
+  return $variables;
+}
+
+/**
+ * Implements hook_rules_condition_info().
+ */
+function commerce_stock_rules_condition_info() {
+  $conditions = array();
+
+  $conditions['commerce_stock_order_has_out_of_stock'] = array(
+    'label' => t('Order has products that are out of stock'),
+    'parameter' => array(
+      'order' => array(
+        'type' => 'commerce_order',
+        'label' => t('Order'),
+      ),
+    ),
+    'group' => t('Commerce Stock'),
+    'callbacks' => array(
+      'execute' => 'commerce_stock_rules_order_has_out_of_stock',
+    ),
+  );
+  return $conditions;
+}
+
+/**
+ * Rules condition: checks to see if the given order is in a cart status.
+ */
+function commerce_stock_rules_order_has_out_of_stock($order) {
+  return commerce_stock_order_has_out_of_stock($order);
+}
+
+/**
+ * Implementation of hook_rules_action_info().
+ */
+function commerce_stock_rules_action_info() {
+  $actions = array();
+
+  // The Stock cart state action.
+  $actions['commerce_stock_add_to_cart_set_state'] = array(
+    'label' => t('Set the result of an add to cart stock check'),
+    'parameter' => array(
+      'stock_action' => array(
+        'type' => 'decimal',
+        'label' => t('Stock Action'),
+        'description' => t('the action to take .'),
+        'options list' => 'commerce_stock_check_state_options_list',
+      ),
+      'message' => array(
+        'type' => 'text',
+        'label' => t('User message'),
+      ),
+      'approved_quantity' => array(
+        'type' => 'decimal',
+        'label' => t('Approved Quantity'),
+      ),
+    ),
+    'group' => t('Commerce Stock'),
+    'callbacks' => array(
+      'execute' => 'commerce_stock_rules_add_to_cart_set_state',
+    ),
+  );
+
+  // The stock disable cart action.
+  $actions['commerce_stock_set_add_to_cart_form_state'] = array(
+    'label' => t('Set the state of the add to cart form'),
+    'parameter' => array(
+      'disabled' => array(
+        'type' => 'boolean',
+        'label' => t('Disable the add to cart?'),
+      ),
+      'text' => array(
+        'type' => 'text',
+        'label' => t('The text to set the action to'),
+      ),
+      'class_name' => array(
+        'type' => 'text',
+        'label' => t('add a class to the add to cart form'),
+      ),
+    ),
+    'group' => t('Commerce Stock'),
+    'callbacks' => array(
+      'execute' => 'commerce_stock_rules_set_add_to_cart_form_state',
+    ),
+  );
+
+  // The stock custom cart action.
+  $actions['commerce_stock_custom_cart_form_state'] = array(
+    'label' => t('Advanced configuration of the add to cart form'),
+    'parameter' => array(
+      'hide_qty' => array(
+        'type' => 'boolean',
+        'label' => t('Hide the Quantity field if it is visible'),
+      ),
+      'text' => array(
+        'type' => 'text',
+        'label' => t('The text to set the action to'),
+      ),
+      'class_name' => array(
+        'type' => 'text',
+        'label' => t('Add a class to the add to cart form'),
+      ),
+      'action_prefix' => array(
+        'type' => 'text',
+        'label' => t('Prefix'),
+        'optional' => TRUE,
+      ),
+      'action_suffix' => array(
+        'type' => 'text',
+        'label' => t('Suffix'),
+        'optional' => TRUE,
+      ),
+      'stock_action' => array(
+        'type' => 'decimal',
+        'label' => t('Stock Action'),
+        'description' => t('The action to take.'),
+        'options list' => 'commerce_stock_custom_cart_form_state_action_options_list',
+        'default value' => 0,
+      ),
+      'disabled_cart' => array(
+        'type' => 'boolean',
+        'label' => t('Disable the add to cart?'),
+        'description' => t('Only aplicable if Normal Submit was chosen as the Stock Action'),
+      ),
+      'custom_submit' => array(
+        'type' => 'text',
+        'label' => t('A new custom submit function'),
+        'optional' => TRUE,
+        'description' => t('Only aplicable if Custom Submit was chosen as the Stock Action'),
+      ),
+      'custom_submit_clear' => array(
+        'type' => 'boolean',
+        'label' => t('Clear the submit array first'),
+        'description' => t('Only aplicable if Custom Submit was chosen as the Stock Action'),
+      ),
+      'custom_validate' => array(
+        'type' => 'text',
+        'label' => t('a new of a custom validation function'),
+        'description' => t('Only aplicable if Custom Submit was chosen as the Stock Action'),
+        'optional' => TRUE,
+      ),
+      'custom_validate_clear' => array(
+        'type' => 'boolean',
+        'label' => t('Clear the validation array first'),
+        'description' => t('Only aplicable if Custom Submit was chosen as the Stock Action'),
+      ),
+      'custom_url' => array(
+        'type' => 'text',
+        'label' => t('Custom URL'),
+        'description' => t('Only aplicable if URL Action was chosen as the Stock Action  (all submit and validation will be ignored). You can use the [product_id] token and [url] for a return path'),
+        'optional' => TRUE,
+
+      ),
+      'custom_html' => array(
+        'type' => 'text',
+        'label' => t('Custom HTML'),
+        'description' => t('Only aplicable if Custom HTML was chosen as the Stock Action  (all submit and validation will be ignored). You can use the [product_id] token and [url] for a return path'),
+        'optional' => TRUE,
+      ),
+    ),
+    'group' => t('Commerce Stock'),
+    'callbacks' => array(
+      'execute' => 'commerce_stock_custom_cart_form_state',
+    ),
+  );
+
+  // The Stock checkout check action.
+  $actions['commerce_stock_checkout_state'] = array(
+    'label' => t('Set the state of the checkout process (called one per an item)'),
+    'parameter' => array(
+      'stock_action' => array(
+        'type' => 'decimal',
+        'label' => t('Stock Action'),
+        'description' => t('the action to take .'),
+        'options list' => 'commerce_stock_check_state_options_list',
+      ),
+      'message' => array(
+        'type' => 'text',
+        'label' => t('User message'),
+      ),
+      'approved_quantity' => array(
+        'type' => 'decimal',
+        'label' => t('Approved Quantity'),
+      ),
+    ),
+    'group' => t('Commerce Stock'),
+    'callbacks' => array(
+      'execute' => 'commerce_stock_rules_set_checkout_state',
+    ),
+  );
+
+  return $actions;
+}
+
+/**
+ * Rules integration access callback.
+ */
+function commerce_stock_rules_access() {
+  return user_access('Make rule based changes to commerce stock');
+}
+
+/**
+ * Rules action: updates an order's status.
+ *
+ * updates an order's status to the default status of the given order state.
+ */
+function commerce_stock_rules_add_to_cart_set_state($stock_action, $message, $approved_quantity) {
+  if ($approved_quantity < 0) {
+    $approved_quantity = 0;
+    // If zero transection must be blocked as it you are not allowed
+    // to add zero quantity to the cart.
+    $stock_action = 1;
+  }
+  // Set the global stock check array.
+  global $stock_check_data;
+  $stock_check_data['state'] = $stock_action;
+  $stock_check_data['message'] = $message;
+  $stock_check_data['qty'] = $approved_quantity;
+}
+
+/**
+ * Rules action:
+ * @todo: Define this function.
+ */
+function commerce_stock_rules_set_add_to_cart_form_state($disabled, $text, $class_name) {
+  global $stock_cart_check_data;
+  $stock_cart_check_data['form']['submit']['#value'] = $text;
+  $stock_cart_check_data['form']['submit']['#disabled'] = $disabled;
+  $stock_cart_check_data['form']['#attributes']['class']['stock'] = $class_name;
+}
+
+/**
+ * @todo: Define this function.
+ */
+function commerce_stock_custom_cart_form_state($hide_qty, $text, $class_name,
+          $action_prefix, $action_suffix, $stock_action, $disabled_cart,
+          $custom_submit, $custom_submit_clear, $custom_validate,
+          $custom_validate_clear, $custom_url, $custom_html) {
+  global $stock_cart_check_data;
+
+  // Read form values.
+  $form_action = $stock_cart_check_data['form']['#action'];
+  if (isset ($stock_cart_check_data['form']['product_id']['#value'])) {
+    $prod_id = $stock_cart_check_data['form']['product_id']['#value'];
+  }
+  elseif (isset ($stock_cart_check_data['form']['product_id']['#default_value'])) {
+    $prod_id = $stock_cart_check_data['form']['product_id']['#default_value'];
+  }
+
+  // Class.
+  $stock_cart_check_data['form']['#attributes']['class']['stock'] = $class_name;
+
+  // Quantity field.
+  if ($hide_qty) {
+    $stock_cart_check_data['form']['quantity']['#access'] = FALSE;
+  }
+
+  // Prefix & sufix.
+  $stock_cart_check_data['form']['submit']['#prefix'] = $action_prefix;
+  $stock_cart_check_data['form']['submit']['#suffix'] = $action_suffix;
+
+  switch ($stock_action) {
+
+    // Normal Submit.
+    case 0:
+      $stock_cart_check_data['form']['submit']['#value'] = $text;
+      $stock_cart_check_data['form']['submit']['#disabled'] = $disabled_cart;
+      break;
+
+    // Custom Submit.
+    case 1:
+      $stock_cart_check_data['form']['submit']['#value'] = $text;
+      // Should we clear the submit array.
+      if ($custom_submit_clear) {
+        $stock_cart_check_data['form']['#submit'] = array();
+      }
+      // Should we clear the validate array.
+      if ($custom_validate_clear) {
+        $stock_cart_check_data['form']['#validate'] = array();
+      }
+      // Add custom submit function.
+      if (!empty($custom_submit)) {
+        $stock_cart_check_data['form']['#submit'][] = $custom_submit;
+      }
+      // Sdd custom validation function.
+      if (!empty($custom_validate)) {
+        $stock_cart_check_data['form']['#validate'][] = $custom_validate;
+      }
+      break;
+
+    // URL Action.
+    case 2:
+      if (!empty($custom_url)) {
+        // Custom url.
+        $custom_url = str_replace('[product_id]', $prod_id, $custom_url);
+        $custom_url = str_replace('[url]', $form_action, $custom_url);
+        $stock_cart_check_data['form']['submit']['#type'] = 'link';
+        $stock_cart_check_data['form']['submit']['#title'] = $text;
+        $stock_cart_check_data['form']['submit']['#href'] = $custom_url;
+      }
+      break;
+
+    // Custom HTML.
+    case 3:
+      if (!empty($custom_html)) {
+        // Custom url.
+        $custom_html = str_replace('[product_id]', $prod_id, $custom_html);
+        $custom_html = str_replace('[url]', $form_action, $custom_html);
+        $stock_cart_check_data['form']['submit']['#type'] = 'markup';
+        $stock_cart_check_data['form']['submit']['#markup'] = $custom_html;
+      }
+      break;
+
+    default:
+      break;
+  }
+}
+
+/**
+ * Rules action: Set the state of the checkout process (called one per an item).
+ */
+function commerce_stock_rules_set_checkout_state($stock_action, $message, $approved_quantity) {
+  if ($approved_quantity < 0) {
+    $approved_quantity = 0;
+    // If zero transection must be blocked as it you are not allowed
+    // to add zero quantity to the cart.
+    $stock_action = 1;
+  }
+  // Set the global stock check array.
+  global $stock_check_data;
+  $stock_check_data['state'] = $stock_action;
+  $stock_check_data['message'] = $message;
+  $stock_check_data['qty'] = $approved_quantity;
+}
+
+/**
+ * Options for stock actions.
+ */
+function commerce_stock_check_state_options_list() {
+  return array(
+    0 => 'do nothing' ,
+    1 => 'block transection',
+    2 => 'display message only');
+}
+
+/**
+ * Options for Advanced configuration of the add to cart form actions.
+ */
+function commerce_stock_custom_cart_form_state_action_options_list() {
+  return array(
+    0 => 'Normal Submit' ,
+    1 => 'Custom Submit',
+    2 => 'URL Action',
+    3 => 'Custom HTML');
+
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/commerce_stock_ui.info drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/commerce_stock_ui.info
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/commerce_stock_ui.info	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/commerce_stock_ui.info	2014-05-21 21:43:23.000000000 +0200
@@ -0,0 +1,14 @@
+name = Commerce stock UI
+description = Provides an interface for viewing and managing stock rules.
+package = Commerce (stock)
+dependencies[] = rules
+dependencies[] = commerce
+dependencies[] = commerce_stock
+core = 7.x
+configure = admin/commerce/config/stock
+; Information added by Drupal.org packaging script on 2014-05-15
+version = "7.x-2.0"
+core = "7.x"
+project = "commerce_stock"
+datestamp = "1400182728"
+
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/commerce_stock_ui.module drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/commerce_stock_ui.module
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/commerce_stock_ui.module	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/commerce_stock_ui.module	2014-05-21 21:43:23.000000000 +0200
@@ -0,0 +1,189 @@
+<?php
+
+/**
+ * @file
+ * Commerce stock UI.
+ */
+
+/**
+ * Implements hook_menu().
+ */
+function commerce_stock_ui_menu() {
+  $items = array();
+
+  // The stock events page.
+  $items['admin/commerce/config/stock/validation'] = array(
+    'title' => 'Stock validation',
+    'description' => 'Manage and configure stock validation events.',
+    'page callback' => 'commerce_stock_admin_event_ruless',
+    'access arguments' => array('administer rules'),
+    'weight' => 5,
+    'type' => MENU_LOCAL_TASK,
+    'file' => 'includes/commerce_stock.admin.inc',
+  );
+  // Add the menu items for the various Rules forms.
+  $controller = new RulesUIController();
+  $items += $controller->config_menu('admin/commerce/config/stock/validation');
+
+  // Add rule validation events.
+  $items['admin/commerce/config/stock/validation/add_cart_state'] = array(
+    'title' => 'Add a Cart state rule',
+    'description' => 'Disable or modify the add to cart form.',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('commerce_stock_ui_add_cart_state_rule_form', 'admin/commerce/config/stock/validation'),
+    'access arguments' => array('administer rules'),
+    'file path' => drupal_get_path('module', 'rules_admin'),
+    'file' => 'rules_admin.inc',
+  );
+
+  $items['admin/commerce/config/stock/validation/add_cart_action'] = array(
+    'title' => 'Add a Cart action rule',
+    'description' => 'Act on the add to cart action.',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('commerce_stock_ui_add_cart_action_rule_form', 'admin/commerce/config/stock/validation'),
+    'access arguments' => array('administer rules'),
+    'file path' => drupal_get_path('module', 'rules_admin'),
+    'file' => 'rules_admin.inc',
+  );
+
+  $items['admin/commerce/config/stock/validation/add_checkout'] = array(
+    'title' => 'Add a Validate cart / checkout rule',
+    'description' => 'Validate products in the the cart before checkout.',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('commerce_stock_ui_add_checkout_rule_form', 'admin/commerce/config/stock/validation'),
+    'access arguments' => array('administer rules'),
+    'file path' => drupal_get_path('module', 'rules_admin'),
+    'file' => 'rules_admin.inc',
+  );
+
+  // The stock control rules page.
+  $items['admin/commerce/config/stock/control'] = array(
+    'title' => 'Stock control',
+    'description' => 'Manage and configure stock control rules.',
+    'page callback' => 'commerce_stock_admin_stock_control_ruless',
+    'access arguments' => array('administer rules'),
+    'weight' => 6,
+    'type' => MENU_LOCAL_TASK,
+    'file' => 'includes/commerce_stock.admin.inc',
+  );
+  // Add the menu items for the various Rules forms.
+  $controller = new RulesUIController();
+  $items += $controller->config_menu('admin/commerce/config/stock/control');
+
+  // Add stock control rule.
+  $items['admin/commerce/config/stock/control/add'] = array(
+    'title' => 'Create a stock control rule',
+    'description' => 'Add a new stock control rule',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('commerce_stock_ui_stock_control_rule_form', 'admin/commerce/config/stock/control'),
+    'access arguments' => array('administer rules'),
+    'file path' => drupal_get_path('module', 'rules_admin'),
+    'file' => 'rules_admin.inc',
+  );
+
+  return $items;
+}
+
+
+/**
+ * Implements hook_menu_local_tasks_alter().
+ */
+function commerce_stock_ui_menu_local_tasks_alter(&$data, $router_item, $root_path) {
+  // Add action links on 'admin/commerce/config/stock/validation'.
+  if ($root_path == 'admin/commerce/config/stock/validation') {
+    $item = menu_get_item('admin/commerce/config/stock/validation/add_cart_state');
+    if ($item['access']) {
+      $data['actions']['output'][] = array(
+        '#theme' => 'menu_local_action',
+        '#link' => $item,
+      );
+    }
+    $item = menu_get_item('admin/commerce/config/stock/validation/add_cart_action');
+    if ($item['access']) {
+      $data['actions']['output'][] = array(
+        '#theme' => 'menu_local_action',
+        '#link' => $item,
+      );
+    }
+    $item = menu_get_item('admin/commerce/config/stock/validation/add_checkout');
+    if ($item['access']) {
+      $data['actions']['output'][] = array(
+        '#theme' => 'menu_local_action',
+        '#link' => $item,
+      );
+
+    }
+  }
+  // Add action links on 'admin/commerce/config/stock/control'.
+  elseif ($root_path == 'admin/commerce/config/stock/control') {
+    $item = menu_get_item('admin/commerce/config/stock/control/add');
+    if ($item['access']) {
+      $data['actions']['output'][] = array(
+        '#theme' => 'menu_local_action',
+        '#link' => $item,
+      );
+    }
+  }
+}
+
+
+/**
+ * Implements hook_forms().
+ *
+ * The stock rule forms that that will be modified with the correct event value.
+ */
+function commerce_stock_ui_forms($form_id, $args) {
+  $forms = array();
+  $forms['commerce_stock_ui_add_cart_state_rule_form'] = array(
+    'callback' => 'rules_admin_add_reaction_rule',
+  );
+  $forms['commerce_stock_ui_add_cart_action_rule_form'] = array(
+    'callback' => 'rules_admin_add_reaction_rule',
+  );
+  $forms['commerce_stock_ui_add_checkout_rule_form'] = array(
+    'callback' => 'rules_admin_add_reaction_rule',
+  );
+  $forms['commerce_stock_ui_stock_control_rule_form'] = array(
+    'callback' => 'rules_admin_add_reaction_rule',
+  );
+  return $forms;
+}
+
+/**
+ * Implements hook_form_FORM_ID_alter().
+ */
+function commerce_stock_ui_form_commerce_stock_ui_add_cart_state_rule_form_alter(&$form, &$form_state) {
+  unset($form['settings']['help']);
+  $form['settings']['event']['#type'] = 'value';
+  $form['settings']['event']['#value'] = 'commerce_stock_check_add_to_cart_form_state';
+  $form['submit']['#suffix'] = l(t('Cancel'), 'admin/commerce/config/stock/validation');
+}
+
+/**
+ * Implements hook_form_FORM_ID_alter().
+ */
+function commerce_stock_ui_form_commerce_stock_ui_add_cart_action_rule_form_alter(&$form, &$form_state) {
+  unset($form['settings']['help']);
+  $form['settings']['event']['#type'] = 'value';
+  $form['settings']['event']['#value'] = 'commerce_stock_add_to_cart_check_product';
+  $form['submit']['#suffix'] = l(t('Cancel'), 'admin/commerce/config/stock/validation');
+}
+
+/**
+ * Implements hook_form_FORM_ID_alter().
+ */
+function commerce_stock_ui_form_commerce_stock_ui_add_checkout_rule_form_alter(&$form, &$form_state) {
+  unset($form['settings']['help']);
+  $form['settings']['event']['#type'] = 'value';
+  $form['settings']['event']['#value'] = 'commerce_stock_check_product_checkout';
+  $form['submit']['#suffix'] = l(t('Cancel'), 'admin/commerce/config/stock/validation');
+}
+
+
+/**
+ * Implements hook_form_FORM_ID_alter().
+ */
+function commerce_stock_ui_form_commerce_stock_ui_stock_control_rule_form_alter(&$form, &$form_state) {
+  $form['settings']['tags']['#value'] = 'stock_control';
+  $form['submit']['#suffix'] = l(t('Cancel'), 'admin/commerce/config/stock/control');
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/includes/commerce_stock.admin.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/includes/commerce_stock.admin.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/includes/commerce_stock.admin.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/includes/commerce_stock.admin.inc	2014-05-21 21:43:23.000000000 +0200
@@ -0,0 +1,129 @@
+<?php
+
+/**
+ * @file
+ * Administrative callbacks and form builder functions for Commerce Stock.
+ */
+
+/**
+ * Commerce Stock admin form.
+ */
+function commerce_stock_admin_form($form, &$form_state) {
+  $form['confirmation'] = array(
+    '#title' => 'Commerce Stock API',
+    '#markup' => 'Commerce stock API enabled',
+  );
+  return $form;
+}
+
+/**
+ * Builds the stock events page.
+ */
+function commerce_stock_admin_event_ruless() {
+
+  // Add a help section.
+  $content['help'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Stock validation'),
+  );
+  $content['help']['about']['#markup']
+    = t('Manage stock validation rules. Those are rules that manage availability of products to your online shoppers.');
+
+  RulesPluginUI::$basePath = 'admin/commerce/config/stock/validation';
+  $options = array('show plugin' => FALSE);
+
+  $content['enabled'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Enabled Stock events'),
+  );
+  $content['disabled'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Disabled Stock events'),
+  );
+
+  // The conditions array.
+  $conditions = array('plugin' => 'reaction rule');
+
+  // Add to cart state.
+  $content['enabled']['cart_form']['title']['#markup'] = '<h3>' . t('Cart state') . '</h3>';
+  $conditions['event'] = 'commerce_stock_check_add_to_cart_form_state';
+  $conditions['active'] = TRUE;
+  $content['enabled']['cart_form']['rules'] = RulesPluginUI::overviewTable($conditions, $options);
+  $content['enabled']['cart_form']['rules']['#empty'] = t('There are no active Cart state rules.');
+  // Disabled.
+  $content['disabled']['cart_form']['title']['#markup'] = '<h3>' . t('Cart state') . '</h3>';
+  $conditions['active'] = FALSE;
+  $content['disabled']['cart_form']['rules'] = RulesPluginUI::overviewTable($conditions, $options);
+  $content['disabled']['cart_form']['rules']['#empty'] = t('There are no disabled Cart state rules.');
+
+  // Add to cart action.
+  $content['enabled']['cart_action']['title']['#markup'] = '<h3>' . t('Add to cart action') . '</h3>';
+  $conditions['event'] = 'commerce_stock_add_to_cart_check_product';
+  $conditions['active'] = TRUE;
+  $content['enabled']['cart_action']['rules'] = RulesPluginUI::overviewTable($conditions, $options);
+  $content['enabled']['cart_action']['rules']['#empty'] = t('There are no active Add to cart action rules.');
+  // Disabled.
+  $content['disabled']['cart_action']['title']['#markup'] = '<h3>' . t('Add to cart action') . '</h3>';
+  $conditions['active'] = FALSE;
+  $content['disabled']['cart_action']['rules'] = RulesPluginUI::overviewTable($conditions, $options);
+  $content['disabled']['cart_action']['rules']['#empty'] = t('There are no disabled cart action rules.');
+
+  // Validate cart / checkout.
+  $content['enabled']['cart_validate']['title']['#markup'] = '<h3>' . t('Validate cart / checkout') . '</h3>';
+  $conditions['event'] = 'commerce_stock_check_product_checkout';
+  $conditions['active'] = TRUE;
+  $content['enabled']['cart_validate']['rules'] = RulesPluginUI::overviewTable($conditions, $options);
+  $content['enabled']['cart_validate']['rules']['#empty'] = t('There are no active Validate cart / checkout rules.');
+  // Disabled.
+  $content['disabled']['cart_validate']['title']['#markup'] = '<h3>' . t('Validate cart / checkout') . '</h3>';
+  $conditions['active'] = FALSE;
+  $content['disabled']['cart_validate']['rules'] = RulesPluginUI::overviewTable($conditions, $options);
+  $content['disabled']['cart_validate']['rules']['#empty'] = t('There are no disabled Validate cart / checkout rules.');
+
+  return $content;
+}
+
+
+/**
+ * Builds the stock control rules page.
+ */
+function commerce_stock_admin_stock_control_ruless() {
+
+  // Add a help section.
+  $content['help'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Stock control'),
+  );
+  $content['help']['about']['#markup']
+    = t('<p>Manage Stock control / backend rules. Those are rules that effect and act on stock levels.</p>');
+  $content['help']['add_existing']['#markup']
+    = t('<p>To add existing rules to the stock control management screen, simply tag them with <strong>stock_control</strong>.</p>');
+
+  RulesPluginUI::$basePath = 'admin/commerce/config/stock/control';
+  $options = array('show plugin' => FALSE);
+
+  $content['enabled'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Enabled Stock control rules'),
+  );
+  $content['disabled'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Disabled Stock control rules'),
+  );
+
+  // The conditions array.
+  $conditions = array('plugin' => 'reaction rule');
+  $conditions['tags'] = array('stock_control');
+
+  // Enabled rules.
+  $conditions['active'] = TRUE;
+  $content['enabled']['rules'] = RulesPluginUI::overviewTable($conditions, $options);
+  $content['enabled']['rules']['#empty'] = t('There are no active rules.');
+
+  // Disabled rules.
+  $conditions['active'] = FALSE;
+  $content['disabled']['rules'] = RulesPluginUI::overviewTable($conditions, $options);
+  $content['disabled']['rules']['#empty'] = t('There are no disabled rules.');
+
+  return $content;
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/LICENSE.txt drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/LICENSE.txt
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/LICENSE.txt	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/LICENSE.txt	2014-05-21 21:43:23.000000000 +0200
@@ -0,0 +1,339 @@
+                    GNU GENERAL PUBLIC LICENSE
+                       Version 2, June 1991
+
+ Copyright (C) 1989, 1991 Free Software Foundation, Inc.,
+ 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+                            Preamble
+
+  The licenses for most software are designed to take away your
+freedom to share and change it.  By contrast, the GNU General Public
+License is intended to guarantee your freedom to share and change free
+software--to make sure the software is free for all its users.  This
+General Public License applies to most of the Free Software
+Foundation's software and to any other program whose authors commit to
+using it.  (Some other Free Software Foundation software is covered by
+the GNU Lesser General Public License instead.)  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+this service if you wish), that you receive source code or can get it
+if you want it, that you can change the software or use pieces of it
+in new free programs; and that you know you can do these things.
+
+  To protect your rights, we need to make restrictions that forbid
+anyone to deny you these rights or to ask you to surrender the rights.
+These restrictions translate to certain responsibilities for you if you
+distribute copies of the software, or if you modify it.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must give the recipients all the rights that
+you have.  You must make sure that they, too, receive or can get the
+source code.  And you must show them these terms so they know their
+rights.
+
+  We protect your rights with two steps: (1) copyright the software, and
+(2) offer you this license which gives you legal permission to copy,
+distribute and/or modify the software.
+
+  Also, for each author's protection and ours, we want to make certain
+that everyone understands that there is no warranty for this free
+software.  If the software is modified by someone else and passed on, we
+want its recipients to know that what they have is not the original, so
+that any problems introduced by others will not reflect on the original
+authors' reputations.
+
+  Finally, any free program is threatened constantly by software
+patents.  We wish to avoid the danger that redistributors of a free
+program will individually obtain patent licenses, in effect making the
+program proprietary.  To prevent this, we have made it clear that any
+patent must be licensed for everyone's free use or not licensed at all.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+                    GNU GENERAL PUBLIC LICENSE
+   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
+
+  0. This License applies to any program or other work which contains
+a notice placed by the copyright holder saying it may be distributed
+under the terms of this General Public License.  The "Program", below,
+refers to any such program or work, and a "work based on the Program"
+means either the Program or any derivative work under copyright law:
+that is to say, a work containing the Program or a portion of it,
+either verbatim or with modifications and/or translated into another
+language.  (Hereinafter, translation is included without limitation in
+the term "modification".)  Each licensee is addressed as "you".
+
+Activities other than copying, distribution and modification are not
+covered by this License; they are outside its scope.  The act of
+running the Program is not restricted, and the output from the Program
+is covered only if its contents constitute a work based on the
+Program (independent of having been made by running the Program).
+Whether that is true depends on what the Program does.
+
+  1. You may copy and distribute verbatim copies of the Program's
+source code as you receive it, in any medium, provided that you
+conspicuously and appropriately publish on each copy an appropriate
+copyright notice and disclaimer of warranty; keep intact all the
+notices that refer to this License and to the absence of any warranty;
+and give any other recipients of the Program a copy of this License
+along with the Program.
+
+You may charge a fee for the physical act of transferring a copy, and
+you may at your option offer warranty protection in exchange for a fee.
+
+  2. You may modify your copy or copies of the Program or any portion
+of it, thus forming a work based on the Program, and copy and
+distribute such modifications or work under the terms of Section 1
+above, provided that you also meet all of these conditions:
+
+    a) You must cause the modified files to carry prominent notices
+    stating that you changed the files and the date of any change.
+
+    b) You must cause any work that you distribute or publish, that in
+    whole or in part contains or is derived from the Program or any
+    part thereof, to be licensed as a whole at no charge to all third
+    parties under the terms of this License.
+
+    c) If the modified program normally reads commands interactively
+    when run, you must cause it, when started running for such
+    interactive use in the most ordinary way, to print or display an
+    announcement including an appropriate copyright notice and a
+    notice that there is no warranty (or else, saying that you provide
+    a warranty) and that users may redistribute the program under
+    these conditions, and telling the user how to view a copy of this
+    License.  (Exception: if the Program itself is interactive but
+    does not normally print such an announcement, your work based on
+    the Program is not required to print an announcement.)
+
+These requirements apply to the modified work as a whole.  If
+identifiable sections of that work are not derived from the Program,
+and can be reasonably considered independent and separate works in
+themselves, then this License, and its terms, do not apply to those
+sections when you distribute them as separate works.  But when you
+distribute the same sections as part of a whole which is a work based
+on the Program, the distribution of the whole must be on the terms of
+this License, whose permissions for other licensees extend to the
+entire whole, and thus to each and every part regardless of who wrote it.
+
+Thus, it is not the intent of this section to claim rights or contest
+your rights to work written entirely by you; rather, the intent is to
+exercise the right to control the distribution of derivative or
+collective works based on the Program.
+
+In addition, mere aggregation of another work not based on the Program
+with the Program (or with a work based on the Program) on a volume of
+a storage or distribution medium does not bring the other work under
+the scope of this License.
+
+  3. You may copy and distribute the Program (or a work based on it,
+under Section 2) in object code or executable form under the terms of
+Sections 1 and 2 above provided that you also do one of the following:
+
+    a) Accompany it with the complete corresponding machine-readable
+    source code, which must be distributed under the terms of Sections
+    1 and 2 above on a medium customarily used for software interchange; or,
+
+    b) Accompany it with a written offer, valid for at least three
+    years, to give any third party, for a charge no more than your
+    cost of physically performing source distribution, a complete
+    machine-readable copy of the corresponding source code, to be
+    distributed under the terms of Sections 1 and 2 above on a medium
+    customarily used for software interchange; or,
+
+    c) Accompany it with the information you received as to the offer
+    to distribute corresponding source code.  (This alternative is
+    allowed only for noncommercial distribution and only if you
+    received the program in object code or executable form with such
+    an offer, in accord with Subsection b above.)
+
+The source code for a work means the preferred form of the work for
+making modifications to it.  For an executable work, complete source
+code means all the source code for all modules it contains, plus any
+associated interface definition files, plus the scripts used to
+control compilation and installation of the executable.  However, as a
+special exception, the source code distributed need not include
+anything that is normally distributed (in either source or binary
+form) with the major components (compiler, kernel, and so on) of the
+operating system on which the executable runs, unless that component
+itself accompanies the executable.
+
+If distribution of executable or object code is made by offering
+access to copy from a designated place, then offering equivalent
+access to copy the source code from the same place counts as
+distribution of the source code, even though third parties are not
+compelled to copy the source along with the object code.
+
+  4. You may not copy, modify, sublicense, or distribute the Program
+except as expressly provided under this License.  Any attempt
+otherwise to copy, modify, sublicense or distribute the Program is
+void, and will automatically terminate your rights under this License.
+However, parties who have received copies, or rights, from you under
+this License will not have their licenses terminated so long as such
+parties remain in full compliance.
+
+  5. You are not required to accept this License, since you have not
+signed it.  However, nothing else grants you permission to modify or
+distribute the Program or its derivative works.  These actions are
+prohibited by law if you do not accept this License.  Therefore, by
+modifying or distributing the Program (or any work based on the
+Program), you indicate your acceptance of this License to do so, and
+all its terms and conditions for copying, distributing or modifying
+the Program or works based on it.
+
+  6. Each time you redistribute the Program (or any work based on the
+Program), the recipient automatically receives a license from the
+original licensor to copy, distribute or modify the Program subject to
+these terms and conditions.  You may not impose any further
+restrictions on the recipients' exercise of the rights granted herein.
+You are not responsible for enforcing compliance by third parties to
+this License.
+
+  7. If, as a consequence of a court judgment or allegation of patent
+infringement or for any other reason (not limited to patent issues),
+conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot
+distribute so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you
+may not distribute the Program at all.  For example, if a patent
+license would not permit royalty-free redistribution of the Program by
+all those who receive copies directly or indirectly through you, then
+the only way you could satisfy both it and this License would be to
+refrain entirely from distribution of the Program.
+
+If any portion of this section is held invalid or unenforceable under
+any particular circumstance, the balance of the section is intended to
+apply and the section as a whole is intended to apply in other
+circumstances.
+
+It is not the purpose of this section to induce you to infringe any
+patents or other property right claims or to contest validity of any
+such claims; this section has the sole purpose of protecting the
+integrity of the free software distribution system, which is
+implemented by public license practices.  Many people have made
+generous contributions to the wide range of software distributed
+through that system in reliance on consistent application of that
+system; it is up to the author/donor to decide if he or she is willing
+to distribute software through any other system and a licensee cannot
+impose that choice.
+
+This section is intended to make thoroughly clear what is believed to
+be a consequence of the rest of this License.
+
+  8. If the distribution and/or use of the Program is restricted in
+certain countries either by patents or by copyrighted interfaces, the
+original copyright holder who places the Program under this License
+may add an explicit geographical distribution limitation excluding
+those countries, so that distribution is permitted only in or among
+countries not thus excluded.  In such case, this License incorporates
+the limitation as if written in the body of this License.
+
+  9. The Free Software Foundation may publish revised and/or new versions
+of the General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+Each version is given a distinguishing version number.  If the Program
+specifies a version number of this License which applies to it and "any
+later version", you have the option of following the terms and conditions
+either of that version or of any later version published by the Free
+Software Foundation.  If the Program does not specify a version number of
+this License, you may choose any version ever published by the Free Software
+Foundation.
+
+  10. If you wish to incorporate parts of the Program into other free
+programs whose distribution conditions are different, write to the author
+to ask for permission.  For software which is copyrighted by the Free
+Software Foundation, write to the Free Software Foundation; we sometimes
+make exceptions for this.  Our decision will be guided by the two goals
+of preserving the free status of all derivatives of our free software and
+of promoting the sharing and reuse of software generally.
+
+                            NO WARRANTY
+
+  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
+FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
+OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
+PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
+OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
+TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
+PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
+REPAIR OR CORRECTION.
+
+  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
+REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
+INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
+OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
+TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
+YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
+PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
+POSSIBILITY OF SUCH DAMAGES.
+
+                     END OF TERMS AND CONDITIONS
+
+            How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+convey the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    <one line to give the program's name and a brief idea of what it does.>
+    Copyright (C) <year>  <name of author>
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License along
+    with this program; if not, write to the Free Software Foundation, Inc.,
+    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+
+Also add information on how to contact you by electronic and paper mail.
+
+If the program is interactive, make it output a short notice like this
+when it starts in an interactive mode:
+
+    Gnomovision version 69, Copyright (C) year name of author
+    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, the commands you use may
+be called something other than `show w' and `show c'; they could even be
+mouse-clicks or menu items--whatever suits your program.
+
+You should also get your employer (if you work as a programmer) or your
+school, if any, to sign a "copyright disclaimer" for the program, if
+necessary.  Here is a sample; alter the names:
+
+  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
+  `Gnomovision' (which makes passes at compilers) written by James Hacker.
+
+  <signature of Ty Coon>, 1 April 1989
+  Ty Coon, President of Vice
+
+This General Public License does not permit incorporating your program into
+proprietary programs.  If your program is a subroutine library, you may
+consider it more useful to permit linking proprietary applications with the
+library.  If this is what you want to do, use the GNU Lesser General
+Public License instead of this License.
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/modules/commerce_sdf/commerce_sdf.info drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/modules/commerce_sdf/commerce_sdf.info
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/modules/commerce_sdf/commerce_sdf.info	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/modules/commerce_sdf/commerce_sdf.info	2014-05-21 21:43:23.000000000 +0200
@@ -0,0 +1,11 @@
+name = Commerce Stock Decimal formatter
+description = Provide a Decimal formater for converting stock levels into text messages.
+package = Commerce (stock)
+dependencies[] = number
+core = 7.x
+; Information added by Drupal.org packaging script on 2014-05-15
+version = "7.x-2.0"
+core = "7.x"
+project = "commerce_stock"
+datestamp = "1400182728"
+
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/modules/commerce_sdf/commerce_sdf.module drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/modules/commerce_sdf/commerce_sdf.module
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/modules/commerce_sdf/commerce_sdf.module	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/modules/commerce_sdf/commerce_sdf.module	2014-05-21 21:43:23.000000000 +0200
@@ -0,0 +1,152 @@
+<?php
+
+/**
+ * @file
+ * Provide a Decimal formater for converting stock levels into text messages.
+ */
+
+/**
+ * Implements hook_field_formatter_info().
+ */
+function commerce_sdf_field_formatter_info() {
+  $settings = array();
+  // Defaults for in and out of stock.
+  $settings['display'][0]['seuil'] = 0;
+  $settings['display'][0]['message'] = t('Out of stock');
+  $settings['display'][1]['seuil'] = 99999999;
+  $settings['display'][1]['message'] = t('In stock');
+
+  // Add empty values.
+  for ($i = 2; $i < 5; $i++) {
+    $settings['display'][$i]['seuil'] = '';
+    $settings['display'][$i]['message'] = '';
+    $settings['display'][$i]['classname'] = '';
+  }
+
+  // Return the formatter info.
+  return array(
+    'commerce_sdf_formatter' => array(
+      'label' => t('Show stock display as message'),
+      'field types' => array('number_decimal'),
+      'settings' => $settings,
+    ),
+  );
+}
+
+/**
+ * Implements hook_field_formatter_settings_summary().
+ */
+function commerce_sdf_field_formatter_settings_summary($field, $instance, $view_mode) {
+  $display = $instance['display'][$view_mode];
+  $settings = $display['settings'];
+
+  if ($display['type'] == 'commerce_sdf_formatter') {
+    $display = $instance['display'][$view_mode];
+    $settings = $display['settings'];
+    $summary = '';
+    foreach ($settings['display'] as $row => $seuilstr) {
+      $seuil = $seuilstr['seuil'];
+      if ($seuil !== '') {
+        $summary .= t('Print @message when stock is <= @seuil.', array(
+          '@seuil' => $settings['display'][$row]['seuil'],
+          '@message' => $settings['display'][$row]['message'],
+        )) . "<br />";
+      }
+    }
+    return $summary;
+  }
+}
+
+/**
+ * Implements hook_field_formatter_settings_form().
+ */
+function commerce_sdf_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
+  $display = $instance['display'][$view_mode];
+  $settings = $display['settings'];
+  $element = array();
+  if ($display['type'] == 'commerce_sdf_formatter') {
+    $element['help'] = array(
+      '#markup' => 'You can use the token @stock as part of the Message (i.e. "only @stock in stock")',
+      '#prefix' => '<div>',
+      '#suffix' => '</div>',
+    );
+    $element['display'] = array(
+      '#markup' => '',
+      '#prefix' => '<table style="width:100%;">',
+      '#suffix' => '</table>',
+      '#tree' => TRUE,
+    );
+    $element['display']['header'] = array(
+      '#markup' => '<thead>
+        <tr>
+          <th style="width:150px">&nbsp;</th>
+          <th style="width:100px">Seuil</th>
+          <th style="width:300px">Message</th>
+          <th style="width:200px">classname</th>
+        </tr>
+      </thead>',
+    );
+
+    for ($i=0;$i<5;$i++) {
+      $element['display'][$i] = array(
+        '#prefix' => '<tr>',
+        '#suffix' => '</tr>',
+      );
+      $element['display'][$i]["text"] = array(
+        '#markup' => '<td style="width:150px">If stock &lt;=</td>',
+        '#size' => 10,
+      );
+      $element['display'][$i]["seuil"] = array(
+        '#type' => 'textfield',
+        '#default_value' => $settings['display'][$i]['seuil'],
+        '#size' => 5,
+        '#disabled' => ($i == 0),
+        '#prefix' => '<td>',
+        '#suffix' => '</td>',
+      );
+      $element['display'][$i]["message"] = array(
+        '#type' => 'textfield',
+        '#default_value' => $settings['display'][$i]['message'],
+        '#prefix' => '<td>',
+        '#size' => 30,
+        '#suffix' => '</td>',
+      );
+      $element['display'][$i]["classname"] = array(
+        '#type' => 'textfield',
+        '#size' => 20,
+        '#default_value' => $settings['display'][$i]['classname'],
+        '#prefix' => '<td>',
+        '#suffix' => '</td>',
+      );
+    }
+  }
+  return $element;
+}
+
+/**
+ * Implements hook_field_formatter_view().
+ */
+function commerce_sdf_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
+  // Get the settings.
+  $settings = $display['settings'];
+  // Initialize the var.
+  $element = array();
+  $stock = round($items[0]['value']);
+  $anc_seuil = -9999999;
+  foreach ($settings['display'] as $row => $seuilstr) {
+    $seuil = $seuilstr['seuil'];
+    if (is_numeric($seuil)) {
+      if ($stock > $anc_seuil && $stock <= $seuil) {
+        if (isset($seuilstr['classname'])) {
+          $element[0]['#markup'] = "<span class='" . $seuilstr['classname'] . "'>" . t($settings['display'][$row]['message'], array("@stock" => $stock)) . "</span>";
+        }
+        else {
+          $element[0]['#markup'] = "<span>" . t($settings['display'][$row]['message'], array("@stock" => $stock)) . "</span>";
+        }
+        break;
+      }
+      $anc_seuil = $seuil;
+    }
+  }
+  return $element;
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/modules/commerce_ss/commerce_ss.info drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/modules/commerce_ss/commerce_ss.info
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/modules/commerce_ss/commerce_ss.info	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/modules/commerce_ss/commerce_ss.info	2014-05-21 21:43:23.000000000 +0200
@@ -0,0 +1,17 @@
+name = Commerce Simple Stock
+description = Manage stock levels of Commerce products using a decimal level field and rules
+package = Commerce (stock)
+dependencies[] = number
+dependencies[] = commerce_product
+dependencies[] = commerce_order
+dependencies[] = commerce_stock
+dependencies[] = commerce_checkout
+dependencies[] = rules
+core = 7.x
+configure = admin/commerce/config/stock/ss
+; Information added by Drupal.org packaging script on 2014-05-15
+version = "7.x-2.0"
+core = "7.x"
+project = "commerce_stock"
+datestamp = "1400182728"
+
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/modules/commerce_ss/commerce_ss.install drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/modules/commerce_ss/commerce_ss.install
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/modules/commerce_ss/commerce_ss.install	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/modules/commerce_ss/commerce_ss.install	2014-05-21 21:43:23.000000000 +0200
@@ -0,0 +1,21 @@
+<?php
+
+/**
+ * @file
+ * Install, update, and uninstall functions for commerce_ss.
+ */
+
+
+
+/**
+ * Implements hook_uninstall().
+ */
+function commerce_ss_uninstall() {
+  // We may have a number of variables one for each type enabled so safer to use
+  // a db_delete() with a like then a variable_del().
+  db_delete('variable')
+    ->condition('name', "commerce_stock_decimal_backend_%", "LIKE")
+    ->execute();
+  // Clear the variables cache.
+  cache_clear_all('variables', 'cache_bootstrap');
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/modules/commerce_ss/commerce_ss.module drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/modules/commerce_ss/commerce_ss.module
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/modules/commerce_ss/commerce_ss.module	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/modules/commerce_ss/commerce_ss.module	2014-05-21 21:43:23.000000000 +0200
@@ -0,0 +1,252 @@
+<?php
+
+/**
+ * @file
+ * Allow commerce products to have stock levels associated with their SKU
+ *
+ * Commerce Stock enables Commerce to manage stock for products. Store admins
+ * can set the stock levels on a product edit page.
+ */
+
+/**
+ * Implements hook_menu().
+ */
+function commerce_ss_menu() {
+  $items = array();
+
+  $items['admin/commerce/config/stock/ss'] = array(
+    'title' => 'Simple Stock management',
+    'description' => 'Configure Simple stock.',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('commerce_ss_admin_form'),
+    'access arguments' => array('administer commerce_stock settings'),
+    'file' => 'includes/commerce_ss.admin.inc',
+    'type'  => MENU_LOCAL_TASK,
+
+  );
+  return $items;
+}
+
+/**
+ * Implements hook_entity_property_info_alter().
+ */
+function commerce_ss_entity_property_info_alter(&$info) {
+  // Copy metadata about our stock field from the product bundle to the
+  // commerce_product entity.
+  if (!empty($info['commerce_product']['bundles'])) {
+    $properties = array();
+
+    foreach ($info['commerce_product']['bundles'] as $bundle => $bundle_info) {
+      $bundle_info += array('properties' => array());
+      $properties += $bundle_info['properties'];
+    }
+
+    if (isset($properties['commerce_stock'])) {
+      $info['commerce_product']['properties']['commerce_stock'] = $properties['commerce_stock'];
+    }
+    if (isset($properties['commerce_stock_override'])) {
+      $info['commerce_product']['properties']['commerce_stock_override'] = $properties['commerce_stock_override'];
+    }
+
+  }
+}
+
+/**
+ * Implements hook_token_info().
+ */
+function commerce_ss_token_info() {
+  $info['tokens']['commerce-product']['commerce-stock-int'] = array(
+    'name' => t('Stock level (int)'),
+    'description' => t('The stock level as an integer'),
+  );
+
+  $info['tokens']['commerce-product']['commerce-stock-user'] = array(
+    'name' => t('Stock level available for the user'),
+    'description' => t('The available stock level for the current user'),
+  );
+  return $info;
+}
+
+/**
+ * Implements hook_tokens().
+ */
+function commerce_ss_tokens($type, $tokens, array $data = array(), array $options = array()) {
+  $replacements = array();
+  if ($type == 'commerce-product' && !empty($data['commerce-product'])) {
+    $product = entity_metadata_wrapper('commerce_product', $data['commerce-product']);
+    foreach ($tokens as $name => $original) {
+      switch ($name) {
+        case 'commerce-stock-int':
+          $replacements[$original] = (int) $product->commerce_stock->value();
+          break;
+
+        case 'commerce-stock-user':
+          $replacements[$original] = $product->commerce_stock->value() -
+                commerce_stock_check_cart_product_level($product->product_id->value());
+          break;
+      }
+    }
+  }
+  return $replacements;
+}
+
+
+
+/**
+ * Implements hook_form_ID_alter().
+ *
+ * Provides a checkbox on the Product type edit form to allow decimal
+ * quantities for stock managment.
+ */
+function commerce_ss_form_commerce_product_ui_product_type_form_alter(&$form, &$form_state) {
+  // Get the product bundle type.
+  $type = $form_state['product_type']['type'];
+  // Check if stock enabled for the type.
+  if (commerce_ss_product_type_enabled($type)) {
+    $form['product_type']['decimal_admin'] = array(
+      // Provide a configuration option for decimal stock
+      '#type' => 'checkbox',
+      '#title' => t('Allow decimal quantities for stock administration'),
+      '#default_value' => variable_get('commerce_stock_decimal_backend_'.$type, FALSE),
+      '#description' => t('Check this box if you want to allow the users to set decimal stock levels on product edit forms.'),
+      '#element_validate' => array('commerce_ss_checkbox_validate'),
+    );
+  }
+}
+
+/**
+ * Element validation callback for the decimal checkbox.
+ */
+function commerce_ss_checkbox_validate($element, &$form_state, $form) {
+  // Get the product bundle type.
+  $type = $form_state['product_type']['type'];
+  // Check if stock enabled for the type.
+  if (commerce_ss_product_type_enabled($type)) {
+    // Set the configuration option for decimal stock.
+    variable_set('commerce_stock_decimal_backend_' . $type, $form_state['values']['product_type']['decimal_admin'] );
+  }
+}
+
+
+/**
+ * Implements hook_form_ID_alter().
+ *
+ * Controll the decimal quantities option when editing products.
+ */
+function commerce_ss_form_commerce_product_ui_product_form_alter(&$form, &$form_state) {
+  // Get the product bundle type.
+  $type = $form_state['commerce_product']->type;
+  // Check if stock enabled for the type.
+  if (commerce_ss_product_type_enabled($type)) {
+    $decimal = variable_get('commerce_stock_decimal_backend_'.$type, FALSE);
+    if (!$decimal) {
+      // Get the fields language.
+      $language = $form['commerce_stock']['#language'];
+      // Set the number format to decimal.
+      $form['commerce_stock'][$language][0]['value']['#number_type'] = 'integer';
+      $form['commerce_stock'][$language][0]['value']['#default_value']
+        = intval($form['commerce_stock'][$language][0]['value']['#default_value']);
+    }
+  }
+}
+
+/**
+ * Determines whether stock management is enabled on a product type.
+ *
+ * @param $type
+ *   The product type.
+ *
+ * @return bool
+ *   TRUE if stock management is enabled.
+ */
+function commerce_ss_product_type_enabled($type) {
+  $instance = field_info_instance('commerce_product', 'commerce_stock', $type);
+  return (!empty($instance));
+}
+
+/**
+ * Determines whether stock management override is enabled on a product type.
+ *
+ * @param $type
+ *   The product type.
+ *
+ * @return bool
+ *   TRUE if stock management override is enabled.
+ */
+function commerce_ss_product_type_override_enabled($type) {
+  $instance = field_info_instance('commerce_product', 'commerce_stock_override', $type);
+  return (!empty($instance));
+}
+
+/**
+ * Determines whether stock management is enabled for a product.
+ *
+ * @param $product
+ *   The product to check.
+ *
+ * @return bool
+ *   TRUE if stock management is enabled on the product's product type.
+ */
+function commerce_ss_product_enabled($product) {
+  return commerce_ss_product_type_enabled($product->type);
+}
+
+/**
+ * For a given a line item, determine whether stock management is enabled.
+ *
+ * @param $line_item
+ *   The line item to check.
+ *
+ * @return
+ *   Boolean: TRUE if stock management is enabled on the product's product type.
+ */
+function commerce_ss_line_item_product_enabled($line_item) {
+  return commerce_ss_product_type_enabled($line_item->product->type);
+}
+
+
+/**
+ * This function makes sure stock is enabled for product.
+ * if true is return stock checking is enabled
+ * if false stock checking is disabled
+ *
+ * @todo rename function  confusing name its not product thats not disabled
+ *   its the stock check for the product thats disabled
+ *
+ * @param type $product
+ * @return boolean
+ */
+function commerce_ss_product_not_disabled_by_override($product) {
+  $stock_check_enabled = TRUE;
+  // If product overide enabled for the product type.
+  if (commerce_ss_product_type_override_enabled($product->type)) {
+    // If the product has its override set and is turned on.
+    if ((isset($product->commerce_stock_override['und']) && $product->commerce_stock_override['und'][0]['value'] == 1)) {
+      $stock_check_enabled = FALSE;
+    }
+  }
+  return $stock_check_enabled;
+}
+
+/**
+ * Implements hook_inline_entity_form_table_fields_alter().
+ */
+function commerce_ss_inline_entity_form_table_fields_alter(&$fields, $context) {
+  if ($context['entity_type'] == 'commerce_product') {
+    // Make sure there's a stock field on each of the allowed product types.
+    $has_stock_field = TRUE;
+    foreach ($context['allowed_bundles'] as $bundle) {
+      if (!commerce_ss_product_type_enabled($bundle)) {
+        $has_stock_field = FALSE;
+      }
+    }
+
+    if ($has_stock_field) {
+      $fields['commerce_stock'] = array(
+        'type' => 'field',
+        'label' => t('Stock'),
+        'weight' => 101,
+      );
+    }
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/modules/commerce_ss/commerce_ss.rules_defaults.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/modules/commerce_ss/commerce_ss.rules_defaults.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/modules/commerce_ss/commerce_ss.rules_defaults.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/modules/commerce_ss/commerce_ss.rules_defaults.inc	2014-05-21 21:43:23.000000000 +0200
@@ -0,0 +1,35 @@
+<?php
+
+/**
+ * @file
+ * Default rule configurations for Commerce Simple Stock.
+ */
+
+/**
+ * Implements hook_default_rules_configuration().
+ */
+function commerce_ss_default_rules_configuration() {
+  $rules = array();
+
+  $rules_export = '{ "rules_stock_decrease_when_completing_the_order_process" : {
+    "LABEL" : "Stock: Decrease when completing the order process",
+    "PLUGIN" : "reaction rule",
+    "TAGS" : [ "stock_control" ],
+    "REQUIRES" : [ "commerce_ss", "commerce_checkout" ],
+    "ON" : [ "commerce_checkout_complete" ],
+    "DO" : [
+      { "LOOP" : {
+          "USING" : { "list" : [ "commerce-order:commerce-line-items" ] },
+          "ITEM" : { "list_item" : "Current list item" },
+          "DO" : [
+            { "commerce_ss_decrease_by_line_item" : { "commerce_line_item" : [ "list-item" ] } }
+          ]
+        }
+      }
+    ]
+  } }';
+
+  $rules['rules_decrement_stock_completing_order'] = rules_import($rules_export);
+
+  return $rules;
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/modules/commerce_ss/commerce_ss.rules.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/modules/commerce_ss/commerce_ss.rules.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/modules/commerce_ss/commerce_ss.rules.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/modules/commerce_ss/commerce_ss.rules.inc	2014-05-21 21:43:23.000000000 +0200
@@ -0,0 +1,160 @@
+<?php
+
+/**
+ * @file
+ * Rules integration for Commerce Simple Stock.
+ */
+
+/**
+ * Implements hook_rules_condition_info().
+ */
+function commerce_ss_rules_condition_info() {
+  $conditions = array();
+
+  $conditions['commerce_ss_stock_enabled_on_product'] = array(
+    'label' => t('Product has simple stock enabled for its type'),
+    'parameter' => array(
+      'commerce_product' => array(
+        'type' => 'commerce_product',
+        'label' => t('product'),
+      ),
+    ),
+    'group' => t('Commerce Stock (ss)'),
+    'callbacks' => array(
+      // @todo add a function that also checked that the "Disable stock
+      // for this product" is not on or maybe add another condision form.
+      'execute' => 'commerce_ss_product_enabled',
+    ),
+  );
+
+  $conditions['commerce_ss_stock_not_disabled'] = array(
+    'label' => t('Product simple stock is not disabled by an override'),
+    'parameter' => array(
+      'commerce_product' => array(
+        'type' => 'commerce_product',
+        'label' => t('product'),
+      ),
+    ),
+    'group' => t('Commerce Stock (ss)'),
+    'callbacks' => array(
+      // @todo add a function that also checked that the "Disable stock for
+      // this product" is not on or maybe add another condision form.
+      'execute' => 'commerce_ss_product_not_disabled_by_override',
+    ),
+  );
+
+  return $conditions;
+}
+
+/**
+ * Implements hook_rules_action_info().
+ */
+function commerce_ss_rules_action_info() {
+  $actions = array();
+
+  $actions['commerce_ss_decrease_by_line_item'] = array(
+    'label' => t('Decrease the product stock level, given a line item'),
+    'group' => t('Commerce Stock (ss)'),
+    'parameter' => array(
+      'commerce_line_item' => array(
+        'type' => 'commerce_line_item',
+        'label' => t('Line item'),
+      ),
+    ),
+  );
+
+  $actions['commerce_ss_increase_by_line_item'] = array(
+    'label' => t('Increase the product stock level, given a line item'),
+    'group' => t('Commerce Stock (ss)'),
+    'parameter' => array(
+      'commerce_line_item' => array(
+        'type' => 'commerce_line_item',
+        'label' => t('Line item'),
+      ),
+    ),
+  );
+
+  return $actions;
+}
+
+
+/**
+ * Substracts from stock the sold amount in a line item.
+ *
+ * @param $line_item
+ *   A line item object.
+ */
+function commerce_ss_decrease_by_line_item($line_item) {
+  if (in_array($line_item->type, commerce_product_line_item_types())) {
+    // The product SKU that will have its stock level adjusted.
+    $sku = $line_item->line_item_label;
+    $product = commerce_product_load_by_sku($sku);
+    if (commerce_ss_product_type_enabled($product->type)) {
+      if (!(commerce_ss_product_type_override_enabled($product->type)
+          && isset($product->commerce_stock_override['und']) && $product->commerce_stock_override['und'][0]['value'] == 1)) {
+
+        $qty = $line_item->quantity;
+        // Subtract the sold amount from the available stock level.
+        commerce_ss_stock_adjust($product, -$qty);
+      }
+    }
+  }
+}
+
+
+/**
+ * Adds the sold amount in a line item to stock.
+ *
+ * Typically used when a line item is removed from an order (as when items are
+ * added to and removed from cart).
+ *
+ * @param $line_item
+ *   A line item object.
+ */
+function commerce_ss_increase_by_line_item($line_item) {
+  if (in_array($line_item->type, commerce_product_line_item_types())) {
+    // The product SKU that will have its stock level adjusted.
+    $sku = $line_item->line_item_label;
+    $product = commerce_product_load_by_sku($sku);
+    if (commerce_ss_product_type_enabled($product->type)) {
+      if (!(commerce_ss_product_type_override_enabled($product->type)
+           && isset($product->commerce_stock_override['und']) && $product->commerce_stock_override['und'][0]['value'] == 1)) {
+
+        $qty = $line_item->quantity;
+        // Subtract the sold amount from the available stock level.
+        commerce_ss_stock_adjust($product, $qty);
+      }
+    }
+  }
+}
+
+/**
+ * Adjusts a particular product SKU by a certain value.
+ *
+ * A positive number will add to stock, a negative number will remove from
+ * stock. Somewhat the equivalent of uc_stock_adjust().
+ *
+ * @param $product
+ *   The product for which to change the stock level.
+ * @param $qty
+ *   The quantity to add to the stock level.
+ */
+function commerce_ss_stock_adjust($product, $qty) {
+  if (!commerce_ss_product_type_enabled($product->type)) {
+    return;
+  }
+
+  $wrapper = entity_metadata_wrapper('commerce_product', $product);
+
+  $new_stock = $wrapper->commerce_stock->value() + $qty;
+  $wrapper->commerce_stock->set($new_stock);
+  $result = $wrapper->save();
+
+  // @todo should this be moved to the
+  if ($result) {
+    watchdog('commerce_stock', 'Modified stock level of product %sku by %amount', array('%sku' => $product->sku, '%amount' => $qty));
+  }
+  else {
+    watchdog('commerce_stock', 'Failed attempt to modify stock level of product %sku by %amount', array('%sku' => $product->sku, '%amount' => $qty), WATCHDOG_ERROR);
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/modules/commerce_ss/includes/commerce_ss.admin.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/modules/commerce_ss/includes/commerce_ss.admin.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/modules/commerce_ss/includes/commerce_ss.admin.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/modules/commerce_ss/includes/commerce_ss.admin.inc	2014-05-21 21:43:23.000000000 +0200
@@ -0,0 +1,345 @@
+<?php
+
+/**
+ * @file
+ * Administrative callbacks and form builder functions for Commerce Stock.
+ */
+
+/**
+ * Commerce Stock admin form.
+ */
+function commerce_ss_admin_form($form, &$form_state) {
+  // Find out what our status is. Use both the state of existing fields
+  // and the state of variables to determine what's right.
+
+  $field_name = 'commerce_stock';
+  $field = field_info_field($field_name);
+
+  $form['#tree'] = TRUE;
+
+  $form['product_types'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Enable stock management for these product types'),
+    '#description' => t('Note that disabling stock management removes the Stock field from the product type, deleting any existing stock data for that product type.')
+  );
+
+  $form['product_types_override'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Enable stock management override for these product types'),
+    '#description' => t('Note that disabling stock management override removes the Stock override field from the product type, deleting any existing stock override data for that product type.')
+  );
+
+  // Create a checkbox for each product type, set with the current stock-
+  // enabled state.
+  foreach (commerce_product_types() as $type => $product_type) {
+    $instance[$type] = field_info_instance('commerce_product', 'commerce_stock', $type);
+    $enabled[$type] = (!empty($instance[$type]));
+
+    $form['product_types'][$type] = array(
+      '#type' => 'checkbox',
+      '#default_value' => $enabled[$type],
+      '#title' => t('@name (@machine_name)', array('@name' => $product_type['name'], '@machine_name' => $type)),
+    );
+
+    if ($enabled[$type]) {
+      $instance[$type] = field_info_instance('commerce_product', 'commerce_stock_override', $type);
+      $enabled[$type] = (!empty($instance[$type]));
+
+      $form['product_types_override'][$type] = array(
+        '#type' => 'checkbox',
+        '#default_value' => $enabled[$type],
+        '#title' => t('Allow stock override for @name (@machine_name)', array('@name' => $product_type['name'], '@machine_name' => $type)),
+      );
+    }
+  }
+
+  // Add a checkbox that requires them to say "I do", but don't show it
+  // (#access == FALSE) unless they're deleting.
+  if (!empty($form_state['commerce_stock']['delete_instances'])) {
+    $type_plural = format_plural(count($form_state['commerce_stock']['delete_instances']), t('type'), t('types'));
+    $affirmation = t('I understand that all stock data will be permanently removed from the product @type_plural %product_types.',
+      array(
+        '@type_plural' => $type_plural,
+        '%product_types' => implode(', ', $form_state['commerce_stock']['delete_instances']),
+      )
+    );
+  }
+  $form['confirmation'] = array(
+    '#type' => 'checkbox',
+    '#title' => !empty($affirmation) ? $affirmation : '',
+    '#default_value' => FALSE,
+    '#access' => FALSE,
+  );
+  $form['submit'] = array(
+    '#type' => 'submit',
+    '#value' => t('Submit'),
+  );
+
+  // If they're deleting, show the confirmation checkbox.
+  if (!empty($form_state['commerce_stock']['delete_instances'])) {
+    $form['confirmation']['#access'] = TRUE;
+    drupal_set_message(t('You must click the confirmation checkbox to confirm that you want to delete stock data'), 'warning');
+  }
+
+  return $form;
+}
+
+/**
+ * Form validator. If they are deleting and have not checked the confirmation
+ * checkbox, make them do so.
+ */
+function commerce_ss_admin_form_validate($form, &$form_state) {
+  if (!empty($form_state['commerce_stock']['delete_instances']) && empty($form_state['values']['confirmation'])) {
+    form_set_error('confirmation', t('Please check the "I understand" checkbox to indicate you understand that all stock data in these fields will be deleted: %fields.', array('%fields' => implode(', ', $form_state['commerce_stock']['delete_instances']))));
+  }
+}
+
+/**
+ * Add or remove the Stock field from product types.
+ */
+function commerce_ss_admin_form_submit($form, &$form_state) {
+  $form_state['commerce_stock']['delete_instances'] = array();
+
+  // Prepare a batch in case we need it for enabling stock on product types.
+  $batch = array(
+    'operations' => array(
+      // These are set below if needed.
+    ),
+    'file' => drupal_get_path('module', 'commerce_ss') . '/includes/commerce_ss.admin.inc',
+    'finished' => 'commerce_ss_batch_product_type_init_finished',
+    'title' => t('Product stock initialization'),
+    'init_message' => t('Product stock initialization is starting.'),
+    'progress_message' => t('Processed @current out of @total.'),
+    'error_message' => t('Product stock initialization has encountered an error.'),
+  );
+
+  foreach ($form_state['values']['product_types'] as $type => $enable) {
+    $instance = field_info_instance('commerce_product', 'commerce_stock', $type);
+
+    $currently_enabled = commerce_ss_product_type_enabled($type);
+    // If they want us to enable it and it doesn't currently exist, do the work.
+    if ($enable && !$currently_enabled) {
+      // Create the instance.
+      commerce_ss_admin_create_instance('commerce_stock', 'number_decimal', TRUE, 'commerce_product', $type, t('Stock'));
+      drupal_set_message(t('Stock field has been added to the %type product type.', array('%type' => $type)));
+      // Add the operation to process this type to the batch.
+      $batch['operations'][] = array('commerce_ss_batch_product_type_init_process', array($type, 0));
+    }
+    // Conversely, if they *don't* want it and it's currently enabled,
+    // warn them about the consequences or do it.
+    else if (!$enable && $currently_enabled) {
+      // If they haven't clicked the "confirm" checkbox, rebuild and get them
+      // to do it.
+      if (empty($form_state['values']['confirmation'])) {
+        $form_state['commerce_stock']['delete_instances'][] = $type;
+        $form_state['rebuild'] = TRUE;
+      }
+      // Otherwise they already have clicked it and we can delete.
+      else {
+        // Remove the instance.
+        field_delete_instance($instance);
+
+        // Remove override if enabled
+        if (commerce_ss_product_type_override_enabled($type)) {
+          $override = field_info_instance('commerce_product', 'commerce_stock_override', $type);
+          field_delete_instance($override);
+        }
+
+        drupal_set_message(t('Stock management has been disabled on the %type product type', array('%type' => $type)));
+      }
+    }
+  }
+
+  if (!empty($form_state['values']['product_types_override'])) {
+    foreach ($form_state['values']['product_types_override'] as $type => $enable) {
+      $instance = field_info_instance('commerce_product', 'commerce_stock_override', $type);
+
+      $currently_enabled = commerce_ss_product_type_override_enabled($type);
+      $stock_enabled = commerce_ss_product_type_enabled($type);
+      // If they want us to enable it and it doesn't currently exist, do the work.
+      if ($enable && $stock_enabled && !$currently_enabled) {
+        commerce_ss_admin_create_instance('commerce_stock_override', 'list_boolean', FALSE, 'commerce_product', $type, t('Disable stock for this product'));
+        drupal_set_message(t('Stock management override has been enabled on the %type product type', array('%type' => $type)));
+      }
+      // Conversely, if they *don't* want it and it's currently enabled,
+      // warn them about the consequences or do it.
+      else if (!$enable && $currently_enabled) {
+        // If they haven't clicked the "confirm" checkbox, rebuild and get them
+        // to do it.
+        if (empty($form_state['values']['confirmation'])) {
+          $form_state['commerce_stock']['delete_instances'][] = $type;
+          $form_state['rebuild'] = TRUE;
+        }
+        // Otherwise they already have clicked it and we can delete.
+        else {
+          // Remove the instance.
+          field_delete_instance($instance);
+          drupal_set_message(t('Stock management override has been disabled on the %type product type', array('%type' => $type)));
+        }
+      }
+    }
+  }
+
+  // If our batch has operations, run it now.
+  if (count($batch['operations'])) {
+    batch_set($batch);
+  }
+}
+
+/**
+ * Batch Operation Callback.
+ *
+ * @param $type
+ *  The product type to process.
+ * @param $init_stock_value
+ *  The initial value to give to the stock field.
+ */
+function commerce_ss_batch_product_type_init_process($type, $init_stock_value, &$context) {
+  if (!isset($context['sandbox']['progress'])) {
+    $context['sandbox']['progress'] = 0;
+
+    // Get the products to operate on.
+    $result = db_query("SELECT product_id FROM {commerce_product} cp WHERE cp.type = :type", array(
+      ':type' => $type,
+    ));
+    $context['sandbox']['product_data'] = $result->fetchAll();
+    $context['sandbox']['max'] = count($context['sandbox']['product_data']);
+  }
+
+  // We can safely process 10 at a time without a timeout.
+  $limit = 25;
+  $current_count = 0;
+
+  while ($current_count < $limit && count($context['sandbox']['product_data'])) {
+    // Update our counts.
+    $current_count++;
+    $context['sandbox']['progress']++;
+
+    //ddl("$current_count < $limit, progress: " . $context['sandbox']['progress']);
+    // Load the product and get its wrapper.
+    $product_data = array_shift($context['sandbox']['product_data']);
+    $product = commerce_product_load($product_data->product_id);
+
+    $wrapper = entity_metadata_wrapper('commerce_product', $product);
+    $wrapper->commerce_stock = $init_stock_value; //@todo: the name of the stock field should probably be a variable for commerce_stock v2
+    $wrapper->save();
+
+    $context['message'] = t('Processing product type %type %progress% complete.', array(
+      '%type' => $type,
+      '%progress' => intval( $context['sandbox']['progress'] / $context['sandbox']['max'] * 100 ),
+    ));
+  } // product processing loop
+
+  // Inform the batch engine that we are not finished,
+  // and provide an estimation of the completion level we reached.
+  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
+    $context['finished'] = $context['sandbox']['progress'] >= $context['sandbox']['max'];
+  }
+}
+
+/**
+ * Batch 'finished' callback.
+ */
+function commerce_ss_batch_product_type_init_finished($success, $results, $operations) {
+  if ($success) {
+    // We display the number of things we processed...
+    drupal_set_message(t('All stock levels have been initialized to zero'));
+
+    // @todo: get the batch process to provide more meaningfull information
+    // using $context['results']
+//    drupal_set_message(t('@count results processed.', array(
+//      '@count' => count($results),
+//    )));
+//    foreach ($results as $result) {
+//      drupal_set_message($result);
+//    }
+  }
+  else {
+    // An error occurred.
+    // $operations contains the operations that remained unprocessed.
+    $error_operation = reset($operations);
+    drupal_set_message(t('An error occurred while processing @operation with arguments : @args', array('@operation' => $error_operation[0], '@args' => print_r($error_operation[0], TRUE))));
+  }
+}
+
+/**
+ * Ensures a stock field is present on a product type bundle.
+ */
+function commerce_ss_admin_configure_product_type($type) {
+  commerce_ss_admin_create_instance('commerce_stock', 'number_decimal', TRUE, 'commerce_product', $type, t('Stock'));
+}
+
+/**
+ * Creates a required instance of a stock field on the specified bundle.
+ *
+ * @param $field_name
+ *   The name of the field; if it already exists, a new instance of the existing
+ *   field will be created. For fields governed by the Commerce modules, this
+ *   should begin with commerce_.
+ * @param $entity_type
+ *   The type of entity the field instance will be attached to.
+ * @param $bundle
+ *   The bundle name of the entity the field instance will be attached to.
+ * @param $label
+ *   The label of the field instance.
+ * @param $weight
+ *   The default weight of the field instance widget and display.
+ */
+function commerce_ss_admin_create_instance($field_name, $field_type, $required, $entity_type, $bundle, $label, $description = NULL, $weight = 0) {
+  // If a field type we know should exist isn't found, clear the Field cache.
+//  if (!field_info_field_types('commerce_stock')) {
+//    field_cache_clear();
+//  }
+
+  // Look for or add the specified stock field to the requested entity bundle.
+  $field = field_info_field($field_name);
+  $instance = field_info_instance($entity_type, $field_name, $bundle);
+
+  if (empty($field)) {
+    $field = array(
+      'field_name' => $field_name,
+      'type' => $field_type,
+      'cardinality' => 1,
+      'entity_types' => array($entity_type),
+      'translatable' => FALSE,
+      'locked' => FALSE,
+    );
+    if ($field_type == 'list_boolean') {
+      $field['settings'] = array(
+        'allowed_values' => array(0, 1),
+        'allowed_values_function' => '',
+      );
+    }
+    $field = field_create_field($field);
+  }
+
+  if (empty($instance)) {
+    $instance = array(
+      'field_name' => $field_name,
+      'entity_type' => $entity_type,
+      'bundle' => $bundle,
+      'label' => $label,
+      'required' => $required,
+      'settings' => array(),
+      'display' => array(),
+      'description' => $description,
+      'default_value' => array(array('value' => "0")),
+    );
+
+    if ($field_type == 'list_boolean') {
+      $instance['widget'] = array(
+        'type' => 'options_onoff',
+        'settings' => array(
+        'display_label' => TRUE,
+       ),
+     );
+    }
+
+    $entity_info = entity_get_info($entity_type);
+
+    // Spoof the default view mode so its display type is set.
+    $entity_info['view modes']['default'] = array();
+
+    field_create_instance($instance);
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/modules/commerce_ssr/commerce_ssr.info drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/modules/commerce_ssr/commerce_ssr.info
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/modules/commerce_ssr/commerce_ssr.info	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/modules/commerce_ssr/commerce_ssr.info	2014-05-21 21:43:23.000000000 +0200
@@ -0,0 +1,16 @@
+name = Commerce Simple Stock Rules
+description = Validation rules for simple stock.
+package = Commerce (stock)
+dependencies[] = number
+dependencies[] = commerce_product
+dependencies[] = commerce_order
+dependencies[] = commerce_stock
+dependencies[] = commerce_ss
+dependencies[] = rules
+core = 7.x
+; Information added by Drupal.org packaging script on 2014-05-15
+version = "7.x-2.0"
+core = "7.x"
+project = "commerce_stock"
+datestamp = "1400182728"
+
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/modules/commerce_ssr/commerce_ssr.module drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/modules/commerce_ssr/commerce_ssr.module
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/modules/commerce_ssr/commerce_ssr.module	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/modules/commerce_ssr/commerce_ssr.module	2014-05-21 21:43:23.000000000 +0200
@@ -0,0 +1,2 @@
+<?php
+
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/modules/commerce_ssr/commerce_ssr.rules_defaults.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/modules/commerce_ssr/commerce_ssr.rules_defaults.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/modules/commerce_ssr/commerce_ssr.rules_defaults.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/modules/commerce_ssr/commerce_ssr.rules_defaults.inc	2014-05-21 21:43:23.000000000 +0200
@@ -0,0 +1,212 @@
+<?php
+
+/**
+ * @file
+ * Default rule configurations for Commerce Simple Stock.
+ */
+
+/**
+ * Implements hook_default_rules_configuration().
+ */
+function commerce_ssr_default_rules_configuration() {
+  $rules = array();
+
+  if (module_exists('rules_i18n')) {
+    $rules_export = '{ "rules_stock_disable_add_to_cart" : {
+      "LABEL" : "Stock: disable add to cart ",
+      "PLUGIN" : "reaction rule",
+      "REQUIRES" : [ "commerce_ss", "rules", "rules_i18n", "commerce_stock" ],
+      "ON" : [ "commerce_stock_check_add_to_cart_form_state" ],
+      "IF" : [
+        { "commerce_ss_stock_enabled_on_product" : { "commerce_product" : [ "commerce_product" ] } },
+        { "commerce_ss_stock_not_disabled" : { "commerce_product" : [ "commerce_product" ] } },
+        { "NOT data_is" : {
+            "data" : [ "commerce-product:commerce-stock" ],
+            "op" : "\u003E",
+            "value" : "0"
+          }
+        }
+      ],
+      "DO" : [
+        { "rules_i18n_t" : {
+            "USING" : { "text" : "Out of stock", "language" : [ "site:current-page:language" ] },
+            "PROVIDE" : { "text" : { "stock_disable_add_to_cart_message" : "The translated text" } }
+          }
+        },
+        { "commerce_stock_set_add_to_cart_form_state" : {
+            "disabled" : 1,
+            "text" : [ "stock-disable-add-to-cart-message" ],
+            "class_name" : "out-of-stock"
+          }
+        }
+      ]
+    }}';
+  }
+  else {
+    $rules_export = '{ "rules_stock_disable_add_to_cart" : {
+      "LABEL" : "Stock: disable add to cart ",
+      "PLUGIN" : "reaction rule",
+      "REQUIRES" : [ "commerce_ss", "rules", "commerce_stock" ],
+      "ON" : [ "commerce_stock_check_add_to_cart_form_state" ],
+      "IF" : [
+        { "commerce_ss_stock_enabled_on_product" : { "commerce_product" : [ "commerce_product" ] } },
+        { "commerce_ss_stock_not_disabled" : { "commerce_product" : [ "commerce_product" ] } },
+        { "NOT data_is" : {
+            "data" : [ "commerce-product:commerce-stock" ],
+            "op" : "\u003e",
+            "value" : "0"
+          }
+        }
+      ],
+      "DO" : [
+        { "commerce_stock_set_add_to_cart_form_state" : { "disabled" : 1, "text" : "Out of stock", "class_name" : "out-of-stock" } }
+      ]
+    }}';
+  }
+  $rules['rules_stock_disable_add_to_cart'] = rules_import($rules_export);
+
+  if (module_exists('rules_i18n')) {
+    $rules_export = '{ "rules_stock_validate_add_to_cart" : {
+      "LABEL" : "Stock: validate add to cart",
+      "PLUGIN" : "reaction rule",
+      "REQUIRES" : [ "commerce_ss", "rules", "rules_i18n", "commerce_stock" ],
+      "ON" : [ "commerce_stock_add_to_cart_check_product" ],
+      "IF" : [
+        { "commerce_ss_stock_enabled_on_product" : { "commerce_product" : [ "commerce_product" ] } },
+        { "commerce_ss_stock_not_disabled" : { "commerce_product" : [ "commerce_product" ] } },
+        { "data_is" : {
+            "data" : [ "stock-requested-total" ],
+            "op" : "\u003E",
+            "value" : [ "commerce-product:commerce-stock" ]
+          }
+        }
+      ],
+      "DO" : [
+        { "rules_i18n_t" : {
+            "USING" : {
+              "text" : "The maximum quantity for [commerce-product:title] that can be ordered is [commerce-product:commerce-stock-int].",
+              "language" : [ "site:current-page:language" ]
+            },
+            "PROVIDE" : { "text" : { "stock_validate_add_to_cart_message" : "The translated text" } }
+          }
+        },
+        { "data_calc" : {
+            "USING" : {
+              "input_1" : [ "commerce-product:commerce-stock" ],
+              "op" : "-",
+              "input_2" : [ "stock-already-ordered" ]
+            },
+            "PROVIDE" : { "result" : { "approved_quantity" : "approved quantity" } }
+          }
+        },
+        { "commerce_stock_add_to_cart_set_state" : {
+            "stock_action" : "1",
+            "message" : [ "stock-validate-add-to-cart-message" ],
+            "approved_quantity" : [ "approved-quantity" ]
+          }
+        }
+      ]
+    }}';
+  }
+  else {
+    $rules_export = '{ "rules_stock_validate_add_to_cart" : {
+      "LABEL" : "Stock: validate add to cart",
+      "PLUGIN" : "reaction rule",
+      "REQUIRES" : [ "commerce_ss", "rules", "commerce_stock" ],
+      "ON" : [ "commerce_stock_add_to_cart_check_product" ],
+      "IF" : [
+        { "commerce_ss_stock_enabled_on_product" : { "commerce_product" : [ "commerce_product" ] } },
+        { "commerce_ss_stock_not_disabled" : { "commerce_product" : [ "commerce_product" ] } },
+        { "data_is" : {
+            "data" : [ "stock-requested-total" ],
+            "op" : "\u003E",
+            "value" : [ "commerce-product:commerce-stock" ]
+          }
+        }
+      ],
+      "DO" : [
+        { "data_calc" : {
+            "USING" : {
+              "input_1" : [ "commerce-product:commerce-stock" ],
+              "op" : "-",
+              "input_2" : [ "stock-already-ordered" ]
+            },
+            "PROVIDE" : { "result" : { "approved_quantity" : "approved quantity" } }
+          }
+        },
+        { "commerce_stock_add_to_cart_set_state" : {
+            "stock_action" : "1",
+            "message" : "The maximum quantity for [commerce-product:title] that can be ordered is [commerce-product:commerce-stock-int].\r\n",
+            "approved_quantity" : [ "approved-quantity" ]
+          }
+        }
+      ]
+    }}';
+  }
+
+  $rules['rules_stock_validate_add_to_cart'] = rules_import($rules_export);
+
+  if (module_exists('rules_i18n')) {
+    $rules_export = '{ "rules_stock_validate_checkout" : {
+      "LABEL" : "Stock: validate checkout",
+      "PLUGIN" : "reaction rule",
+      "REQUIRES" : [ "commerce_ss", "rules", "rules_i18n", "commerce_stock" ],
+      "ON" : [ "commerce_stock_check_product_checkout" ],
+      "IF" : [
+        { "commerce_ss_stock_enabled_on_product" : { "commerce_product" : [ "commerce_product" ] } },
+        { "commerce_ss_stock_not_disabled" : { "commerce_product" : [ "commerce_product" ] } },
+        { "data_is" : {
+            "data" : [ "stock-already-ordered" ],
+            "op" : "\u003E",
+            "value" : [ "commerce-product:commerce-stock" ]
+          }
+        }
+      ],
+      "DO" : [
+        { "rules_i18n_t" : {
+            "USING" : {
+              "text" : "The maximum quantity for [commerce-product:title] that can be ordered is [commerce-product:commerce-stock-int].",
+              "language" : [ "site:current-page:language" ]
+            },
+            "PROVIDE" : { "text" : { "stock_validate_checkout_message" : "The translated text" } }
+          }
+        },
+        { "commerce_stock_checkout_state" : {
+            "stock_action" : "1",
+            "message" : [ "stock-validate-checkout-message" ],
+            "approved_quantity" : [ "commerce-product:commerce-stock" ]
+          }
+        }
+      ]
+    }}';
+  }
+  else {
+    $rules_export = '{ "rules_stock_validate_checkout" : {
+      "LABEL" : "Stock: validate checkout",
+      "PLUGIN" : "reaction rule",
+      "REQUIRES" : [ "commerce_ss", "rules", "commerce_stock" ],
+      "ON" : [ "commerce_stock_check_product_checkout" ],
+      "IF" : [
+        { "commerce_ss_stock_enabled_on_product" : { "commerce_product" : [ "commerce_product" ] } },
+        { "commerce_ss_stock_not_disabled" : { "commerce_product" : [ "commerce_product" ] } },
+        { "data_is" : {
+            "data" : [ "stock-already-ordered" ],
+            "op" : "\u003E",
+            "value" : [ "commerce-product:commerce-stock" ]
+          }
+        }
+      ],
+      "DO" : [
+        { "commerce_stock_checkout_state" : {
+            "stock_action" : "1",
+            "message" : "The maximum quantity for [commerce-product:title] that can be ordered is [commerce-product:commerce-stock-int].",
+            "approved_quantity" : [ "commerce-product:commerce-stock" ]
+          }
+        }
+      ]
+    }}';
+  }
+  $rules['rules_stock_validate_checkout'] = rules_import($rules_export);
+
+  return $rules;
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/README.txt drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/README.txt
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/README.txt	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/commerce_stock/README.txt	2014-05-21 21:43:23.000000000 +0200
@@ -0,0 +1,70 @@
+Commerce Stock Module 7.x-2.0
+==============================
+This module provides stock management for Drupal Commerce stores.
+
+This module includes three modules:
+- Commerce Stock API: A common API for managing stock using sub modules.
+  Implements validation events and actions.
+- Commerce Simple Stock: A basic stock sub-module providing a stock field.
+- Commerce Simple Stock Rules: A set of rules to control stock (it can be
+  configured by modifying the rules or creating new ones). Varlidation rules
+  created:
+  - Disabling add to cart
+  - Validate add to cart
+  - Validate checkout
+
+
+To install and get working
+============================
+1. Download commerce_stock.
+2. Enable the Commerce Stock API, Commerce Simple Stock, and Commerce Simple
+   Stock Rules modules.
+3. Go to people > permissions  and make sure that that you and other relevent
+   roles have the "Administer commerce stock settings".
+4. Go to Home > Administration > Store > Configuration > Stock management.
+5. Select the "simple stock management" tab.
+6. Check the product types you want simple stock to manage and hit submit.
+
+
+Important:
+  You may need to clear caches after installing and enabling stock for your
+  products. Rules will show errors for the stock rules until you enable stock on
+  at least one product.
+
+If you want to be able to disable stock checking for individual products check
+the "Allow stock override for Product <product>".
+
+To Uninstall
+=============
+1. Go to Home > Administration > Store > Configuration > Stock management.
+2. Select the "simple stock management" tab.
+3. Un-Check all product types hit submit and confirm the "I understand that all
+   stock data will be permanently removed".
+4. go to the modules page & disable all stock modules.
+5. Go to the uninstall tab and uninstall all stock modules.
+
+Notes on Uninstall:
+* If you are planing on using a different version of stock or replace the stock
+  module with another / a custom system, you can keep the stock field and skip
+  steps 1 to 3. the stock field will be preserved and you will be able to use it
+  as any other drupal field.
+* If you forgot to follow steps 1 to 3 before uninstalling you can visit each of
+  the product bundles and delete the stock field from each of those.
+
+
+rules configuration
+===================
+If you need to make changes to rules you also need the permission
+"Make rule based changes to commerce stock".
+to view and edit the rules see:
+admin/commerce/config/stock/validation
+and
+admin/commerce/config/stock/control
+
+Decimal Stock
+=============
+The editing of stock levels support decimal quantities, to enable this feature
+edit a product type (admin/commerce/products/types) and check the box
+"Allow decimal quantities for stock administration"
+to support decimal quantities on the add to basket use the module
+https://drupal.org/project/commerce_decimal_quantities
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/CHANGELOG.txt drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/CHANGELOG.txt
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/CHANGELOG.txt	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/CHANGELOG.txt	2014-05-21 21:43:42.000000000 +0200
@@ -0,0 +1,271 @@
+
+Entity Translation 7.x-1.x, xxxx-xx-xx
+--------------------------------------
+
+
+Entity Translation 7.x-1.0-beta3, 2013-07-23
+--------------------------------------------
+#2037789 by Jelle_S: Fixed Default to user_access() access callback like drupal
+  menu does.
+#1982140 by bforchhammer | carligraph: Fixed Menu item is deleted when adding a
+  third translation.
+#2000926 by GiorgosK, bforchhammer: Fixed entity_translation_i18n_menu should
+  check if entity is node before deleting menu links.
+#1991452 by twistor: Fixed Strict warnings on testing page.
+#1992588 by bforchhammer: Fixed PHP notices on node page (menu-related).
+#1979406 by milesw: Field values for node translations not filled correctly when
+  making a field translatable.
+#1969366 by plach | EdNet: Fixed unsupported operand types in
+  entity_translation().module line 951 - Unable to clear cache, run cron,
+  etc from drush or aegir.
+#1970246 by jweowu: Fixed entity_translation_upgrade() doesn't flush the entity
+  load cache.
+#1959614 by plach | rutcreate: Fixed Image is deleted by saving node 5 times.
+#1941080 by plopesc, bforchhammer: Fixed Menu translation on node form is
+  broken.
+#1937242 by eliosh: Use custom theme function for node translation overview.
+#1916738 by alberto56, plach: Added Make it more obvious to those new to the
+  concept of field translation that all instances of the field are translatable.
+#1942732 by OnkelTem: Fixed WSOD when LEFT JOIN'ing entities' translations.
+#1942712 by das-peter: Fixed Non wrapped entity passed to Rules.
+#1907456 by leon.nk: Added Allow bulk field updates to copy data for all
+  translations.
+#1947764 by plach: Improve bundle translatability checks.
+#1370900 by mojzis, plach | mgladding: Fixed Fatal Error: Cannot access empty
+  property in translation.handler.inc.
+Issue #1924088 by plach | drzraf: Fixed Wrong form 'language' value in case of
+  content-translation enabled bundles.
+#1933742 by das-peter: Fixed Delete translation doesn't flush the entity cache.
+#1903024 by fabsor | dimitrileonidas: Fixed SQL error in Views when adding an
+  entity translation relationship that is not using the base entity of the view.
+#1890346 by plach: Fixed Entity language change not handled on non-translatable
+  entities with translatable fields.
+#1883584 by grndlvl: Added Allow for link 'destination' on overview page.
+#1888324 by plach: Fixed Wrong form language set when only one language is
+  enabled and the entity has LANGUAGE_NONE language.
+#1888192 by plach: Fixed Field widgets hidden when no #access key is defined.
+#1885370 by grndlvl: Fixed 'View' title blank on translation overview when using
+  optional title replacement field.
+#1881872 by plach | Demoshane: Added an explict dependecy on Drupal core 7.15.
+#1876750 by David_Rothstein: Fixed Fatal error when creating an entity as an
+  anonymous user.
+#1760270 by plach | Berdir: Fixed Comment translation broken?.
+#1870236 by plach: Fixed Field translatability migration fails when translation
+  for the entity type is disabled.
+#1865176 by bforchhammer: Implement hook_entity_translation_delete() on behalf
+  of path module.
+#1862882 by Cottser: Fixed Typo: accross = across.
+#1851118 by peximo | impleri: Fixed Incorrect ET Handler set in node/add form
+  when inserting new taxonomy term.
+#1842540 by peximo, bforchhammer | plach: Added Pathauto core entity types
+  integration.
+
+
+Entity Translation 7.x-1.0-beta2, 2012-11-21
+--------------------------------------------
+#1846104 by David_Rothstein, plach: Fixed Entity Translation shouldn't assume
+  $form['#entity_type()'] is a string.
+#1845896 by plach, peximo: Fixed Validate translation authoring info on submit.
+#1835578 by farse, plach: Fixed Entity Translation metadata should be stored
+  only if the entity bundle is translatable.
+#1437976 by plach | Wolfgang Reszel: Fixed Invalid node translation menu
+  callback set when entity translation for nodes is disabled.
+#1844844 by plach, bforchhammer: Fixed Content type settings always showed.
+#1833496 by bforchhammer, plach: Fixed Upgrade to Beta1 results in 'Cannot
+  initialize entity translation path variables'.
+#1397560 by timofey, fricca, bforchhammer: Fixed Delete translation button not
+  working if destination parameter is set.
+#1829740 by plach: Comment filtering should be available if node translation is
+  enabled (follow-up).
+#1829980 by plach | Stan Shevchuk: Fixed Upgrade to Beta1 results in 'Integrity
+  constraint violation: 1048 Column 'module' cannot be null'.
+
+
+Entity Translation 7.x-1.0-beta1, 2012-11-02
+--------------------------------------------
+#1828794 by plach: Make translation workflow permissions optional.
+#1829666 by bforchhammer: Fixed Fatal error caused by menu translation when node
+  translation is disabled.
+#1829740 by plach: Fixed Node and comments ET settings are available also when
+  translation is disabled.
+#1818440 by bforchhammer, plach, miro_dietiker: Fixed Fatal error with unclean
+  edit path.
+#1672710 by plach, valencianok, miro_dietiker | haclong99: Fixed published
+  source node appears as not published in the translate tab.
+#1819844 by plach | bforchhammer, renat: Fixed Incompatibility with fields with
+  unlimited number of values introduced in ET -dev.
+#1818620 by bforchhammer, plach | renat: Fixed fatal error when creating a node
+  which has a field_collection field.
+#1820742 by mkalkbrenner, plach: Fixed parameter $langcode of core function
+  node_view() ignored.
+#1820910 by plach | astutonet: Fixed Notices when trying to filter comments by
+  language.
+#1770748 by bforchhammer, plach: Option to display shared fields only when
+  editing the original values.
+#1811672 by joelrosen: Fixed Entity Translation stuff showing on content types
+  with multilingual support disabled.
+#1810322 by Dave Reid: Fixed Fatal error when using the translate link field
+  handler in Views.
+#1807698 by peximo: Added Hide node translation links.
+#1798456 by plach, bforchhammer, Berdir: Hide shared form elements when the user
+  does not have the related permission (follow up).
+#1803362 by Dave Reid: Fixed PHP notice: Undefined index: in
+  EntityTranslationDefaultHandler->localTasksAlter().
+#1800822 by plach, peximo | facine: Fixed Call to a member function
+  getLanguageKey() on a non-object.
+#1799770 by bforchhammer: Updated id and bundle when setting a wrapped entity.
+#1798456 by plach: Hide shared form elements when the user has not the related
+  permission.
+#1679736 by plach | renat: Provided an option to lock the original language.
+#1798460 by plach: Made the translate operation contextual.
+#1280546 by plach: Introduced a language selection widget for every entity.
+#1676716 by plach | quiptime: Do not list entity types that do not integrate
+  with ET in the admin page.
+#1792620 by bforchhammer: Cleanup unused variables.
+#1418076 by bforchhammer, plach: Added support for multiple path schemes.
+#1792606 by plach: Fixed Notices when deleting the translation of an entity
+  having a file field.
+#1770202 by plach: Fixed Language tabs not appearing when creating a new
+  translation (follow-up).
+#1678614 by bforchhammer, plach | Berdir: Make access control for the entity
+  form in the original language more flexible.
+#1701212 by jonhattan: Fixed fatal error for entities with ET disabled (UUID
+  follow-up).
+#1701460 by bforchhammer: Fixed title of original language dropdown.
+#1155134 by bforchhammer, plach: Integrated pathauto bulk generation.
+#1694478 by bforchhammer: Delete menu items when translation is deleted.
+#1770250 by bforchhammer, plach: Fixed Translatable fields disappear when
+  editing default language (entities other than node).
+#1377542 by bforchhammer | Daemon_Byte: Fixed Do not always use the admin theme.
+#1772874 by bforchhammer | webdrips: Fixed Wrong query alteration for comment
+  language filtering.
+#1778662 by jherencia: Fixed Add compability with field widgets that uses
+  limit_validation_errors().
+#1770202 by bforchhammer: Fixed Local tasks (language tabs) visible on node view
+  page.
+#1701212 by guillaumev: Added Export entity translations using UUID.
+#1728648 by plach, Dave Reid: Fixed Ensure that empty translation data is
+  handled properly.
+#1728674 by Dave Reid, plach: Fixed PHP notice when formLanguage is FALSE in
+  EntityTranslationDefaultHandler.
+#1114410 by plach: Replace hook_translation_info() with hook_entity_info().
+#1694480 by plach | bforchhammer: Implement hook_module_implements() instead of
+  relying on the module weight.
+#1434574 by das-peter, plach | cjoy: Added events for rules.
+#1224590 by plach: Made entity translation CRUD hooks fire only after storing
+  the translation data (follow-up).
+#1643578 by plach: Added Support menu translation upgrade.
+#1713196 by plach: Fixed Entity type labels may not be defined in entity info.
+#1444866 by plach: Removed bogus hook menu link alteration (follow-up).
+#1699060 by plach: Fixed Bogus form elements on the taxonomy delete confirm
+  form.
+#1699052 by plach: Fixed Global entity form submit handlers are not invoked on
+  delete except for node.
+#1661348 by plach | liquidcms: Fixed minimal i18n Taxonomy integration.
+#1444866 by plach: Fixed the invocation order on presave and menu alteration
+  (follow-up).
+#1691026 by plach | FrancescoQ: Fixed Fatal error when enabling ET with just one
+  language installed.
+#1698622 by plach: Fixed Field data is not properly massaged before being stored
+  during an upgrade.
+#1224590 by bforchhammer: Added entity translation CRUD hooks.
+#1694472 by bforchhammer: Change module package names to 'Multilingual - Entity
+  Translation'.
+#1444866 by bforchhammer, plach, peximo: Added UI for translation of menu items
+  for entity-translated nodes.
+#1133038 by plach: Added support for field column synchronization.
+#1528624 by plach | phm: Fixed error on user translations overview.
+#1667582 by peximo: Fixed PDOException (ambiguous tnid field) on upgrade.
+#1658424 by torpy: Fixed Non-multilingual taxonomy terms attached to
+  multilingual nodes do not display.
+#1643394 by plach: Allow repeating the upgrade process.
+#1643414 by plach: Added Allow to select which content types to upgrade.
+#1643390 by plach: Implement hook_entity_translation_upgrade_translation() on
+  behalf of core modules.
+#1155134 by das-peter, plach, GiorgosK, zambrey: Added Integrate pathauto.
+#1282018 by plach, Gábor Hojtsy, webchick, bforchhammer: Drop the translation
+  form in favor of a language-aware edit form.
+
+
+Entity Translation 7.x-1.0-alpha2, 2012-06-16
+---------------------------------------------
+#1587108 by plach | divined: Error: The entities of type Taxonomy term do not
+  define a valid base path: it will not be possible to translate them.
+#1524210 by fabsor, plach: Expose entity translation table to views.
+#1095390 by plach | klonos: Capitalize first letters in project's name.
+#1599568 by torpy: Fixed No content is displayed if fallback is disabled and
+  entity is set to 'Language Neutral'.
+#1341314 by plach, donquixote | derhasi: Fixed Nested call of entity_get_info()
+  due to menu_get_router() in entity_translation_entity_info_alter().
+#1519912 by plach: Fixed Empty stored values may mess up the translatable switch
+  update.
+#1519906 by plach: Migrate aliases when upgrading nodes.
+#1519898 by plach: Fixed The upgrade process may freeze.
+#1519894 by plach: Fixed Entity Translation upgrade migration incomplete.
+#1432206 by bforchhammer: Fixed Loss of field content during translatability
+  switch operation.
+#1279372 by getgood, loganfsmyth, evolvingweb, plach, Kristen Pol: Enable bulk
+  field language updates when switching field translatability.
+#1380380 by bojanz: Fixed Prevent notice when translation has been removed from
+  the form.
+#1367832 by floretan: Fixed Check #parents and #field_parents() for source
+  language in new translation form.
+#1174242 by djac, good_man, plach | Jerome F: Properly override the
+  node/%node/translate menu router path.
+#1293638 by das-peter: Fixed Language fallback on Taxonomy Terms (or any entity
+  type without locale support).
+#1283200 by plach: Enable content language negotiation the right way.
+#1280660 by mvc, plach: Fixed Gracefully handle module being disabled and
+  re-enabled.
+#1280544 by mvc, emarchak: Added Clarify difference between multilingual support
+  options.
+#1280506 by tarmstrong | plach: Fixed Simpletests broken after upgrading to
+  D7.7.
+#1262512 by claudiu.cristea: Fixed Clear the entity cache after translate.
+#1230858 by tarmstrong, plach | valderama: Fixed Compatibility with
+  node_clone(); entity_id() of old node is used, resulting in integrity
+  constraint violation.
+
+
+Entity Translation 7.x-1.0-alpha1, 2011-09-07
+---------------------------------------------
+#1045196 by plach: Fixed Image field translation broken.
+#1003876 by plach: (follow-up) Fixed labels not replaced by Title.
+#944874 by das-peter, plach: Added basic tests for the translation creation and
+  editing workflow.
+#1031370 by joostvdl | rfay: Fixed Translation publishing status is hidden under
+  collapsed 'publishing options' fieldset (and is hidden by default).
+#1003876 by plach, good_man: (follow-up) Fixed original label translation. 
+#1003876 by good_man, plach: Introduced support for translated entity labels.
+#936646 by good_man, fietserwin, plach, klonos: Fixed Undefined index access
+  callback/arguments in entity_translation_menu().
+#1109198 by plach, Countzero: Fixed Node translation overview page broken if
+  i18n is enabled.
+#1098106 by pcambra, jelenex: Fixed Translated fields aren't validated (or
+  processed with presave and submit field_attach_() hooks).
+#1111686 by plach: Fixed API documentation wrong.
+#1095390 by plach, klonos, sun: Changed Do not capitalize first letters in
+  project's name.
+#1032846 by plach, sun, das-peter: Removed read-ony non translatable fields from
+  the translation form.
+#1082112 by fietserwin | mattwad: Fixed No argument passed to
+  _translation_tab_access()
+#1081444 by jelenex: Fixed Unable to create non-published node.
+#1083704 by jelenex: Fixed Unable to edit node when user has only the 'translate
+  node entities' permission.
+#1096008 by fietserwin, sun: Fixed URL alias not updated.
+#1060334 by plach: Completed the transition from Translation 2.
+#902760 by sun: Changed module name from translation to entity_translation.
+#1032602 by rfay: Fixed bogus 'base path' docs in hook_translation_info().
+#1032816 by das-peter: Removed superfluous method getHumanReadableId().
+#1032728 by das-peter, rfay, sun: Fixed entity info cache not cleared after
+  changing module settings.
+#1021434 by plach | sun, OnkelTem: Fixed `translation` table is not created on
+  upgrading from core translation.
+#1003320 by good_man | Berdir, pcambra, plach, sun: Fixed The etid insane field.
+#1009546 by good_man: Fixed form buttons not wrapped in #type actions.
+#990120 by das-peter: Changed view mode from 'full' to 'default' in edit form.
+#929444 by das-peter, plach, sun: Fixed coding standards.
+#920826 by das-peter, sun: Fixed various issues after initial merge.
+#673300 by plach, sun: Added initial Translatable Fields UI code.
+by sun: Added initial baseline of module files.
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation.admin.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation.admin.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation.admin.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation.admin.inc	2014-05-21 21:43:42.000000000 +0200
@@ -0,0 +1,669 @@
+<?php
+
+/**
+ * @file
+ * The entity translation user interface.
+ */
+
+/**
+ * Builder function for the entity translation settings form.
+ */
+function entity_translation_admin_form($form, $form_state) {
+  $options = array();
+
+  $form['locale_field_language_fallback'] = array(
+    '#type' => 'checkbox',
+    '#title' => t('Enable language fallback'),
+    '#description' => t('When language fallback is enabled, if a translation is not available for the requested language an existing one will be displayed.'),
+    '#default_value' => variable_get('locale_field_language_fallback', TRUE),
+  );
+
+  $form['entity_translation_shared_labels'] = array(
+    '#type' => 'checkbox',
+    '#title' => t('Display shared labels'),
+    '#description' => t('Append an "all languages" hint to entity form widgets shared across translations.'),
+    '#default_value' => variable_get('entity_translation_shared_labels', TRUE),
+  );
+
+  $form['entity_translation_workflow_enabled'] = array(
+    '#type' => 'checkbox',
+    '#title' => t('Enable translation workflow permissions'),
+    '#description' => t('By enabling the translation workflow permissions it will be possible to limit the access to the entity form elements. Once this is active every role previously allowed to access the entity form will need to be granted the <em>Edit original values</em> permission to edit the entity in the original language. Moreover, form elements dealing with values shared across the translations will be visible only to roles having been granted the <em>Edit shared values</em> permission.'),
+    '#default_value' => entity_translation_workflow_enabled(),
+  );
+
+  $_null = NULL;
+  list($items, ) = menu_router_build();
+  _entity_translation_validate_path_schemes($_null, FALSE, $items);
+
+  foreach (entity_get_info() as $entity_type => $info) {
+    if ($info['fieldable']) {
+      $et_info = &$info['translation']['entity_translation'];
+      _entity_translation_process_path_schemes($entity_type, $et_info);
+      _entity_translation_validate_path_schemes($et_info['path schemes'], $info['label']);
+
+      // Translation can be enabled for the current entity only if it defines at
+      // least one valid base path.
+      foreach ($et_info['path schemes'] as $delta => $scheme) {
+        if (!empty($scheme['base path'])) {
+          $options[$entity_type] = !empty($info['label']) ? t($info['label']) : $entity_type;
+          break;
+        }
+      }
+    }
+  }
+
+  // Avoid bloating memory with unused data.
+  drupal_static_reset('_entity_translation_validate_path_schemes');
+  $enabled_types = array_filter(variable_get('entity_translation_entity_types', array()));
+
+  $form['enabled'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Translatable entity types'),
+    '#description' => t('Select which entities can be translated.'),
+    '#collapsible' => TRUE,
+    '#collapsed' => !empty($enabled_types),
+  );
+
+  $form['enabled']['entity_translation_entity_types'] = array(
+    '#type' => 'checkboxes',
+    '#options' => $options,
+    '#default_value' => $enabled_types,
+  );
+
+  $form['tabs'] = array(
+    '#type' => 'vertical_tabs',
+  );
+
+  $languages = array(
+    ENTITY_TRANSLATION_LANGUAGE_DEFAULT => t('Default language'),
+    ENTITY_TRANSLATION_LANGUAGE_CURRENT => t('Current language'),
+    ENTITY_TRANSLATION_LANGUAGE_AUTHOR => t('Author language'),
+    LANGUAGE_NONE => t('Language neutral'),
+  );
+  foreach (entity_translation_languages($entity_type) as $langcode => $language) {
+    $languages[$langcode] = t($language->name);
+  }
+
+  foreach ($enabled_types as $entity_type) {
+    $label = $options[$entity_type];
+
+    $entity_info = entity_get_info($entity_type);
+    $bundles = !empty($entity_info['bundles']) ? $entity_info['bundles'] : array($entity_type => array('label' => $label));
+    $enabled_bundles = 0;
+
+    foreach ($bundles as $bundle => $info) {
+      if (entity_translation_enabled_bundle($entity_type, $bundle)) {
+        $enabled_bundles++;
+        $settings = entity_translation_settings($entity_type, $bundle);
+        $settings_key = 'entity_translation_settings_' . $entity_type . '__' . $bundle;
+        $form['settings'][$entity_type][$settings_key] = array('#tree' => TRUE);
+
+        // If the entity defines no bundle we do not need the fieldset.
+        if (count($bundles) > 1 || $bundle != $entity_type) {
+          $form['settings'][$entity_type][$settings_key] += array(
+            '#type' => 'fieldset',
+            '#title' => $info['label'],
+            '#collapsible' => TRUE,
+            '#collapsed' => TRUE,
+          );
+        }
+
+        $form['settings'][$entity_type][$settings_key]['default_language'] = array(
+          '#type' => 'select',
+          '#title' => t('Default language'),
+          '#options' => $languages,
+          '#default_value' => $settings['default_language'],
+        );
+
+        $form['settings'][$entity_type][$settings_key]['hide_language_selector'] = array(
+          '#type' => 'checkbox',
+          '#title' => t('Hide language selector'),
+          '#default_value' => $settings['hide_language_selector'],
+        );
+
+        $form['settings'][$entity_type][$settings_key]['exclude_language_none'] = array(
+          '#type' => 'checkbox',
+          '#title' => t('Exclude <em>Language neutral</em> from the available languages'),
+          '#default_value' => $settings['exclude_language_none'],
+        );
+
+        $form['settings'][$entity_type][$settings_key]['lock_language'] = array(
+          '#type' => 'checkbox',
+          '#title' => t('Prevent language from being changed once the entity has been created'),
+          '#default_value' => $settings['lock_language'],
+        );
+
+        $form['settings'][$entity_type][$settings_key]['shared_fields_original_only'] = array(
+          '#type' => 'checkbox',
+          '#title' => t('Hide shared elements on translation forms'),
+          '#description' => t('Display form elements shared across translations only on entity forms for the original language.'),
+          '#default_value' => $settings['shared_fields_original_only'],
+        );
+      }
+    }
+
+    if ($enabled_bundles > 0) {
+      $form['settings'][$entity_type][$settings_key]['#collapsed'] = $enabled_bundles > 1;
+      $form['settings'][$entity_type] += array(
+        '#type' => 'fieldset',
+        '#group' => 'tabs',
+        '#title' => $label,
+      );
+    }
+  }
+
+  $form = system_settings_form($form);
+
+  // Menu rebuilding needs to be performed after the system settings are saved.
+  $form['#submit'][] = 'entity_translation_admin_form_submit';
+
+  return $form;
+}
+
+/**
+ * Submit handler for the entity translation settings form.
+ */
+function entity_translation_admin_form_submit($form, $form_state) {
+  // Clear the entity info cache for the new entity translation settings.
+  entity_info_cache_clear();
+  menu_rebuild();
+}
+
+/**
+ * Applies the given settings to every defined bundle.
+ *
+ * @param $entity_type
+ *   The entity type the settings refer to.
+ * @param $settings
+ *   (optional) The settings to be applied. Defaults to the entity default
+ *   settings.
+ */
+function entity_translation_settings_init($entity_type, $settings = array()) {
+  if (entity_translation_enabled($entity_type)) {
+    $info = entity_get_info($entity_type);
+    $bundles = !empty($info['bundles']) ? array_keys($info['bundles']) : array($entity_type);
+
+    foreach ($bundles as $bundle) {
+      if (entity_translation_enabled_bundle($entity_type, $bundle)) {
+        $settings += entity_translation_settings($entity_type, $bundle);
+      }
+    }
+
+    variable_set('entity_translation_settings_' . $entity_type . '__' . $bundle, $settings);
+  }
+}
+
+/**
+ * Translations overview page callback.
+ */
+function entity_translation_overview($entity_type, $entity, $callback = NULL) {
+  // Entity translation and node translation share the same system path.
+  if ($callback && entity_translation_node($entity_type, $entity)) {
+    return entity_translation_overview_callback($callback, $entity);
+  }
+
+  $handler = entity_translation_get_handler($entity_type, $entity);
+  $handler->initPathScheme();
+
+  // Initialize translations if they are empty.
+  $translations = $handler->getTranslations();
+  if (empty($translations->original)) {
+    $handler->initTranslations();
+    $handler->saveTranslations();
+  }
+
+  // Ensure that we have a coherent status between entity language and field
+  // languages.
+  if ($handler->initOriginalTranslation()) {
+    // FIXME!
+    field_attach_presave($entity_type, $entity);
+    field_attach_update($entity_type, $entity);
+  }
+
+  $header = array(t('Language'), t('Source language'), t('Translation'), t('Status'), t('Operations'));
+  $languages = entity_translation_languages();
+  $source = $translations->original;
+  $path = $handler->getViewPath();
+  $rows = array();
+
+  if (drupal_multilingual()) {
+    // If we have a view path defined for the current entity get the switch
+    // links based on it.
+    if ($path) {
+      $links = EntityTranslationDefaultHandler::languageSwitchLinks($path);
+    }
+
+    foreach ($languages as $language) {
+      $classes = array();
+      $options = array();
+      $language_name = $language->name;
+      $langcode = $language->language;
+      $edit_path = $handler->getEditPath($langcode);
+      $add_path = "{$handler->getEditPath()}/add/$source/$langcode";
+
+      if ($edit_path) {
+        $add_links = EntityTranslationDefaultHandler::languageSwitchLinks($add_path);
+        $edit_links = EntityTranslationDefaultHandler::languageSwitchLinks($edit_path);
+      }
+
+      if (isset($translations->data[$langcode])) {
+        list(, , $bundle) = entity_extract_ids($entity_type, $entity);
+
+        // Existing translation in the translation set: display status.
+        $is_original = $langcode == $translations->original;
+        $translation = $translations->data[$langcode];
+        $label = _entity_translation_label($entity_type, $entity, $langcode);
+        $link = isset($links->links[$langcode]['href']) ? $links->links[$langcode] : array('href' => $path, 'language' => $language);
+        $row_title = l($label, $link['href'], $link);
+
+        if (empty($link['href'])) {
+          $row_title = $is_original ? $label : t('n/a');
+        }
+
+        if ($edit_path && $handler->getAccess('update') && $handler->getTranslationAccess($langcode)) {
+          $link = isset($edit_links->links[$langcode]['href']) ? $edit_links->links[$langcode] : array('href' => $edit_path, 'language' => $language);
+          $link['query'] = isset($_GET['destination']) ? drupal_get_destination() : FALSE;
+          $options[] = l(t('edit'), $link['href'], $link);
+        }
+
+        $status = $translation['status'] ? t('Published') : t('Not published');
+        $classes[] = $translation['status'] ? 'published' : 'not-published';
+        $status .= isset($translation['translate']) && $translation['translate'] ? theme('entity_translation_overview_outdated', array('message' => t('outdated'))) : '';
+        $classes[] = isset($translation['translate']) && $translation['translate'] ? 'outdated' : '';
+
+        if ($is_original) {
+          $language_name = t('<strong>@language_name</strong>', array('@language_name' => $language_name));
+          $source_name = t('(original content)');
+        }
+        else {
+          $source_name = $languages[$translation['source']]->name;
+        }
+      }
+      else {
+        // No such translation in the set yet: help user to create it.
+        $row_title = $source_name = t('n/a');
+
+        if ($source != $langcode && $handler->getAccess('update')) {
+          list(, , $bundle) = entity_extract_ids($entity_type, $entity);
+          $translatable = FALSE;
+
+          foreach (field_info_instances($entity_type, $bundle) as $instance) {
+            $field_name = $instance['field_name'];
+            $field = field_info_field($field_name);
+            if ($field['translatable']) {
+              $translatable = TRUE;
+              break;
+            }
+          }
+
+          $link = isset($add_links->links[$langcode]['href']) ? $add_links->links[$langcode] : array('href' => $add_path, 'language' => $language);
+          $link['query'] = isset($_GET['destination']) ? drupal_get_destination() : FALSE;
+          $options[] = $translatable ? l(t('add'), $link['href'], $link) : t('No translatable fields');
+          $classes[] = $translatable ? '' : 'non-traslatable';
+        }
+        $status = t('Not translated');
+      }
+      $rows[] = array(
+        'data' => array($language_name, $source_name, $row_title, $status, implode(" | ", $options)),
+        'class' => $classes,
+      );
+    }
+  }
+
+  drupal_set_title(t('Translations of %label', array('%label' => $handler->getLabel())), PASS_THROUGH);
+
+  // Add metadata to the build render allow to let other modules know about
+  // which entity this is.
+  $build['#entity_type'] = $entity_type;
+  $build['#entity'] = $entity;
+  $build['entity_translation_overview'] = array(
+    '#theme' => 'entity_translation_overview',
+    '#header' => $header,
+    '#rows' => $rows,
+  );
+
+  return $build;
+}
+
+/**
+ * Calls the appropriate translation overview callback.
+ */
+function entity_translation_overview_callback($callback, $entity) {
+  if (module_exists($callback['module'])) {
+    if (isset($callback['file'])) {
+      $path = isset($callback['file path']) ? $callback['file path'] : drupal_get_path('module', $callback['module']);
+      require_once DRUPAL_ROOT . '/' . $path . '/' . $callback['file'];
+    }
+    return $callback['page callback']($entity);
+  }
+}
+
+/**
+ * Returns the appropriate entity label for the given language.
+ */
+function _entity_translation_label($entity_type, $entity, $langcode = NULL) {
+  if (function_exists('title_entity_label')) {
+    list (, , $bundle) = entity_extract_ids($entity_type, $entity);
+    $entity_info = entity_get_info($entity_type);
+    if (!empty($entity_info['entity keys']['label'])) {
+      $legacy_field = $entity_info['entity keys']['label'];
+      if (title_field_replacement_enabled($entity_type, $bundle, $legacy_field)) {
+        $title = title_entity_label($entity, $entity_type, $langcode);
+        if (!empty($title)) {
+          return $title;
+        }
+      }
+    }
+  }
+  return t('view');
+}
+/**
+ * Theme wrapper for the entity translation language page.
+ */
+function theme_entity_translation_overview($variables){
+  $rows = $variables['rows'];
+  return theme('table', array(
+    'rows' => $rows,
+    'header' => $variables['header'],
+  ));
+}
+
+/**
+ * Theme wrapper for the entity translation language outdated translation.
+ */
+function theme_entity_translation_overview_outdated($variables){
+  $message = $variables['message'];
+  return ' - <span class="marker">' . $message . '</span>';
+}
+
+/**
+ * Translation deletion confirmation form.
+ */
+function entity_translation_delete_confirm($form, $form_state, $entity_type, $entity, $langcode) {
+  $handler = entity_translation_get_handler($entity_type, $entity);
+  $languages = language_list();
+
+  $form = array(
+    '#handler' => $handler,
+    '#entity_type' => $entity_type,
+    '#entity' => $entity,
+    '#language' => $langcode,
+  );
+
+  return confirm_form(
+    $form,
+    t('Are you sure you want to delete the @language translation of %label?', array('@language' => $languages[$langcode]->name, '%label' => $handler->getLabel())),
+    $handler->getEditPath($langcode),
+    t('This action cannot be undone.'),
+    t('Delete'),
+    t('Cancel')
+  );
+}
+
+/**
+ * Submit handler for the translation deletion confirmation.
+ */
+function entity_translation_delete_confirm_submit($form, &$form_state) {
+  $handler = $form['#handler'];
+  $entity_type = $form['#entity_type'];
+  $entity = $form['#entity'];
+  $langcode = $form['#language'];
+
+  // Some modules expect the original values to be present when updating the
+  // field values. Since we are deleting the translation no value has changed.
+  $entity->original = $entity;
+
+  // Remove the translation entry and the related fields.
+  $handler->removeTranslation($langcode);
+  field_attach_presave($entity_type, $entity);
+  field_attach_update($entity_type, $entity);
+
+  $form_state['redirect'] = $handler->getTranslatePath();
+}
+
+/*
+ * Confirm form for changing field translatability.
+ */
+function entity_translation_translatable_form($form, &$form_state, $field_name) {
+  $field = field_info_field($field_name);
+
+  if ($field['translatable']) {
+    $title = t('Are you sure you want to disable translation for this field?');
+    $text = t('All occurrences of this field will become <em>untranslatable</em>:');
+    if (empty($form_state['input'])) {
+      drupal_set_message(t('All the existing field translations will be deleted. This operation cannot be undone.'), 'warning');
+    }
+  }
+  else {
+    $title = t('Are you sure you want to enable translation for this field?');
+    $text = t('All occurrences of this field will become <em>translatable</em>:');
+
+    $form['options'] = array(
+      '#type' => 'fieldset',
+      '#title' => t('Migration settings'),
+      '#weight' => -10,
+    );
+    $form['options']['copy_all_languages'] = array(
+      '#title' => t('Copy translations'),
+      '#description' => t('Copy field data into <em>all</em> existing translations, otherwise data will only be available in the original language.'),
+      '#type' => 'checkbox',
+      '#default_value' => TRUE,
+    );
+  }
+
+  $text .= _entity_translation_field_desc($field);
+  $text .= t('This operation may take a long time to complete.');
+
+  // We need to keep some information for later processing.
+  $form_state['field'] = $field;
+
+  // Store the 'translatable' status on the client side to prevent outdated form
+  // submits from toggling translatability.
+  $form['translatable'] = array(
+    '#type' => 'hidden',
+    '#default_value' => $field['translatable'],
+  );
+
+  return confirm_form($form, $title, '', $text);
+}
+
+/**
+ * Submit handler for the field settings form.
+ *
+ * This submit handler maintains consistency between the translatability of an
+ * entity and the language under which the field data is stored. When a field is
+ * marked as translatable, all the data in $entity->{field_name}[LANGUAGE_NONE]
+ * is moved to $entity->{field_name}[$entity_language]. When a field is marked
+ * as untranslatable the opposite process occurs. Note that marking a field as
+ * untranslatable will cause all of its translations to be permanently removed,
+ * with the exception of the one corresponding to the entity language.
+ */
+function entity_translation_translatable_form_submit($form, $form_state) {
+  // This is the current state that we want to reverse.
+  $translatable = $form_state['values']['translatable'];
+  $field_name = $form_state['field']['field_name'];
+  $copy_all_languages = !empty($form_state['values']['copy_all_languages']);
+  $field = field_info_field($field_name);
+
+  if ($field['translatable'] !== $translatable) {
+    // Field translatability has changed since form creation, abort.
+    $t_args = array('%field_name' => $field_name, '!translatable' => $translatable ? t('untranslatable') : t('translatable'));
+    drupal_set_message(t('The field %field_name is already !translatable. No change was performed.', $t_args), 'warning');
+    return;
+  }
+
+  // If a field is untranslatable, it can have no data except under
+  // LANGUAGE_NONE. Thus we need a field to be translatable before we convert
+  // data to the entity language. Conversely we need to switch data back to
+  // LANGUAGE_NONE before making a field untranslatable lest we lose
+  // information.
+  $operations = array(
+    array('entity_translation_translatable_batch', array(!$translatable, $field_name, $copy_all_languages)),
+    array('entity_translation_translatable_switch', array(!$translatable, $field_name)),
+  );
+  $operations = $translatable ? $operations : array_reverse($operations);
+
+  $t_args = array('%field' => $field_name);
+  $title = !$translatable ? t('Enabling translation for the %field field', $t_args) : t('Disabling translation for the %field field', $t_args);
+
+  $batch = array(
+    'title' => $title,
+    'operations' => $operations,
+    'finished' => 'entity_translation_translatable_batch_done',
+    'file' => drupal_get_path('module', 'entity_translation') . '/entity_translation.admin.inc',
+  );
+
+  batch_set($batch);
+}
+
+/*
+ * Toggle translatability of the given field.
+ *
+ * This is called from a batch operation, but should only run once per field.
+ */
+function entity_translation_translatable_switch($translatable, $field_name) {
+  $field = field_info_field($field_name);
+
+  if ($field['translatable'] === $translatable) {
+    return;
+  }
+
+  $field['translatable'] = $translatable;
+  field_update_field($field);
+
+  // This is needed for versions of Drupal core 7.10 and lower.
+  // See http://drupal.org/node/1380660 for details.
+  drupal_static_reset('field_available_languages');
+}
+
+/**
+ * Batch operation. Convert field data to or from LANGUAGE_NONE.
+ */
+function entity_translation_translatable_batch($translatable, $field_name, $copy_all_languages, &$context) {
+  if (empty($context['sandbox'])) {
+    $context['sandbox']['progress'] = 0;
+
+    // How many entities will need processing?
+    $query = new EntityFieldQuery();
+    $count = $query
+      ->fieldCondition($field_name)
+      ->count()
+      ->execute();
+
+    if (intval($count) === 0) {
+      // Nothing to do.
+      $context['finished'] = 1;
+      return;
+    }
+    $context['sandbox']['max'] = $count;
+  }
+
+  // Number of entities to be processed for each step.
+  $limit = variable_get('entity_translation_translatable_batch_limit', 10);
+
+  $offset = $context['sandbox']['progress'];
+  $query = new EntityFieldQuery();
+  $result = $query
+    ->fieldCondition($field_name)
+    ->entityOrderBy('entity_id')
+    ->range($offset, $limit)
+    ->execute();
+
+  foreach ($result as $entity_type => $entities) {
+    foreach (entity_load($entity_type, array_keys($entities)) as $entity) {
+      $context['sandbox']['progress']++;
+      $handler = entity_translation_get_handler($entity_type, $entity);
+      $langcode = $handler->getLanguage();
+
+      // Skip process for language neutral entities.
+      if ($langcode == LANGUAGE_NONE) {
+        continue;
+      }
+
+      // We need a two-steps approach while updating field translations: given
+      // that field-specific update functions might rely on the stored values to
+      // perform their processing, see for instance file_field_update(), first
+      // we need to store the new translations and only after we can remove the
+      // old ones. Otherwise we might have data loss, since the removal of the
+      // old translations might occur before the new ones are stored.
+      if ($translatable && isset($entity->{$field_name}[LANGUAGE_NONE])) {
+        // If the field is being switched to translatable and has data for
+        // LANGUAGE_NONE then we need to move the data to the right language.
+
+        $translations = $handler->getTranslations();
+
+        if ($copy_all_languages && !empty($translations->data)) {
+          foreach ($translations->data as $translation) {
+            $entity->{$field_name}[$translation['language']] = $entity->{$field_name}[LANGUAGE_NONE];
+          }
+        }
+        else {
+          $entity->{$field_name}[$langcode] = $entity->{$field_name}[LANGUAGE_NONE];
+        }
+
+        // Store the original value.
+        _entity_translation_update_field($entity_type, $entity, $field_name);
+        $entity->{$field_name}[LANGUAGE_NONE] = array();
+        // Remove the language neutral value.
+        _entity_translation_update_field($entity_type, $entity, $field_name);
+      }
+      elseif (!$translatable && isset($entity->{$field_name}[$langcode])) {
+        // The field has been marked untranslatable and has data in the entity
+        // language: we need to move it to LANGUAGE_NONE and drop the other
+        // translations.
+        $entity->{$field_name}[LANGUAGE_NONE] = $entity->{$field_name}[$langcode];
+        // Store the original value.
+        _entity_translation_update_field($entity_type, $entity, $field_name);
+        // Remove translations.
+        foreach ($entity->{$field_name} as $langcode => $items) {
+          if ($langcode != LANGUAGE_NONE) {
+            $entity->{$field_name}[$langcode] = array();
+          }
+        }
+        _entity_translation_update_field($entity_type, $entity, $field_name);
+      }
+      else {
+        // No need to save unchanged entities.
+        continue;
+      }
+    }
+  }
+
+  $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
+}
+
+/**
+ * Stores the given field translations.
+ */
+function _entity_translation_update_field($entity_type, $entity, $field_name) {
+  $empty = 0;
+  $field = field_info_field($field_name);
+
+  // Ensure that we are trying to store only valid data.
+  foreach ($entity->{$field_name} as $langcode => $items) {
+    $entity->{$field_name}[$langcode] = _field_filter_items($field, $entity->{$field_name}[$langcode]);
+    $empty += empty($entity->{$field_name}[$langcode]);
+  }
+
+  // Save the field value only if there is at least one item available,
+  // otherwise any stored empty field value would be deleted. If this happens
+  // the range queries would be messed up.
+  if ($empty < count($entity->{$field_name})) {
+    field_attach_presave($entity_type, $entity);
+    field_attach_update($entity_type, $entity);
+  }
+}
+
+/**
+ * Check the exit status of the batch operation.
+ */
+function entity_translation_translatable_batch_done($success, $results, $operations) {
+  if ($success) {
+    drupal_set_message(t("Data successfully processed."));
+  }
+  else {
+    // @todo: Do something about this case.
+    drupal_set_message(t("Something went wrong while processing data. Some nodes may appear to have lost fields."));
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation.api.php drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation.api.php
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation.api.php	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation.api.php	2014-05-21 21:43:42.000000000 +0200
@@ -0,0 +1,153 @@
+<?php
+
+/**
+ * @file
+ * API documentation for the Entity translation module.
+ */
+
+/**
+ * Allows modules to define their own translation info.
+ *
+ * Entity Translation relies on the core entity information to provide its
+ * translation features. See the documentation of hook_entity_info() in the core
+ * API documentation (system.api.php) for more details on all the entity info
+ * keys that may be defined.
+ *
+ * To make Entity Translation automatically support an entity type some keys
+ * may need to be defined, but none of them is required except the 'base path'
+ * key if the entity path is different from ENTITY_TYPE/%ENTITY_TYPE (e.g.
+ * taxonomy/term/1). The 'base path' key is used to determine the view, edit and
+ * translate path if they follow the default path patterns  and to reliably
+ * alter menu information to provide the translation UI. If the entity path
+ * matches the default pattern above, and there is no need for a dedicated
+ * translation handler class, Entity Translation will provide built-in support
+ * for the entity.
+ *
+ * The entity translation info is an associative array that has to match the
+ * following structure. Three nested sub-arrays keyed respectively by entity
+ * type, the 'translation' key and the 'entity_translation' key: the second one
+ * is the key defined by the core entity system while the third one registers
+ * Entity translation as a field translation handler. Elements:
+ * - class: The name of the translation handler class, which is used to handle
+ *   the translation process. Defaults to 'EntityTranslationDefaultHandler'.
+ * - base path: The base menu router path to which attach the administration
+ *   user interface. Defaults to ENTITY_TYPE/%ENTITY_TYPE.
+ * - access callback: The access callback for the translation pages. Defaults to
+ *   'entity_translation_tab_access'.
+ * - access arguments: The access arguments for the translation pages. Defaults
+ *   to "array($entity_type, $entity_position)".
+ * - view path: The menu router path to be used to view the entity. Defaults to
+ *   the base path.
+ * - edit path: The menu router path to be used to edit the entity. Defaults to
+ *   "$base_path/edit".
+ * - translate path: The menu router path to be used for attaching the
+ *   translation UI. Defaults to "$base_path/translate".
+ * - path wildcard: The menu router path wildcard identifying the entity.
+ *   Defaults to %ENTITY_TYPE.
+ * - admin theme: Whether the translation UI should use the administration
+ *   theme. Defaults to TRUE.
+ * - path schemes: An array of menu router path schemes used for attaching the
+ *   entity translation UI. This element can be used to declare additional path
+ *   schemes, if an entity type uses multiple schemes for managing entities
+ *   (e.g. different schemes for different bundles). Each path scheme can define
+ *   the following elements (descriptions see above): 'base path', 'view path',
+ *   'edit path', 'translate path', 'path wildcard' and 'admin theme'. All path
+ *   elements that are defined directly on the entity translation info array are
+ *   automatically added as a 'default' path scheme.
+ * - theme callback: The callback to be used to determine the translation
+ *   theme. Defaults to 'variable_get'.
+ * - theme arguments: The arguments to be used to determine the translation
+ *   theme. Defaults to "array('admin_theme')".
+ * - edit form: The key to be used to retrieve the entity object from the form
+ *   state array. An empty value prevents Entity translation from performing
+ *   alterations to the entity form. Defaults to ENTITY_TYPE.
+ * - skip original values access: A flag specifying whether skipping access
+ *   control when editing original values for this entity. Defaults to FALSE.
+ * - bundle callback: A callback to check whether the passed bundle has entity
+ *   translation enabled. If empty all bundles are supposed to be enabled.
+ * - default settings: The defaults to be applied to settings when an explicit
+ *   choice is missing.
+ */
+function hook_entity_info() {
+  $info['custom_entity'] = array(
+    'translation' => array(
+      'entity_translation' => array(
+        'class' => 'EntityTranslationCustomEntityHandler',
+        'base path' => 'custom_entity/%custom_entity',
+        'access callback' => 'custom_entity_tab_access',
+        'access arguments' => array(1),
+        'edit form' => 'custom_entity_form_state_key',
+        'bundle callback' => 'custom_entity_translation_enabled_bundle',
+        'default settings' => array(
+          'default_language' => LANGUAGE_NONE,
+          'hide_language_selector' => FALSE,
+        ),
+      ),
+    ),
+  );
+
+  // Entity type which has multiple (e.g. bundle-specific) paths.
+  $info['custom_entity_2'] = array(
+    'translation' => array(
+      'entity_translation' => array(
+        'class' => 'EntityTranslationCustomEntityHandler',
+        'path sets' => array(
+          'default' => array(
+            'base path' => 'custom_entity_2/%custom_entity',
+            'path wildcard' => '%custom_entity',
+          ),
+          'fancy' => array(
+            // Base path is not required.
+            'edit path' => 'fancy/%entity/edit',
+            'path wildcard' => '%entity',
+          ),
+        ),
+      )
+    )
+  );
+
+  return $info;
+}
+
+/**
+ * Allows modules to act when a new translation is added.
+ *
+ * @param $entity_type
+ *   The entity type.
+ * @param $entity
+ *   The entity.
+ * @param $translation
+ *   The inserted translation array.
+ * @param $values
+ *   The translated set of values, if any.
+ */
+function hook_entity_translation_insert($entity_type, $entity, $translation, $values = array()) {
+}
+
+/**
+ * Allows modules to act when a translation is updated.
+ *
+ * @param $entity_type
+ *   The entity type.
+ * @param $entity
+ *   The entity.
+ * @param $translation
+ *   The updated translation array.
+ * @param $values
+ *   The translated set of values, if any.
+ */
+function hook_entity_translation_update($entity_type, $entity, $translation, $values = array()) {
+}
+
+/**
+ * Allows modules to act when a translation is deleted.
+ *
+ * @param $entity_type
+ *   The entity type.
+ * @param $entity
+ *   The entity.
+ * @param $langcode
+ *   The langcode of the translation which was deleted.
+ */
+function hook_entity_translation_delete($entity_type, $entity, $langcode) {
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity-translation.css drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity-translation.css
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity-translation.css	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity-translation.css	2014-05-21 21:43:42.000000000 +0200
@@ -0,0 +1,4 @@
+.entity-translation-language-tabs {
+  clear: both;
+  padding-top: 0.75em;
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation_i18n_menu/entity_translation_i18n_menu.info drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation_i18n_menu/entity_translation_i18n_menu.info
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation_i18n_menu/entity_translation_i18n_menu.info	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation_i18n_menu/entity_translation_i18n_menu.info	2014-05-21 21:43:42.000000000 +0200
@@ -0,0 +1,15 @@
+name = Entity Translation Menu
+description = Allows menu items to be translated on the entity form.
+package = Multilingual - Entity Translation
+core = 7.x
+dependencies[] = entity_translation
+dependencies[] = i18n
+dependencies[] = i18n_menu
+files[] = entity_translation_i18n_menu.test
+
+; Information added by drupal.org packaging script on 2013-07-23
+version = "7.x-1.0-beta3"
+core = "7.x"
+project = "entity_translation"
+datestamp = "1374601567"
+
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation_i18n_menu/entity_translation_i18n_menu.module drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation_i18n_menu/entity_translation_i18n_menu.module
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation_i18n_menu/entity_translation_i18n_menu.module	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation_i18n_menu/entity_translation_i18n_menu.module	2014-05-21 21:43:42.000000000 +0200
@@ -0,0 +1,408 @@
+<?php
+
+/**
+ * @file
+ * The menu specific translation functions and hook implementations.
+ */
+
+/**
+ * Implements hook_node_prepare().
+ *
+ * Translates the menu item shown on node edit forms if the node language does
+ * not equal the language of the menu item. This means either loading the
+ * respective menu item from the translation set or localizing the item.
+ */
+function entity_translation_i18n_menu_node_prepare($node) {
+  $langcode = entity_language('node', $node);
+  if (!empty($langcode) && !empty($node->menu['language']) && $node->menu['language'] != $langcode && entity_translation_i18n_menu_item($node->menu)) {
+    $handler = entity_translation_get_handler('node', $node);
+    $source_langcode = $handler->getSourceLanguage();
+    // If we are creating a translation we need to use the source language.
+    entity_translation_i18n_menu_node_menu_item_translate($node, $source_langcode ? $source_langcode : $langcode);
+  }
+}
+
+/**
+ * Implements hook_module_implements_alter().
+ */
+function entity_translation_i18n_menu_module_implements_alter(&$implementations, $hook) {
+  switch ($hook) {
+    case 'node_prepare':
+    case 'node_presave':
+      // Move some of our hook implementations to end of list. Required so that
+      // the 'menu' key is populated when our implementation gets called. This
+      // also prevents our changes from being overridden.
+      $group = $implementations['entity_translation_i18n_menu'];
+      unset($implementations['entity_translation_i18n_menu']);
+      $implementations['entity_translation_i18n_menu'] = $group;
+      break;
+  }
+}
+
+/**
+ * Implements hook_node_presave().
+ */
+function entity_translation_i18n_menu_node_presave($node) {
+  if (!entity_translation_enabled('node')) {
+    return;
+  }
+  $handler = entity_translation_get_handler('node', $node);
+  $translations = $handler->getTranslations();
+  $source_langcode = $handler->getSourceLanguage();
+  $tset = !empty($node->menu['tset']);
+
+  // If no translation is available the menu data is always supposed to be
+  // entered in the source string language. This way we avoid having unneeded
+  // string translations hanging around.
+  if (empty($source_langcode) && count($translations->data) < 2 && !$tset) {
+    return;
+  }
+
+  // When creating a new translation, leave the source menu item intact and
+  // create a new one.
+  $langcode = entity_language('node', $node);
+  if (!empty($node->menu) && $tset && !empty($source_langcode)) {
+    $node->source_menu = menu_link_load($node->menu['mlid']);
+    unset($node->menu['mlid']);
+  }
+
+  // Store the entity language for later reference when saving a translation.
+  // If we are editing a translation in the string source language, we can skip
+  // item processing since the proper values are already in place. Instead when
+  // creating the translation we need to process the link item before saving it.
+  if (!empty($node->menu) && !empty($langcode) && ($source_langcode || $langcode != i18n_string_source_language())) {
+    $node->menu['entity_language'] = $langcode;
+    $node->menu['entity_translation_handler'] = $handler;
+  }
+
+  // If we have a translation set here we should prepare it for storage,
+  // otherwise we need to ensure the menu item has no language so it can be
+  // localized.
+  if ($tset) {
+    entity_translation_i18n_menu_item_tset_prepare($node, $langcode);
+  }
+  else {
+    $node->menu['language'] = LANGUAGE_NONE;
+  }
+}
+
+/**
+ * Implements hook_form_FORM_ID_alter().
+ */
+function entity_translation_i18n_menu_form_menu_edit_item_alter(&$form, &$form_state) {
+  $form['#validate'][] = 'entity_translation_i18n_menu_form_menu_edit_item_validate';
+}
+
+/**
+ * Implements hook_menu_link_alter().
+ */
+function entity_translation_i18n_menu_menu_link_alter(&$link) {
+  if (!empty($link['mlid']) && !empty($link['entity_language']) && $link['language'] == LANGUAGE_NONE && entity_translation_i18n_menu_item($link)) {
+    $sources = array();
+    foreach (array('title' => 'link_title', 'description' => 'description') as $key => $link_field) {
+      $name = array('menu', 'item', $link['mlid'], $key);
+      $source = i18n_string_get_source($name);
+      // The source might not exist yet.
+      $sources[$key] = is_object($source) ? $source->get_string() : $link[$link_field];
+    }
+
+    // If the link values to be saved are translated, we need to revert the
+    // localized menu link back to the original. This way they can be saved
+    // without accidentially storing a translation string as a source string.
+    // The translated values are put in a separate key for later reference.
+    if ($link['entity_language'] != i18n_string_source_language()) {
+      $link['entity_translation_strings'] = array(
+        'title' => $link['link_title'],
+        'description' => $link['description'],
+      );
+      $link['link_title'] = $sources['title'];
+      $link['options']['attributes']['title'] = $sources['description'];
+    }
+    // If the link values are in the string source language, we need to save
+    // the previous source values as translations. As a matter of fact this can
+    // happen only when initially creating a menu item in a language different
+    // from the source string one.
+    else {
+      $link['entity_translation_strings'] = array(
+        'title' => $sources['title'],
+        'description' => $sources['description'],
+      );
+      $link['entity_language'] = $link['entity_translation_handler']->getLanguage();
+    }
+  }
+}
+
+/**
+ * Implements hook_menu_link_update().
+ */
+function entity_translation_i18n_menu_menu_link_update($link) {
+  // Make sure localizations are saved properly.
+  if (entity_translation_i18n_menu_item($link) && !empty($link['entity_translation_strings'])) {
+    $string_langcode = isset($link['entity_language']) ? $link['entity_language'] : i18n_string_source_language();
+    $name = implode(':', array('menu', 'item', $link['mlid']));
+    foreach ($link['entity_translation_strings'] as $key => $translation) {
+      i18n_string_translation_update($name . ':' . $key, $translation, $string_langcode);
+    }
+  }
+}
+
+/**
+ * Menu specific alterations for the entity form.
+ *
+ * Adds to the regular menu item widget a checkbox to choose whether the current
+ * menu item should be localized or part of a translation set.
+ */
+function entity_translation_i18n_menu_form(&$form, &$form_state) {
+  $info = entity_translation_edit_form_info($form, $form_state);
+
+  if ($info && $info['entity type'] == 'node') {
+    $node = $info['entity'];
+    $source_menu = isset($node->source_menu) ? $node->source_menu : $node->menu;
+
+    // Check that the menu item of the source node is translatable.
+    if (isset($form['menu']) && !empty($source_menu) && i18n_menu_mode($source_menu['menu_name'], I18N_MODE_MULTIPLE)) {
+      $default = isset($source_menu['language']) && $source_menu['language'] != LANGUAGE_NONE;
+      $languages = language_list();
+      $handler = entity_translation_entity_form_get_handler($form, $form_state);
+      $langcode = $handler->getFormLanguage();
+      $language_name = isset($languages[$langcode]) ? t($languages[$langcode]->name) : t('current');
+
+      $form['menu']['#multilingual'] = TRUE;
+
+      $form['menu']['link']['tset'] = array(
+        '#type' => 'checkbox',
+        '#title' => t('Menu link enabled only for the %language language', array('%language' => $language_name)),
+        '#prefix' => '<label>' . t('Menu translation') . '</label>',
+        '#default_value' => $default,
+        '#description' => t('Create a different menu link for each translation. Every link will have its own parent and weight, otherwise only title and description will be translated.'),
+        '#weight' => 10,
+      );
+
+      if (!empty($default)) {
+        $translation_set = i18n_menu_translation_load($source_menu['i18n_tsid']);
+        $translations = $translation_set ? $translation_set->get_translations() : FALSE;
+        if (!empty($translations) && (count($translations) > 1 || !isset($translations[$langcode]))) {
+          $form['menu']['link']['tset']['#disabled'] = TRUE;
+        }
+      }
+    }
+  }
+}
+
+/**
+ * Validation handler for the menu item edit form.
+ */
+function entity_translation_i18n_menu_form_menu_edit_item_validate($form, &$form_state) {
+  $item = $form_state['values'];
+
+  // Localizable menu items should not be created when a translation set for the
+  // same path already exists.
+  if ($item['language'] == LANGUAGE_NONE) {
+    $count = db_select('menu_links', 'ml')
+      ->condition('ml.link_path', $item['link_path'])
+      ->condition('ml.i18n_tsid', 0, '<>')
+      ->countQuery()
+      ->execute()
+      ->fetchField();
+
+    if (!empty($count)) {
+      form_set_error('language', t('There are already one or more items with a language assigned for the given path. Remove them or assign a language to this item too.'));
+    }
+  }
+}
+
+/**
+ * Checks whether a given menu item is translatable through entity translation.
+ *
+ * @param array $item
+ *   A menu item.
+ *
+ * @todo
+ *   Find more generic way of determining whether ET is enabled for a link; add
+ *   support for other entities, e.g. taxonomy_term (?).
+ */
+function entity_translation_i18n_menu_item($item) {
+  $cache = &drupal_static(__FUNCTION__, array());
+
+  if (!isset($cache[$item['link_path']])) {
+    // First check that the item belongs to a menu which has translation
+    // enabled.
+    if (!i18n_menu_mode($item['menu_name'], I18N_MODE_MULTIPLE)) {
+      $cache[$item['link_path']] = FALSE;
+    }
+
+    // Check if the respective node type has entity translation enabled.
+    if (preg_match('!^node/(\d+)(/.+|)$!', $item['link_path'], $matches)) {
+      if (!entity_translation_enabled('node')) {
+        $cache[$item['link_path']] = FALSE;
+      }
+      else {
+        $type = db_select('node', 'n')
+          ->condition('nid', $matches[1])
+          ->fields('n', array('type'))
+          ->execute()->fetchField();
+        $cache[$item['link_path']] = entity_translation_node_supported_type($type);
+      }
+    }
+    else {
+      $cache[$item['link_path']] = FALSE;
+    }
+  }
+
+  return $cache[$item['link_path']];
+}
+
+/**
+ * Replace the menu item on the given node with a localized version.
+ *
+ * If the menu item is replaced by a different menu item from the translation
+ * set, the original item is stored in $node->source_menu.
+ *
+ * @param $node
+ *   A node object, with a menu item ($node->menu).
+ * @param $langcode
+ *   The language into which the menu item should be translated.
+ */
+function entity_translation_i18n_menu_node_menu_item_translate($node, $langcode) {
+  // Localization.
+  if ($node->menu['language'] == LANGUAGE_NONE) {
+    _i18n_menu_link_localize($node->menu, $langcode);
+    // Update properties 'link_title' and 'options.attributes.title' which are
+    // used for the node menu form; i18n_menu_link_localize only localizes
+    // rendered properties 'title' and 'localized_options.attributes.title'.
+    $node->menu['link_title'] = $node->menu['title'];
+    $node->menu['options']['attributes']['title'] = isset($node->menu['localized_options']['attributes']['title']) ? $node->menu['localized_options']['attributes']['title'] : '';
+  }
+  // Translation sets.
+  else {
+    $menu = NULL;
+    if (!empty($node->menu['i18n_tsid']) && $translation_set = i18n_menu_translation_load($node->menu['i18n_tsid'])) {
+      // Load menu item from translation set.
+      $menu = $translation_set->get_item($langcode);
+
+      // Set parent_depth_limit (required on node forms).
+      if (!empty($menu) && !isset($menu['parent_depth_limit'])) {
+        $menu['parent_depth_limit'] = _menu_parent_depth_limit($menu);
+      }
+
+      // Make sure the menu item is not set to hidden; i18n_menu automatically
+      // hides any menu items not matching the current interface language.
+      if (!empty($menu)) {
+        $menu['hidden'] = FALSE;
+      }
+    }
+
+    // Replace the menu item with the translated version, or null if there is
+    // no translated item. Store the original one in $node->source_menu.
+    $node->source_menu = $node->menu;
+    $node->menu = $menu;
+  }
+}
+
+/**
+ * Prepares the menu item attached to given entity for saving.
+ *
+ * - Ensures that different menu items attached to the entity and its
+ *   translations are stored within the same translation set.
+ * - Sets missing default values, and cleans out null values.
+ * - Sets the language of the menu item to given target language.
+ *
+ * @param $entity
+ *   Node object.
+ * @param $langcode
+ *   Target language.
+ */
+function entity_translation_i18n_menu_item_tset_prepare($entity, $langcode) {
+  // Load or create a translation set.
+  if (!empty($entity->source_menu)) {
+    if (!empty($entity->source_menu['i18n_tsid'])) {
+      $translation_set = i18n_translation_set_load($entity->source_menu['i18n_tsid']);
+    }
+    else {
+      // Make sure that the source menu item does have a language assigned.
+      if ($entity->source_menu['language'] == LANGUAGE_NONE) {
+        $entity->source_menu['language'] = $entity->menu['entity_translation_handler']->getSourceLanguage();
+        menu_link_save($entity->source_menu);
+      }
+
+      // Create new translation set.
+      $translation_set = i18n_translation_set_build('menu_link')
+        ->add_item($entity->source_menu);
+    }
+    $entity->menu['translation_set'] = $translation_set;
+  }
+
+  // Extract menu_name and pid from parent property.
+  if (!empty($entity->menu['parent'])) {
+    list($entity->menu['menu_name'], $entity->menu['plid']) = explode(':', $entity->menu['parent']);
+  }
+
+  // Remove null values.
+  $entity->menu = array_filter($entity->menu);
+
+  $entity->menu['language'] = $langcode;
+
+  $entity->menu += array(
+    'description' => '',
+    'customized' => 1,
+  );
+}
+
+/**
+ * Implements hook_entity_translation_upgrade().
+ */
+function entity_translation_i18n_menu_entity_translation_upgrade($node, $translation) {
+  menu_node_prepare($node);
+  menu_node_prepare($translation);
+
+  if (!empty($node->menu['mlid']) && !empty($translation->menu['mlid'])) {
+    $link = $node->menu;
+    $link['link_title'] = $translation->menu['link_title'];
+    $link['description'] = $translation->menu['description'];
+    $link['entity_language'] = $translation->language;
+    $link['language'] = LANGUAGE_NONE;
+    menu_link_save($link, $node->menu);
+  }
+}
+
+/**
+ * Implements hook_entity_translation_delete().
+ */
+function entity_translation_i18n_menu_entity_translation_delete($entity_type, $entity, $langcode) {
+  // Make sure that we are working with an entity of type node.
+  if ($entity_type != 'node') {
+    return;
+  }
+
+  list($entity_id, , ) = entity_extract_ids($entity_type, $entity);
+
+  // Clean-up all menu module links that point to this node.
+  $result = db_select('menu_links', 'ml')
+    ->fields('ml', array('mlid', 'language'))
+    ->condition('link_path', 'node/' . $entity_id)
+    ->condition('module', 'menu')
+    ->execute()
+    ->fetchAllAssoc('mlid');
+
+  foreach ($result as $link) {
+    // Delete all menu links matching the deleted language.
+    if ($link->language == $langcode) {
+      menu_link_delete($link->mlid);
+    }
+
+    // Delete string translations for all language-neutral menu items.
+    if ($link->language == LANGUAGE_NONE) {
+      $name = array('menu', 'item', $link->mlid);
+      foreach (array('title', 'description') as $key) {
+        $name[] = $key;
+        $source = i18n_string_get_source($name);
+        if(!empty($source->lid)) {
+          db_delete('locales_target')
+            ->condition('lid', $source->lid)
+            ->condition('language', $langcode)
+            ->execute();
+        }
+      }
+    }
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation_i18n_menu/entity_translation_i18n_menu.test drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation_i18n_menu/entity_translation_i18n_menu.test
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation_i18n_menu/entity_translation_i18n_menu.test	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation_i18n_menu/entity_translation_i18n_menu.test	2014-05-21 21:43:42.000000000 +0200
@@ -0,0 +1,255 @@
+<?php
+/**
+ * @file
+ * Tests for Entity translation module.
+ */
+
+/**
+ * Tests for the translation of menu items on entity forms.
+ */
+class EntityTranslationMenuTranslationTestCase extends EntityTranslationTestCase {
+
+  /**
+   * Return the test information.
+   */
+  public static function getInfo() {
+    return array(
+      'name' => 'Menu translation',
+      'description' => 'Tests for the translation of menu items on entity forms.',
+      'group' => 'Entity translation',
+      'dependencies' => array('i18n_menu'),
+    );
+  }
+
+  function setUp() {
+    parent::setUp('locale', 'entity_translation', 'i18n_menu', 'entity_translation_i18n_menu');
+    $this->login($this->getAdminUser(array('administer menu')));
+    $this->addLanguage('en');
+    $this->addLanguage('es');
+    $this->addLanguage('it');
+    $this->configureContentType();
+    $this->configureMenu();
+    $this->enableUrlLanguageDetection();
+    $this->login($this->getTranslatorUser(array('administer menu')));
+  }
+
+  /**
+   * Configure the "Main Menu" for multilingual menu items ("Translate & Localize").
+   */
+  function configureMenu() {
+    $edit = array();
+    $edit['i18n_mode'] = I18N_MODE_MULTIPLE; // Translate & Localize.
+    $this->drupalPost('admin/structure/menu/manage/main-menu/edit', $edit, t('Save'));
+    $this->assertRaw(t('Your configuration has been saved.'), t('Menu settings have been saved.'));
+  }
+
+  /**
+   * Create page with menu item.
+   */
+  function createPage($link_title, $description, $langcode) {
+    $edit = array();
+    $edit['title'] = $this->randomName();
+    $edit['language'] = $langcode;
+    $edit['menu[enabled]'] = TRUE;
+    $edit['menu[link_title]'] = $link_title;
+    $edit['menu[description]'] = $description ? $description : 'link language = ' . $langcode;
+    $this->drupalPost('node/add/page', $edit, t('Save'));
+    $this->assertRaw(t('Basic page %title has been created.', array('%title' => $edit['title'])), t('Basic page created.'));
+
+    // Check to make sure the node was created.
+    $node = $this->drupalGetNodeByTitle($edit['title']);
+    $this->assertTrue($node, t('Node found in database.'));
+
+    // Check to make sure menu link was created.
+    $this->get($langcode, '<front>');
+    $this->assertText($link_title, 'New menu link found.');
+
+    return $node;
+  }
+
+  /**
+   * Create a translation with menu item.
+   */
+  function createTranslation($node, $link_title, $description, $langcode, $use_tsets = FALSE) {
+    $this->drupalGet('node/' . $node->nid . '/edit/add/' . $node->language . '/' . $langcode);
+
+    $edit = array();
+    $edit['menu[enabled]'] = TRUE;
+    $edit['menu[link_title]'] = $link_title;
+    $edit['menu[description]'] = $description ? $description : 'link language = ' . $langcode;
+    if ($use_tsets != NULL) {
+      $edit['menu[tset]'] = $use_tsets;
+    }
+
+    $this->drupalPost(NULL, $edit, t('Save'));
+    $this->drupalGet('node/' . $node->nid . '/translate');
+    $this->assertLinkByHref('node/' . $node->nid . '/edit/' . $langcode, 0, t('Translation edit link found. Translation created.'));
+
+    // Check to make sure menu link was created.
+    $this->get($langcode, '<front>');
+    $this->assertText($link_title, 'Translation menu link found.');
+
+    return $node;
+  }
+
+  /**
+   * Remove translation in given langcode from node.
+   */
+  function removeTranslation($node, $langcode) {
+    $this->drupalGet('node/' . $node->nid . '/translate/delete/' . $langcode);
+    $this->drupalPost(NULL, array(), t('Delete'));
+
+    // Check to make sure translation was deleted.
+    $this->drupalGet('node/' . $node->nid . '/edit/add/' . $node->language . '/' . $langcode);
+    $this->assertResponse(200, 'Translation add page found. Old translation deleted.');
+  }
+
+  /**
+   * Edit a page menu item.
+   *
+   * Check that node form contains old menu link title, then replace with given
+   * new title.
+   */
+  function editPage($node, $old_link_title, $link_title, $langcode) {
+    $this->drupalGet('node/' . $node->nid . '/edit/' . $langcode);
+
+    $this->assertFieldByXPath("//input[@name='menu[link_title]']", $old_link_title, 'Old link title value correctly populated: ' . $old_link_title);
+
+    $edit = array();
+    $edit['menu[link_title]'] = $link_title;
+    $this->drupalPost(NULL, $edit, t('Save'));
+
+    // Check to make sure menu link was updated.
+    $this->get($langcode, '<front>');
+    $this->assertNoText($old_link_title, 'Old menu link title not found: ' . $old_link_title);
+    $this->assertText($link_title, 'New menu link title found: ' . $link_title);
+  }
+
+  /**
+   * Test if menu localization works.
+   */
+  function testMenuLocalization() {
+    // Create Basic page in English.
+    $link_title_en = $this->randomName();
+    $node = $this->createPage($link_title_en, NULL, 'en');
+
+    // Submit translation in Spanish.
+    $link_title_es = $this->randomName();
+    $node_translation = $this->createTranslation($node, $link_title_es, NULL, 'es');
+
+    // Check menu links in both languages.
+    $this->get('en', '<front>');
+    $this->assertText($link_title_en);
+    $this->get('es', '<front>');
+    $this->assertText($link_title_es);
+
+    // Edit English menu link.
+    $link_title_en2 = $this->randomName();
+    $this->editPage($node, $link_title_en, $link_title_en2, 'en');
+
+    // Check that Spanish menu link has not changed.
+    $this->get('es', '<front>');
+    $this->assertText($link_title_es);
+
+    // Edit Spanish menu link.
+    $link_title_es2 = $this->randomName();
+    $this->editPage($node, $link_title_es, $link_title_es2, 'es');
+
+    // Check that English menu link has not changed.
+    $this->get('en', '<front>');
+    $this->assertText($link_title_en2);
+
+    // Delete Spanish translation and check that the respective menu item has
+    // been deleted as well.
+    $this->removeTranslation($node, 'es');
+    $this->get('es', '<front>');
+    $this->assertNoText($link_title_es2);
+  }
+
+  /**
+   * Test if menu localization works (source language != default language).
+   */
+  function testMenuLocalizationCustomSourceLanguage() {
+    // Create Basic page in Spanish.
+    $link_title_es = $this->randomName();
+    $node = $this->createPage($link_title_es, NULL, 'es');
+
+    // Submit translation in English.
+    $link_title_en = $this->randomName();
+    $node_translation = $this->createTranslation($node, $link_title_en, NULL, 'en');
+
+    // Check menu links in both languages.
+    $this->get('es', '<front>');
+    $this->assertText($link_title_es);
+    $this->get('en', '<front>');
+    $this->assertText($link_title_en);
+
+    // Edit Spanish menu link.
+    $link_title_es2 = $this->randomName();
+    $this->editPage($node, $link_title_es, $link_title_es2, 'es');
+
+    // Check that English menu link has not changed.
+    $this->get('en', '<front>');
+    $this->assertText($link_title_en);
+
+    // Edit English menu link.
+    $link_title_en2 = $this->randomName();
+    $this->editPage($node, $link_title_en, $link_title_en2, 'en');
+
+    // Check that Spanish menu link has not changed.
+    $this->get('es', '<front>');
+    $this->assertText($link_title_es2);
+  }
+
+  /**
+   * Test if menu translation works with separate menu items.
+   */
+  function testMenuTranslation() {
+    // Create Basic page in English.
+    $link_title_en = $this->randomName();
+    $node = $this->createPage($link_title_en, NULL, 'en');
+
+    // Submit translation in Spanish.
+    $link_title_es = $this->randomName();
+    $node_translation = $this->createTranslation($node, $link_title_es, NULL, 'es', TRUE);
+
+    // Check menu links in both languages.
+    $this->get('en', '<front>');
+    $this->assertText($link_title_en);
+    $this->get('es', '<front>');
+    $this->assertText($link_title_es);
+
+    // Edit English menu link.
+    $link_title_en2 = $this->randomName();
+    $this->editPage($node, $link_title_en, $link_title_en2, 'en');
+
+    // Check that Spanish menu link has not changed.
+    $this->get('es', '<front>');
+    $this->assertText($link_title_es);
+
+    // Edit Spanish menu link.
+    $link_title_es2 = $this->randomName();
+    $this->editPage($node, $link_title_es, $link_title_es2, 'es');
+
+    // Check that English menu link has not changed.
+    $this->get('en', '<front>');
+    $this->assertText($link_title_en2);
+
+    // Add another translation, and check that other menu items are not
+    // affected. See https://drupal.org/node/1982140
+    $link_title_it = $this->randomName();
+    $node_translation = $this->createTranslation($node, $link_title_it, NULL, 'it', NULL);
+
+    // Check that Spanish and English menu links have not changed.
+    $this->get('es', '<front>');
+    $this->assertText($link_title_es2);
+    $this->get('en', '<front>');
+    $this->assertText($link_title_en2);
+
+    // Delete Spanish translation and check that the respective menu item has
+    // been deleted as well.
+    $this->removeTranslation($node, 'es');
+    $this->get('es', '<front>');
+    $this->assertNoText($link_title_es2);
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation.info drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation.info
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation.info	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation.info	2014-05-21 21:43:42.000000000 +0200
@@ -0,0 +1,28 @@
+name = Entity Translation
+description = Allows entities to be translated into different languages.
+package = Multilingual - Entity Translation
+core = 7.x
+configure = admin/config/regional/entity_translation
+dependencies[] = locale (>7.14)
+
+files[] = includes/translation.handler.inc
+files[] = includes/translation.handler.comment.inc
+files[] = includes/translation.handler.node.inc
+files[] = includes/translation.handler.taxonomy_term.inc
+files[] = includes/translation.handler.user.inc
+
+files[] = tests/entity_translation.test
+
+files[] = views/entity_translation_handler_relationship.inc
+files[] = views/entity_translation_handler_field_translate_link.inc
+files[] = views/entity_translation_handler_field_label.inc
+files[] = views/entity_translation_handler_filter_entity_type.inc
+files[] = views/entity_translation_handler_filter_language.inc
+files[] = views/entity_translation_handler_filter_translation_exists.inc
+
+; Information added by drupal.org packaging script on 2013-07-23
+version = "7.x-1.0-beta3"
+core = "7.x"
+project = "entity_translation"
+datestamp = "1374601567"
+
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation.install drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation.install
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation.install	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation.install	2014-05-21 21:43:42.000000000 +0200
@@ -0,0 +1,256 @@
+<?php
+
+/**
+ * @file
+ * Installation functions for Entity Translation module.
+ */
+
+/**
+ * Implements hook_schema().
+ */
+function entity_translation_schema() {
+  $schema['entity_translation'] = array(
+    'description' => 'Table to track entity translations',
+    'fields' => array(
+      'entity_type' => array(
+        'type' => 'varchar',
+        'length' => 128,
+        'not null' => TRUE,
+        'default' => '',
+        'description' => 'The entity type this translation relates to',
+      ),
+      'entity_id' => array(
+        'type' => 'int',
+        'unsigned' => TRUE,
+        'not null' => TRUE,
+        'description' => 'The entity id this translation relates to',
+      ),
+      // @todo: Consider an integer field for 'language'.
+      'language' => array(
+        'type' => 'varchar',
+        'length' => 32,
+        'not null' => TRUE,
+        'default' => '',
+        'description' => 'The target language for this translation.',
+      ),
+      'source' => array(
+        'type' => 'varchar',
+        'length' => 32,
+        'not null' => TRUE,
+        'default' => '',
+        'description' => 'The source language from which this translation was created.',
+      ),
+      'uid' => array(
+        'description' => 'The author of this translation.',
+        'type' => 'int',
+        'not null' => TRUE,
+        'default' => 0,
+      ),
+      'status' => array(
+        'description' => 'Boolean indicating whether the translation is published (visible to non-administrators).',
+        'type' => 'int',
+        'not null' => TRUE,
+        'default' => 1,
+      ),
+      'translate' => array(
+        'description' => 'A boolean indicating whether this translation needs to be updated.',
+        'type' => 'int',
+        'not null' => TRUE,
+        'default' => 0,
+      ),
+      'created' => array(
+        'description' => 'The Unix timestamp when the translation was created.',
+        'type' => 'int',
+        'not null' => TRUE,
+        'default' => 0,
+      ),
+      'changed' => array(
+        'description' => 'The Unix timestamp when the translation was most recently saved.',
+        'type' => 'int',
+        'not null' => TRUE,
+        'default' => 0,
+      ),
+    ),
+    'primary key' => array('entity_type', 'entity_id', 'language'),
+  );
+  return $schema;
+}
+
+/**
+ * Implements hook_install().
+ */
+function entity_translation_install() {
+  // entity_translation_form_alter() needs to run after locale_form_alter() and
+  // translation_menu(); entity_translation_menu_alter() needs to run after
+  // i18n_node_menu_alter().
+  db_update('system')
+    ->fields(array('weight' => 11))
+    ->condition('name', 'entity_translation')
+    ->execute();
+
+  // Enable translation for nodes.
+  variable_set('entity_translation_entity_types', array('node' => 'node'));
+
+  // Make translation use the content language type.
+  variable_set('translation_language_type', LANGUAGE_TYPE_CONTENT);
+}
+
+/**
+ * Grant 'edit $type original values' permission to existing roles.
+ */
+function _entity_translation_grant_edit_permissions() {
+  variable_set('entity_translation_workflow_enabled', TRUE);
+  $permissions = array();
+
+  // Nodes.
+  $permissions['node'][] = 'bypass node access';
+  foreach (node_permissions_get_configured_types() as $type) {
+    $permissions['node'][] = "edit own $type content";
+    $permissions['node'][] = "edit any $type content";
+  }
+
+  // Comments.
+  if (module_exists('comment')) {
+    $permissions['comment'][] = 'administer comments';
+    $permissions['comment'][] = 'edit own comments';
+  }
+
+  // Taxonomy terms.
+  if (module_exists('taxonomy')) {
+    $permissions['taxonomy_term'][] = 'administer taxonomy';
+    foreach (taxonomy_get_vocabularies() as $vocabulary) {
+      $permissions['taxonomy_term'][] = "edit terms in {$vocabulary->vid}";
+    }
+  }
+
+  $assignments = array();
+  foreach ($permissions as $entity_type => $permissions_filter) {
+    if (entity_translation_enabled($entity_type)) {
+      $permission = "edit $entity_type original values";
+      $assignments[] = _entity_translation_grant_permission($permission, $permissions_filter);
+      $permission = "edit $entity_type translation shared fields";
+      $assignments[] = _entity_translation_grant_permission($permission, $permissions_filter);
+    }
+  }
+  $assignments = '<ul><li>' . implode('</li><li>', $assignments) . '</li></ul>';
+
+  $t = get_t();
+  return $t('The following permissions have been assigned to existing roles: !assignments', array('!assignments' => $assignments));
+}
+
+/**
+ * Grant the given permission to all roles which already have any of the
+ * permissions specified in the $permissions_filter parameter.
+ *
+ * @param $permission
+ *   The new permission which to grant.
+ * @param $permissions_filter
+ *   List of permissions used for loading roles.
+ *
+ * @return
+ *   A message describing permission changes.
+ */
+function _entity_translation_grant_permission($permission, $permissions_filter = NULL) {
+  $roles = user_roles(FALSE, $permissions_filter);
+  foreach ($roles as $rid => $role) {
+    user_role_grant_permissions($rid, array($permission));
+  }
+  $t = get_t();
+  return $t('%permission was assigned to %roles', array(
+    '%permission' => $permission,
+    '%roles' => implode(', ', $roles)
+  ));
+}
+
+/**
+ * Implements hook_enable().
+ */
+function entity_translation_enable() {
+  // Re-activate entity translation for content types which had used it when
+  // the module was last disabled (if any), unless these have since been altered
+  // by the user to use a different translation option.
+  $entity_translation_types = variable_get('entity_translation_disabled_content_types', array());
+  foreach ($entity_translation_types as $index => $type) {
+    if (variable_get("language_content_type_$type", 0) == 0) {
+      variable_set("language_content_type_$type", ENTITY_TRANSLATION_ENABLED);
+    }
+    // We should show the warning only if we actually restored at least one
+    // content type.
+    else {
+      unset($entity_translation_types[$index]);
+    }
+  }
+  if ($entity_translation_types) {
+    drupal_set_message(t('All content types previously configured to use field translation are now using it again.'), 'warning');
+  }
+  variable_del('entity_translation_disabled_content_types');
+}
+
+/**
+ * Implements hook_disable().
+ */
+function entity_translation_disable() {
+  // Store record of which types are using entity translation, and set those
+  // types to not be translated. These content types will be reset to use entity
+  // translation again if the module is later re-enabled, unless they have been
+  // changed by the user in the meantime.
+  $entity_translation_types = array();
+  foreach (node_type_get_types() as $type => $object) {
+    if (variable_get("language_content_type_$type", 0) == ENTITY_TRANSLATION_ENABLED) {
+      $entity_translation_types[] = $type;
+      variable_set("language_content_type_$type", 0);
+    }
+  }
+  if ($entity_translation_types) {
+    variable_set('entity_translation_disabled_content_types', $entity_translation_types);
+    drupal_set_message(t('All content types configured to use field translation now have multilingual support disabled. This change will be reverted if the entity translation module is enabled again.'), 'warning');
+  }
+}
+
+/**
+ * Implements hook_uninstall().
+ */
+function entity_translation_uninstall() {
+  db_delete('variable')
+    ->condition('name', db_like('entity_translation_') . '%', 'LIKE')
+    ->execute();
+
+  variable_del('translation_language_type');
+  variable_del('locale_field_language_fallback');
+}
+
+/**
+ * Implements hook_update_N().
+ */
+function entity_translation_update_7001() {
+  db_update('system')
+    ->fields(array('weight' => 11))
+    ->condition('name', 'entity_translation')
+    ->execute();
+}
+
+/**
+ * Grant 'edit original values' and 'edit shared field' permissions to roles which have entity editing permissions.
+ */
+function entity_translation_update_7002() {
+  // Grant the 'edit original values' permission, so we don't break editing on
+  // existing sites.
+  return _entity_translation_grant_edit_permissions();
+}
+
+/**
+ * Configure node and comment language settings to the prior default behavior.
+ */
+function entity_translation_update_7003() {
+  module_load_include('inc', 'entity_translation', 'entity_translation.admin');
+  foreach (array_keys(entity_get_info()) as $entity_type) {
+    entity_translation_settings_init($entity_type);
+  }
+}
+
+/**
+ * Rebuild entity information to update the path scheme settings.
+ */
+function entity_translation_update_7004() {
+  entity_info_cache_clear();
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation.module drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation.module
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation.module	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation.module	2014-05-21 21:43:42.000000000 +0200
@@ -0,0 +1,2003 @@
+<?php
+
+/**
+ * @file
+ * Allows entities to be translated into different languages.
+ */
+
+module_load_include('inc', 'entity_translation', 'entity_translation.node');
+
+
+/**
+ * Language code identifying the site default language.
+ */
+define('ENTITY_TRANSLATION_LANGUAGE_DEFAULT', 'xx-et-default');
+
+/**
+ * Language code identifying the current content language.
+ */
+define('ENTITY_TRANSLATION_LANGUAGE_CURRENT', 'xx-et-current');
+
+/**
+ * Language code identifying the author's preferred language.
+ */
+define('ENTITY_TRANSLATION_LANGUAGE_AUTHOR', 'xx-et-author');
+
+
+/**
+ * Implements hook_hook_info().
+ */
+function entity_translation_hook_info() {
+  $hooks['entity_translation_insert'] = array(
+    'group' => 'entity_translation',
+  );
+  $hooks['entity_translation_update'] = array(
+    'group' => 'entity_translation',
+  );
+  $hooks['entity_translation_delete'] = array(
+    'group' => 'entity_translation',
+  );
+  return $hooks;
+}
+
+/**
+ * Implements hook_module_implements_alter().
+ */
+function entity_translation_module_implements_alter(&$implementations, $hook) {
+  switch ($hook) {
+    case 'menu_alter':
+    case 'entity_info_alter':
+      // Move some of our hook implementations to the end of the list.
+      $group = $implementations['entity_translation'];
+      unset($implementations['entity_translation']);
+      $implementations['entity_translation'] = $group;
+      break;
+  }
+}
+
+/**
+ * Implements hook_language_type_info_alter().
+ */
+function entity_translation_language_types_info_alter(array &$language_types) {
+  unset($language_types[LANGUAGE_TYPE_CONTENT]['fixed']);
+}
+
+/**
+ * Implements hook_entity_info().
+ */
+function entity_translation_entity_info() {
+  $info = array();
+
+  $info['node'] = array(
+    'translation' => array(
+      'entity_translation' => array(
+        'class' => 'EntityTranslationNodeHandler',
+        'access callback' => 'entity_translation_node_tab_access',
+        'access arguments' => array(1),
+        'admin theme' => variable_get('node_admin_theme'),
+        'bundle callback' => 'entity_translation_node_supported_type',
+        'default settings' => array(
+          'default_language' => LANGUAGE_NONE,
+          'hide_language_selector' => FALSE,
+        ),
+      ),
+    ),
+  );
+
+  if (module_exists('comment')) {
+    $info['comment'] = array(
+      'translation' => array(
+        'entity_translation' => array(
+          'class' => 'EntityTranslationCommentHandler',
+          'admin theme' => FALSE,
+          'bundle callback' => 'entity_translation_comment_supported_type',
+          'default settings' => array(
+            'default_language' => ENTITY_TRANSLATION_LANGUAGE_CURRENT,
+            'hide_language_selector' => TRUE,
+          ),
+        ),
+      ),
+    );
+  }
+
+  if (module_exists('taxonomy')) {
+    $info['taxonomy_term'] = array(
+      'translation' => array(
+        'entity_translation' => array(
+          'class' => 'EntityTranslationTaxonomyTermHandler',
+          'base path' => 'taxonomy/term/%taxonomy_term',
+          'edit form' => 'term',
+        ),
+      ),
+    );
+  }
+
+  $info['user'] = array(
+    'translation' => array(
+      'entity_translation' => array(
+        'class' => 'EntityTranslationUserHandler',
+        'skip original values access' => TRUE,
+        'skip shared fields access' => TRUE,
+      ),
+    ),
+  );
+
+  return $info;
+}
+
+/**
+ * Processes the given path schemes and fill-in default values.
+ */
+function _entity_translation_process_path_schemes($entity_type, &$et_info) {
+  $path_scheme_keys = array_flip(array('base path', 'view path', 'edit path', 'translate path', 'path wildcard', 'admin theme'));
+
+  // Insert the default path scheme into the 'path schemes' array and remove
+  // respective elements from the entity_translation info array.
+  $default_scheme = array_intersect_key($et_info, $path_scheme_keys);
+  if (!empty($default_scheme)) {
+    $et_info['path schemes']['default'] = $default_scheme;
+    $et_info = array_diff_key($et_info, $path_scheme_keys);
+  }
+
+  // If no base path is provided we default to the common "node/%node"
+  // pattern.
+  if (empty($et_info['path schemes']['default']['base path'])) {
+    $et_info['path schemes']['default']['base path'] = "$entity_type/%$entity_type";
+  }
+
+  foreach ($et_info['path schemes'] as $delta => $scheme) {
+    // If there is a base path, then we automatically create the other path
+    // elements based on the base path.
+    if (!empty($scheme['base path'])) {
+      $view_path = $scheme['base path'];
+      $edit_path = $scheme['base path'] . '/edit';
+      $translate_path = $scheme['base path'] . '/translate';
+
+      $et_info['path schemes'][$delta] += array(
+        'view path' => $view_path,
+        'edit path' => $edit_path,
+        'translate path' => $translate_path,
+      );
+    }
+
+    // Merge in default values for other scheme elements.
+    $et_info['path schemes'][$delta] += array(
+      'admin theme' => TRUE,
+      'path wildcard' => "%$entity_type",
+    );
+  }
+}
+
+/**
+ * Implements hook_entity_info_alter().
+ */
+function entity_translation_entity_info_alter(&$entity_info) {
+  // Provide defaults for translation info.
+  foreach ($entity_info as $entity_type => $info) {
+    if (!isset($entity_info[$entity_type]['translation']['entity_translation'])) {
+      $entity_info[$entity_type]['translation']['entity_translation'] = array();
+    }
+    $et_info = &$entity_info[$entity_type]['translation']['entity_translation'];
+
+    // Every fieldable entity type must have a translation handler class and
+    // translation keys defined, no matter if it is enabled for translation or
+    // not. As a matter of fact we might need them to correctly switch field
+    // translatability when a field is shared across different entity types.
+    $et_info += array('class' => 'EntityTranslationDefaultHandler');
+    $entity_info[$entity_type]['entity keys'] += array('translations' => 'translations');
+
+    if (entity_translation_enabled($entity_type, NULL, TRUE)) {
+      $entity_info[$entity_type]['language callback'] = 'entity_translation_language';
+
+      // Process path schemes and fill-in defaults.
+      _entity_translation_process_path_schemes($entity_type, $et_info);
+
+      // Merge in default values for remaining keys.
+      $et_info += array(
+        'access callback' => 'entity_translation_tab_access',
+        'access arguments' => array($entity_type),
+      );
+
+      // Interpret a TRUE value for the 'edit form' key as the default value.
+      if (!isset($et_info['edit form']) || $et_info['edit form'] === TRUE) {
+        $et_info['edit form'] = $entity_type;
+      }
+    }
+  }
+}
+
+/**
+ * Implements hook_menu().
+ */
+function entity_translation_menu() {
+  $items = array();
+
+  $items['admin/config/regional/entity_translation'] = array(
+    'title' => 'Entity translation',
+    'description' => 'Configure which entities can be translated and enable or disable language fallback.',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('entity_translation_admin_form'),
+    'access arguments' => array('administer entity translation'),
+    'file' => 'entity_translation.admin.inc',
+    'module' => 'entity_translation',
+  );
+
+  $items['admin/config/regional/entity_translation/translatable/%'] = array(
+    'title' => 'Confirm change in translatability.',
+    'description' => 'Confirmation page for changing field translatability.',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('entity_translation_translatable_form', 5),
+    'access arguments' => array('toggle field translatability'),
+    'file' => 'entity_translation.admin.inc',
+  );
+
+  return $items;
+}
+
+/**
+ * Validate the given set of path schemes and remove invalid elements.
+ *
+ * Each path scheme needs to fulfill the following requirements:
+ * - The 'path wildcard' key needs to be specified.
+ * - Every path (base/view/edit/translate) needs to contain the path wildcard.
+ * - The following path definitions (if specified) need to match existing menu
+ *   items: 'base path', 'view path', 'edit path'.
+ * - The 'translate path' definition needs to have an existing parent menu item.
+ *
+ * This function needs to be called once with a list of menu items passed as the
+ * last parameter, before it can be used for validation.
+ *
+ * @param $schemes
+ *   The array of path schemes.
+ * @param $entity_type_label
+ *   The label of the current entity type. This is used in error messages.
+ * @param $items
+ *   A list of menu items.
+ * @param $warnings
+ *   (optional) Displays warnings when a path scheme does not validate.
+ */
+function _entity_translation_validate_path_schemes(&$schemes, $entity_type_label, $items = FALSE, $warnings = FALSE) {
+  $paths = &drupal_static(__FUNCTION__);
+  static $regex = '|%[^/]+|';
+
+  if (!empty($items)) {
+    // Some menu loaders in the item paths might have been altered: we need to
+    // replace any menu loader with a plain % to check if base paths are still
+    // compatible.
+    $paths = array();
+    foreach ($items as $path => $item) {
+      $stripped_path = preg_replace($regex, '%', $path);
+      $paths[$stripped_path] = $path;
+    }
+  }
+
+  if (empty($schemes)) {
+    return;
+  }
+
+  // Make sure we have a set of paths to validate the scheme against.
+  if (empty($paths)) {
+    // This should never happen.
+    throw new Exception('The Entity Translation path scheme validation function has not been initialized properly.');
+  }
+
+  foreach ($schemes as $delta => &$scheme) {
+    // Every path scheme needs to declare a path wildcard for the entity id.
+    if (empty($scheme['path wildcard'])) {
+      if ($warnings) {
+        $t_args = array('%scheme' => $delta, '%entity_type' => $entity_type_label);
+        drupal_set_message(t('Entity Translation path scheme %scheme for entities of type %entity_type does not declare a path wildcard.', $t_args), 'warning');
+      }
+      unset($schemes[$delta]);
+      continue;
+    }
+
+    $wildcard = $scheme['path wildcard'];
+    $validate_keys = array('base path' => FALSE, 'view path' => FALSE, 'edit path' => FALSE, 'translate path' => TRUE);
+
+    foreach ($validate_keys as $key => $check_parent) {
+      if (isset($scheme[$key])) {
+        $path = $scheme[$key];
+        $parts = explode('/', $path);
+        $scheme[$key . ' parts'] = $parts;
+
+        // Check that the path contains the path wildcard. Required for
+        // determining the position of the entity id in the path (see
+        // entity_translation_menu_alter()).
+        if (!in_array($wildcard, $parts)) {
+          if ($warnings) {
+            $t_args = array('%path_key' => $key, '%entity_type' => $entity_type_label, '%wildcard' => $wildcard, '%path' => $path);
+            drupal_set_message(t('Invalid %path_key defined for entities of type %entity_type: entity wildcard %wildcard not found in %path.', $t_args), 'warning');
+          }
+          unset($scheme[$key]);
+          continue;
+        }
+
+        // Remove the trailing path element for paths requiring an existing
+        // parent menu item (i.e. the "translate path").
+        $trailing_path_element = FALSE;
+        if ($check_parent) {
+          $trailing_path_element = array_pop($parts);
+          $path = implode('/', $parts);
+        }
+        $stripped_path = preg_replace($regex, '%', $path);
+
+        if (!isset($paths[$stripped_path])) {
+          if ($warnings) {
+            $t_args = array('%path_key' => $key, '%entity_type' => $entity_type_label, '%path' => $path);
+            $msg = $check_parent ?
+              t('Invalid %path_key defined for entities of type %entity_type: parent menu item not found for %path', $t_args) :
+              t('Invalid %path_key defined for entities of type %entity_type: matching menu item not found for %path', $t_args);
+            drupal_set_message($msg, 'warning');
+          }
+          unset($scheme[$key]);
+        }
+        // If there is a matching menu item for the current scheme key, save
+        // the real path, i.e. the path of the matching menu item.
+        else {
+          $real_path = $paths[$stripped_path];
+          $real_parts = explode('/', $real_path);
+
+          // Restore previously removed trailing path element.
+          if ($trailing_path_element) {
+            $real_path .= '/' . $trailing_path_element;
+            $real_parts[] = $trailing_path_element;
+          }
+
+          $scheme['real ' . $key] = $real_path;
+          $scheme['real ' . $key . ' parts'] = $real_parts;
+        }
+      }
+    }
+  }
+}
+
+/**
+ * Implements hook_menu_alter().
+ */
+function entity_translation_menu_alter(&$items) {
+  $backup = array();
+
+  // Initialize path schemes validation function with set of current menu items.
+  $_null = NULL;
+  _entity_translation_validate_path_schemes($_null, FALSE, $items);
+
+  // Create tabs for all possible entity types.
+  foreach (entity_get_info() as $entity_type => $info) {
+    // Menu is rebuilt while determining entity translation base paths and
+    // callbacks so we might not have them available yet.
+    if (entity_translation_enabled($entity_type)) {
+      $et_info = $info['translation']['entity_translation'];
+
+      // Flag for tracking whether we have managed to attach the translate UI
+      // successfully at least once.
+      $translate_ui_attached = FALSE;
+
+      // Validate path schemes for current entity type. Also removes invalid
+      // ones and adds '... path parts' elements.
+      _entity_translation_validate_path_schemes($et_info['path schemes'], $info['label'], FALSE, TRUE);
+
+      foreach ($et_info['path schemes'] as $scheme) {
+        $translate_item = NULL;
+        $edit_item = NULL;
+
+        // If we have a translate path then attach the translation UI, and
+        // register the callback for deleting a translation.
+        if (isset($scheme['translate path'])) {
+          $translate_path = $scheme['translate path'];
+
+          $keys = array('theme callback', 'theme arguments', 'access callback', 'access arguments', 'load arguments');
+          $item = array_intersect_key($info['translation']['entity_translation'], drupal_map_assoc($keys));
+
+          $item += array(
+            'file' => 'entity_translation.admin.inc',
+            'module' => 'entity_translation',
+          );
+
+          $entity_position = array_search($scheme['path wildcard'], $scheme['translate path parts']);
+
+          if ($item['access callback'] == 'entity_translation_tab_access') {
+            $item['access arguments'][] = $entity_position;
+          }
+
+          // Backup existing values for the translate overview page.
+          if (isset($items[$translate_path])) {
+            $backup[$entity_type] = $items[$translate_path];
+          }
+
+          $items[$translate_path] = array(
+            'title' => 'Translate',
+            'page callback' => 'entity_translation_overview',
+            'page arguments' => array($entity_type, $entity_position),
+            'type' => MENU_LOCAL_TASK,
+            'weight' => 2,
+            'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
+          ) + $item;
+
+          // Delete translation callback.
+          $language_position = count($scheme['translate path parts']) + 1;
+          $items["$translate_path/delete/%entity_translation_language"] = array(
+            'title' => 'Delete',
+            'page callback' => 'drupal_get_form',
+            'page arguments' => array('entity_translation_delete_confirm', $entity_type, $entity_position, $language_position),
+          ) + $item;
+
+          $translate_item = &$items[$translate_path];
+        }
+
+        // If we have an edit path, then replace the menu edit form with our
+        // proxy implementation, and register new callbacks for adding and
+        // editing a translation.
+        if (isset($scheme['edit path'])) {
+          // Find the edit item. If the edit path is a default local task we
+          // need to find the parent item.
+          $real_edit_path_parts = $scheme['real edit path parts'];
+          do {
+            $edit_item = &$items[implode('/', $real_edit_path_parts)];
+            array_pop($real_edit_path_parts);
+          }
+          while (!empty($edit_item['type']) && $edit_item['type'] == MENU_DEFAULT_LOCAL_TASK);
+
+          $edit_path = $scheme['edit path'];
+          $edit_path_parts = $scheme['edit path parts'];
+
+          // Replace the main edit callback with our proxy implementation to set
+          // form language to the current language and check access.
+          $entity_position = array_search($scheme['path wildcard'], $edit_path_parts);
+          $original_item = $edit_item;
+          $args = array($entity_type, $entity_position, FALSE, $original_item);
+          $edit_item['page callback'] = 'entity_translation_edit_page';
+          $edit_item['page arguments'] = array_merge($args, $original_item['page arguments']);
+          $edit_item['access callback'] = 'entity_translation_edit_access';
+          $edit_item['access arguments'] = array_merge($args, $original_item['access arguments']);
+
+          // Edit translation callback.
+          $translation_position = count($edit_path_parts);
+          $args = array($entity_type, $entity_position, $translation_position, $original_item);
+          $items["$edit_path/%entity_translation_language"] = array(
+            'type' => MENU_DEFAULT_LOCAL_TASK,
+            'title callback' => 'entity_translation_edit_title',
+            'title arguments' => array($translation_position),
+            'page callback' => 'entity_translation_edit_page',
+            'page arguments' => array_merge($args, $original_item['page arguments']),
+            'access callback' => 'entity_translation_edit_access',
+            'access arguments' => array_merge($args, $original_item['access arguments']),
+          )
+          // We need to inherit the remaining menu item keys, mostly 'module'
+          // and 'file' to keep ajax callbacks working (see form_get_cache() and
+          // drupal_retrieve_form()).
+          + $original_item;
+
+          // Add translation callback.
+          $add_path = "$edit_path/add/%entity_translation_language/%entity_translation_language";
+          $source_position = count($edit_path_parts) + 1;
+          $target_position = count($edit_path_parts) + 2;
+          $args = array($entity_type, $entity_position, $source_position, $target_position, $original_item);
+          $items[$add_path] = array(
+            'title callback' => 'Add translation',
+            'page callback' => 'entity_translation_add_page',
+            'page arguments' => array_merge($args, $original_item['page arguments']),
+            'type' => MENU_LOCAL_TASK,
+            'access callback' => 'entity_translation_add_access',
+            'access arguments' => array_merge($args, $original_item['access arguments']),
+          ) + $original_item;
+        }
+
+        // Make the "Translate" tab follow the "Edit" tab if possible.
+        if ($translate_item && $edit_item && isset($edit_item['weight'])) {
+          $translate_item['weight'] = $edit_item['weight'] + 1;
+        }
+
+        // If we have both an edit item and a translate item, then we know that
+        // the translate UI has been attached properly (at least once).
+        $translate_ui_attached = $translate_ui_attached || ($translate_item && $edit_item);
+
+        // Cleanup reference variables, so we don't accidentially overwrite
+        // something in a later iteration.
+        unset($translate_item, $edit_item);
+      }
+
+      if ($translate_ui_attached == FALSE) {
+        drupal_set_message(t('The entities of type %entity_type do not define a valid path scheme: it will not be possible to translate them.', array('%entity_type' => $info['label'])), 'warning');
+      }
+
+      // Node-specific menu alterations.
+      if ($entity_type == 'node') {
+        entity_translation_node_menu_alter($items, $backup);
+      }
+    }
+  }
+
+  // Avoid bloating memory with unused data.
+  drupal_static_reset('_entity_translation_validate_path_schemes');
+}
+
+/**
+ * Title callback.
+ */
+function entity_translation_edit_title($langcode) {
+  $languages = entity_translation_languages();
+  return isset($languages[$langcode]) ? t($languages[$langcode]->name) : '';
+}
+
+/**
+ * Page callback.
+ */
+function entity_translation_edit_page() {
+  $args = func_get_args();
+  $entity_type = array_shift($args);
+  $entity = array_shift($args);
+  $langcode = array_shift($args);
+  $edit_form_item = array_shift($args);
+
+  // Set the current form language.
+  $handler = entity_translation_get_handler($entity_type, $entity);
+  $handler->initPathScheme();
+  $langcode = entity_translation_form_language($langcode, $handler);
+  $handler->setFormLanguage($langcode);
+
+  // Display the entity edit form.
+  return _entity_translation_callback($edit_form_item['page callback'], $args, $edit_form_item);
+}
+
+/**
+ * Access callback.
+ */
+function entity_translation_edit_access() {
+  $args = func_get_args();
+  $entity_type = array_shift($args);
+  $entity = array_shift($args);
+  $langcode = array_shift($args);
+
+  $handler = entity_translation_get_handler($entity_type, $entity);
+  $translations = $handler->getTranslations();
+  $langcode = entity_translation_form_language($langcode, $handler);
+
+  // The user must be explicitly allowed to access the original values if
+  // workflow permissions are enabled.
+  if (!$handler->getTranslationAccess($langcode)) {
+    return FALSE;
+  }
+
+  // If the translation exists or no translation was specified, we can show the
+  // corresponding local task. If translations have not been initialized yet, we
+  // need to grant access to the user.
+  if (empty($translations->data) || isset($translations->data[$langcode])) {
+    // Check that the requested language is actually accessible. If the entity
+    // is language neutral we need to let editors access it.
+    $enabled_languages = entity_translation_languages($entity_type, $entity);
+    if (isset($enabled_languages[$langcode]) || $langcode == LANGUAGE_NONE) {
+      $edit_form_item = array_shift($args);
+      $access_callback = isset($edit_form_item['access callback']) ? $edit_form_item['access callback'] : 'user_access';
+      return _entity_translation_callback($access_callback, $args, $edit_form_item);
+    }
+  }
+
+  return FALSE;
+}
+
+/**
+ * Determines the current form language.
+ *
+ * Based on the requested language and the translations available for the entity
+ * being edited, determines the active form language. This takes into account
+ * language fallback rules so that the translation being edited matches the one
+ * being viewed.
+ *
+ * @param $langcode
+ *   The requested language code.
+ * @param EntityTranslationHandlerInterface $handler
+ *   A translation handler instance.
+ *
+ * @return
+ *   A valid language code.
+ */
+function entity_translation_form_language($langcode, $handler) {
+  if (empty($langcode)) {
+    $langcode = $GLOBALS['language_content']->language;
+  }
+
+  $translations = $handler->getTranslations();
+  $fallback = drupal_multilingual() ? language_fallback_get_candidates() : array(LANGUAGE_NONE);
+  while (!empty($langcode) && !isset($translations->data[$langcode])) {
+    $langcode = array_shift($fallback);
+  }
+
+  // If no translation is available fall back to the entity language.
+  return !empty($langcode) ? $langcode : $handler->getLanguage();
+}
+
+/**
+ * Access callback.
+ */
+function entity_translation_add_access() {
+  $args = func_get_args();
+  $entity_type = array_shift($args);
+  $entity = array_shift($args);
+  $source = array_shift($args);
+  $langcode = array_shift($args);
+
+  $handler = entity_translation_get_handler($entity_type, $entity);
+  $translations = $handler->getTranslations();
+
+  // If the translation does not exist we can show the tab.
+  if (!isset($translations->data[$langcode]) && $langcode != $source) {
+    // Check that the requested language is actually accessible.
+    $enabled_languages = entity_translation_languages($entity_type, $entity);
+    if (isset($enabled_languages[$langcode])) {
+      $edit_form_item = array_shift($args);
+      $access_callback = isset($edit_form_item['access callback']) ? $edit_form_item['access callback'] : 'user_access';
+      return _entity_translation_callback($access_callback, $args, $edit_form_item);
+    }
+  }
+
+  return FALSE;
+}
+
+/**
+ * Page callback.
+ */
+function entity_translation_add_page() {
+  $args = func_get_args();
+  $entity_type = array_shift($args);
+  $entity = array_shift($args);
+  $source = array_shift($args);
+  $langcode = array_shift($args);
+  $edit_form_item = array_shift($args);
+
+  $handler = entity_translation_get_handler($entity_type, $entity);
+  $handler->initPathScheme();
+  $handler->setFormLanguage($langcode);
+  $handler->setSourceLanguage($source);
+
+  // Display the entity edit form.
+  return _entity_translation_callback($edit_form_item['page callback'], $args, $edit_form_item);
+}
+
+/**
+ * Helper function. Proxies a callback call including any needed file.
+ */
+function _entity_translation_callback($callback, $args, $info = array()) {
+  if (isset($info['file'])) {
+    $path = isset($info['file path']) ? $info['file path'] : drupal_get_path('module', $info['module']);
+    include_once DRUPAL_ROOT . '/' . $path . '/' . $info['file'];
+  }
+  return call_user_func_array($callback, $args);
+}
+
+/**
+ * Implements hook_admin_paths().
+ */
+function entity_translation_admin_paths() {
+  $paths = array();
+  foreach (entity_get_info() as $entity_type => $info) {
+    if (entity_translation_enabled($entity_type, NULL, TRUE)) {
+      foreach ($info['translation']['entity_translation']['path schemes'] as $scheme) {
+        if (!empty($scheme['admin theme'])) {
+          if (isset($scheme['translate path'])) {
+            $translate_path = preg_replace('|%[^/]*|', '*', $scheme['translate path']);
+            $paths[$translate_path] = TRUE;
+            $paths["$translate_path/*"] = TRUE;
+          }
+          if (isset($scheme['edit path'])) {
+            $edit_path = preg_replace('|%[^/]*|', '*', $scheme['edit path']);
+            $paths["$edit_path/*"] = TRUE;
+          }
+        }
+      }
+    }
+  }
+  return $paths;
+}
+
+/**
+ * Access callback.
+ */
+function entity_translation_tab_access($entity_type, $entity) {
+  if (drupal_multilingual() && (user_access('translate any entity') || user_access("translate $entity_type entities"))) {
+    $enabled = entity_translation_enabled($entity_type, $entity);
+    return $enabled && entity_translation_get_handler($entity_type, $entity)->getLanguage() != LANGUAGE_NONE;
+  }
+  return FALSE;
+}
+
+/**
+ * Menu loader callback.
+ */
+function entity_translation_language_load($langcode, $entity_type = NULL, $entity = NULL) {
+  $enabled_languages = entity_translation_languages($entity_type, $entity);
+  return isset($enabled_languages[$langcode]) ? $langcode : FALSE;
+}
+
+/**
+ * Menu loader callback.
+ */
+function entity_translation_menu_entity_load($entity_id, $entity_type) {
+  $entities = entity_load($entity_type, array($entity_id));
+  return $entities[$entity_id];
+}
+
+/**
+ * Implements hook_permission().
+ */
+function entity_translation_permission() {
+  $permission = array(
+    'administer entity translation' => array(
+      'title' => t('Administer entity translation'),
+      'description' => t('Select which entities can be translated.'),
+    ),
+    'toggle field translatability' => array(
+      'title' => t('Toggle field translatability'),
+      'description' => t('Toggle translatability of fields performing a bulk update.'),
+    ),
+    'translate any entity' => array(
+      'title' => t('Translate any entity'),
+      'description' => t('Translate field content for any fieldable entity.'),
+    ),
+  );
+
+  $workflow = entity_translation_workflow_enabled();
+  if ($workflow) {
+    $permission += array(
+      'edit translation shared fields' => array(
+        'title' => t('Edit shared values'),
+        'description' => t('Edit values shared between translations on the entity form.'),
+      ),
+      'edit original values' => array(
+        'title' => t('Edit original values'),
+        'description' => t('Access any entity form in the original language.'),
+      ),
+    );
+  }
+
+  foreach (entity_get_info() as $entity_type => $info) {
+    if ($info['fieldable'] && entity_translation_enabled($entity_type)) {
+      $label = !empty($info['label']) ? t($info['label']) : $entity_type;
+      $permission["translate $entity_type entities"] = array(
+        'title' => t('Translate entities of type @type', array('@type' => $label)),
+        'description' => t('Translate field content for entities of type @type.', array('@type' => $label)),
+      );
+
+      if ($workflow) {
+        // Avoid access control for original values on the current entity.
+        if (empty($info['translation']['entity_translation']['skip original values access'])) {
+          $permission["edit $entity_type original values"] = array(
+            'title' => t('Edit original values on entities of type @type', array('@type' => $label)),
+            'description' => t('Access the entity form in the original language for entities of type @type.', array('@type' => $label)),
+          );
+        }
+
+        // Avoid access control for shared fields on the current entity.
+        if (empty($info['translation']['entity_translation']['skip shared fields access'])) {
+          $permission["edit $entity_type translation shared fields"] = array(
+            'title' => t('Edit @type shared values.', array('@type' => $label)),
+            'description' => t('Edit values shared between translations on @type forms.', array('@type' => $label)),
+          );
+        }
+      }
+    }
+  }
+
+  return $permission;
+}
+
+/**
+ * Returns TRUE if the translation workflow is enabled.
+ */
+function entity_translation_workflow_enabled() {
+  return variable_get('entity_translation_workflow_enabled', FALSE);
+}
+
+/**
+ * Implements hook_theme().
+ */
+function entity_translation_theme() {
+  return array(
+    'entity_translation_unavailable' => array(
+      'variables' => array('element' => NULL),
+    ),
+    'entity_translation_language_tabs' => array(
+      'render element' => 'element',
+    ),
+    'entity_translation_overview' => array(
+      'variables' => array('rows' => NULL, 'header' => NULL),
+      'file' => 'entity_translation.admin.inc'
+    ),
+    'entity_translation_overview_outdated' => array(
+      'variables' => array('message' => NULL),
+      'file' => 'entity_translation.admin.inc'
+    ),
+  );
+}
+
+/**
+ * Implements hook_entity_load().
+ */
+function entity_translation_entity_load($entities, $entity_type) {
+  if (entity_translation_enabled($entity_type)) {
+    EntityTranslationDefaultHandler::loadMultiple($entity_type, $entities);
+  }
+}
+
+/**
+ * Implements hook_field_extra_fields().
+ */
+function entity_translation_field_extra_fields() {
+  $extra = array();
+  $enabled = variable_get('entity_translation_entity_types', array());
+  $info = entity_get_info();
+
+  foreach ($enabled as $entity_type) {
+    if (entity_translation_enabled($entity_type)) {
+      $bundles = !empty($info[$entity_type]['bundles']) ? array_keys($info[$entity_type]['bundles']) : array($entity_type);
+      foreach ($bundles as $bundle) {
+        $settings = entity_translation_settings($entity_type, $bundle);
+        if (empty($settings['hide_language_selector']) && entity_translation_enabled_bundle($entity_type, $bundle) && ($handler = entity_translation_get_handler($entity_type, $bundle))) {
+          $language_key = $handler->getLanguageKey();
+          $extra[$entity_type][$bundle] = array(
+            'form' => array(
+              $language_key => array(
+                'label' => t('Language'),
+                'description' => t('Language selection'),
+                'weight' => 5,
+              ),
+            ),
+          );
+        }
+      }
+    }
+  }
+
+  return $extra;
+}
+
+/**
+ * Implements hook_field_language_alter().
+ *
+ * Performs language fallback for unaccessible translations.
+ */
+function entity_translation_field_language_alter(&$display_language, $context) {
+  if (variable_get('locale_field_language_fallback', TRUE) && entity_translation_enabled($context['entity_type'])) {
+    $entity = $context['entity'];
+    $entity_type = $context['entity_type'];
+    $handler = entity_translation_get_handler($entity_type, $entity);
+    $translations = $handler->getTranslations();
+
+    // Apply fallback only on unpublished translations as missing translations
+    // are already handled in locale_field_language_alter().
+    if (isset($translations->data[$context['language']]) && !entity_translation_access($entity_type, $translations->data[$context['language']])) {
+      list(, , $bundle) = entity_extract_ids($entity_type, $entity);
+      $instances = field_info_instances($entity_type, $bundle);
+      $entity = clone($entity);
+
+      foreach ($translations->data as $langcode => $translation) {
+        if ($langcode == $context['language'] || !entity_translation_access($entity_type, $translations->data[$langcode])) {
+          // Unset unaccessible field translations: if the field is
+          // untranslatable unsetting a language different from LANGUAGE_NONE
+          // has no effect.
+          foreach ($instances as $instance) {
+            unset($entity->{$instance['field_name']}[$langcode]);
+          }
+        }
+      }
+
+      // Find the new fallback values.
+      locale_field_language_fallback($display_language, $entity, $context['language']);
+    }
+    elseif (!field_has_translation_handler($entity_type, 'locale')) {
+      // If not handled by the Locale translation handler trigger fallback too.
+      locale_field_language_fallback($display_language, $entity, $context['language']);
+    }
+  }
+}
+
+/**
+ * Implements hook_field_attach_view_alter().
+ *
+ * Hide the entity if no translation is available for the current language and
+ * language fallback is disabled.
+ */
+function entity_translation_field_attach_view_alter(&$output, $context) {
+  if (!variable_get('locale_field_language_fallback', TRUE) && entity_translation_enabled($context['entity_type'])) {
+    $handler = entity_translation_get_handler($context['entity_type'], $context['entity']);
+    $translations = $handler->getTranslations();
+    $langcode = !empty($context['language']) ? $context['language'] : $GLOBALS['language_content']->language;
+
+    // If fallback is disabled we need to notify the user that the translation
+    // is unavailable (missing or unpublished).
+    if (!empty($translations->data) && ((!isset($translations->data[$langcode]) && !isset($translations->data[LANGUAGE_NONE])) || ((isset($translations->data[$langcode]) && !entity_translation_access($context['entity_type'], $translations->data[$langcode]))))) {
+      // Provide context for rendering.
+      $output['#entity'] = $context['entity'];
+      $output['#entity_type'] = $context['entity_type'];
+      $output['#view_mode'] = $context['view_mode'];
+      // We perform theming here because the theming function might need to set
+      // system messages. It would be too late in the #post_render callback.
+      $output['#entity_translation_unavailable'] = theme('entity_translation_unavailable', array('element' => $output));
+      // As we used a string key, other modules implementing
+      // hook_field_attach_view_alter() may unset/override this.
+      $output['#post_render']['entity_translation'] = 'entity_translation_unavailable';
+    }
+  }
+}
+
+/**
+ * Override the entity output with the unavailable translation one.
+ */
+function entity_translation_unavailable($children, $element) {
+  return $element['#entity_translation_unavailable'];
+}
+
+/**
+ * Theme an unvailable translation.
+ */
+function theme_entity_translation_unavailable($variables) {
+  $element = $variables['element'];
+  $handler = entity_translation_get_handler($element['#entity_type'], $element['#entity']);
+  $args = array('%language' => t($GLOBALS['language_content']->name), '%label' => $handler->getLabel());
+  $message = t('%language translation unavailable for %label.', $args);
+  $classes = $element['#entity_type'] . ' ' . $element['#entity_type'] . '-' . $element['#view_mode'];
+  return "<div class=\"$classes\"><div class=\"messages warning\">$message</div></div>";
+}
+
+/**
+ * Implements hook_field_info_alter().
+ */
+function entity_translation_field_info_alter(&$info) {
+  $columns = array('fid');
+  $supported_types = array('file' => $columns, 'image' => $columns);
+
+  foreach ($info as $field_type => &$field_type_info) {
+    // Store columns to be synchronized.
+    if (!isset($field_type_info['settings'])) {
+      $field_type_info['settings'] = array();
+    }
+    $field_type_info['settings'] += array(
+      'entity_translation_sync' => isset($supported_types[$field_type]) ? $supported_types[$field_type] : FALSE,
+    );
+    // Synchronization can be enabled per instance.
+    if (!isset($field_type_info['instance_settings'])) {
+      $field_type_info['instance_settings'] = array();
+    }
+    $field_type_info['instance_settings'] += array(
+      'entity_translation_sync' => FALSE,
+    );
+  }
+}
+
+/**
+ * Implements hook_field_attach_presave().
+ */
+function entity_translation_field_attach_presave($entity_type, $entity) {
+  if (entity_translation_enabled($entity_type, $entity)) {
+    entity_translation_sync($entity_type, $entity);
+  }
+}
+
+/**
+ * Performs field column synchronization.
+ */
+function entity_translation_sync($entity_type, $entity) {
+  // If we are creating a new entity or if we have no translations for the
+  // current entity, there is nothing to synchronize.
+  $handler = entity_translation_get_handler($entity_type, $entity, TRUE);
+  $translations = $handler->getTranslations();
+  $original_langcode = $handler->getSourceLanguage();
+  if ($handler->isNewEntity() || (count($translations->data) < 2 && !$original_langcode)) {
+    return;
+  }
+
+  list($id, , $bundle) = entity_extract_ids($entity_type, $entity);
+  $instances = field_info_instances($entity_type, $bundle);
+  $entity_unchanged = isset($entity->original) ? $entity->original : entity_load_unchanged($entity_type, $id);
+
+  // If the entity language is being changed there is nothing to synchronize.
+  $langcode = $handler->getLanguage();
+  $handler->setEntity($entity_unchanged);
+  if ($langcode != $handler->getLanguage()) {
+    return;
+  }
+
+  foreach ($instances as $field_name => $instance) {
+    $field = field_info_field($field_name);
+
+    // If the field is empty there is nothing to synchronize. Synchronization
+    // makes sense only for translatable fields.
+    if (!empty($entity->{$field_name}) && !empty($instance['settings']['entity_translation_sync']) && field_is_translatable($entity_type, $field)) {
+      $columns = $field['settings']['entity_translation_sync'];
+      $change_map = array();
+      $source_langcode = entity_language($entity_type, $entity);
+      $source_items = $entity->{$field_name}[$source_langcode];
+
+      // If a translation is being created, the original values should be used
+      // as the unchanged items. In fact there are no unchanged items to check
+      // against.
+      $langcode = $original_langcode ? $original_langcode : $source_langcode;
+      $unchanged_items = !empty($entity_unchanged->{$field_name}[$langcode]) ? $entity_unchanged->{$field_name}[$langcode] : array();
+
+      // By picking the maximum size between updated and unchanged items, we
+      // make sure to process also removed items.
+      $total = max(array(count($source_items), count($unchanged_items)));
+
+      // Make sure we can detect any change in the source items.
+      for ($delta = 0; $delta < $total; $delta++) {
+        foreach ($columns as $column) {
+          // Store the delta for the unchanged column value.
+          if (isset($unchanged_items[$delta][$column])) {
+            $value = $unchanged_items[$delta][$column];
+            $change_map[$column][$value]['old'] = $delta;
+          }
+          // Store the delta for the new column value.
+          if (isset($source_items[$delta][$column])) {
+            $value = $source_items[$delta][$column];
+            $change_map[$column][$value]['new'] = $delta;
+          }
+        }
+      }
+
+      // Backup field values.
+      $field_values = $entity->{$field_name};
+
+      // Reset field values so that no spurious translation value is stored.
+      // Source values and anything else must be preserved in any case.
+      $entity->{$field_name} = array($source_langcode => $source_items) + array_diff_key($entity->{$field_name}, $translations->data);
+
+      // Update translations.
+      foreach ($translations->data as $langcode => $translation) {
+        // We need to synchronize only values different from the source ones.
+        if ($langcode != $source_langcode) {
+          // Process even removed items.
+          for ($delta = 0; $delta < $total; $delta++) {
+            $created = TRUE;
+            $removed = TRUE;
+
+            foreach ($columns as $column) {
+              if (isset($source_items[$delta][$column])) {
+                $value = $source_items[$delta][$column];
+                $created = $created && !isset($change_map[$column][$value]['old']);
+                $removed = $removed && !isset($change_map[$column][$value]['new']);
+              }
+            }
+
+            // If an item has been removed we do not store its translations.
+            if ($removed) {
+              continue;
+            }
+            // If a synchronized column has changed we need to override the full
+            // items array for all languages.
+            elseif ($created) {
+              $entity->{$field_name}[$langcode][$delta] = $source_items[$delta];
+            }
+            // The current item might have been reordered.
+            elseif (!empty($change_map[$column][$value])) {
+              $old_delta = $change_map[$column][$value]['old'];
+              $new_delta = $change_map[$column][$value]['new'];
+              // If for nay reason the old value is not defined for the current
+              // we language we fall back to the new source value.
+              $items = isset($field_values[$langcode][$old_delta]) ? $field_values[$langcode][$old_delta] : $source_items[$new_delta];
+              $entity->{$field_name}[$langcode][$new_delta] = $items;
+            }
+          }
+        }
+      }
+    }
+  }
+}
+
+/**
+ * Implements hook_field_attach_insert().
+ */
+function entity_translation_field_attach_insert($entity_type, $entity) {
+  // Store entity translation metadata only if the entity bundle is
+  // translatable.
+  if (entity_translation_enabled($entity_type, $entity)) {
+    $handler = entity_translation_get_handler($entity_type, $entity);
+    $handler->initTranslations();
+    $handler->saveTranslations();
+  }
+}
+
+/**
+ * Implements hook_field_attach_update().
+ */
+function entity_translation_field_attach_update($entity_type, $entity) {
+  // Store entity translation metadata only if the entity bundle is
+  // translatable.
+  if (entity_translation_enabled($entity_type, $entity)) {
+    $handler = entity_translation_get_handler($entity_type, $entity, TRUE);
+    $handler->updateTranslations();
+    $handler->saveTranslations();
+  }
+}
+
+/**
+ * Implements hook_field_attach_delete().
+ */
+function entity_translation_field_attach_delete($entity_type, $entity) {
+  if (entity_translation_enabled($entity_type, $entity)) {
+    $handler = entity_translation_get_handler($entity_type, $entity);
+    $handler->removeTranslations();
+    $handler->saveTranslations();
+  }
+}
+
+/**
+ * Implementation of hook_field_attach_form().
+ */
+function entity_translation_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
+  // Skip recursing into the source form.
+  if (empty($form['#entity_translation_source_form']) && ($handler = entity_translation_entity_form_get_handler($form, $form_state))) {
+    $langcode = !empty($langcode) ? $langcode : $handler->getLanguage();
+    $form_langcode = $handler->getFormLanguage();
+    $translations = $handler->getTranslations();
+    $update_langcode = $form_langcode && ($form_langcode != $langcode);
+    $source = $handler->getSourceLanguage();
+    $new_translation = !isset($translations->data[$form_langcode]);
+
+    // If we are creating a new translation we need to retrieve form elements
+    // populated with the source language values, but only if form is not being
+    // rebuilt. In this case source values have already been populated, so we
+    // need to preserve possible changes. There might be situations, e.g. ajax
+    // calls, where the form language has not been properly initialized before
+    // calling field_attach_form(). In this case we need to rebuild the form
+    // with the correct form language and replace the field elements with the
+    // correct ones.
+    if ($update_langcode || ($source && !isset($translations->data[$form_langcode]) && isset($translations->data[$source]) && empty($form_state['rebuild']))) {
+      list(, , $bundle) = entity_extract_ids($entity_type, $entity);
+
+      foreach (field_info_instances($entity_type, $bundle) as $instance) {
+        $field_name = $instance['field_name'];
+        $field = field_info_field($field_name);
+
+        // If we are creating a new translation we have to change the form item
+        // language information from source to target language, this way the
+        // user can find the form items already populated with the source values
+        // while the field form element holds the correct language information.
+        if ($field['translatable']) {
+          $form[$field_name]['#field_name'] = $field_name;
+          $form[$field_name]['#source'] = $update_langcode ? $form_langcode : $source;
+          $form[$field_name]['#previous'] = NULL;
+
+          // If we are updating the form language we need to make sure that the
+          // wrong language is unset and the right one is stored in the field
+          // element (see entity_translation_prepare_element()).
+          if ($update_langcode) {
+            $form[$field_name]['#previous'] = $form[$field_name]['#language'];
+            $form[$field_name]['#language'] = $form_langcode;
+          }
+
+          // Swap default values during form processing to avoid recursion. We
+          // try to act before any other callback so that the correct values are
+          // already in place for them.
+          if (!isset($form[$field_name]['#process'])) {
+            $form[$field_name]['#process'] = array();
+          }
+          array_unshift($form[$field_name]['#process'], 'entity_translation_prepare_element');
+        }
+      }
+    }
+
+    // Handle fields shared between translations when there is at least one
+    // translation available or a new one is being created.
+    if (!$handler->isNewEntity() && ($new_translation || count($translations->data) > 1)) {
+      $shared_access = $handler->getSharedFieldsAccess();
+      list(, , $bundle) = entity_extract_ids($entity_type, $entity);
+      foreach (field_info_instances($entity_type, $bundle) as $instance) {
+        $field_name = $instance['field_name'];
+        $field = field_info_field($field_name);
+        // If access is not set or is granted we check whether the user has
+        // access to shared fields.
+        $form[$field_name]['#access'] = (!isset($form[$field_name]['#access']) || $form[$field_name]['#access']) && ($field['translatable'] || $shared_access);
+        $form[$field_name]['#multilingual'] = (boolean) $field['translatable'];
+      }
+    }
+
+    // If a translation is being created and no path alias exists for its
+    // language, by default an alias needs to be generated. The standard
+    // behavior is defaulting to FALSE when an entity already exists, hence we
+    // need to override it here.
+    if (module_exists('pathauto') && $handler->getSourceLanguage()) {
+      $entity->path['pathauto'] = TRUE;
+    }
+  }
+}
+
+/**
+ * Form element process callback.
+ */
+function entity_translation_prepare_element($element, &$form_state) {
+  $source_form = &drupal_static(__FUNCTION__, array());
+  $form = $form_state['complete form'];
+  $build_id = $form['#build_id'];
+  $source = $element['#source'];
+
+  if (!isset($source_form[$build_id][$source])) {
+    $source_form[$build_id][$source] = array('#entity_translation_source_form' => TRUE);
+    $source_form_state = $form_state;
+    $info = entity_translation_edit_form_info($form, $form_state);
+    field_attach_form($info['entity type'], $info['entity'], $source_form[$build_id][$source], $source_form_state, $source);
+  }
+
+  $langcode = $element['#language'];
+  $field_name = $element['#field_name'];
+
+  // If we are creating a new translation we have to change the form item
+  // language information from source to target language, this way the user can
+  // find the form items already populated with the source values while the
+  // field form element holds the correct language information.
+  if (isset($source_form[$build_id][$source][$field_name][$source])) {
+    $element[$langcode] = $source_form[$build_id][$source][$field_name][$source];
+    entity_translation_form_element_language_replace($element, $source, $langcode);
+    unset($element[$element['#previous']]);
+  }
+
+  return $element;
+}
+
+/**
+ * Helper function. Recursively replaces the source language with the given one.
+ */
+function entity_translation_form_element_language_replace(&$element, $source, $langcode) {
+  // Iterate through the form structure recursively.
+  foreach (element_children($element) as $key) {
+    entity_translation_form_element_language_replace($element[$key], $source, $langcode);
+  }
+
+  // Replace specific occurrences of the source language with the target
+  // language.
+  foreach (element_properties($element) as $key) {
+    if ($key === '#language') {
+      $element[$key] = $langcode;
+    }
+    elseif ($key === '#parents' || $key === '#field_parents') {
+      foreach ($element[$key] as $delta => $value) {
+        if ($value === $source) {
+          $element[$key][$delta] = $langcode;
+        }
+      }
+    }
+    elseif ($key === '#limit_validation_errors') {
+      foreach ($element[$key] as $section => $section_value) {
+        foreach ($element[$key][$section] as $delta => $value) {
+          if ($value === $source) {
+            $element[$key][$section][$delta] = $langcode;
+          }
+        }
+      }
+    }
+  }
+}
+
+/**
+ * Adds visual clues about the translatability of a field to the given element.
+ *
+ * Field titles are appended with the string "Shared" for fields which are
+ * shared between different translations. Moreover fields receive a CSS class to
+ * distinguish between translatable and shared fields.
+ */
+function entity_translation_element_translatability_clue($element) {
+  // Append language to element title.
+  if (empty($element['#multilingual'])) {
+    _entity_translation_element_title_append($element, ' (' . t('all languages') . ')');
+  }
+
+  // Add CSS class names.
+  if (!isset($element['#attributes'])) {
+    $element['#attributes'] = array();
+  }
+  if (!isset($element['#attributes']['class'])) {
+    $element['#attributes']['class'] = array();
+  }
+  $element['#attributes']['class'][] = 'entity-translation-' . (!empty($element['#multilingual']) ? 'field-translatable' : 'field-shared');
+
+  return $element;
+}
+
+/**
+ * Adds a callback function to the given FAPI element.
+ *
+ * Drupal core only adds default element callbacks if the respective handler
+ * type is not defined yet. This function ensures that our callback is only
+ * prepended/appended to the default set of callbacks instead of replacing it.
+ *
+ * @param $element
+ *   The FAPI element.
+ * @param $type
+ *   The callback type, e.g. '#pre_render' or '#process'.
+ * @param $function
+ *   The name of the callback to add.
+ * @param $prepend
+ *   Set to TRUE to add the new callback to the beginning of the existing set of
+ *   callbacks, and set it to FALSE to append it at the end.
+ */
+function _entity_translation_element_add_callback(&$element, $type, $function, $prepend = TRUE) {
+  // If handler type has not been set, add defaults from element_info().
+  if (!isset($element[$type])) {
+    $element_type = isset($element['#type']) ? $element['#type'] : 'markup';
+    $element_info = element_info($element_type);
+    $element[$type] = isset($element_info[$type]) ? $element_info[$type] : array();
+  }
+  if ($prepend) {
+    array_unshift($element[$type], $function);
+  }
+  else {
+    $element[$type][] = $function;
+  }
+}
+
+/**
+ * Appends the given $suffix string to the title of the given form element.
+ *
+ * If the given element does not have a #title attribute, the function is
+ * recursively applied to child elements.
+ */
+function _entity_translation_element_title_append(&$element, $suffix) {
+  static $fapi_title_elements;
+
+  // Elements which can have a #title attribute according to FAPI Reference.
+  if (!isset($fapi_title_elements)) {
+    $fapi_title_elements = array_flip(array('checkbox', 'checkboxes', 'date', 'fieldset', 'file', 'item', 'password', 'password_confirm', 'radio', 'radios', 'select', 'text_format', 'textarea', 'textfield', 'weight'));
+  }
+
+  // Update #title attribute for all elements that are allowed to have a #title
+  // attribute according to the Form API Reference. The reason for this check
+  // is because some elements have a #title attribute even though it is not
+  // rendered, e.g. field containers.
+  if (isset($element['#type']) && isset($fapi_title_elements[$element['#type']]) && isset($element['#title'])) {
+    $element['#title'] .= $suffix;
+  }
+  // If the current element does not have a (valid) title, try child elements.
+  elseif ($children = element_children($element)) {
+    foreach ($children as $delta) {
+      _entity_translation_element_title_append($element[$delta], $suffix);
+    }
+  }
+  // If there are no children, fall back to the current #title attribute if it
+  // exists.
+  elseif (isset($element['#title'])) {
+    $element['#title'] .= $suffix;
+  }
+}
+
+/**
+ * Implements hook_form_alter().
+ */
+function entity_translation_form_alter(&$form, &$form_state) {
+  if ($handler = entity_translation_entity_form_get_handler($form, $form_state)) {
+    if (!$handler->isNewEntity()) {
+      $handler->entityForm($form, $form_state);
+      $translations = $handler->getTranslations();
+      $form_langcode = $handler->getFormLanguage();
+      if (!isset($translations->data[$form_langcode]) || count($translations->data) > 1) {
+        // Hide shared form elements if the user is not allowed to edit them.
+        $handler->entityFormSharedElements($form);
+      }
+    }
+    else {
+      $handler->entityFormLanguageWidget($form, $form_state);
+    }
+    // We need to process the posted form as early as possible to update the
+    // form language value.
+    array_unshift($form['#validate'], 'entity_translation_entity_form_validate');
+  }
+  // We might have an entity form for an entity or a bundle not enabled for
+  // translation. In this case we might need to deal with entity and field
+  // languages anyway, since fields may be shared among different bundles and
+  // entity types.
+  elseif ($info = entity_translation_edit_form_info($form, $form_state)) {
+    $handler = entity_translation_get_handler($info['entity type'], $info['entity']);
+    $handler->entityFormLanguageWidget($form, $form_state);
+  }
+}
+
+/**
+ * Submit handler for the source language selector.
+ */
+function entity_translation_entity_form_source_language_submit($form, &$form_state) {
+  $handler = entity_translation_entity_form_get_handler($form, $form_state);
+  $langcode = $form_state['values']['source_language']['language'];
+  $path = "{$handler->getEditPath()}/add/$langcode/{$handler->getFormLanguage()}";
+  $options = array();
+  if (isset($_GET['destination'])) {
+    $options['query'] = drupal_get_destination();
+    unset($_GET['destination']);
+  }
+  $form_state['redirect'] = array($path, $options);
+  $languages = language_list();
+  drupal_set_message(t('Source translation set to: %language', array('%language' => t($languages[$langcode]->name))));
+}
+
+/**
+ * Submit handler for the translation deletion.
+ */
+function entity_translation_entity_form_delete_translation_submit($form, &$form_state) {
+  $handler = entity_translation_entity_form_get_handler($form, $form_state);
+  $path = "{$handler->getTranslatePath()}/delete/{$handler->getFormLanguage()}";
+  $options = array();
+  if (isset($_GET['destination'])) {
+    $options['query'] = drupal_get_destination();
+    unset($_GET['destination']);
+  }
+  $form_state['redirect'] = array($path, $options);
+}
+
+/**
+ * Validation handler for the entity edit form.
+ */
+function entity_translation_entity_form_validate($form, &$form_state) {
+  $handler = entity_translation_entity_form_get_handler($form, $form_state);
+  if (!empty($handler)) {
+    $handler->entityFormValidate($form, $form_state);
+  }
+}
+
+/**
+ * Submit handler for the entity language widget.
+ */
+function entity_translation_language_widget_submit($form, &$form_state) {
+  $handler = entity_translation_entity_form_get_handler($form, $form_state);
+  // On non-translatable entities, we need to handle just the entity and field
+  // language.
+  if (empty($handler) && ($info = entity_translation_edit_form_info($form, $form_state))) {
+    $handler = entity_translation_get_handler($info['entity type'], $info['entity']);
+  }
+  $handler->entityFormLanguageWidgetSubmit($form, $form_state);
+}
+
+/**
+ * Submit handler for the entity deletion.
+ */
+function entity_translation_entity_form_submit($form, &$form_state) {
+  if ($form_state['clicked_button']['#value'] == t('Delete')) {
+    $handler = entity_translation_entity_form_get_handler($form, $form_state);
+    if (count($handler->getTranslations()->data) > 1) {
+      $info = entity_get_info($form['#entity_type']);
+      drupal_set_message(t('This will delete all the @entity_type translations.', array('@entity_type' => drupal_strtolower($info['label']))), 'warning');
+    }
+  }
+}
+
+/**
+ * Implementation of hook_field_attach_submit().
+ *
+ * Mark translations as outdated if the submitted value is true.
+ */
+function entity_translation_field_attach_submit($entity_type, $entity, $form, &$form_state) {
+  if ($handler = entity_translation_entity_form_get_handler($form, $form_state)) {
+    // Update the wrapped entity with the submitted values.
+    $handler->setEntity($entity);
+    $handler->entityFormSubmit($form, $form_state);
+  }
+}
+
+/**
+ * Implements hook_menu_local_tasks_alter().
+ */
+function entity_translation_menu_local_tasks_alter(&$data, $router_item, $root_path) {
+  // When displaying the main edit form, we need to craft an additional level of
+  // local tasks for each available translation.
+  $handler = entity_translation_get_handler();
+  if (!empty($handler) && $handler->isEntityForm() && $handler->getLanguage() != LANGUAGE_NONE && drupal_multilingual()) {
+    $handler->localTasksAlter($data, $router_item, $root_path);
+  }
+}
+
+/**
+ * Preprocess variables for 'page.tpl.php'.
+ */
+function entity_translation_preprocess_page(&$variables) {
+  if (!empty($variables['tabs']['#secondary'])) {
+    $language_tabs = array();
+
+    foreach ($variables['tabs']['#secondary'] as $index => $tab) {
+      if (!empty($tab['#language_tab'])) {
+        $language_tabs[] = $tab;
+        unset($variables['tabs']['#secondary'][$index]);
+      }
+    }
+
+    if (!empty($language_tabs)) {
+      if (count($variables['tabs']['#secondary']) <= 1) {
+        $variables['tabs']['#secondary'] = $language_tabs;
+      }
+      else {
+        // If secondary tabs are already defined we need to add another level
+        // and wrap it so that it will be positioned on its own row.
+        $variables['tabs']['#secondary']['#language_tabs'] = $language_tabs;
+        $variables['tabs']['#secondary']['#pre_render']['entity_translation'] = 'entity_translation_language_tabs_render';
+      }
+    }
+  }
+}
+
+/**
+ * Pre render callback.
+ *
+ * Appends the language tabs to the current local tasks area.
+ */
+function entity_translation_language_tabs_render($element) {
+  $build = array(
+    '#theme' => 'menu_local_tasks',
+    '#theme_wrappers' => array('entity_translation_language_tabs'),
+    '#secondary' => $element['#language_tabs'],
+    '#attached' => array(
+      'css' => array(drupal_get_path('module', 'entity_translation') . '/entity-translation.css'),
+     ),
+  );
+  $element['#suffix'] .= drupal_render($build);
+  return $element;
+}
+
+/**
+ * Theme wrapper for the entity translation language tabs.
+ */
+function theme_entity_translation_language_tabs($variables) {
+  return '<div class="entity-translation-language-tabs">' . $variables['element']['#children'] . '</div>';
+}
+
+/**
+ * Implements hook_form_FORM_ID_alter().
+ *
+ * Adds an option to enable field synchronization.
+ * Enable a selector to choose whether a field is translatable.
+ */
+function entity_translation_form_field_ui_field_edit_form_alter(&$form, $form_state) {
+  $instance = $form['#instance'];
+  $entity_type = $instance['entity_type'];
+  $field_name = $instance['field_name'];
+  $field = field_info_field($field_name);
+
+  if (!empty($field['settings']['entity_translation_sync']) && field_is_translatable($entity_type, $field)) {
+    $form['instance']['settings']['entity_translation_sync'] = array(
+      '#prefix' => '<label>' . t('Field synchronization') . '</label>',
+      '#type' => 'checkbox',
+      '#title' => t('Enable field synchronization'),
+      '#description' => t('Check this option if you wish to synchronize the value of this field across its translations.'),
+      '#default_value' => !empty($instance['settings']['entity_translation_sync']),
+    );
+  }
+
+  $translatable = $field['translatable'];
+  $label = t('Field translation');
+  $title = t('Users may translate all occurrences of this field:') . _entity_translation_field_desc($field);
+
+  if (field_has_data($field)) {
+    $path = "admin/config/regional/entity_translation/translatable/$field_name";
+    $status = $translatable ? $title : (t('All occurrences of this field are untranslatable:') . _entity_translation_field_desc($field));
+    $link_title = !$translatable ? t('Enable translation') : t('Disable translation');
+
+    $form['field']['translatable'] = array(
+      '#prefix' => '<div class="translatable"><label>' . $label . '</label>',
+      '#suffix' => '</div>',
+      'message' => array(
+        '#markup' => $status . ' ',
+      ),
+      'link' => array(
+        '#type' => 'link',
+        '#title' => $link_title,
+        '#href' => $path,
+        '#options' => array('query' => drupal_get_destination()),
+        '#access' => user_access('toggle field translatability'),
+      ),
+    );
+  }
+  else {
+    $form['field']['translatable'] = array(
+      '#prefix' => '<label>' . $label . '</label>',
+      '#type' => 'checkbox',
+      '#title' => $title,
+      '#default_value' => $translatable,
+    );
+  }
+}
+
+/**
+ * Returns a human-readable, localized, bullet list of instances of a field.
+ *
+ * @param field
+ *   A field data structure.
+ *
+ * @return
+ *    A themed list of field instances with the bundle they are attached to.
+ */
+function _entity_translation_field_desc($field) {
+  $instances = array();
+  foreach ($field['bundles'] as $entity_type => $bundle_names) {
+    $entity_type_info = entity_get_info($entity_type);
+    foreach ($bundle_names as $bundle_name) {
+      $instance_info = field_info_instance($entity_type, $field['field_name'], $bundle_name);
+      $instances[] = t('@instance_label in %entity_label', array('@instance_label' => $instance_info['label'], '%entity_label' => $entity_type_info['bundles'][$bundle_name]['label']));
+    }
+  }
+  return theme('item_list', array('items' => $instances));
+}
+
+/**
+ * Determines whether the given entity type is translatable.
+ *
+ * @param $entity_type
+ *   The entity type enabled for translation.
+ * @param $entity
+ *   (optional) The entity belonging to the bundle enabled for translation. A
+ *   bundle name can alternatively be passed. If an empty value is passed the
+ *   bundle-level check is skipped. Defaults to NULL.
+ * @param $skip_handler
+ *   (optional) A boolean indicating whether skip checking if the entity type is
+ *   registered as a field translation handler. Defaults to FALSE.
+ */
+function entity_translation_enabled($entity_type, $entity = NULL, $skip_handler = FALSE) {
+  $enabled_types = variable_get('entity_translation_entity_types', array());
+  $enabled = !empty($enabled_types[$entity_type]) && ($skip_handler || field_has_translation_handler($entity_type, 'entity_translation'));
+
+  // If the entity type is not enabled or we are not checking bundle status, we
+  // have a result.
+  if (!$enabled || !isset($entity)) {
+    return $enabled;
+  }
+
+  // Determine the bundle to check for translatability.
+  $bundle = FALSE;
+  if (is_object($entity)) {
+    list(, , $bundle) = entity_extract_ids($entity_type, $entity);
+  }
+  elseif (is_string($entity)) {
+    $bundle = $entity;
+  }
+  return $bundle && entity_translation_enabled_bundle($entity_type, $bundle);
+}
+
+/**
+ * Determines whether the given entity bundle is translatable.
+ *
+ * @param $entity_type
+ *   The entity type the bundle to be checked belongs to.
+ * @param $bundle
+ *   The name of the bundle to be checked.
+ */
+function entity_translation_enabled_bundle($entity_type, $bundle) {
+  $info = entity_get_info($entity_type);
+  $bundle_callback = isset($info['translation']['entity_translation']['bundle callback']) ? $info['translation']['entity_translation']['bundle callback'] : FALSE;
+  return empty($bundle_callback) || call_user_func($bundle_callback, $bundle);
+}
+
+/**
+ * Return the entity translation settings for the given entity type and bundle.
+ */
+function entity_translation_settings($entity_type, $bundle) {
+  $settings = variable_get('entity_translation_settings_' . $entity_type . '__' . $bundle, array());
+
+  if (empty($settings)) {
+    $info = entity_get_info($entity_type);
+    if (!empty($info['translation']['entity_translation']['default settings'])) {
+      $settings = $info['translation']['entity_translation']['default settings'];
+    }
+  }
+
+  $settings += array(
+    'default_language' => ENTITY_TRANSLATION_LANGUAGE_DEFAULT,
+    'hide_language_selector' => TRUE,
+    'exclude_language_none' => FALSE,
+    'lock_language' => FALSE,
+    'shared_fields_original_only' => FALSE,
+  );
+
+  return $settings;
+}
+
+/**
+ * Entity language callback.
+ *
+ * This callback changes the entity language from the actual one to the active
+ * form language. This overriding allows to obtain language dependent form
+ * widgets where multilingual values are supported (e.g. field or path alias
+ * widgets) even if the code was not originally written with supporting multiple
+ * values per language in mind.
+ *
+ * The main drawback of this approach is that code needing to access the actual
+ * language in the entity form build/validation/submit workflow cannot rely on
+ * the entity_language() function. On the other hand in these scenarios assuming
+ * the presence of Entity translation should be safe, thus being able to rely on
+ * the EntityTranslationHandlerInterface::getLanguage() method.
+ *
+ * @param $entity_type
+ *    The the type of the entity.
+ * @param $entity
+ *    The entity whose language has to be returned.
+ *
+ * @return
+ *   A valid language code.
+ */
+function entity_translation_language($entity_type, $entity) {
+  // If a form has been post, we need to check its state to verify if any form
+  // translation handler is stored there. This is mainly needed when responding
+  // to an AJAX request where the form language cannot be set from the page
+  // callback.
+  $handler = entity_translation_current_form_get_handler();
+
+  // Make sure we always have a translation handler instance available.
+  if (empty($handler)) {
+    $handler = entity_translation_get_handler($entity_type, $entity);
+  }
+  // If a translation handler associated to the current form is found, we need
+  // to update the wrapped entity. This way submitted values will be picked up.
+  // Other entities may be created or saved while submitting the current one,
+  // hence we need to check we are dealing with it.
+  elseif ($handler->isWrappedEntity($entity_type, $entity)) {
+    $langcode = $handler->getLanguage();
+    $handler->setEntity($entity);
+    $submitted_langcode = $handler->getLanguage();
+    // If the entity language has changed we are editing the original values. In
+    // this case we need to update the current form language with the submitted
+    // one.
+    if ($submitted_langcode != $langcode) {
+      $handler->setFormLanguage($submitted_langcode);
+    }
+  }
+
+  $langcode = $handler->getFormLanguage();
+  return !empty($langcode) ? $langcode : $handler->getLanguage();
+}
+
+/**
+ * Translation handler factory.
+ *
+ * @param $entity_type
+ *   (optional) The type of $entity; e.g. 'node' or 'user'.
+ * @param $entity
+ *   (optional) The entity to be translated. A bundle name may be passed to
+ *   instantiate an empty entity.
+ * @param $update
+ *   (optional) Instances are statically cached: if this is TRUE the wrapped
+ *   entity will be replaced by the passed one.
+ *
+ * @return EntityTranslationHandlerInterface
+ *   A class implementing EntityTranslationHandlerInterface.
+ */
+function entity_translation_get_handler($entity_type = NULL, $entity = NULL, $update = FALSE) {
+  static $drupal_static_fast;
+  if (!isset($drupal_static_fast['handlers'])) {
+    $drupal_static_fast['handlers'] = &drupal_static(__FUNCTION__, array());
+  }
+  $handlers = &$drupal_static_fast['handlers'];
+
+  // Workaround the lack of a context object.
+  if (empty($entity)) {
+    if (isset($handlers[$entity_type]['#current'])) {
+      return $handlers[$entity_type]['#current'];
+    }
+    elseif (empty($entity_type) && isset($handlers['#current']['#current'])) {
+      return $handlers['#current']['#current'];
+    }
+    else {
+      return NULL;
+    }
+  }
+  elseif (is_string($entity)) {
+    $entity = entity_create_stub_entity($entity_type, array(NULL, NULL, $entity));
+  }
+
+  list($entity_id) = entity_extract_ids($entity_type, $entity);
+
+  if (!isset($handlers[$entity_type][$entity_id])) {
+    $entity_info = entity_get_info($entity_type);
+    $class = $entity_info['translation']['entity_translation']['class'];
+    // @todo remove fourth parameter once 3rd-party translation handlers have
+    // been fixed and no longer require the deprecated entity_id parameter.
+    $handler = new $class($entity_type, $entity_info, $entity, NULL);
+
+    // If the entity id is empty we cannot cache the translation handler
+    // instance.
+    if (empty($entity_id)) {
+      return $handler;
+    }
+    else {
+      $handlers[$entity_type][$entity_id] = $handler;
+    }
+  }
+  elseif ($update) {
+    $handlers[$entity_type][$entity_id]->setEntity($entity);
+  }
+
+  $handlers[$entity_type]['#current'] = $handlers[$entity_type][$entity_id];
+  $handlers['#current']['#current'] = $handlers[$entity_type][$entity_id];
+  return $handlers[$entity_type][$entity_id];
+}
+
+/**
+ * Returns the translation handler wrapping the entity being edited.
+ *
+ * @param $form
+ *   The entity form.
+ * @param $form_state
+ *   A keyed array containing the current state of the form.
+ *
+ * @return EntityTranslationHandlerInterface
+ *   A class implementing EntityTranslationHandlerInterface.
+ */
+function entity_translation_entity_form_get_handler($form, &$form_state) {
+  $handler = FALSE;
+  $entity_type = isset($form['#entity_type']) && is_string($form['#entity_type']) ? $form['#entity_type'] : FALSE;
+
+  if ($entity_type) {
+    if (empty($form_state['storage']['entity_translation']['handler'][$entity_type])) {
+      if ($info = entity_translation_edit_form_info($form, $form_state)) {
+        if (entity_translation_enabled($info['entity type'], $info['entity'])) {
+          $handler = entity_translation_get_handler($info['entity type'], $info['entity']);
+          $form_state['storage']['entity_translation']['handler'][$info['entity type']] = $handler;
+        }
+      }
+    }
+    else {
+      $handler = $form_state['storage']['entity_translation']['handler'][$entity_type];
+    }
+  }
+
+  return $handler;
+}
+
+/**
+ * Returns the translation handler associated to the currently submitted form.
+ *
+ * @return EntityTranslationHandlerInterface
+ *   A translation handler instance if available, FALSE oterwise.
+ */
+function entity_translation_current_form_get_handler() {
+  $handler = FALSE;
+
+  if (!empty($_POST['form_build_id'])) {
+    $form_state = form_state_defaults();
+    $form = form_get_cache($_POST['form_build_id'], $form_state);
+    $handler = entity_translation_entity_form_get_handler($form, $form_state);
+  }
+
+  return $handler;
+}
+
+/**
+ * Returns an array of edit form info as defined in hook_translation_info().
+ *
+ * @param $form
+ *   The entity edit form.
+ * @param $form_state
+ *   The entity edit form state.
+ *
+ * @return
+ *   An edit form info array containing the entity to be translated in the
+ *   'entity' key.
+ */
+function entity_translation_edit_form_info($form, $form_state) {
+  $info = FALSE;
+  $entity_type = isset($form['#entity_type']) && is_string($form['#entity_type']) ? $form['#entity_type'] : FALSE;
+
+  if ($entity_type) {
+    $entity_info = entity_get_info($form['#entity_type']);
+    if (!empty($entity_info['translation']['entity_translation']['edit form'])) {
+      $entity_key = $entity_info['translation']['entity_translation']['edit form'];
+      if (isset($form_state[$entity_key])) {
+        $info = array(
+          'entity type' => $form['#entity_type'],
+          'entity' => (object) $form_state[$entity_key],
+        );
+      }
+    }
+  }
+
+  return $info;
+}
+
+/**
+ * Checks whether an entity translation is accessible.
+ *
+ * @param $translation
+ *   An array representing an entity translation.
+ *
+ * @return
+ *   TRUE if the current user is allowed to view the translation.
+ */
+function entity_translation_access($entity_type, $translation) {
+  return $translation['status'] || user_access('translate any entity') || user_access("translate $entity_type entities");
+}
+
+/**
+ * Returns the set of languages available for translations.
+ */
+function entity_translation_languages($entity_type = NULL, $entity = NULL) {
+  if (isset($entity) && $entity_type == 'node' && module_exists('i18n_node')) {
+    // @todo Inherit i18n language settings.
+  }
+  elseif (variable_get('entity_translation_languages_enabled', FALSE)) {
+    $languages = language_list('enabled');
+    return $languages[1];
+  }
+  return language_list();
+}
+
+/**
+ * Implements hook_views_api().
+ */
+function entity_translation_views_api() {
+  return array(
+    'api' => 3,
+    'path' => drupal_get_path('module', 'entity_translation') . '/views',
+  );
+}
+
+/**
+ * Implements hook_uuid_entities_features_export_entity_alter().
+ */
+function entity_translation_uuid_entities_features_export_entity_alter($entity, $entity_type) {
+  // We do not need to export most of the keys:
+  // - The entity type is determined from the entity the translations are
+  //   attached to.
+  // - The entity id will change from one site to another.
+  // - The user id needs to be removed because it will change as well.
+  // - Created and changed could be left but the UUID module removes created and
+  //   changed values from the entities it exports, hence we do the same for
+  //   consistency.
+  if (entity_translation_enabled($entity_type, $entity)) {
+    $fields = array('entity_type', 'entity_id', 'uid', 'created', 'changed');
+    $handler = entity_translation_get_handler($entity_type, $entity);
+    $translations = $handler->getTranslations();
+    if ($translations && isset($translations->data)) {
+      foreach ($translations->data as &$translation) {
+        foreach ($fields as $field) {
+          unset($translation[$field]);
+        }
+      }
+    }
+  }
+}
+
+/**
+ * Implements hook_entity_uuid_presave().
+ */
+function entity_translation_entity_uuid_presave(&$entity, $entity_type) {
+  // UUID exports entities as arrays, therefore we need to cast the translations
+  // array back into an object.
+  $entity_info = entity_get_info($entity_type);
+  if (isset($entity_info['entity keys']) && isset($entity_info['entity keys']['translations'])) {
+    $key = $entity_info['entity keys']['translations'];
+    if (isset($entity->{$key})) {
+      $entity->{$key} = (object) $entity->{$key};
+    }
+  }
+}
+
+/**
+ * Implement hook_pathauto_alias_alter().
+ *
+ * When bulk-updating aliases for nodes automatically create a path for every
+ * translation.
+ */
+function entity_translation_pathauto_alias_alter(&$alias, array &$context) {
+  $info = entity_get_info();
+  $entity_type = $context['module'];
+
+  // Ensure that we are dealing with a bundle having entity translation enabled.
+  if ($context['op'] == 'bulkupdate' && !empty($info[$entity_type]['token type']) && !empty($context['data'][$info[$entity_type]['token type']])) {
+    $entity = $context['data'][$info[$entity_type]['token type']];
+    if (entity_translation_enabled($entity_type, $entity)) {
+      $translations = entity_translation_get_handler($entity_type, $entity)->getTranslations();
+      // Only create extra aliases if we are working on the original language to
+      // avoid infinite recursion.
+      if ($context['language'] == $translations->original) {
+        foreach ($translations->data as $language => $translation) {
+          // We already have an alias for the original language, so let's not
+          // create another one.
+          if ($language == $translations->original) {
+            continue;
+          }
+          pathauto_create_alias($entity_type, $context['op'], $context['source'], $context['data'], $context['type'], $language);
+        }
+      }
+    }
+  }
+}
+
+/**
+ * Implements hook_entity_translation_delete().
+ */
+function path_entity_translation_delete($entity_type, $entity, $langcode) {
+  // Remove any existing path alias for the removed translation.
+  $handler = entity_translation_get_handler($entity_type, $entity);
+  path_delete(array('source' => $handler->getViewPath(), 'language' => $langcode));
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation.node-form.js drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation.node-form.js
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation.node-form.js	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation.node-form.js	2014-05-21 21:43:42.000000000 +0200
@@ -0,0 +1,20 @@
+
+(function ($) {
+
+Drupal.behaviors.translationNodeFieldsetSummaries = {
+  attach: function (context) {
+    $('fieldset#edit-translation', context).drupalSetSummary(function (context) {
+      var status = $('#edit-translation-status', context).is(':checked') ? Drupal.t('Translation published') : Drupal.t('Translation not published');
+      var translate;
+      if ($('#edit-translation-retranslate', context).size()) {
+        translate = $('#edit-translation-retranslate', context).is(':checked') ? Drupal.t('Flag translations as outdated') : Drupal.t('Do not flag translations as outdated');
+      }
+      else {
+        translate = $('#edit-translation-translate', context).is(':checked') ? Drupal.t('Needs to be updated') : Drupal.t('Does not need to be updated');
+      }
+      return status + ', ' + translate;
+    });
+  }
+};
+
+})(jQuery);
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation.node.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation.node.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation.node.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation.node.inc	2014-05-21 21:43:42.000000000 +0200
@@ -0,0 +1,251 @@
+<?php
+
+/**
+ * @file
+ * The node specific translation functions and hook implementations.
+ */
+
+/**
+ * Identifies a content type which has translation support enabled.
+ */
+define('ENTITY_TRANSLATION_ENABLED', 4);
+
+/**
+ * Hides translation metadata.
+ */
+define('ENTITY_TRANSLATION_METADATA_HIDE', 0);
+
+/**
+ * Adds translation metadata to the original authoring information.
+ */
+define('ENTITY_TRANSLATION_METADATA_SHOW', 1);
+
+/**
+ * Replaces the original authoring information with translation metadata.
+ */
+define('ENTITY_TRANSLATION_METADATA_REPLACE', 2);
+
+/**
+ * Checks if the given entity has node translation enabled.
+ */
+function entity_translation_node($entity_type, $node) {
+  return $entity_type == 'node' && function_exists('translation_supported_type') && translation_supported_type($node->type);
+}
+
+/**
+ * Node-specific menu alterations.
+ */
+function entity_translation_node_menu_alter(&$items, $backup) {
+  if (isset($backup['node'])) {
+    $item = $backup['node'];
+    // Preserve the menu router item defined by other modules.
+    $callback['page callback'] = $item['page callback'];
+    $callback['file'] = $item['file'];
+    $callback['module'] = $item['module'];
+    $access_arguments = array_merge(array(1, $item['access callback']), $item['access arguments']);
+  }
+  else {
+    $callback = FALSE;
+    $access_arguments = array(1);
+  }
+
+  $items['node/%node/translate']['page callback'] = 'entity_translation_overview';
+  $items['node/%node/translate']['page arguments'] = array('node', 1, $callback);
+  $items['node/%node/translate']['access arguments'] = $access_arguments;
+  $items['node/%node/translate']['access callback'] = 'entity_translation_node_tab_access';
+  $items['node/%node/translate']['file'] = 'entity_translation.admin.inc';
+  $items['node/%node/translate']['module'] = 'entity_translation';
+}
+
+/**
+ * Node specific access callback.
+ */
+function entity_translation_node_tab_access() {
+  $args = func_get_args();
+  $node = array_shift($args);
+  if (entity_translation_node('node', $node)) {
+    $function = array_shift($args);
+    return call_user_func_array($function, $args);
+  }
+  else {
+    return entity_translation_tab_access('node', $node);
+  }
+}
+
+/**
+ * Returns whether the given node type has support for translations.
+ *
+ * @return
+ *   Boolean value.
+ */
+function entity_translation_node_supported_type($type) {
+  return variable_get('language_content_type_' . $type, 0) == ENTITY_TRANSLATION_ENABLED;
+}
+
+/**
+ * Implements hook_node_view().
+ *
+ * Provides content language switcher links to navigate among node translations.
+ */
+function entity_translation_node_view($node, $build_mode, $langcode) {
+  if (!empty($node->translations) && drupal_multilingual() && entity_translation_node_supported_type($node->type) && !variable_get("entity_translation_hide_translation_links_{$node->type}", FALSE)) {
+    $path = 'node/' . $node->nid;
+    $links = EntityTranslationDefaultHandler::languageSwitchLinks($path);
+
+    if (is_object($links) && !empty($links->links)) {
+      $handler = entity_translation_get_handler('node', $node);
+      $translations = $handler->getTranslations()->data;
+
+      // Remove the link for the current language.
+      unset($links->links[$langcode]);
+
+      // Remove links to unavailable translations.
+      foreach ($links->links as $langcode => $link) {
+        if (!isset($translations[$langcode]) || !entity_translation_access('node', $translations[$langcode])) {
+          unset($links->links[$langcode]);
+        }
+      }
+
+      $node->content['links']['translation'] = array(
+        '#theme' => 'links',
+        '#links' => $links->links,
+        '#attributes' => array('class' => 'links inline'),
+      );
+    }
+  }
+}
+
+/**
+ * Implements hook_form_FORM_ID_alter().
+ *
+ * Provides settings into the node content type form to choose for entity
+ * translation metadata and comment filtering.
+ */
+function entity_translation_form_node_type_form_alter(&$form, &$form_state) {
+  if (entity_translation_enabled('node')) {
+    $type = $form['#node_type']->type;
+
+    $t_args = array('!url' => url('admin/config/regional/entity_translation'));
+    $form['workflow']['language_content_type']['#options'][ENTITY_TRANSLATION_ENABLED] = t('Enabled, with field translation');
+    $form['workflow']['language_content_type']['#description'] .= ' <p>' . t('If field translation is selected you can have per-field translation for each available language. You can find more options in the <a href="!url">entity translation settings</a>.', $t_args) . '</p>';
+
+    // Hide settings when entity translation is disabled for this content type.
+    $states = array(
+      'visible' => array(
+        ':input[name="language_content_type"]' => array('value' => ENTITY_TRANSLATION_ENABLED),
+      ),
+    );
+
+    $form['workflow']['entity_translation_hide_translation_links'] = array(
+      '#type' => 'checkbox',
+      '#default_value' => variable_get("entity_translation_hide_translation_links_$type", FALSE),
+      '#title' => t('Hide content translation links'),
+      '#description' => t('Hide the links to translations in content body and teasers. If you choose this option, switching language will only be available from the language switcher block.'),
+      '#states' => $states,
+    );
+
+    $form['display']['entity_translation_node_metadata'] = array(
+      '#type' => 'radios',
+      '#title' => t('Translation post information'),
+      '#description' => t('Whether the translation authoring information should be hidden, shown, or replace the node\'s authoring information.'),
+      '#default_value' => variable_get("entity_translation_node_metadata_$type", ENTITY_TRANSLATION_METADATA_HIDE),
+      '#options' => array(t('Hidden'), t('Shown'), t('Replacing post information')),
+      '#states' => $states,
+    );
+
+    if (isset($form['comment'])) {
+      $form['comment']['entity_translation_comment_filter'] = array(
+        '#type' => 'checkbox',
+        '#title' => t('Filter comments per language'),
+        '#default_value' => variable_get("entity_translation_comment_filter_$type", FALSE),
+        '#description' => t('Show only comments whose language matches content language.'),
+        '#states' => $states,
+      );
+    }
+  }
+}
+
+/**
+ * Implements hook_preprocess_node().
+ *
+ * Alters node template variables to show/replace entity translation metadata.
+ */
+function entity_translation_preprocess_node(&$variables) {
+  $node = $variables['node'];
+  $submitted = variable_get("node_submitted_{$node->type}", TRUE);
+  $mode = variable_get("entity_translation_node_metadata_{$node->type}", ENTITY_TRANSLATION_METADATA_HIDE);
+
+  if ($submitted && $mode != ENTITY_TRANSLATION_METADATA_HIDE) {
+    global $language_content, $user;
+
+    $handler = entity_translation_get_handler('node', $node);
+    $translations = $handler->getTranslations();
+    $langcode = $language_content->language;
+
+    if (isset($translations->data[$langcode]) && $langcode != $translations->original) {
+      $translation = $translations->data[$langcode];
+      $date = format_date($translation['created']);
+      $name = FALSE;
+
+      if ($node->uid != $translation['uid']) {
+        $account = $user->uid != $translation['uid'] ? user_load($translation['uid']) : $user;
+        $name = theme('username', array('account' => $account));
+      }
+
+      switch ($mode) {
+        case ENTITY_TRANSLATION_METADATA_SHOW:
+          $variables['date'] .= ' (' . t('translated on <em>!date</em>', array('!date' => $date)) . ')';
+          if ($name) {
+            $variables['name'] .= ' (' . t('translated by !name', array('!name' => $name)) . ')';
+          }
+          break;
+
+        case ENTITY_TRANSLATION_METADATA_REPLACE:
+          $variables['date'] = $date;
+          if ($name) {
+            $variables['name'] = $name;
+          }
+          break;
+      }
+    }
+  }
+}
+
+/**
+ * Returns whether the given comment type has support for translations.
+ *
+ * @return
+ *   Boolean value.
+ */
+function entity_translation_comment_supported_type($comment_type) {
+  $type = str_replace('comment_node_', '', $comment_type);
+  return entity_translation_node_supported_type($type);
+}
+
+/**
+ * Implements hook_query_TAG_alter().
+ *
+ * Filters out node comments by content language.
+ *
+ * @todo Find a way to track node comment statistics per language.
+ */
+function entity_translation_query_comment_filter_alter(QueryAlterableInterface $query) {
+  $node = $query->getMetaData('node');
+  if (!empty($node->type) && variable_get("entity_translation_comment_filter_{$node->type}", FALSE)) {
+    // Determine alias for "comment" table.
+    $comment_alias = FALSE;
+    foreach ($query->getTables() as $table) {
+      if (is_string($table['table']) && $table['table'] == 'comment') {
+        $comment_alias = $table['alias'];
+        break;
+      }
+    }
+    // Only show comments without language or matching the current content language.
+    if ($comment_alias) {
+      $query->condition(db_or()
+        ->condition($comment_alias . '.language', $GLOBALS['language_content']->language)
+        ->condition($comment_alias . '.language', LANGUAGE_NONE)
+      );
+    }
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation.rules.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation.rules.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation.rules.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation.rules.inc	2014-05-21 21:43:42.000000000 +0200
@@ -0,0 +1,79 @@
+<?php
+
+/**
+ * @file
+ * This file provides the rules integration for this module.
+ */
+
+/**
+ * Implements of hook_rules_event_info().
+ */
+function entity_translation_rules_event_info() {
+  $events = array(
+    'entity_translation_insert' => array(
+      'label' => t('After adding an entity translation'),
+      'group' => t('Entity'),
+      'variables' => array(
+        'entity_type' => array(
+          'type' => 'text',
+          'label' => t('Entity type'),
+        ),
+        'entity' => array(
+          'type' => 'entity',
+          'label' => t('Entity'),
+        ),
+        'language_code' => array(
+          'type' => 'text',
+          'label' => t('Language code'),
+        ),
+        'values' => array(
+          'type' => 'list',
+          'label' => t('Raw values'),
+          'optional' => TRUE,
+        ),
+      ),
+    ),
+    'entity_translation_update' => array(
+      'label' => t('After updating an entity translation'),
+      'group' => t('Entity'),
+      'variables' => array(
+        'entity_type' => array(
+          'type' => 'text',
+          'label' => t('Entity type'),
+        ),
+        'entity' => array(
+          'type' => 'entity',
+          'label' => t('Entity'),
+        ),
+        'language_code' => array(
+          'type' => 'text',
+          'label' => t('Language code'),
+        ),
+        'values' => array(
+          'type' => 'list',
+          'label' => t('Raw values'),
+          'optional' => TRUE,
+        ),
+      ),
+    ),
+    'entity_translation_delete' => array(
+      'label' => t('After deleting an entity translation'),
+      'group' => t('Entity'),
+      'variables' => array(
+        'entity_type' => array(
+          'type' => 'text',
+          'label' => t('Entity type'),
+        ),
+        'entity' => array(
+          'type' => 'entity',
+          'label' => t('Entity'),
+        ),
+        'language_code' => array(
+          'type' => 'text',
+          'label' => t('Language code'),
+        ),
+      ),
+    ),
+  );
+  return $events;
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation_upgrade/entity_translation_upgrade.admin.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation_upgrade/entity_translation_upgrade.admin.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation_upgrade/entity_translation_upgrade.admin.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation_upgrade/entity_translation_upgrade.admin.inc	2014-05-21 21:43:42.000000000 +0200
@@ -0,0 +1,248 @@
+<?php
+
+/**
+ * @file
+ * Converts node translations into field-based translations.
+ */
+
+/**
+ * The number of node translations that should be processed for each batch step.
+ */
+define('ENTITY_TRANSLATION_UPGRADE_BATCH_SIZE', 10);
+
+/**
+ * Starts the batch process to perform the upgrade.
+ */
+function entity_translation_upgrade_start($types) {
+  $batch = array(
+    'operations' => array(
+      array('entity_translation_upgrade_do', array($types)),
+      array('entity_translation_upgrade_complete', array()),
+    ),
+    'finished' => 'entity_translation_upgrade_end',
+    'title' => t('Entity Translation Upgrade'),
+    'init_message' => t('Entity Translation Upgrade is starting.'),
+    'error_message' => t('Entity Translation Upgrade has encountered an error.'),
+    'file' => drupal_get_path('module', 'entity_translation_upgrade') . '/entity_translation_upgrade.admin.inc',
+  );
+  batch_set($batch);
+  batch_process('admin/config/regional/entity_translation');
+}
+
+/**
+ * Finshed batch callback.
+ */
+function entity_translation_upgrade_end($success, $results, $operations, $elapsed) {
+  if (!empty($results)) {
+    $message = format_plural($results, '1 node translation successfully upgraded.', '@count node translations successfully upgraded.');
+    watchdog('entity translation upgrade', '@count node translations successfully upgraded.', array('@count' => $results), WATCHDOG_INFO);
+  }
+  else {
+    $message = t('No node translation available for the upgrade.');
+  }
+
+  drupal_set_message($message);
+}
+
+/**
+ * Batch process to convert node translations to field-based translations.
+ */
+function entity_translation_upgrade_do($types, &$context) {
+  $query = db_select('node', 'n');
+  $query->addJoin('LEFT', 'entity_translation_upgrade_history', 'etuh', 'n.nid = etuh.nid');
+  $query
+    ->fields('n', array('nid', 'tnid'))
+    ->where('etuh.complete IS NULL OR etuh.complete = 0')
+    ->condition('n.tnid', 0, '<>')
+    ->condition('n.tnid <> n.nid', array(), '')
+    ->condition('n.type', $types)
+    ->orderBy('n.nid');
+
+  // Initialize the batch process.
+  if (empty($context['sandbox'])) {
+    $total = $query
+      ->countQuery()
+      ->execute()
+      ->fetchField();
+
+    $context['sandbox']['count'] = 0;
+    $context['sandbox']['total'] = $total;
+    $context['finished'] = $total == 0;
+  }
+  else {
+    $batch_size = variable_get('entity_translation_upgrade_batch_size', ENTITY_TRANSLATION_UPGRADE_BATCH_SIZE);
+    $result = $query
+      ->range($context['sandbox']['count'], $batch_size)
+      ->execute()
+      ->fetchAllKeyed();
+
+    // Here we load original nodes and translations all together, but the batch
+    // size is determined only by node translations.
+    $nids = array_keys($result);
+    $nodes = node_load_multiple($nids + array_unique($result));
+
+    $updated_nodes = array();
+    $node_translations = array();
+    $node_translation_sets = array();
+    $instances = array();
+    $field_info = array();
+
+    foreach ($nids as $nid) {
+      $node = $nodes[$nid];
+      $original = $nodes[$node->tnid];
+      $handler = entity_translation_get_handler('node', $original);
+
+      if (!isset($instances[$node->type])) {
+        $instances[$node->type] = field_info_instances('node', $node->type);
+      }
+
+      reset($instances[$node->type]);
+
+      foreach ($instances[$node->type] as $instance) {
+        $field_name = $instance['field_name'];
+        $field = isset($field_info[$field_name]) ? $field_info[$field_name] : $field_info[$field_name] = field_info_field($field_name);
+
+        // Copy field data.
+        if ($field['translatable']) {
+          $langcode = isset($node->{$field_name}[$node->language]) ? $node->language : LANGUAGE_NONE;
+          if (isset($node->{$field_name}[$langcode])) {
+            $original->{$field_name}[$node->language] = $node->{$field_name}[$langcode];
+          }
+        }
+      }
+
+      // Add the new translation.
+      $handler->setTranslation(array(
+        'translate' => $node->translate,
+        'status' => $node->status,
+        'language' => $node->language,
+        'source' => $original->language,
+        'uid' => $node->uid,
+        'created' => $node->created,
+        'changed' => $node->changed,
+      ));
+
+      // Build a list of updated nodes. They will be saved after all the node
+      // translation conversions.
+      $updated_nodes[$original->nid] = $original;
+
+      // Build a list of obsolete node translations to be unpublished.
+      $node_translations[$node->nid] = $node;
+
+      // Build a list of obsolete translations sets to be passed to module hook
+      // implementations.
+      $node_translation_sets[$original->nid][$node->nid] = $node;
+
+      $context['sandbox']['count']++;
+    }
+
+    // Ensure that the multilingual support configuration is set to the right
+    // value for the current node type.
+    foreach ($instances as $type_name => $data) {
+      variable_set("language_content_type_$type_name", ENTITY_TRANSLATION_ENABLED);
+    }
+
+    // Save field data and translations for the updated nodes.
+    foreach ($updated_nodes as $nid => $node) {
+      field_attach_presave('node', $node);
+      field_attach_update('node', $node);
+      entity_translation_get_handler('node', $node)->saveTranslations();
+
+      foreach ($node_translation_sets[$nid] as $translation) {
+        // Allow modules to upgrade their node additions, if possible.
+        module_invoke_all('entity_translation_upgrade', $node, $translation);
+      }
+    }
+
+    if (!empty($node_translations)) {
+      $nids = array_keys($node_translations);
+
+      // Unpublish the obsolete node translations.
+      db_update('node')
+        ->fields(array('status' => 0))
+        ->condition('nid', $nids)
+        ->execute();
+
+      db_update('node_revision')
+        ->fields(array('status' => 0))
+        ->condition('nid', $nids)
+        ->execute();
+
+      // Populate history table.
+      $columns = array('nid', 'tnid', 'language');
+      $query = db_insert('entity_translation_upgrade_history')->fields($columns);
+
+      foreach ($node_translations as $node) {
+        $query->values((array) $node);
+      }
+
+      $query->execute();
+
+      // Flush the modified nodes from the entity load cache.
+      entity_get_controller('node')->resetCache($nids);
+    }
+
+    $context['finished'] = $context['sandbox']['count'] / $context['sandbox']['total'];
+
+    if ($context['finished'] >= 1) {
+      $context['results'] = $context['sandbox']['total'];
+    }
+  }
+}
+
+/**
+ * Removes the translation sets for all the upgraded nodes.
+ */
+function entity_translation_upgrade_complete(&$context) {
+  if ($nids = db_query('SELECT DISTINCT etuh.tnid FROM {entity_translation_upgrade_history} etuh WHERE etuh.complete = 0')->fetchCol()) {
+    // Remove translation sets for migrated nodes.
+    db_query('UPDATE {node} SET tnid = 0 WHERE nid IN (:nids)', array(':nids' => $nids));
+    entity_get_controller('node')->resetCache($nids);
+    // Mark nodes as migrated.
+    db_query('UPDATE {entity_translation_upgrade_history} SET complete = 1 WHERE complete = 0');
+  }
+}
+
+/**
+ * Implementations of hook_entity_translation_upgrade() on behalf of core
+ * modules.
+ */
+
+/**
+ * Implements hook_entity_translation_upgrade().
+ */
+function path_entity_translation_upgrade($node, $translation) {
+  // Update URL aliases.
+  db_update('url_alias')
+    ->fields(array('source' => 'node/' . $node->nid))
+    ->condition('source', 'node/' . $translation->nid)
+    ->execute();
+}
+
+/**
+ * Implements hook_entity_translation_upgrade().
+ */
+function comment_entity_translation_upgrade($node, $translation) {
+  // Attach comments to the original node.
+  db_update('comment')
+    ->fields(array('nid' => $node->nid, 'language' => $translation->language))
+    ->condition('nid', $translation->nid)
+    ->execute();
+
+  // Update node-comment statistics.
+  $ncs = db_select('node_comment_statistics', 'ncs')
+    ->fields('ncs')
+    ->condition('nid', array($node->nid, $translation->nid))
+    ->execute()
+    ->fetchAllAssoc('nid');
+
+  $last = $ncs[$node->nid]->last_comment_timestamp > $ncs[$translation->nid]->last_comment_timestamp;
+  $ncs_updated = $last ? $ncs[$node->nid] : $ncs[$translation->nid];
+  $ncs_updated->nid = $node->nid;
+  $ncs_updated->comment_count = $ncs[$node->nid]->comment_count + $ncs[$translation->nid]->comment_count;
+
+  db_update('node_comment_statistics')
+    ->fields((array) $ncs_updated)
+    ->condition('nid', $node->nid)
+    ->execute();
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation_upgrade/entity_translation_upgrade.info drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation_upgrade/entity_translation_upgrade.info
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation_upgrade/entity_translation_upgrade.info	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation_upgrade/entity_translation_upgrade.info	2014-05-21 21:43:42.000000000 +0200
@@ -0,0 +1,12 @@
+name = Entity Translation Upgrade
+description = Provides an upgrade path from node-based translation to field-based translation.
+package = Multilingual - Entity Translation
+core = 7.x
+dependencies[] = entity_translation
+
+; Information added by drupal.org packaging script on 2013-07-23
+version = "7.x-1.0-beta3"
+core = "7.x"
+project = "entity_translation"
+datestamp = "1374601567"
+
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation_upgrade/entity_translation_upgrade.install drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation_upgrade/entity_translation_upgrade.install
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation_upgrade/entity_translation_upgrade.install	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation_upgrade/entity_translation_upgrade.install	2014-05-21 21:43:42.000000000 +0200
@@ -0,0 +1,81 @@
+<?php
+
+/**
+ * @file
+ * Schema declaration for the entity_translation_upgrade module.
+ */
+
+/**
+ * Implements hook_schema().
+ */
+function entity_translation_upgrade_schema() {
+  $schema['entity_translation_upgrade_history'] = array(
+    'description' => 'The history table for node translations.',
+    'fields' => array(
+      'nid' => array(
+        'description' => 'The node translation nid.',
+        'type' => 'int',
+        'unsigned' => TRUE,
+        'not null' => TRUE,
+      ),
+      'tnid' => array(
+        'description' => 'The translation set id for the node translation.',
+        'type' => 'int',
+        'unsigned' => TRUE,
+        'not null' => TRUE,
+      ),
+      'language' => array(
+        'description' => 'The node translation language.',
+        'type' => 'varchar',
+        'length' => 12,
+        'not null' => TRUE,
+        'default' => '',
+      ),
+      'complete' => array(
+        'description' => 'Boolean indicating whether the node migration has completed.',
+        'type' => 'int',
+        'not null' => TRUE,
+        'default' => 0,
+      ),
+    ),
+    'indexes' => array('tnid' => array('tnid'), 'complete' => array('complete')),
+    'primary key' => array('nid'),
+  );
+
+  return $schema;
+}
+
+/**
+ * Implements hook_enable().
+ */
+function entity_translation_upgrade_enable() {
+  $args = array('!url' => url('admin/config/regional/entity_translation'));
+  drupal_set_message(t('<em>Entity Translation Upgrade</em> enabled: visit the <a href="!url">entity translation settings</a> page to perform the upgrade.', $args));
+}
+
+/**
+ * Implements hook_update_N().
+ *
+ * Adds the 'complete' column to the history table.
+ */
+function entity_translation_upgrade_update_7001() {
+  $table = 'entity_translation_upgrade_history';
+  $name = 'complete';
+
+  // Add the 'complete' field.
+  $spec = array(
+    'description' => 'Boolean indicating whether the node migration has completed.',
+    'type' => 'int',
+    'not null' => TRUE,
+    'default' => 0,
+  );
+  db_add_field($table, $name, $spec);
+
+  // Add the 'complete' index.
+  db_add_index($table, $name, array($name));
+
+  // Existing records are supposed to concern already completed migrations.
+  db_update($table)
+    ->fields(array('complete' => 1))
+    ->execute();
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation_upgrade/entity_translation_upgrade.module drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation_upgrade/entity_translation_upgrade.module
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation_upgrade/entity_translation_upgrade.module	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/entity_translation_upgrade/entity_translation_upgrade.module	2014-05-21 21:43:42.000000000 +0200
@@ -0,0 +1,141 @@
+<?php
+
+/**
+ * @file
+ * Provides permanent redirects for unavailable node translations.
+ */
+
+/**
+ * Implements hook_menu().
+ */
+function entity_translation_upgrade_menu() {
+  return array(
+    'admin/config/regional/entity_translation/upgrade' => array(
+      'title' => 'Entity Translation Upgrade',
+      'page callback' => 'drupal_get_form',
+      'page arguments' => array('entity_translation_upgrade_form'),
+      'access arguments' => array('administer software updates'),
+      'file' => 'entity_translation_upgrade.admin.inc',
+      'type' => MENU_CALLBACK,
+    ),
+  );
+}
+
+/**
+ * Implements hook_menu_alter().
+ */
+function entity_translation_upgrade_menu_alter(&$items) {
+  // Obsolete node translations might be left unpublished instead of being
+  // deleted.
+  $items['node/%node']['access callback'] = 'entity_translation_upgrade_access';
+  $items['node/%node']['access arguments'] = array(1);
+}
+
+/**
+ * Access callback.
+ *
+ * Performs a redirect to the corresponding field-based translation if the
+ * current user has not the permission to access the requested node translation.
+ */
+function entity_translation_upgrade_access($node) {
+  // If the user has the right to access the node, we need to do nothing.
+  if (node_access('view', $node)) {
+    return TRUE;
+  }
+
+  // If we have a node translation, we need to redirect the user to the original
+  // node.
+  if ($node->tnid && $node->nid != $node->tnid) {
+    entity_translation_upgrade_redirect($node->tnid, $node->language);
+  }
+
+  return FALSE;
+}
+
+/**
+ * Implements hook_init().
+ */
+function entity_translation_upgrade_init() {
+  // If have a node/$nid path but we are not able to load a node for the given
+  // nid we might have an upgraded translation, hence we need to look for a
+  // record matching the requested nid in the history table.
+  if ($nid = entity_translation_upgrade_check_path() && $data = entity_translation_upgrade_load($nid)) {
+    entity_translation_upgrade_redirect($data->tnid, $data->language);
+  }
+}
+
+/**
+ * Implements hook_form_FORM_ID_alter().
+ */
+function entity_translation_upgrade_form_entity_translation_admin_form_alter(&$form, $form_state) {
+  $form['entity_translation_upgrade'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Entity Translation Upgrade'),
+    '#description' => t('This will create an entity translation for each available node translation, which will be then unpublished.'),
+    '#collapsible' => TRUE,
+    '#collapsed' => TRUE,
+  );
+
+  $options = array();
+  foreach (node_type_get_types() as $type) {
+    $options[$type->type] = $type->name;
+  }
+
+  $form['entity_translation_upgrade']['types'] = array(
+    '#type' => 'checkboxes',
+    '#title' => t('Node types'),
+    '#description' => t('Select which node types will be upgraded.'),
+    '#options' => $options,
+  );
+
+  $form['entity_translation_upgrade']['upgrade'] = array(
+    '#type' => 'submit',
+    '#value' => t('Upgrade'),
+    '#validate' => array('entity_translation_upgrade_validate'),
+    '#submit' => array('entity_translation_upgrade_submit'),
+  );
+}
+
+/**
+ * Validation handler for the entity_translation_admin_form() form.
+ */
+function entity_translation_upgrade_validate($form, &$form_state) {
+  if (!count(array_filter($form_state['values']['types']))) {
+    form_set_error('types', t('Please specify at least one node type.'));
+  }
+}
+
+/**
+ * Submit handler for the entity_translation_admin_form() form.
+ */
+function entity_translation_upgrade_submit($form, &$form_state) {
+  module_load_include('inc', 'entity_translation_upgrade', 'entity_translation_upgrade.admin');
+  entity_translation_upgrade_start(array_filter($form_state['values']['types']));
+}
+
+/**
+ * Performs the redirect to original node with the given language.
+ */
+function entity_translation_upgrade_redirect($nid, $langcode) {
+  $languages = language_list();
+  drupal_goto("node/$nid", array('language' => $languages[$langcode]), 301);
+}
+
+/**
+ * Checks wether the requested path belongs to an upgraded translation.
+ */
+function entity_translation_upgrade_check_path() {
+  $result = arg(0) == 'node' && ($nid = arg(1)) && is_int($nid) && !node_load($nid);
+  return $result ? $nid : FALSE;
+}
+
+/**
+ * Loads the upgrade history entry for the given nid.
+ */
+function entity_translation_upgrade_load($nid) {
+  return db_select('entity_translation_upgrade_history', 'etu')
+    ->fields('etu')
+    ->condition('etu.nid', $nid)
+    ->execute()
+    ->fetchObject();
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/includes/translation.handler.comment.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/includes/translation.handler.comment.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/includes/translation.handler.comment.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/includes/translation.handler.comment.inc	2014-05-21 21:43:42.000000000 +0200
@@ -0,0 +1,47 @@
+<?php
+
+/**
+ * @file
+ * Comment translation handler for the entity translation module.
+ */
+
+
+/**
+ * Comment translation handler.
+ */
+class EntityTranslationCommentHandler extends EntityTranslationDefaultHandler {
+
+  public function __construct($entity_type, $entity_info, $entity) {
+    parent::__construct('comment', $entity_info, $entity);
+  }
+
+  /**
+   * @see EntityTranslationDefaultHandler::entityForm()
+   */
+  public function entityForm(&$form, &$form_state) {
+    parent::entityForm($form, $form_state);
+    // Adjust the translation fieldset weight to move it below the admin one.
+    $form['translation']['#weight'] = 1;
+  }
+
+  /**
+   * @see EntityTranslationDefaultHandler::entityFormLanguageWidgetSubmit()
+   */
+  public function entityFormLanguageWidgetSubmit($form, &$form_state) {
+    $this->updateFormLanguage($form_state);
+  }
+
+  /**
+   * @see EntityTranslationDefaultHandler::entityFormTitle()
+   */
+  protected function entityFormTitle() {
+    return t('Edit comment @subject', array('@subject' => $this->getLabel()));
+  }
+
+  /**
+   * @see EntityTranslationDefaultHandler::getStatus()
+   */
+  protected function getStatus() {
+    return (boolean) $this->entity->status;
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/includes/translation.handler.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/includes/translation.handler.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/includes/translation.handler.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/includes/translation.handler.inc	2014-05-21 21:43:42.000000000 +0200
@@ -0,0 +1,1490 @@
+<?php
+
+/**
+ * @file
+ * Default translation handler for the translation module.
+ */
+
+
+/**
+ * Interface for enabling entity translation.
+ *
+ * Defines a set of methods to allow any entity to be processed by the entity
+ * translation UI.
+ */
+interface EntityTranslationHandlerInterface {
+
+  /**
+   * Loads the translation data into the wrapped entity.
+   */
+  public function loadTranslations();
+
+  /**
+   * Writes the translation status to the storage.
+   */
+  public function saveTranslations();
+
+  /**
+   * Returns the translation data for the current (wrapped) entity.
+   */
+  public function getTranslations();
+
+  /**
+   * Adds/updates an entity translation.
+   *
+   * @param $translation
+   *   A translation array as defined by the translation table's schema.
+   * @param $values
+   *   (optional) the values that should be assigned to the field translations.
+   */
+  public function setTranslation($translation, $values = NULL);
+
+  /**
+   * Removes a translation from the translation set.
+   *
+   * @param $langcode
+   *   The language code of the translation to be removed.
+   */
+  public function removeTranslation($langcode);
+
+  /**
+   * Initializes the translation set by creating the original translation.
+   */
+  public function initTranslations();
+
+  /**
+   * Updates the translation set from the current entity status.
+   */
+  public function updateTranslations();
+
+  /**
+   * Removes all translations from the translation set.
+   */
+  public function removeTranslations();
+
+  /**
+   * Initialize the language of the original field values.
+   *
+   * Ensure that the original translation language matches the language assigned
+   * to the original field values.
+   *
+   * @return
+   *   TRUE if any initialization was necessary, FALSE otherwise.
+   */
+  public function initOriginalTranslation();
+
+  /**
+   * Returns the entity language.
+   */
+  public function getLanguage();
+
+  /**
+   * Returns the translation object key for the wrapped entity type.
+   */
+  public function getLanguageKey();
+
+  /**
+   * Returns the default language for the wrapped entity type and bundle.
+   */
+  public function getDefaultLanguage();
+
+  /**
+   * Sets the language of the orginal translation.
+   *
+   * @param $langcode
+   *   The language code of the original content values.
+   */
+  public function setOriginalLanguage($langcode);
+
+  /**
+   * Returns TRUE if the entity is currently being translated.
+   */
+  public function isTranslating();
+
+  /**
+   * Notifies the translation handler that its entity is being translated.
+   *
+   * @param $translating
+   *   A boolean value.
+   */
+  public function setTranslating($translating);
+
+  /**
+   * Return TRUE if a new revision of the entity has just been created.
+   */
+  public function isRevision();
+
+  /**
+   * Replaces the wrapped entity.
+   *
+   * @param $entity
+   *   The entity to be translated.
+   */
+  public function setEntity($entity);
+
+  /**
+   * Checks that the wrapped entity matches the give entity
+   *
+   * @param $entity_type
+   *   The type of the entity to be matched.
+   * @param $entity
+   *   The entity to be matched.
+   */
+  public function isWrappedEntity($entity_type, $entity);
+
+  /**
+   * Sets the translation update status.
+   *
+   * @param $outdated
+   *   A boolean value.
+   */
+  public function setOutdated($outdated);
+
+  /**
+   * Returns the base path for the current entity.
+   *
+   * This path will be prepended to the URL of any administration page.
+   *
+   * @return
+   *   A string to be used as a URL path prefix.
+   */
+  public function getBasePath();
+
+  /**
+   * Returns the path of the entity edit form.
+   *
+   * @param $langcode
+   *   (optional) The language the edit form should be presented in.
+   */
+  public function getEditPath($langcode = NULL);
+
+  /**
+   * Returns the path of the translation overview page.
+   */
+  public function getTranslatePath();
+
+  /**
+   * Returns the path of the entity view page.
+   */
+  public function getViewPath();
+
+  /**
+   * Returns the active path scheme.
+   */
+  public function getPathScheme();
+
+  /**
+   * Changes the active path scheme.
+   *
+   * @param $scheme
+   *   The new path scheme.
+   */
+  public function setPathScheme($scheme);
+
+  /**
+   * Initializes the most suited path scheme based on the given path.
+   *
+   * @param $path
+   *   (optional) The path to match the defined path schemes against. Defaults
+   *   to the current path.
+   *
+   * @return
+   *   The matched path scheme key.
+   */
+  public function initPathScheme($path = NULL);
+
+  /**
+   * A string allowing the user to identify the entity.
+   */
+  public function getLabel();
+
+  /**
+   * Checks if the user can perform the given operation on the wrapped entity.
+   *
+   * @param $op
+   *   The operation to be performed.
+   *
+   * @return
+   *   TRUE if the user is allowed to perform the given operation, FALSE
+   *   otherwise.
+   */
+  public function getAccess($op);
+
+  /**
+   * Checks if a user is allowed to edit the given translation.
+   */
+  public function getTranslationAccess($langcode);
+
+  /**
+   * Checks if a user is allowed to edit shared fields on the active form.
+   */
+  public function getSharedFieldsAccess();
+
+  /**
+   * Return TRUE if the entity supports URL aliasing.
+   */
+  public function isAliasEnabled();
+
+  /**
+   * Sets the active form language.
+   */
+  public function setFormLanguage($langcode);
+
+  /**
+   * Retrieves the active form language.
+   */
+  public function getFormLanguage();
+
+  /**
+   * Sets the source language for the translation being created.
+   */
+  public function setSourceLanguage($langcode);
+
+  /**
+   * Retrieves the source language for the translation being created.
+   */
+  public function getSourceLanguage();
+
+  /**
+   * Returns TRUE if a new entity is currently wrapped.
+   */
+  public function isNewEntity();
+
+  /**
+   * Returns TRUE whether we are displying an entity form.
+   */
+  public function isEntityForm();
+
+  /**
+   * Performs the needed alterations to the entity form.
+   */
+  public function entityForm(&$form, &$form_state);
+
+  /**
+   * Adds an language selection widget to the entity form.
+   */
+  public function entityFormLanguageWidget(&$form, &$form_state);
+
+  /**
+   * Performs submission tasks on the submitted entity language.
+   */
+  public function entityFormLanguageWidgetSubmit($form, &$form_state);
+
+  /**
+   * Handle shared form elements.
+   */
+  public function entityFormSharedElements(&$element);
+
+  /**
+   * Performs validation tasks on the submitted entity forms.
+   */
+  public function entityFormValidate($form, &$form_state);
+
+  /**
+   * Performs submission tasks on the submitted entity forms.
+   */
+  public function entityFormSubmit($form, &$form_state);
+
+  /**
+   * Alters the local tasks render array to populate the language tabs.
+   */
+  public function localTasksAlter(&$data, $router_item, $root_path);
+}
+
+/**
+ * Class implementing the default entity translation behaviours.
+ */
+class EntityTranslationDefaultHandler implements EntityTranslationHandlerInterface {
+
+  protected $entityType;
+  protected $entity;
+  protected $entityInfo;
+  protected $entityId;
+  protected $bundle;
+
+  private $entityForm;
+  private $translating;
+  private $outdated;
+  private $formLanguage;
+  private $sourceLanguage;
+
+  private $pathScheme;
+  private $pathWildcard;
+  private $basePath;
+  private $editPath;
+  private $translatePath;
+  private $viewPath;
+  private $routerMap;
+
+  /**
+   * Initializes an instance of the translation handler.
+   *
+   * @param $entity_type
+   *   The type of the entity being wrapped.
+   * @param $entity_info
+   *   The entity information for the entity being wrapped.
+   * @param $entity
+   *   The entity being wrapped.
+   */
+  public function __construct($entity_type, $entity_info, $entity) {
+    $this->entityType = $entity_type;
+    $this->entityInfo = $entity_info;
+    $this->setEntity($entity);
+
+    $this->entityForm = FALSE;
+    $this->translating = FALSE;
+    $this->outdated = FALSE;
+    $this->formLanguage = FALSE;
+    $this->sourceLanguage = FALSE;
+    $this->pathScheme = 'default';
+    $this->routerMap = array();
+
+    if (entity_translation_enabled($entity_type)) {
+      $this->initPathVariables();
+    }
+  }
+
+  /**
+   * Read the translation data from the storage.
+   */
+  public static function loadMultiple($entity_type, $entities) {
+    $entity_info = entity_get_info($entity_type);
+    if (isset($entity_info['entity keys']['translations'])){
+      $translations_key = $entity_info['entity keys']['translations'];
+    }
+    else {
+      // If no translations key is defined we cannot proceed.
+      return;
+    }
+
+    foreach ($entities as $id => $entity) {
+      $entities[$id]->{$translations_key} = self::emptyTranslations();
+    }
+
+    $results = db_select('entity_translation', 'et')
+      ->fields('et')
+      ->condition('entity_type', $entity_type)
+      ->condition('entity_id', array_keys($entities), 'IN')
+      ->orderBy('entity_id')
+      ->orderBy('created')
+      ->execute();
+
+    foreach ($results as $row) {
+      $id = $row->entity_id;
+      $entities[$id]->{$translations_key}->data[$row->language] = (array) $row;
+
+      // Only the original translation has an empty source.
+      if (empty($row->source)) {
+        $entities[$id]->{$translations_key}->original = $row->language;
+      }
+    }
+  }
+
+  /**
+   * Returns the localized links for the given path.
+   */
+  public static function languageSwitchLinks($path) {
+    $links = language_negotiation_get_switch_links(LANGUAGE_TYPE_CONTENT, $path);
+    if (empty($links)) {
+      // If content language is set up to fall back to the interface language,
+      // then there will be no switch links for LANGUAGE_TYPE_CONTENT, ergo we
+      // also need to use interface switch links.
+      $links = language_negotiation_get_switch_links(LANGUAGE_TYPE_INTERFACE, $path);
+    }
+    return $links;
+  }
+
+  /**
+   * @see EntityTranslationHandlerInterface::loadTranslations()
+   */
+  public function loadTranslations() {
+    if (isset($this->entityId)) {
+      $this->loadMultiple($this->entityType, array($this->entityId => $this->entity));
+    }
+    elseif ($translations_key = $this->getTranslationsKey()) {
+      $this->entity->{$translations_key} = $this->emptyTranslations();
+    }
+  }
+
+  /**
+   * @see EntityTranslationHandlerInterface::saveTranslations()
+   */
+  public function saveTranslations() {
+    // Delete and insert, rather than update, in case a value was added.
+    db_delete('entity_translation')
+      ->condition('entity_type', $this->entityType)
+      ->condition('entity_id', $this->entityId)
+      ->execute();
+
+    $translations = $this->getTranslations();
+
+    if (count($translations->data)) {
+      global $user;
+
+      $columns = array('entity_type', 'entity_id', 'language', 'source', 'uid', 'status', 'translate', 'created', 'changed');
+      $query = db_insert('entity_translation')->fields($columns);
+
+      // These values should overridde the translation ones as they are not
+      // supposed to change.
+      $overrides = array(
+        'entity_id' => $this->entityId,
+        'entity_type' => $this->entityType,
+      );
+
+      // These instead are just defaults.
+      $defaults = array(
+        'source' => '',
+        'uid' => $user->uid,
+        'translate' => 0,
+        'status' => 0,
+        'created' => REQUEST_TIME,
+        'changed' => REQUEST_TIME,
+      );
+
+      foreach ($translations->data as $langcode => $translation) {
+        $translation = $overrides + $translation + $defaults;
+        $query->values($translation);
+      }
+
+      $query->execute();
+    }
+
+    // The translation handler interface decouples operations on translations at
+    // data structure level from CRUD operations. Hence hooks must be fired
+    // after changes are actually persisted.
+    if (!empty($translations->hook)) {
+
+      // Hook info is keyed by language code so that subsequent operations at
+      // data structure level do not cause multiple hooks for the same data to
+      // be fired. For instance if a translation is first updated and then
+      // deleted, only the 'delete' hook should be fired, because it is the only
+      // change that has actually been persisted.
+      foreach ($translations->hook as $langcode => $info) {
+        $translation = isset($translations->data[$langcode]) ? $translations->data[$langcode] : $langcode;
+        $data = isset($info['data']) ? $info['data'] : NULL;
+        module_invoke_all('entity_translation_' . $info['hook'], $this->entityType, $this->entity, $translation, $data);
+        // Provide Rules events integration if available.
+        if (module_exists('rules')) {
+          // Pass the entity as a wrapped one since rules can't do it for us
+          // when using the variable type 'entity'.
+          rules_invoke_event('entity_translation_' . $info['hook'], $this->entityType, entity_metadata_wrapper($this->entityType, $this->entity), $translation, $data);
+        }
+      }
+
+      // Avoid firing hooks more than once for the same changes.
+      $translations->hook = array();
+    }
+  }
+
+  /**
+   * @see EntityTranslationHandlerInterface::getTranslations()
+   */
+  public function getTranslations() {
+    if ($translations_key = $this->getTranslationsKey()) {
+      // Lazy load translations if for some reason the wrapped entity did not go
+      // through hook_entity_load().
+      if (!isset($this->entity->{$translations_key})) {
+        $this->loadTranslations();
+      }
+      return $this->entity->{$translations_key};
+    }
+    return self::emptyTranslations();
+  }
+
+  /**
+   * @see EntityTranslationHandlerInterface::setTranslation()
+   */
+  public function setTranslation($translation, $values = NULL) {
+    if (isset($translation['source']) && $translation['language'] == $translation['source']) {
+      throw new Exception('Invalid translation language');
+    }
+
+    $translations = $this->getTranslations();
+    $langcode = $translation['language'];
+
+    $this->setTranslating(TRUE);
+
+    if (isset($translations->data[$langcode])) {
+      $translation = array_merge($translations->data[$langcode], $translation);
+      $translation['changed'] = REQUEST_TIME;
+      // If a newly inserted translation has not been stored yet do not fire an
+      // update hook.
+      $hook = empty($translations->hook[$langcode]['hook']) ? 'update' : $translations->hook[$langcode]['hook'];
+    }
+    else {
+      $hook = 'insert';
+    }
+
+    // Store the translation data.
+    $translations->data[$langcode] = $translation;
+    // Keep track that the translation has been inserted or updated.
+    $translations->hook[$langcode] = array('hook' => $hook, 'data' => $values);
+
+    if (is_array($values)) {
+      // Update field translations.
+      foreach (field_info_instances($this->entityType, $this->bundle) as $instance) {
+        $field_name = $instance['field_name'];
+        $field = field_info_field($field_name);
+        if ($field['translatable'] && isset($values[$field_name])) {
+          $this->entity->{$field_name}[$langcode] = $values[$field_name][$langcode];
+        }
+      }
+    }
+  }
+
+  /**
+   * @see EntityTranslationHandlerInterface::removeTranslation()
+   */
+  public function removeTranslation($langcode) {
+    $translations_key = $this->getTranslationsKey();
+    if (empty($translations_key)) {
+      return;
+    }
+
+    $hook_info = array('hook' => 'delete');
+    if (!empty($langcode)) {
+      unset($this->entity->{$translations_key}->data[$langcode]);
+      // Keep track that the current translation has been removed.
+      $this->entity->{$translations_key}->hook[$langcode] = $hook_info;
+    }
+    elseif (!empty($this->entity->{$translations_key}->data)) {
+      $keys = array_keys($this->entity->{$translations_key}->data);
+      $values = array_fill(0, count($keys), $hook_info);
+      // Keep track that the all translations have been removed.
+      $this->entity->{$translations_key}->hook = array_combine($keys, $values);
+      // Actually remove translations.
+      $this->entity->{$translations_key}->data = array();
+    }
+
+    // Remove field translations.
+    foreach (field_info_instances($this->entityType, $this->bundle) as $instance) {
+      $field_name = $instance['field_name'];
+      $field = field_info_field($field_name);
+
+      if ($field['translatable']) {
+        if (!empty($langcode)) {
+          $this->entity->{$field_name}[$langcode] = array();
+        }
+        else {
+          $this->entity->{$field_name} = array();
+        }
+      }
+    }
+
+    // Clear the cache for this entity.
+    entity_get_controller($this->entityType)->resetCache(array($this->getEntityId()));
+  }
+
+  /**
+   * @see EntityTranslationHandlerInterface::initTranslations()
+   */
+  public function initTranslations() {
+    $langcode = $this->getLanguage();
+
+    if (!empty($langcode)) {
+      $translation = array('language' => $langcode, 'status' => 1);
+      $this->setTranslation($translation);
+      $this->setOriginalLanguage($langcode);
+    }
+  }
+
+  /**
+   * @see EntityTranslationHandlerInterface::updateTranslations()
+   */
+  public function updateTranslations() {
+    $langcode = $this->getLanguage();
+
+    // Only create a translation on edit if the translation set is empty:
+    // the entity might have been created with language set to "language
+    // neutral".
+    if (empty($this->getTranslations()->data)) {
+      $this->initTranslations();
+    }
+    elseif (!empty($langcode) && !$this->isTranslating()) {
+      $this->setOriginalLanguage($langcode);
+    }
+  }
+
+  /**
+   * @see EntityTranslationHandlerInterface::removeTranslations()
+   */
+  public function removeTranslations() {
+    $this->removeTranslation(NULL);
+  }
+
+  /**
+   * @see EntityTranslationHandlerInterface::initOriginalTranslation()
+   */
+  public function initOriginalTranslation() {
+    $fixed = FALSE;
+    $translations = $this->getTranslations();
+
+    foreach (field_info_instances($this->entityType, $this->bundle) as $instance) {
+      $field_name = $instance['field_name'];
+      $field = field_info_field($field_name);
+      $langcode = count($this->entity->{$field_name}) == 1 ? key($this->entity->{$field_name}) : $translations->original;
+
+      if ($langcode == LANGUAGE_NONE && $field['translatable']) {
+        $this->entity->{$field_name}[$translations->original] = $this->entity->{$field_name}[$langcode];
+        $this->entity->{$field_name}[$langcode] = array();
+        $fixed = TRUE;
+      }
+    }
+
+    return $fixed;
+  }
+
+  /**
+   * @see EntityTranslationHandlerInterface::getLanguage()
+   */
+  public function getLanguage() {
+    if (!empty($this->entityInfo['entity keys']['language'])) {
+      $language_key = $this->entityInfo['entity keys']['language'];
+      if (!empty($this->entity->{$language_key})) {
+        return $this->entity->{$language_key};
+      }
+    }
+
+    $translations = $this->getTranslations();
+    if (!empty($translations->original)) {
+      return $translations->original;
+    }
+    else {
+      // When we are creating an entity and no language is specified fall back
+      // to the default language for the current entity and bundle.
+      return $this->getDefaultLanguage();
+    }
+  }
+
+  /**
+   * @see EntityTranslationHandlerInterface::getLanguageKey()
+   */
+  public function getLanguageKey() {
+    return !empty($this->entityInfo['entity keys']['language']) ? $this->entityInfo['entity keys']['language'] : 'language';
+  }
+
+  /**
+   * @see EntityTranslationHandlerInterface::getDefaultLanguage()
+   */
+  public function getDefaultLanguage() {
+    $settings = variable_get('entity_translation_settings_' . $this->entityType . '__' . $this->bundle, array());
+
+    if (!empty($settings['default_language'])) {
+      switch ($settings['default_language']) {
+        case ENTITY_TRANSLATION_LANGUAGE_DEFAULT:
+          $langcode = language_default()->language;
+          break;
+
+        case ENTITY_TRANSLATION_LANGUAGE_CURRENT:
+          $langcode = $GLOBALS[LANGUAGE_TYPE_CONTENT]->language;
+          break;
+
+        case ENTITY_TRANSLATION_LANGUAGE_AUTHOR:
+          $langcode = $GLOBALS['user']->language;
+          break;
+
+        default:
+          // An actual language code has been explicitly configured.
+          $langcode = $settings['default_language'];
+      }
+    }
+    else {
+      // Fall back to the default language to keep backward compatibility.
+      $langcode = language_default()->language;
+    }
+
+    return $langcode;
+  }
+
+  /**
+   * @see EntityTranslationHandlerInterface::setOriginalLanguage()
+   */
+  public function setOriginalLanguage($langcode) {
+    $translations = $this->getTranslations();
+
+    if (isset($translations->original) && $translations->original != $langcode) {
+      $translations->data[$langcode] = $translations->data[$translations->original];
+      $translations->data[$langcode]['language'] = $langcode;
+      unset($translations->data[$translations->original]);
+    }
+
+    $translations->original = $langcode;
+  }
+
+  /**
+   * @see EntityTranslationHandlerInterface::isTranslating()
+   */
+  public function isTranslating() {
+    return $this->translating;
+  }
+
+  /**
+   * @see EntityTranslationHandlerInterface::setTranslating()
+   */
+  public function setTranslating($translating) {
+    $this->translating = $translating;
+  }
+
+  /**
+   * @see EntityTranslationHandlerInterface::isRevision()
+   */
+  public function isRevision() {
+    return FALSE;
+  }
+
+  /**
+   * @see EntityTranslationHandlerInterface::setEntity()
+   */
+  public function setEntity($entity) {
+    $this->entity = $entity;
+
+    // Ensure translations data is populated.
+    $translations_key = $this->getTranslationsKey();
+    if ($translations_key && !isset($this->entity->{$translations_key})) {
+      $this->entity->{$translations_key} = self::emptyTranslations();
+    }
+
+    // Update bundle and entity id properties.
+    list($this->entityId, , $this->bundle) = entity_extract_ids($this->entityType, $this->entity);
+  }
+
+  /**
+   * @see EntityTranslationHandlerInterface::isWrappedEntity()
+   */
+  public function isWrappedEntity($entity_type, $entity) {
+    list($id,,) = entity_extract_ids($entity_type, $entity);
+    return $entity_type == $this->entityType && $id == $this->entityId;
+  }
+
+  /**
+   * @see EntityTranslationHandlerInterface::setOutdated()
+   */
+  public function setOutdated($outdated) {
+    if ($outdated) {
+      $translations = $this->getTranslations();
+      foreach ($translations->data as $langcode => &$translation) {
+        if ($langcode != $this->getFormLanguage()) {
+          $translation['translate'] = 1;
+        }
+      }
+    }
+  }
+
+  /**
+   * @see EntityTranslationHandlerInterface::getBasePath()
+   */
+  public function getBasePath() {
+    return $this->basePath;
+  }
+
+  /**
+   * @see EntityTranslationHandlerInterface::getEditPath()
+   */
+  public function getEditPath($langcode = NULL) {
+    return empty($this->editPath) ? FALSE : (empty($langcode) ? $this->editPath : $this->editPath . '/' . $langcode);
+  }
+
+  /**
+   * @see EntityTranslationHandlerInterface::getTranslatePath()
+   */
+  public function getTranslatePath() {
+    return $this->translatePath;
+  }
+
+  /**
+   * @see EntityTranslationHandlerInterface::getViewPath()
+   */
+  public function getViewPath() {
+    return $this->viewPath;
+  }
+
+  /**
+   * @see EntityTranslationHandlerInterface::getPathScheme()
+   */
+  public function getPathScheme() {
+    return $this->pathScheme;
+  }
+
+  /**
+   * @see EntityTranslationHandlerInterface::setPathScheme()
+   */
+  public function setPathScheme($scheme) {
+    if ($scheme != $this->pathScheme) {
+      $this->pathScheme = $scheme;
+      $this->initPathVariables();
+    }
+  }
+
+  /**
+   * @see EntityTranslationHandlerInterface::initPathScheme()
+   */
+  public function initPathScheme($path = NULL) {
+    $scheme = 'default';
+
+    // If only one path scheme is defined no need to find one.
+    if (count($this->entityInfo['translation']['entity_translation']['path schemes']) > 1) {
+      $item = menu_get_item($path);
+      if (!empty($item['path'])) {
+        $current_path_scheme = $this->findMatchingPathScheme($item['path']);
+        if ($current_path_scheme) {
+          $scheme = $current_path_scheme;
+          $this->routerMap = $item['original_map'];
+        }
+      }
+    }
+
+    $this->setPathScheme($scheme);
+    return $scheme;
+  }
+
+  /**
+   * Find a path scheme matching the given path.
+   *
+   * @param $router_path
+   *   The path to match against.
+   *
+   * @return
+   *   The key of the path scheme if found, FALSE otherwise.
+   */
+  protected function findMatchingPathScheme($router_path) {
+    $path_keys = array_flip(array('base path', 'view path', 'edit path', 'translate path'));
+
+    foreach ($this->entityInfo['translation']['entity_translation']['path schemes'] as $delta => $scheme) {
+      // Construct regular expression pattern for determining whether any path
+      // in the current scheme matches the current request path.
+      $path_elements = array_intersect_key($scheme, $path_keys);
+
+      // Add additional path elements which were added during
+      // entity_translation_menu_alter().
+      if (isset($path_elements['edit path'])) {
+        $path_elements[] = $path_elements['edit path'] . '/%entity_translation_language';
+        $path_elements[] = $path_elements['edit path'] . '/add/%entity_translation_language/%entity_translation_language';
+      }
+      if (isset($path_elements['translate path'])) {
+        $path_elements[] = $path_elements['translate path'] . '/delete/%entity_translation_language';
+      }
+
+      // Replace wildcards with % for matching parameters.
+      $path_elements = array_flip(preg_replace('|%[^/]+|', '%', $path_elements));
+
+      if (isset($path_elements[$router_path])) {
+        return $delta;
+      }
+    }
+
+    return FALSE;
+  }
+
+  /**
+   * @see EntityTranslationHandlerInterface::getLabel()
+   */
+  public function getLabel() {
+    if (($label = entity_label($this->entityType, $this->entity)) !== FALSE) {
+      return $label;
+    }
+    else {
+      return "{$this->entityType}:{$this->getEntityId()}" ;
+    }
+  }
+
+  /**
+   * @see EntityTranslationHandlerInterface::getAccess()
+   */
+  public function getAccess($op) {
+    return TRUE;
+  }
+
+  /**
+   * @see EntityTranslationHandlerInterface::getTranslationAccess()
+   */
+  public function getTranslationAccess($langcode) {
+    return !empty($this->entityInfo['translation']['entity_translation']['skip original values access']) || !entity_translation_workflow_enabled() || $langcode != $this->getLanguage() || user_access('edit original values') || user_access("edit {$this->entityType} original values");
+  }
+
+  /**
+   * @see EntityTranslationHandlerInterface::getSharedFieldsAccess()
+   */
+  public function getSharedFieldsAccess() {
+    $settings = entity_translation_settings($this->entityType, $this->bundle);
+    return ($settings['shared_fields_original_only'] == FALSE || $this->getLanguage() == $this->getFormLanguage()) &&
+      (!entity_translation_workflow_enabled() || user_access('edit translation shared fields') || user_access("edit {$this->entityType} translation shared fields"));
+  }
+
+  /**
+   * @see EntityTranslationHandlerInterface::isAliasEnabled()
+   */
+  public function isAliasEnabled() {
+    return !empty($this->entityInfo['translation']['entity_translation']['alias']);
+  }
+
+  /**
+   * @see EntityTranslationHandlerInterface::setFormLanguage()
+   */
+  public function setFormLanguage($langcode) {
+    $this->formLanguage = $langcode;
+  }
+
+  /**
+   * @see EntityTranslationHandlerInterface::getFormLanguage()
+   */
+  public function getFormLanguage() {
+    return !empty($this->formLanguage) ? $this->formLanguage : $this->getLanguage();
+  }
+
+  /**
+   * @see EntityTranslationHandlerInterface::setSourceLanguage()
+   */
+  public function setSourceLanguage($langcode) {
+    $this->sourceLanguage = $langcode;
+  }
+
+  /**
+   * @see EntityTranslationHandlerInterface::getSourceLanguage()
+   */
+  public function getSourceLanguage() {
+    return $this->sourceLanguage;
+  }
+
+  /**
+   * @see EntityTranslationHandlerInterface::isNewEntity()
+   */
+  public function isNewEntity() {
+    $id = $this->getEntityId();
+    return empty($id);
+  }
+
+  /**
+   * @see EntityTranslationHandlerInterface::isEntityForm()
+   */
+  public function isEntityForm() {
+    return $this->entityForm;
+  }
+
+  /**
+   * @see EntityTranslationHandlerInterface::entityForm()
+   */
+  public function entityForm(&$form, &$form_state) {
+    $this->entityForm = TRUE;
+    $translations = $this->getTranslations();
+    $form_langcode = $this->getFormLanguage();
+    $langcode = $this->getLanguage();
+    $is_translation = $this->isTranslationForm();
+    $new_translation = !isset($translations->data[$form_langcode]);
+    $no_translations = count($translations->data) < 2;
+    $languages = language_list();
+    $access = user_access('translate any entity') || user_access("translate $this->entityType entities");
+
+    // The only way to determine whether we are editing the original values is
+    // comparing form language and entity language. Since a language change
+    // might render impossible to make this check after form submission, we
+    // store the related information here.
+    $form_state['entity_translation']['is_translation'] = $is_translation;
+
+    // Adjust page title to specify the current language being edited, if we
+    // have at least one translation.
+    if ($form_langcode != LANGUAGE_NONE && (!$no_translations || $new_translation)) {
+      drupal_set_title($this->entityFormTitle() . ' [' . t($languages[$form_langcode]->name) . ']', PASS_THROUGH);
+    }
+
+    // Display source language selector only if we are creating a new
+    // translation and there are at least two translations available.
+    if (!$no_translations && $new_translation) {
+      $form['source_language'] = array(
+        '#type' => 'fieldset',
+        '#title' => t('Source language'),
+        '#collapsible' => TRUE,
+        '#collapsed' => TRUE,
+        '#tree' => TRUE,
+        '#weight' => -100,
+        '#access' => $access,
+        '#multilingual' => TRUE,
+        'language' => array(
+          '#type' => 'select',
+          '#default_value' => $this->getSourceLanguage(),
+          '#options' => array(),
+        ),
+        'submit' => array(
+          '#type' => 'submit',
+          '#value' => t('Change'),
+          '#submit' => array('entity_translation_entity_form_source_language_submit'),
+        ),
+      );
+      foreach (language_list() as $language) {
+        if (isset($translations->data[$language->language])) {
+          $form['source_language']['language']['#options'][$language->language] = t($language->name);
+        }
+      }
+    }
+
+    // Add the entity language switcher.
+    $this->entityFormLanguageWidget($form, $form_state);
+
+    if ($is_translation) {
+      // Replace the delete button with the delete translation one.
+      if (!$new_translation) {
+        $weight = 100;
+        foreach (array('delete', 'submit') as $key) {
+          if (isset($form['actions'][$key]['weight'])) {
+            $weight = $form['actions'][$key]['weight'];
+            break;
+          }
+        }
+        $form['actions']['delete_translation'] = array(
+          '#type' => 'submit',
+          '#value' => t('Delete translation'),
+          '#weight' => $weight,
+          '#submit' => array('entity_translation_entity_form_delete_translation_submit'),
+        );
+      }
+
+      // Always remove the delete button on translation forms.
+      unset($form['actions']['delete']);
+    }
+
+    // We need to display the translation tab only when there is at least one
+    // translation available or a new one is about to be created.
+    if ($new_translation || count($translations->data) > 1) {
+      $form['translation'] = array(
+        '#type' => 'fieldset',
+        '#title' => t('Translation'),
+        '#collapsible' => TRUE,
+        '#collapsed' => TRUE,
+        '#tree' => TRUE,
+        '#weight' => 10,
+        '#access' => $access,
+        '#multilingual' => TRUE,
+      );
+
+      // A new translation is enabled by default.
+      $status = $new_translation || $translations->data[$form_langcode]['status'];
+      // If there is only one published translation we cannot unpublish it,
+      // since there would be no content left to display. The whole entity
+      // should be unpublished instead, where possible.
+      $enabled = !$status;
+      if (!empty($status)) {
+        // A new translation is not available in the translation data hence it
+        // should count as one more.
+        $published = $new_translation;
+        foreach ($translations->data as $langcode => $translation) {
+          $published += $translation['status'];
+        }
+        $enabled = $published > 1;
+      }
+      $description = $enabled ?
+        t('An unpublished translation will not be visible for non-administrators.') :
+        t('Only this translation is published. You must publish at least one more translation to unpublish this one.');
+
+      $form['translation']['status'] = array(
+        '#type' => 'checkbox',
+        '#title' => t('This translation is published'),
+        '#default_value' => $status,
+        '#description' => $description,
+        '#disabled' => !$enabled,
+      );
+
+      $translate = !$new_translation && $translations->data[$form_langcode]['translate'];
+      if (!$translate) {
+        $form['translation']['retranslate'] = array(
+          '#type' => 'checkbox',
+          '#title' => t('Flag translations as outdated'),
+          '#default_value' => 0,
+          '#description' => t('If you made a significant change, which means translations should be updated, you can flag all translations of this post as outdated. This will not change any other property of those posts, like whether they are published or not.'),
+        );
+      }
+      else {
+        $form['translation']['translate'] = array(
+          '#type' => 'checkbox',
+          '#title' => t('This translation needs to be updated'),
+          '#default_value' => $translate,
+          '#description' => t('When this option is checked, this translation needs to be updated because the source post has changed. Uncheck when the translation is up to date again.'),
+          '#disabled' => !$translate,
+        );
+      }
+
+      $name = $new_translation ? $GLOBALS['user']->name : user_load($translations->data[$form_langcode]['uid'])->name;
+      $form['translation']['name'] = array(
+        '#type' => 'textfield',
+        '#title' => t('Authored by'),
+        '#maxlength' => 60,
+        '#autocomplete_path' => 'user/autocomplete',
+        '#default_value' => $name,
+        '#description' => t('Leave blank for %anonymous.', array('%anonymous' => variable_get('anonymous', t('Anonymous')))),
+      );
+
+      $date = $new_translation ? REQUEST_TIME : $translations->data[$form_langcode]['created'];
+      $form['translation']['created'] = array(
+        '#type' => 'textfield',
+        '#title' => t('Authored on'),
+        '#maxlength' => 25,
+        '#description' => t('Format: %time. The date format is YYYY-MM-DD and %timezone is the time zone offset from UTC. Leave blank to use the time of form submission.', array('%time' => format_date($date, 'custom', 'Y-m-d H:i:s O'), '%timezone' => format_date($date, 'custom', 'O'))),
+        '#default_value' => $new_translation ? '' : format_date($date, 'custom', 'Y-m-d H:i:s O'),
+      );
+    }
+
+    // If Menu translation is available translate the menu strings.
+    if (module_exists('entity_translation_i18n_menu')) {
+      $this->menuForm($form, $form_state);
+    }
+
+    // Process entity form submission.
+    $form['#submit'][] = 'entity_translation_entity_form_submit';
+
+    // This allows to intercept deletions. The check is needed because
+    // action-specific submit handlers prevent global ones from being called.
+    if (!empty($form['actions']['delete']['#submit'])) {
+      $form['actions']['delete']['#submit'][] = 'entity_translation_entity_form_submit';
+    }
+  }
+
+  /**
+   * @see EntityTranslationHandlerInterface::entityFormSharedElements()
+   *
+   * Either remove access or add a translatability clue depending on the current
+   * user's "edit translation shared fields" permissions.
+   */
+  public function entityFormSharedElements(&$element) {
+    static $ignored_types, $shared_labels, $access;
+    if (!isset($ignored_types)) {
+      $ignored_types = array_flip(array('actions', 'value', 'hidden', 'vertical_tabs', 'token'));
+    }
+    if (!isset($shared_labels)) {
+      $shared_labels = variable_get('entity_translation_shared_labels', TRUE);
+    }
+    if (!isset($access)) {
+      $access = $this->getSharedFieldsAccess();
+    }
+
+    foreach (element_children($element) as $key) {
+      if (!isset($element[$key]['#type'])) {
+        $this->entityFormSharedElements($element[$key]);
+      }
+      else {
+        // Ignore non-widget form elements.
+        if (isset($ignored_types[$element[$key]['#type']])) {
+          continue;
+        }
+        // Elements are considered to be non multilingual by default.
+        // Update #access only if it has not been set already or if we have
+        // explicit mlutilingual support.
+        if (!isset($element[$key]['#access']) || isset($element[$key]['#multilingual'])) {
+          $element[$key]['#access'] = (!isset($element[$key]['#access']) || $element[$key]['#access']) && ($access || !empty($element[$key]['#multilingual']));
+        }
+        // Add translatability clue for visible elements.
+        if ($access && $shared_labels) {
+          _entity_translation_element_add_callback($element[$key], '#process', 'entity_translation_element_translatability_clue');
+        }
+      }
+    }
+  }
+
+  /**
+   * @see EntityTranslationHandlerInterface::entityFormLanguageWidget()
+   */
+  public function entityFormLanguageWidget(&$form, &$form_state) {
+    if (entity_translation_enabled($this->entityType, $this->bundle)) {
+      $is_new = $this->isNewEntity();
+      $is_translation = !$is_new && !empty($form_state['entity_translation']['is_translation']);
+      $translations = $this->getTranslations();
+      $settings = entity_translation_settings($this->entityType, $this->bundle);
+      $languages = entity_translation_languages($this->entityType, $this->entity);
+      $options = count($translations->data) > 1 || !empty($settings['exclude_language_none']) ? array() : array(LANGUAGE_NONE => t('Language neutral'));
+
+      foreach ($languages as $langcode => $language) {
+        // Disable languages for existing translations, so it is not possible to
+        // switch this entity to some language which is already in the translation
+        // set.
+        if (!isset($translations->data[$langcode]) || empty($translations->data[$langcode]['source'])) {
+          $options[$langcode] = t($language->name);
+        }
+      }
+
+      $langcode = $is_new ? $this->getDefaultLanguage() : $this->getLanguage();
+      $language_key = $this->getLanguageKey();
+
+      $form[$language_key] = array(
+        '#type' => 'select',
+        '#title' => t('Language'),
+        '#default_value' => $langcode,
+        '#options' => $options,
+        '#access' => empty($settings['hide_language_selector']),
+        '#disabled' => $is_translation || (!$is_new && !empty($settings['lock_language'])),
+        '#multilingual' => TRUE,
+      );
+
+      if ($is_translation) {
+        // @todo Consider supporting the ability to change translation language.
+        $form[$language_key]['#title'] = t('Original language');
+      }
+    }
+
+    if (!empty($form['actions']['submit']['#submit'])) {
+      $submit = &$form['actions']['submit']['#submit'];
+    }
+    else {
+      if (!isset($form['#submit'])) {
+        $form['#submit'] = array();
+      }
+      $submit = &$form['#submit'];
+    }
+
+    array_unshift($submit, 'entity_translation_language_widget_submit');
+  }
+
+  /**
+   * Performs alterations to the menu widget if available.
+   */
+  protected function menuForm(&$form, &$form_state) {
+    // By default do nothing: only nodes are currently supported.
+  }
+
+  /**
+   * @see EntityTranslationHandlerInterface::entityFormValidate()
+   */
+  public function entityFormValidate($form, &$form_state) {
+    if (!empty($form_state['values']['translation'])) {
+      $values = $form_state['values']['translation'];
+      // Validate the "authored by" field.
+      if (!empty($values['name']) && !($account = user_load_by_name($values['name']))) {
+        form_set_error('translation][name', t('The translation authoring username %name does not exist.', array('%name' => $values['name'])));
+      }
+      // Validate the "authored on" field.
+      if (!empty($values['created']) && strtotime($values['created']) === FALSE) {
+        form_set_error('translation][created', t('You have to specify a valid translation authoring date.'));
+      }
+    }
+  }
+
+  /**
+   * Update the current form language based on the submitted value.
+   */
+  protected function updateFormLanguage($form_state) {
+    // Update the form language as it might have changed. We exploit the
+    // validation phase to be sure to act as early as possible.
+    if (isset($form_state['values']['language']) && !$this->isTranslationForm()) {
+      $this->setFormLanguage($form_state['values'][$this->getLanguageKey()]);
+    }
+  }
+
+  /**
+   * @see EntityTranslationHandlerInterface::entityFormLanguageWidgetSubmit()
+   */
+  function entityFormLanguageWidgetSubmit($form, &$form_state) {
+    $this->updateFormLanguage($form_state);
+    $form_langcode = $this->getFormLanguage();
+
+    foreach (field_info_instances($this->entityType, $this->bundle) as $instance) {
+      $field_name = $instance['field_name'];
+      $field = field_info_field($field_name);
+      $previous_langcode = $form[$field_name]['#language'];
+
+      // Handle a possible language change: new language values are inserted,
+      // previous ones are deleted.
+      if ($field['translatable'] && $previous_langcode != $form_langcode) {
+        $form_state['values'][$field_name][$form_langcode] = $form_state['values'][$field_name][$previous_langcode];
+        $form_state['values'][$field_name][$previous_langcode] = array();
+      }
+    }
+  }
+
+  /**
+   * @see EntityTranslationHandlerInterface::entityFormSubmit()
+   */
+  public function entityFormSubmit($form, &$form_state) {
+    $form_langcode = $this->getFormLanguage();
+    $translations = $this->getTranslations();
+    $is_translation = !empty($form_state['entity_translation']['is_translation']);
+    $new_translation = !isset($translations->data[$form_langcode]);
+    $values = isset($form_state['values']['translation']) ? $form_state['values']['translation'] : array();
+
+    // Ensure every key has at least a default value. Subclasses may provide use
+    // entity-specific values to alter them.
+    $values += array(
+      'status' => TRUE,
+      'retranslate' => 0,
+      'name' => isset($GLOBALS['user']->name) ? $GLOBALS['user']->name : '',
+    );
+
+    if (!isset($translations->data[$form_langcode])) {
+      // If we have a new translation the language is the original entity
+      // language.
+      $translation = $is_translation ? array('language' => $form_langcode, 'source' => $this->getSourceLanguage()) : array('language' => $form_langcode, 'source' => '');
+    }
+    else {
+      $translation = $translations->data[$form_langcode];
+    }
+
+    if (isset($values['translate'])) {
+      $translation['translate'] = intval($values['translate']);
+    }
+    else {
+      $this->setOutdated($values['retranslate']);
+    }
+
+    // Handle possible language changes for the original values.
+    if (!$is_translation) {
+      $this->setOriginalLanguage($form_langcode);
+    }
+
+    $translation['status'] = intval($values['status']);
+    $translation['uid'] = $values['name'] ? user_load_by_name($values['name'])->uid : 0;
+    $translation['created'] = empty($values['created']) ? REQUEST_TIME : strtotime($values['created']);
+    $this->setTranslation($translation);
+
+    // If no redirect has been explicitly set, go to the edit form for the
+    // current form language.
+    if ($new_translation && empty($form_state['redirect']) && !$this->isNewEntity()) {
+      $form_state['redirect'] = $this->getEditPath($form_langcode);
+    }
+  }
+
+  /**
+   * @see EntityTranslationHandlerInterface::localTasksAlter()
+   */
+  public function localTasksAlter(&$data, $router_item, $root_path) {
+    $translations = $this->getTranslations();
+
+    if (count($translations->data) > 0) {
+      $languages = language_list();
+      $form_langcode = $this->getFormLanguage();
+      $language_tabs = array();
+
+      if ($this->getSourceLanguage()) {
+        foreach ($data['tabs'][1]['output'] as $index => &$add_tab) {
+          if ($add_tab['#link']['path'] == $root_path) {
+            $add_tab['#link']['title'] = $languages[$form_langcode]->name;
+            $add_tab['#link']['weight'] = $languages[$form_langcode]->weight;
+            $add_tab['#active'] = TRUE;
+            $add_tab['#language_tab'] = TRUE;
+            $language_tabs[] = $add_tab;
+            unset($data['tabs'][1]['output'][$index]);
+            break;
+          }
+        }
+      }
+
+      foreach ($translations->data as $langcode => $translation) {
+        if ($this->getTranslationAccess($langcode)) {
+          $links = $this->languageSwitchLinks($this->getEditPath($langcode));
+          $link = !empty($links->links[$langcode]) ? $links->links[$langcode] : array();
+
+          if (isset($link['href'])) {
+            $tab = array();
+            $tab['#theme'] = 'menu_local_task';
+            $tab['#active'] = $langcode == $form_langcode;
+            $tab['#language_tab'] = TRUE;
+            $tab['#link'] = array(
+              'href' => $link['href'],
+              'title' => t($languages[$langcode]->name),
+              'weight' => $languages[$langcode]->weight,
+              'localized_options' => $link,
+            ) + $router_item;
+            $language_tabs[] = $tab;
+          }
+        }
+      }
+
+      // Reorder tabs to make the add tab respect language weights.
+      usort($language_tabs, array($this, 'translationTabSort'));
+
+      // Merge the reordered language tabs into the second level tabs.
+      if (count($language_tabs) > 1) {
+        if (empty($data['tabs'][1])) {
+          $data['tabs'][1] = array('output' => array());
+        }
+        $data['tabs'][1]['output'] = array_merge($data['tabs'][1]['output'], $language_tabs);
+        $data['tabs'][1]['count'] = count($data['tabs'][1]['output']);
+      }
+    }
+  }
+
+  /**
+   * Helper callback. Sorts language tabs by weight.
+   */
+  protected function translationTabSort($a, $b) {
+    return $a['#link']['weight'] > $b['#link']['weight'];
+  }
+
+  /**
+   * Returns the title to be used for the entity form page.
+   */
+  protected function entityFormTitle() {
+    return $this->getLabel();
+  }
+
+  /**
+   * Returns TRUE if an entity translation is being edited.
+   */
+  protected function isTranslationForm() {
+    return !$this->isNewEntity() && $this->getFormLanguage() != $this->getLanguage();
+  }
+
+  /**
+   * Returns the translation object key for the wrapped entity type.
+   */
+  protected function getTranslationsKey() {
+    return isset($this->entityInfo['entity keys']['translations']) ? $this->entityInfo['entity keys']['translations'] : FALSE;
+  }
+
+  /**
+   * Returns the entity accessibility.
+   */
+  protected function getStatus() {
+    return TRUE;
+  }
+
+  /**
+   * Returns the entity identifier.
+   */
+  protected function getEntityId() {
+    return $this->entityId;
+  }
+
+  /**
+   * Initializes handler path variables based on the active path scheme.
+   *
+   * @throws Exception
+   */
+  private function initPathVariables() {
+    if (empty($this->pathScheme) || !isset($this->entityInfo['translation']['entity_translation']['path schemes'][$this->pathScheme])) {
+      throw new Exception("Cannot initialize entity translation path variables (invalid path scheme).");
+    }
+
+    $path_scheme = $this->entityInfo['translation']['entity_translation']['path schemes'][$this->pathScheme];
+    $this->pathWildcard = $path_scheme['path wildcard'];
+    $this->basePath = isset($path_scheme['base path']) ? $this->getPathInstance($path_scheme['base path']) : FALSE;
+    $this->editPath = isset($path_scheme['edit path']) ? $this->getPathInstance($path_scheme['edit path']) : FALSE;
+    $this->translatePath = isset($path_scheme['translate path']) ? $this->getPathInstance($path_scheme['translate path']) : FALSE;
+    $this->viewPath = isset($path_scheme['view path']) ? $this->getPathInstance($path_scheme['view path']) : FALSE;
+  }
+
+  /**
+   * Returns an instance of the given path.
+   *
+   * @param $path
+   *   An internal path containing the entity id wildcard.
+   *
+   * @return
+   *   The instantiated path.
+   */
+  protected function getPathInstance($path) {
+    $path_segments = explode('/', $path);
+
+    foreach ($path_segments as $index => $segment) {
+      if ($segment == $this->pathWildcard) {
+        $path_segments[$index] = $this->getEntityId();
+      }
+      elseif ($segment{0} == '%' && isset($this->routerMap[$index])) {
+        $path_segments[$index] = $this->routerMap[$index];
+      }
+    }
+
+    return implode('/', $path_segments);
+  }
+
+  /**
+   * Returns an empty translations data structure.
+   */
+  protected static function emptyTranslations() {
+    return (object) array('original' => NULL, 'data' => array());
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/includes/translation.handler.node.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/includes/translation.handler.node.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/includes/translation.handler.node.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/includes/translation.handler.node.inc	2014-05-21 21:43:42.000000000 +0200
@@ -0,0 +1,118 @@
+<?php
+
+/**
+ * @file
+ * Node translation handler for the entity translation module.
+ */
+
+
+/**
+ * Node translation handler.
+ *
+ * Overrides default behaviours for Node properties.
+ */
+class EntityTranslationNodeHandler extends EntityTranslationDefaultHandler {
+
+  public function __construct($entity_type, $entity_info, $entity) {
+    parent::__construct('node', $entity_info, $entity);
+  }
+
+  /**
+   * @see EntityTranslationDefaultHandler::isRevision()
+   */
+  public function isRevision() {
+    return !empty($this->entity->revision);
+  }
+
+  /**
+   * @see EntityTranslationDefaultHandler::getAccess()
+   */
+  public function getAccess($op) {
+    return node_access($op, $this->entity);
+  }
+
+  /**
+   * @see EntityTranslationDefaultHandler::getTranslationAccess()
+   */
+  public function getTranslationAccess($langcode) {
+    return user_access('bypass node access') || parent::getTranslationAccess($langcode);
+  }
+
+  /**
+   * Convert the translation update status fieldset into a vartical tab.
+   */
+  public function entityForm(&$form, &$form_state) {
+    parent::entityForm($form, $form_state);
+
+    // Move the translation fieldset to a vertical tab.
+    if (isset($form['translation'])) {
+      $form['translation'] += array(
+        '#group' => 'additional_settings',
+        '#weight' => 100,
+        '#attached' => array(
+          'js' => array(drupal_get_path('module', 'entity_translation') . '/entity_translation.node-form.js'),
+        ),
+      );
+
+      if (!$this->isTranslationForm()) {
+        $form['translation']['name']['#access'] = FALSE;
+        $form['translation']['created']['#access'] = FALSE;
+      }
+    }
+
+    // Path aliases natively support multilingual values.
+    if (isset($form['path'])) {
+      $form['path']['#multilingual'] = TRUE;
+    }
+  }
+
+  /**
+   * @see EntityTranslationDefaultHandler::menuForm()
+   */
+  protected function menuForm(&$form, &$form_state) {
+    entity_translation_i18n_menu_form($form, $form_state);
+  }
+
+  /**
+   * @see EntityTranslationDefaultHandler::entityFormLanguageWidgetSubmit()
+   */
+  function entityFormLanguageWidgetSubmit($form, &$form_state) {
+    $this->updateFormLanguage($form_state);
+  }
+
+  /**
+   * @see EntityTranslationDefaultHandler::entityFormSubmit()
+   */
+  public function entityFormSubmit($form, &$form_state) {
+    if (!isset($form_state['values']['translation'])) {
+      // Always publish the original values when we have no translations.
+      $form_state['values']['translation'] = array('status' => TRUE);
+    }
+    $values = &$form_state['values']['translation'];
+
+    if (!$this->isTranslationForm()) {
+      // Inherit entity authoring information for the original values.
+      $values['name'] = $form_state['values']['name'];
+      if (!empty($form_state['values']['date'])) {
+        $values['created'] = $form_state['values']['date'];
+      }
+    }
+
+    parent::entityFormSubmit($form, $form_state);
+  }
+
+  /**
+   * @see EntityTranslationDefaultHandler::entityFormTitle()
+   */
+  protected function entityFormTitle() {
+    $type_name = node_type_get_name($this->entity);
+    return t('<em>Edit @type</em> @title', array('@type' => $type_name, '@title' => $this->getLabel()));
+  }
+
+  /**
+   * @see EntityTranslationDefaultHandler::getStatus()
+   */
+  protected function getStatus() {
+    return (boolean) $this->entity->status;
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/includes/translation.handler.taxonomy_term.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/includes/translation.handler.taxonomy_term.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/includes/translation.handler.taxonomy_term.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/includes/translation.handler.taxonomy_term.inc	2014-05-21 21:43:42.000000000 +0200
@@ -0,0 +1,35 @@
+<?php
+
+/**
+ * @file
+ * Taxonomy term translation handler for the entity translation module.
+ */
+
+
+/**
+ * Taxonomy term translation handler.
+ */
+class EntityTranslationTaxonomyTermHandler extends EntityTranslationDefaultHandler {
+
+  public function __construct($entity_type, $entity_info, $entity) {
+    parent::__construct('taxonomy_term', $entity_info, $entity);
+  }
+
+  /**
+   * @see EntityTranslationDefaultHandler::entityForm()
+   */
+  public function entityForm(&$form, &$form_state) {
+    parent::entityForm($form, $form_state);
+
+    // Remove the translation fieldset when the deletion confirm form is being
+    // displayed.
+    if (isset($form_state['confirm_delete'])) {
+      unset(
+        $form[$this->getLanguageKey()],
+        $form['source_language'],
+        $form['translation'],
+        $form['actions']['delete_translation']
+      );
+    }
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/includes/translation.handler.user.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/includes/translation.handler.user.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/includes/translation.handler.user.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/includes/translation.handler.user.inc	2014-05-21 21:43:42.000000000 +0200
@@ -0,0 +1,34 @@
+<?php
+
+/**
+ * @file
+ * User translation handler for the entity translation module.
+ */
+
+
+/**
+ * User translation handler.
+ */
+class EntityTranslationUserHandler extends EntityTranslationDefaultHandler {
+
+  public function __construct($entity_type, $entity_info, $entity) {
+    parent::__construct('user', $entity_info, $entity);
+  }
+
+  /**
+   * @see EntityTranslationDefaultHandler::entityForm()
+   */
+  public function entityForm(&$form, &$form_state) {
+    parent::entityForm($form, $form_state);
+    $form['picture']['#multilingual'] = FALSE;
+    $form['locale']['#multilingual'] = FALSE;
+    $form['locale']['#title'] = t('Preferred language settings');
+  }
+
+  /**
+   * @see EntityTranslationDefaultHandler::getLanguageKey()
+   */
+  public function getLanguageKey() {
+    return 'entity_language';
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/LICENSE.txt drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/LICENSE.txt
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/LICENSE.txt	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/LICENSE.txt	2014-05-21 21:43:42.000000000 +0200
@@ -0,0 +1,339 @@
+                    GNU GENERAL PUBLIC LICENSE
+                       Version 2, June 1991
+
+ Copyright (C) 1989, 1991 Free Software Foundation, Inc.,
+ 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+                            Preamble
+
+  The licenses for most software are designed to take away your
+freedom to share and change it.  By contrast, the GNU General Public
+License is intended to guarantee your freedom to share and change free
+software--to make sure the software is free for all its users.  This
+General Public License applies to most of the Free Software
+Foundation's software and to any other program whose authors commit to
+using it.  (Some other Free Software Foundation software is covered by
+the GNU Lesser General Public License instead.)  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+this service if you wish), that you receive source code or can get it
+if you want it, that you can change the software or use pieces of it
+in new free programs; and that you know you can do these things.
+
+  To protect your rights, we need to make restrictions that forbid
+anyone to deny you these rights or to ask you to surrender the rights.
+These restrictions translate to certain responsibilities for you if you
+distribute copies of the software, or if you modify it.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must give the recipients all the rights that
+you have.  You must make sure that they, too, receive or can get the
+source code.  And you must show them these terms so they know their
+rights.
+
+  We protect your rights with two steps: (1) copyright the software, and
+(2) offer you this license which gives you legal permission to copy,
+distribute and/or modify the software.
+
+  Also, for each author's protection and ours, we want to make certain
+that everyone understands that there is no warranty for this free
+software.  If the software is modified by someone else and passed on, we
+want its recipients to know that what they have is not the original, so
+that any problems introduced by others will not reflect on the original
+authors' reputations.
+
+  Finally, any free program is threatened constantly by software
+patents.  We wish to avoid the danger that redistributors of a free
+program will individually obtain patent licenses, in effect making the
+program proprietary.  To prevent this, we have made it clear that any
+patent must be licensed for everyone's free use or not licensed at all.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+                    GNU GENERAL PUBLIC LICENSE
+   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
+
+  0. This License applies to any program or other work which contains
+a notice placed by the copyright holder saying it may be distributed
+under the terms of this General Public License.  The "Program", below,
+refers to any such program or work, and a "work based on the Program"
+means either the Program or any derivative work under copyright law:
+that is to say, a work containing the Program or a portion of it,
+either verbatim or with modifications and/or translated into another
+language.  (Hereinafter, translation is included without limitation in
+the term "modification".)  Each licensee is addressed as "you".
+
+Activities other than copying, distribution and modification are not
+covered by this License; they are outside its scope.  The act of
+running the Program is not restricted, and the output from the Program
+is covered only if its contents constitute a work based on the
+Program (independent of having been made by running the Program).
+Whether that is true depends on what the Program does.
+
+  1. You may copy and distribute verbatim copies of the Program's
+source code as you receive it, in any medium, provided that you
+conspicuously and appropriately publish on each copy an appropriate
+copyright notice and disclaimer of warranty; keep intact all the
+notices that refer to this License and to the absence of any warranty;
+and give any other recipients of the Program a copy of this License
+along with the Program.
+
+You may charge a fee for the physical act of transferring a copy, and
+you may at your option offer warranty protection in exchange for a fee.
+
+  2. You may modify your copy or copies of the Program or any portion
+of it, thus forming a work based on the Program, and copy and
+distribute such modifications or work under the terms of Section 1
+above, provided that you also meet all of these conditions:
+
+    a) You must cause the modified files to carry prominent notices
+    stating that you changed the files and the date of any change.
+
+    b) You must cause any work that you distribute or publish, that in
+    whole or in part contains or is derived from the Program or any
+    part thereof, to be licensed as a whole at no charge to all third
+    parties under the terms of this License.
+
+    c) If the modified program normally reads commands interactively
+    when run, you must cause it, when started running for such
+    interactive use in the most ordinary way, to print or display an
+    announcement including an appropriate copyright notice and a
+    notice that there is no warranty (or else, saying that you provide
+    a warranty) and that users may redistribute the program under
+    these conditions, and telling the user how to view a copy of this
+    License.  (Exception: if the Program itself is interactive but
+    does not normally print such an announcement, your work based on
+    the Program is not required to print an announcement.)
+
+These requirements apply to the modified work as a whole.  If
+identifiable sections of that work are not derived from the Program,
+and can be reasonably considered independent and separate works in
+themselves, then this License, and its terms, do not apply to those
+sections when you distribute them as separate works.  But when you
+distribute the same sections as part of a whole which is a work based
+on the Program, the distribution of the whole must be on the terms of
+this License, whose permissions for other licensees extend to the
+entire whole, and thus to each and every part regardless of who wrote it.
+
+Thus, it is not the intent of this section to claim rights or contest
+your rights to work written entirely by you; rather, the intent is to
+exercise the right to control the distribution of derivative or
+collective works based on the Program.
+
+In addition, mere aggregation of another work not based on the Program
+with the Program (or with a work based on the Program) on a volume of
+a storage or distribution medium does not bring the other work under
+the scope of this License.
+
+  3. You may copy and distribute the Program (or a work based on it,
+under Section 2) in object code or executable form under the terms of
+Sections 1 and 2 above provided that you also do one of the following:
+
+    a) Accompany it with the complete corresponding machine-readable
+    source code, which must be distributed under the terms of Sections
+    1 and 2 above on a medium customarily used for software interchange; or,
+
+    b) Accompany it with a written offer, valid for at least three
+    years, to give any third party, for a charge no more than your
+    cost of physically performing source distribution, a complete
+    machine-readable copy of the corresponding source code, to be
+    distributed under the terms of Sections 1 and 2 above on a medium
+    customarily used for software interchange; or,
+
+    c) Accompany it with the information you received as to the offer
+    to distribute corresponding source code.  (This alternative is
+    allowed only for noncommercial distribution and only if you
+    received the program in object code or executable form with such
+    an offer, in accord with Subsection b above.)
+
+The source code for a work means the preferred form of the work for
+making modifications to it.  For an executable work, complete source
+code means all the source code for all modules it contains, plus any
+associated interface definition files, plus the scripts used to
+control compilation and installation of the executable.  However, as a
+special exception, the source code distributed need not include
+anything that is normally distributed (in either source or binary
+form) with the major components (compiler, kernel, and so on) of the
+operating system on which the executable runs, unless that component
+itself accompanies the executable.
+
+If distribution of executable or object code is made by offering
+access to copy from a designated place, then offering equivalent
+access to copy the source code from the same place counts as
+distribution of the source code, even though third parties are not
+compelled to copy the source along with the object code.
+
+  4. You may not copy, modify, sublicense, or distribute the Program
+except as expressly provided under this License.  Any attempt
+otherwise to copy, modify, sublicense or distribute the Program is
+void, and will automatically terminate your rights under this License.
+However, parties who have received copies, or rights, from you under
+this License will not have their licenses terminated so long as such
+parties remain in full compliance.
+
+  5. You are not required to accept this License, since you have not
+signed it.  However, nothing else grants you permission to modify or
+distribute the Program or its derivative works.  These actions are
+prohibited by law if you do not accept this License.  Therefore, by
+modifying or distributing the Program (or any work based on the
+Program), you indicate your acceptance of this License to do so, and
+all its terms and conditions for copying, distributing or modifying
+the Program or works based on it.
+
+  6. Each time you redistribute the Program (or any work based on the
+Program), the recipient automatically receives a license from the
+original licensor to copy, distribute or modify the Program subject to
+these terms and conditions.  You may not impose any further
+restrictions on the recipients' exercise of the rights granted herein.
+You are not responsible for enforcing compliance by third parties to
+this License.
+
+  7. If, as a consequence of a court judgment or allegation of patent
+infringement or for any other reason (not limited to patent issues),
+conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot
+distribute so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you
+may not distribute the Program at all.  For example, if a patent
+license would not permit royalty-free redistribution of the Program by
+all those who receive copies directly or indirectly through you, then
+the only way you could satisfy both it and this License would be to
+refrain entirely from distribution of the Program.
+
+If any portion of this section is held invalid or unenforceable under
+any particular circumstance, the balance of the section is intended to
+apply and the section as a whole is intended to apply in other
+circumstances.
+
+It is not the purpose of this section to induce you to infringe any
+patents or other property right claims or to contest validity of any
+such claims; this section has the sole purpose of protecting the
+integrity of the free software distribution system, which is
+implemented by public license practices.  Many people have made
+generous contributions to the wide range of software distributed
+through that system in reliance on consistent application of that
+system; it is up to the author/donor to decide if he or she is willing
+to distribute software through any other system and a licensee cannot
+impose that choice.
+
+This section is intended to make thoroughly clear what is believed to
+be a consequence of the rest of this License.
+
+  8. If the distribution and/or use of the Program is restricted in
+certain countries either by patents or by copyrighted interfaces, the
+original copyright holder who places the Program under this License
+may add an explicit geographical distribution limitation excluding
+those countries, so that distribution is permitted only in or among
+countries not thus excluded.  In such case, this License incorporates
+the limitation as if written in the body of this License.
+
+  9. The Free Software Foundation may publish revised and/or new versions
+of the General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+Each version is given a distinguishing version number.  If the Program
+specifies a version number of this License which applies to it and "any
+later version", you have the option of following the terms and conditions
+either of that version or of any later version published by the Free
+Software Foundation.  If the Program does not specify a version number of
+this License, you may choose any version ever published by the Free Software
+Foundation.
+
+  10. If you wish to incorporate parts of the Program into other free
+programs whose distribution conditions are different, write to the author
+to ask for permission.  For software which is copyrighted by the Free
+Software Foundation, write to the Free Software Foundation; we sometimes
+make exceptions for this.  Our decision will be guided by the two goals
+of preserving the free status of all derivatives of our free software and
+of promoting the sharing and reuse of software generally.
+
+                            NO WARRANTY
+
+  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
+FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
+OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
+PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
+OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
+TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
+PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
+REPAIR OR CORRECTION.
+
+  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
+REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
+INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
+OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
+TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
+YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
+PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
+POSSIBILITY OF SUCH DAMAGES.
+
+                     END OF TERMS AND CONDITIONS
+
+            How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+convey the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    <one line to give the program's name and a brief idea of what it does.>
+    Copyright (C) <year>  <name of author>
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License along
+    with this program; if not, write to the Free Software Foundation, Inc.,
+    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+
+Also add information on how to contact you by electronic and paper mail.
+
+If the program is interactive, make it output a short notice like this
+when it starts in an interactive mode:
+
+    Gnomovision version 69, Copyright (C) year name of author
+    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, the commands you use may
+be called something other than `show w' and `show c'; they could even be
+mouse-clicks or menu items--whatever suits your program.
+
+You should also get your employer (if you work as a programmer) or your
+school, if any, to sign a "copyright disclaimer" for the program, if
+necessary.  Here is a sample; alter the names:
+
+  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
+  `Gnomovision' (which makes passes at compilers) written by James Hacker.
+
+  <signature of Ty Coon>, 1 April 1989
+  Ty Coon, President of Vice
+
+This General Public License does not permit incorporating your program into
+proprietary programs.  If your program is a subroutine library, you may
+consider it more useful to permit linking proprietary applications with the
+library.  If this is what you want to do, use the GNU Lesser General
+Public License instead of this License.
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/MAINTAINERS.txt drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/MAINTAINERS.txt
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/MAINTAINERS.txt	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/MAINTAINERS.txt	2014-05-21 21:43:42.000000000 +0200
@@ -0,0 +1,38 @@
+
+Entity translation is built and maintained by the Drupal project community.
+Everyone is encouraged to submit issues and changes (patches) to improve it, and
+to contribute in other ways -- see http://drupal.org/contribute to find out how.
+
+Project maintainers
+-------------------
+
+The Entity translation maintainers oversee the development of the project as a
+whole. The project maintainers for Entity translation are:
+
+- Francesco Placella 'plach' <http://drupal.org/user/183211>
+- Daniel F. Kudwien 'sun' <http://drupal.org/user/54136>
+
+
+Component maintainers
+---------------------
+
+The Entity translation component maintainers oversee the development of its
+subsystems. This role maps pretty closely to the one of core maintainer for the
+Drupal core project (see http://drupal.org/contribute/core-maintainers for more
+information on their responsibilities), with the exception that here component
+maintainers are granted commit access for their specific subsystems. See
+http://drupal.org/node/363367 to find out how to become a component maintainer.
+Current component maintainers for Entity translation:
+
+Base system
+- Francesco Placella 'plach' <http://drupal.org/user/183211>
+- Benedikt Forchhammer 'bforchhammer' <http://drupal.org/user/216396>
+
+Menu integration
+- Benedikt Forchhammer 'bforchhammer' <http://drupal.org/user/216396>
+
+Views integration
+- Fabian Sörqvist 'fabsor' <http://drupal.org/user/255704>
+
+Node translation upgrade
+- Francesco Placella 'plach' <http://drupal.org/user/183211>
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/README.txt drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/README.txt
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/README.txt	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/README.txt	2014-05-21 21:43:42.000000000 +0200
@@ -0,0 +1,37 @@
+
+-- SUMMARY --
+
+Allows entities to be translated into different languages.
+
+For a full description of the module, visit the project page:
+  http://drupal.org/project/entity_translation
+To submit bug reports and feature suggestions, or to track changes:
+  http://drupal.org/project/issues/entity_translation
+
+
+-- REQUIREMENTS --
+
+None.
+
+
+-- INSTALLATION --
+
+* Install as usual, see http://drupal.org/node/70151 for further information.
+
+
+-- CONFIGURATION --
+
+* @todo
+
+
+-- USAGE --
+
+* @todo
+
+
+-- CONTACT --
+
+Current maintainers:
+* Francesco Placella (plach) - http://drupal.org/user/183211
+* Daniel F. Kudwien (sun) - http://drupal.org/user/54136
+
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/tests/entity_translation.test drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/tests/entity_translation.test
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/tests/entity_translation.test	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/tests/entity_translation.test	2014-05-21 21:43:42.000000000 +0200
@@ -0,0 +1,526 @@
+<?php
+
+/**
+ * @file
+ * Tests for Entity translation module.
+ */
+
+/**
+ * Base class for entity translation module tests.
+ */
+class EntityTranslationTestCase extends DrupalWebTestCase {
+
+  protected $current_user;
+  protected $admin_user;
+  protected $translator_user;
+
+  function setUp() {
+    $args = func_get_args();
+    call_user_func_array(array('parent', 'setUp'), $args);
+
+    // Reset user fields to make test object reusable.
+    unset($this->current_user);
+    unset($this->admin_user);
+    unset($this->translator_user);
+  }
+
+  /**
+   * Retrieves a Drupal path or an absolute path with language.
+   *
+   * @param $language
+   *   Language code or language object.
+   */
+  function get($language, $path = '', array $options = array(), array $headers = array()) {
+    $options['language'] = $this->getLanguage($language);
+    return $this->drupalGet($path, $options, $headers);
+  }
+
+  /**
+   * Posts to a Drupal path with language.
+   */
+  function post($language, $path, $edit, $submit, array $options = array(), array $headers = array(), $form_html_id = NULL, $extra_post = NULL) {
+    $options['language'] = $this->getLanguage($language);
+    $this->drupalPost($path, $edit, $submit, $options, $headers, $form_html_id, $extra_post);
+  }
+
+  /**
+   * Login the given user only if she has not changed.
+   */
+  function login($user) {
+    if (!isset($this->current_user) || $this->current_user->uid != $user->uid) {
+      $this->current_user = $user;
+      $this->drupalLogin($user);
+    }
+  }
+
+  /**
+   * Returns a user with administration rights.
+   *
+   * @param $permissions
+   *   Additional permissions for administrative user.
+   */
+  function getAdminUser(array $permissions = array()) {
+    if (!isset($this->admin_user)) {
+      $this->admin_user = $this->drupalCreateUser(array_merge(array(
+        'bypass node access',
+        'administer nodes',
+        'administer languages',
+        'administer content types',
+        'administer blocks',
+        'access administration pages',
+        'administer site configuration',
+      ), $permissions));
+    }
+    return $this->admin_user;
+  }
+
+  /**
+   * Returns a user with minimal translation rights.
+   *
+   * @param $permissions
+   *   Additional permissions for administrative user.
+   */
+  function getTranslatorUser(array $permissions = array()) {
+    if (!isset($this->translator_user)) {
+      $this->translator_user = $this->drupalCreateUser(array_merge(array(
+        'create page content',
+        'edit own page content',
+        'delete own page content',
+        'translate any entity',
+      ), $permissions));
+    }
+    return $this->translator_user;
+  }
+
+  /**
+   * Make sure the clean urls are enabled.
+   */
+  function enableCleanUrls() {
+    $this->drupalGet('admin/config/search/clean-urls');
+    $edit = array();
+    $edit['clean_url'] = TRUE;
+    $this->drupalPost(NULL, $edit, t('Save configuration'));
+  }
+
+  /**
+   * Enable URL language detection.
+   */
+  function enableUrlLanguageDetection() {
+    // Enable URL language detection and selection.
+    $edit = array(
+      'language[enabled][locale-url]' => TRUE,
+      'language_content[enabled][locale-interface]' => TRUE
+    );
+    $this->drupalPost('admin/config/regional/language/configure', $edit, t('Save settings'));
+    $this->assertRaw(t('Language negotiation configuration saved.'), t('URL language detection enabled.'));
+    $this->drupalGet('admin/config/regional/language/configure');
+    // Reset caches.
+    drupal_static_reset('locale_url_outbound_alter');
+    drupal_static_reset('language_list');
+  }
+
+  /**
+   * Get a language object from a language code.
+   */
+  public function getLanguage($langcode) {
+    if (is_object($langcode)) {
+      return $langcode;
+    }
+    else {
+      $language_list = language_list();
+      return $language_list[$langcode];
+    }
+  }
+
+  /**
+   * Install a specified language if it has not been already, otherwise make sure that the language is enabled.
+   *
+   * @param $langcode
+   *   The language code to check.
+   */
+  function addLanguage($langcode) {
+    // Check to make sure that language has not already been installed.
+    $this->drupalGet('admin/config/regional/language');
+
+    if (strpos($this->drupalGetContent(), 'enabled[' . $langcode . ']') === FALSE) {
+      // Doesn't have language installed so add it.
+      $edit = array();
+      $edit['langcode'] = $langcode;
+      $this->drupalPost('admin/config/regional/language/add', $edit, t('Add language'));
+
+      // Make sure we are not using a stale list.
+      drupal_static_reset('language_list');
+      $languages = language_list('language');
+      $this->assertTrue(array_key_exists($langcode, $languages), t('Language was installed successfully.'));
+
+      if (array_key_exists($langcode, $languages)) {
+        $this->assertRaw(t('The language %language has been created and can now be used. More information is available on the <a href="@locale-help">help screen</a>.', array('%language' => $languages[$langcode]->name, '@locale-help' => url('admin/help/locale'))), t('Language has been created.'));
+      }
+    }
+    elseif ($this->xpath('//input[@type="checkbox" and @name=:name and @checked="checked"]', array(':name' => 'enabled[' . $langcode . ']'))) {
+      // It is installed and enabled. No need to do anything.
+      $this->assertTrue(TRUE, 'Language [' . $langcode . '] already installed and enabled.');
+    }
+    else {
+      // It is installed but not enabled. Enable it.
+      $this->assertTrue(TRUE, 'Language [' . $langcode . '] already installed.');
+      $this->drupalPost(NULL, array('enabled[' . $langcode . ']' => TRUE), t('Save configuration'));
+      $this->assertRaw(t('Configuration saved.'), t('Language successfully enabled.'));
+    }
+  }
+
+  /**
+   * Configure the "Basic page" content type for entity translation tests.
+   */
+  function configureContentType() {
+    // Configure the "Basic page" content type to use multilingual support with
+    // translation.
+    $edit = array();
+    $edit['language_content_type'] = ENTITY_TRANSLATION_ENABLED;
+    $this->drupalPost('admin/structure/types/manage/page', $edit, t('Save content type'));
+    $this->assertRaw(t('The content type %type has been updated.', array('%type' => 'Basic page')), t('Basic page content type has been updated.'));
+
+    // Set body field's cardinality to unlimited and toggle translatability.
+    $edit = array();
+    $edit['field[cardinality]'] = FIELD_CARDINALITY_UNLIMITED;
+    $edit['field[translatable]'] = 1;
+    $this->drupalPost('admin/structure/types/manage/page/fields/body', $edit, t('Save settings'));
+    $this->assertRaw(t('Saved %field configuration.', array('%field' => 'Body')), t('Body field settings have been updated.'));
+
+    // Check if the setting works.
+    $this->drupalGet('node/add/page');
+    $this->assertFieldById('edit-body-und-add-more', t('Add another item'), t('Add another item button found.'));
+  }
+
+  /**
+   * Create a "Basic page" in the specified language.
+   *
+   * @param $title
+   *   Title of the basic page in the specified language.
+   * @param $body
+   *   Body of the basic page in the specified language.
+   * @param $langcode
+   *   The language code to be assigned to the specified values.
+   */
+  function createPage($title, $body, $langcode) {
+    $edit = array();
+    $language_none = LANGUAGE_NONE;
+    $edit["title"] = $title;
+    $edit["body[$language_none][0][value]"] = $body;
+    $edit['language'] = $langcode;
+    $this->drupalPost('node/add/page', $edit, t('Save'));
+    $this->assertRaw(t('Basic page %title has been created.', array('%title' => $title)), t('Basic page created.'));
+
+    // Check to make sure the node was created.
+    $node = $this->drupalGetNodeByTitle($title);
+    $this->assertTrue($node, t('Node found in database.'));
+
+    return $node;
+  }
+
+  /**
+   * Create a translation.
+   *
+   * @param $node
+   *   Node of the basic page to create translation for.
+   * @param $title
+   *   Title of the basic page in the specified language.
+   * @param $body
+   *   Body of the basic page in the specified language.
+   * @param $langcode
+   *   The language code to be assigned to the specified values.
+   */
+  function createTranslation($node, $title, $body, $langcode, $source_langcode = 'en') {
+    $this->drupalGet('node/' . $node->nid . '/edit/add/' . $source_langcode . '/' . $langcode);
+
+    $body_key = "body[$langcode][0][value]";
+    $this->assertFieldByXPath("//textarea[@name='$body_key']", $node->body[$node->language][0]['value'], 'Original body value correctly populated.');
+    $this->assertFieldById('edit-body-' . $langcode . '-add-more', t('Add another item'), t('Add another item button found.'));
+
+    $edit = array();
+    $edit[$body_key] = $body;
+
+    $this->drupalPost(NULL, $edit, t('Save'));
+    $this->drupalGet('node/' . $node->nid . '/translate');
+    $this->assertLinkByHref('node/' . $node->nid . '/edit/' . $langcode, 0, t('Translation edit link found. Translation created.'));
+
+    return $node;
+  }
+}
+
+/**
+ * Basic tests for the translation creation/editing workflow.
+ */
+class EntityTranslationTranslationTestCase extends EntityTranslationTestCase {
+
+  /**
+   * Return the test information.
+   */
+  public static function getInfo() {
+    return array(
+      'name' => 'Entity translation workflow',
+      'description' => 'Basic tests for the translation creation/editing workflow.',
+      'group' => 'Entity translation',
+    );
+  }
+
+  function setUp() {
+    parent::setUp('locale', 'entity_translation');
+    $this->login($this->getAdminUser());
+    $this->addLanguage('en');
+    $this->addLanguage('es');
+    $this->configureContentType();
+    $this->login($this->getTranslatorUser());
+  }
+
+  /**
+   * Test if field based translation works.
+   *
+   * Enable field based translation for basic pages. Add a field with a
+   * cardinality higher than 1, to test if field_default_extract_form_values()
+   * is invoked. Create a basic page and translate it.
+   */
+  function testFieldTranslation() {
+    // Create Basic page in English.
+    $node_title = $this->randomName();
+    $node_body = $this->randomName();
+    $node = $this->createPage($node_title, $node_body, 'en');
+
+    // Submit translation in Spanish.
+    $node_translation_title = $this->randomName();
+    $node_translation_body = $this->randomName();
+    $node_translation = $this->createTranslation($node, $node_translation_title, $node_translation_body, 'es');
+  }
+}
+
+/**
+ * Basic tests for comment related things.
+ *
+ * @todo Add tests for comment translation workflow.
+ */
+class EntityTranslationCommentTestCase extends EntityTranslationTestCase {
+
+  protected $comment_user;
+
+  /**
+   * Return the test information.
+   */
+  public static function getInfo() {
+    return array(
+      'name' => 'Comment translation',
+      'description' => 'Basic tests for comment translation/filtering.',
+      'group' => 'Entity translation',
+    );
+  }
+
+  function setUp() {
+    parent::setUp('locale', 'entity_translation', 'comment');
+    $this->login($this->getAdminUser());
+    $this->addLanguage('en');
+    $this->addLanguage('es');
+    $this->enableUrlLanguageDetection();
+    $this->configureContentType();
+    $this->configureComments(FALSE);
+    $this->login($this->getTranslatorUser());
+  }
+
+  function tearDown() {
+    unset($this->comment_user);
+    parent::tearDown();
+  }
+
+  function getCommentUser() {
+    if (empty($this->comment_user)) {
+      $this->comment_user = $this->drupalCreateUser(array(
+        'access comments',
+        'post comments',
+        'edit own comments',
+      ));
+    }
+    return $this->comment_user;
+  }
+
+  /**
+   * Enable comments and comment filtering by language.
+   */
+  function configureComments($filter_by_language = TRUE) {
+    $edit = array();
+    $edit['comment'] = COMMENT_NODE_OPEN;
+    $edit['entity_translation_comment_filter'] = $filter_by_language;
+    $this->drupalPost('admin/structure/types/manage/page', $edit, t('Save content type'));
+    $this->assertRaw(t('The content type %type has been updated.', array('%type' => 'Basic page')));
+
+    $this->drupalGet('admin/structure/types/manage/page');
+    if ($filter_by_language) {
+      $this->assertFieldChecked('edit-entity-translation-comment-filter', 'Comment filtering is enabled.');
+    }
+    else {
+      $this->assertNoFieldChecked('edit-entity-translation-comment-filter', 'Comment filtering is disabled.');
+    }
+  }
+
+  /**
+   * Add a comment for the given node.
+   *
+   * @param $node
+   *   The node for which to add the comment.
+   * @param $comment_body
+   *   The comment body text.
+   * @param $language
+   *   The comment language.
+   */
+  function postComment($node, $comment_body, $language) {
+    $edit = array();
+    $edit['comment_body[' . LANGUAGE_NONE . '][0][value]'] = $comment_body;
+    $this->post($language, 'comment/reply/' . $node->nid, $edit, t('Save'));
+  }
+
+  /**
+   * Test comment filtering by language.
+   */
+  function testCommentLanguageFiltering() {
+    $node = $this->createPage($this->randomName(), $this->randomName(), 'en');
+    $this->login($this->getCommentUser());
+
+    // Create comments in different languages.
+    $comment_en = $this->randomName();
+    $this->postComment($node, $comment_en, 'en');
+    $comment_es = $this->randomName();
+    $this->postComment($node, $comment_es, 'es');
+
+    // Check that ALL comments are being displayed when comment language filter
+    // is disabled (default behavior).
+    $this->get('en', 'node/' . $node->nid);
+    $this->assertText($comment_en, 'English comment found.');
+    $this->assertText($comment_es, 'Spanish comment found.');
+
+    // Enable comment filtering by language.
+    $this->login($this->getAdminUser());
+    $this->configureComments(TRUE);
+    $this->login($this->getCommentUser());
+
+    // Load page in different languages. Check that only comments matching
+    // current language are being displayed.
+    $this->get('en', 'node/' . $node->nid);
+    $this->assertText($comment_en, 'English comment found.');
+    $this->assertNoText($comment_es, 'Spanish comment not found.');
+
+    $this->get('es', 'node/' . $node->nid);
+    $this->assertNoText($comment_en, 'English comment not found.');
+    $this->assertText($comment_es, 'Spanish comment found.');
+  }
+}
+
+/**
+ * Test CRUD hook invocation.
+ */
+class EntityTranslationHookTestCase extends EntityTranslationTestCase {
+
+  /**
+   * Return the test information.
+   */
+  public static function getInfo() {
+    return array(
+      'name' => 'Entity translation hooks',
+      'description' => 'Test that entity translation hooks are properly fired.',
+      'group' => 'Entity translation',
+    );
+  }
+
+  function setUp() {
+    parent::setUp('locale', 'entity_translation', 'entity_translation_test');
+    $this->login($this->getAdminUser());
+    $this->addLanguage('it');
+    $this->addLanguage('es');
+    $this->configureContentType();
+    $this->login($this->getTranslatorUser());
+  }
+
+  /**
+   * Test whether hooks are properly fired in the regular form workflow.
+   */
+  function testFormWorkflow() {
+    // Create Basic page in English.
+    $node_title = $this->randomName();
+    $node_body = $this->randomName();
+    $node = $this->createPage($node_title, $node_body, 'en');
+
+    // Submit translation in Italian.
+    $node_translation_body = $this->randomName();
+    $this->createTranslation($node, NULL, $node_translation_body, 'it');
+    $info = $this->getHookInfo();
+    $this->assertTrue(!empty($info['insert']), t('Insert hook has been properly fired.'));
+
+    // Edit translation in Italian.
+    $edit = array("body[it][0][value]" => $this->randomName());
+    $this->drupalPost('node/' . $node->nid . '/edit/it', $edit, t('Save'));
+    $info = $this->getHookInfo();
+    $this->assertTrue(!empty($info['update']), t('Update hook has been properly fired.'));
+
+    // Delete the Basic page.
+    $edit = array();
+    $this->drupalPost('node/' . $node->nid . '/delete', $edit, t('Delete'));
+    $info = $this->getHookInfo('delete');
+    $this->assertTrue(count($info) == 2 && !empty($info['en']) && !empty($info['it']), t('Delete hook has been properly fired.'));
+  }
+
+  /**
+   * Test whether hooks are properly fired when using the API.
+   */
+  function testAPI() {
+    // Create Basic page in English.
+    $node = $this->createPage($this->randomName(), $this->randomName(), 'en');
+    $handler = entity_translation_get_handler('node', $node);
+
+    // Create a translation in Italian.
+    $translation = array('source' => 'en', 'language' => 'it');
+    $handler->setTranslation($translation);
+    $handler->saveTranslations();
+    $node = node_load($node->nid, NULL, TRUE);
+    $handler = entity_translation_get_handler('node', $node, TRUE);
+    $translations = $handler->getTranslations();
+    $this->assertTrue(!empty($translations->data['it']), t('An Italian translation has been created'));
+    $info = $this->getHookInfo();
+    $this->assertTrue(!empty($info['insert']), t('Insert hook has been properly fired.'));
+
+    // Check that the update hook is properly fired.
+    $translation['status'] = 1;
+    $handler->setTranslation($translation);
+    $handler->saveTranslations();
+    $info = $this->getHookInfo();
+    $this->assertTrue(!empty($info['update']), t('Update hook has been properly fired.'));
+
+    // Create a Spanish translation and update it before saving it.
+    $translation = array('source' => 'it', 'language' => 'es');
+    $handler->setTranslation($translation);
+    $translation['status'] = 1;
+    $handler->setTranslation($translation);
+    $handler->saveTranslations();
+    $node = node_load($node->nid, NULL, TRUE);
+    $handler = entity_translation_get_handler('node', $node, TRUE);
+    $translations = $handler->getTranslations();
+    $this->assertTrue(!empty($translations->data['es']), t('A Spanish translation has been created'));
+    $info = $this->getHookInfo();
+    $this->assertTrue(!empty($info['insert']), t('Insert hook has been properly fired.'));
+
+    // Delete a translation after updating it without saving.
+    $translation['status'] = 0;
+    $handler->setTranslation($translation);
+    $handler->removeTranslation('es');
+    $handler->saveTranslations();
+    $info = $this->getHookInfo();
+    $this->assertTrue(empty($info['update']), t('Update hook has not been fired.'));
+    $info = $this->getHookInfo('delete');
+    $this->assertTrue(!empty($info['es']), t('Delete hook has been properly fired.'));
+  }
+
+  /**
+   * Retrieve the information stored by hook implementations.
+   */
+  protected function getHookInfo($op = 'save') {
+    $name = 'entity_translation_test_' . $op;
+    $info = variable_get($name);
+    variable_del($name);
+    return $info;
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/tests/entity_translation_test.info drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/tests/entity_translation_test.info
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/tests/entity_translation_test.info	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/tests/entity_translation_test.info	2014-05-21 21:43:42.000000000 +0200
@@ -0,0 +1,14 @@
+name = Entity Translation testing
+description = Tests Entity Translation module functionality. Do not enable.
+core = 7.x
+package = Testing
+hidden = TRUE
+dependencies[] = entity_translation
+files[] = entity_translation_test.module
+
+; Information added by drupal.org packaging script on 2013-07-23
+version = "7.x-1.0-beta3"
+core = "7.x"
+project = "entity_translation"
+datestamp = "1374601567"
+
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/tests/entity_translation_test.install drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/tests/entity_translation_test.install
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/tests/entity_translation_test.install	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/tests/entity_translation_test.install	2014-05-21 21:43:42.000000000 +0200
@@ -0,0 +1,7 @@
+<?php
+
+/**
+ * @file
+ * Installation functionality for Entity Translation testing module.
+ */
+
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/tests/entity_translation_test.module drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/tests/entity_translation_test.module
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/tests/entity_translation_test.module	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/tests/entity_translation_test.module	2014-05-21 21:43:42.000000000 +0200
@@ -0,0 +1,69 @@
+<?php
+
+/**
+ * @file
+ * Testing functionality for Entity Translation module.
+ */
+
+/**
+ * Implements hook_entity_translation_insert().
+ */
+function entity_translation_test_entity_translation_insert($entity_type, $entity, $translation, $values = array()) {
+  entity_translation_test_check_save($entity_type, $entity, $translation, 'insert');
+}
+
+/**
+ * Implements hook_entity_translation_insert().
+ */
+function entity_translation_test_entity_translation_update($entity_type, $entity, $translation, $values = array()) {
+  entity_translation_test_check_save($entity_type, $entity, $translation, 'update');
+}
+
+/**
+ * Test implementation for save hooks.
+ */
+function entity_translation_test_check_save($entity_type, $entity, $translation, $hook) {
+  list($id, ,) = entity_extract_ids($entity_type, $entity);
+  $match = FALSE;
+
+  $row = db_select('entity_translation', 'et')
+    ->fields('et')
+    ->condition('entity_type', $entity_type)
+    ->condition('entity_id', $id)
+    ->condition('language', $translation['language'])
+    ->orderBy('created')
+    ->execute()
+    ->fetch(PDO::FETCH_ASSOC);
+
+  if ($row) {
+    $match = TRUE;
+    foreach ($translation as $key => $value) {
+      if ($row[$key] != $value) {
+        $match = FALSE;
+        break;
+      }
+    }
+  }
+
+  variable_set('entity_translation_test_save', array($hook => $match));
+}
+
+/**
+ * Implements hook_entity_translation_delete().
+ */
+function entity_translation_test_entity_translation_delete($entity_type, $entity, $langcode) {
+  list($id, ,) = entity_extract_ids($entity_type, $entity);
+
+  $row = db_select('entity_translation', 'et')
+    ->fields('et')
+    ->condition('entity_type', $entity_type)
+    ->condition('entity_id', $id)
+    ->condition('language', $langcode)
+    ->orderBy('created')
+    ->execute()
+    ->fetch(PDO::FETCH_ASSOC);
+
+  $info = variable_get('entity_translation_test_delete', array());
+  $info[$langcode] = empty($row);
+  variable_set('entity_translation_test_delete', $info);
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/views/entity_translation_handler_field_label.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/views/entity_translation_handler_field_label.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/views/entity_translation_handler_field_label.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/views/entity_translation_handler_field_label.inc	2014-05-21 21:43:42.000000000 +0200
@@ -0,0 +1,78 @@
+<?php
+/**
+ * @file
+ * This file contains a label field handler for entity translation.
+ */
+
+/**
+ * This handler shows the entity label for entities in the entity_translation table.
+ */
+class entity_translation_handler_field_label extends views_handler_field {
+  function construct() {
+    parent::construct();
+    $this->additional_fields['entity_id'] = 'entity_id';
+    $this->additional_fields['entity_type'] = 'entity_type';
+  }
+
+  function query() {
+    $this->ensure_my_table();
+    $this->add_additional_fields();
+  }
+  /**
+   * Add a 'link to entity' option definition.
+   * @see views_handler_field::option:definition()
+   */
+  function option_definition() {
+    $options = parent::option_definition();
+    $options['link_to_entity'] = array('default' => '', 'translatable' => FALSE);
+    return $options;
+  }
+
+  /**
+   * Add a 'link to entity' option.
+   * @see views_handler_field::options_form()
+   */
+  function options_form(&$form, &$form_state) {
+    parent::options_form($form, $form_state);
+    $form['link_to_entity'] = array(
+      '#title' => t('Link this field to it\'s entity'),
+      '#type' => 'checkbox',
+      '#default_value' => $this->options['link_to_entity']
+    );
+  }
+
+  /**
+   * Load all entities, so that we can get the label.
+   */
+  function post_execute(&$values) {
+    $ids = array();
+    $ids_by_type = array();
+    foreach ($values as $row) {
+      if ($entity_type = $this->get_value($row, 'entity_type')) {
+        $ids_by_type[$entity_type][] = $this->get_value($row, 'entity_id');
+      }
+    }
+    foreach ($ids_by_type as $type => $ids) {
+      $this->entities[$type] = entity_load($type, $ids);
+    }
+  }
+
+  function render($values) {
+    $entity_type = $this->get_value($values, 'entity_type');
+    $entity_id = $this->get_value($values, 'entity_id');
+    // Check if entity is not empty
+    if (!$entity_id || !$entity_type) {
+      return NULL;
+    }
+    $entity = $this->entities[$entity_type][$entity_id];
+    // We could also use entity_label(), but since this we might want to let
+    // the handler decide what's best to show.
+    $handler = entity_translation_get_handler($entity_type, $entity);
+    $label = $handler->getLabel();
+    if ($this->options['link_to_entity']) {
+      $this->options['alter']['make_link'] = TRUE;
+      $this->options['alter']['path'] = $handler->getViewPath();
+    }
+    return $label;
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/views/entity_translation_handler_field_translate_link.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/views/entity_translation_handler_field_translate_link.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/views/entity_translation_handler_field_translate_link.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/views/entity_translation_handler_field_translate_link.inc	2014-05-21 21:43:42.000000000 +0200
@@ -0,0 +1,103 @@
+<?php
+/**
+ * @file
+ * Translate link plugin.
+ */
+
+/**
+ * This handler adds translate link for all translatable entities.
+ */
+class entity_translation_handler_field_translate_link extends views_handler_field {
+
+  function construct() {
+    parent::construct();
+    $this->additional_fields['entity_id'] = 'entity_id';
+    $this->additional_fields['entity_type'] = 'entity_type';
+    $this->additional_fields['language'] = 'language';
+  }
+
+  /**
+   * Add required additional fields.
+   */
+  function query() {
+    $this->ensure_my_table();
+    $this->add_additional_fields();
+  }
+
+  /**
+   * Add the text option.
+   * @see views_handler_field::option_definition()
+   */
+  function option_definition() {
+    $options = parent::option_definition();
+    $options['text'] = array('default' => '', 'translatable' => TRUE);
+    return $options;
+  }
+
+  /**
+   * Add the option to set the title of the translate link.
+   * @see views_handler_field::options_form()
+   */
+  function options_form(&$form, &$form_state) {
+    $form['text'] = array(
+      '#type' => 'textfield',
+      '#title' => t('Text to display'),
+      '#default_value' => $this->options['text'],
+    );
+    parent::options_form($form, $form_state);
+
+    // The path is set by render_link function so don't allow setting it.
+    $form['alter']['path'] = array('#access' => FALSE);
+    $form['alter']['external'] = array('#access' => FALSE);
+  }
+
+  /**
+   * Load all entities based on the data we have.
+   */
+  function post_execute(&$values) {
+    $ids = array();
+    $ids_by_type = array();
+    foreach ($values as $row) {
+      if ($entity_type = $this->get_value($row, 'entity_type')) {
+        $ids_by_type[$entity_type][] = $this->get_value($row, 'entity_id');
+      }
+    }
+    foreach ($ids_by_type as $type => $ids) {
+      $this->entities[$type] = entity_load($type, $ids);
+    }
+  }
+
+  /**
+   * @see views_handler_field::render()
+   */
+  function render($values) {
+    $type = $this->get_value($values, 'entity_type');
+    $entity_id = $this->get_value($values, 'entity_id');
+    // Check if entity is not empty
+    if (!$entity_id || !$type) {
+      return NULL;
+    }
+    $language = $this->get_value($values, 'language');
+    $entity = $this->entities[$type][$entity_id];
+    return $this->render_link($type, $entity_id, $entity, $language);
+  }
+
+  /**
+   * Render the link to the translation overview page of the entity.
+   */
+  function render_link($entity_type, $entity_id, $entity, $language) {
+    if (!entity_translation_tab_access($entity_type, $entity)) {
+      return;
+    }
+    // We use the entity info here to avoid having to call entity_load() for all
+    // the entities.
+    $info = entity_get_info($entity_type);
+    $path = $info['translation']['entity_translation']['path schemes']['default']['translate path'];
+    $path = str_replace($info['translation']['entity_translation']['path schemes']['default']['path wildcard'], $entity_id, $path);
+    $this->options['alter']['make_link'] = TRUE;
+    $this->options['alter']['path'] = $path;
+    $this->options['alter']['query'] = drupal_get_destination();
+    $text = !empty($this->options['text']) ? $this->options['text'] : t('translate');
+    return $text;
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/views/entity_translation_handler_filter_entity_type.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/views/entity_translation_handler_filter_entity_type.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/views/entity_translation_handler_filter_entity_type.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/views/entity_translation_handler_filter_entity_type.inc	2014-05-21 21:43:42.000000000 +0200
@@ -0,0 +1,30 @@
+<?php
+/**
+ * @file
+ * Contains an entity type filter handler.
+ */
+
+/**
+ * This handler shows all available entity types that are enabled for entity
+ * translation as options.
+ */
+class entity_translation_handler_filter_entity_type extends views_handler_filter_in_operator {
+
+  /**
+   * Show all entity types that are enabled for entity translation as options.
+   */
+  function get_value_options() {
+    if (!isset($this->value_options)) {
+      $this->value_title = t('Entity type');
+      $allowed_types_options = variable_get('entity_translation_entity_types');
+      $allowed_types = array();
+      $entity_info = entity_get_info();
+      foreach ($allowed_types_options as $key => $allowed) {
+        if ($allowed) {
+          $allowed_types[$key] = $entity_info[$key]['label'];
+        }
+      }
+      $this->value_options = $allowed_types;
+    }
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/views/entity_translation_handler_filter_language.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/views/entity_translation_handler_filter_language.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/views/entity_translation_handler_filter_language.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/views/entity_translation_handler_filter_language.inc	2014-05-21 21:43:42.000000000 +0200
@@ -0,0 +1,27 @@
+<?php
+/**
+ * @file
+ * Contains a language filter handler.
+ */
+
+/**
+ * Extends the locale language filter in order for it to work with the entity
+ * translation table structure.
+ */
+class entity_translation_handler_filter_language extends views_handler_filter_locale_language {
+
+  /**
+   * Override the default behaviour, insert an empty string instead of NULL.
+   */
+  function op_empty() {
+    $this->ensure_my_table();
+    if ($this->operator == 'empty') {
+      $operator = "=";
+    }
+    else {
+      $operator = "<>";
+    }
+
+    $this->query->add_where($this->options['group'], "$this->table_alias.$this->real_field", '', $operator);
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/views/entity_translation_handler_filter_translation_exists.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/views/entity_translation_handler_filter_translation_exists.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/views/entity_translation_handler_filter_translation_exists.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/views/entity_translation_handler_filter_translation_exists.inc	2014-05-21 21:43:42.000000000 +0200
@@ -0,0 +1,132 @@
+<?php
+/**
+ * @file
+ * Contains an entity type filter handler.
+ */
+
+/**
+ * This handler determines if a translation exists for a particular translation.
+ */
+class entity_translation_handler_filter_translation_exists extends views_handler_filter_locale_language {
+
+  /**
+   * Add a 'entity_type' option definition.
+   * @see views_handler_field::option:definition()
+   */
+  function option_definition() {
+    $options = parent::option_definition();
+    $options['entity_type'] = array('default' => '', 'translatable' => FALSE);
+    $options['use_filter'] = array('default' => '', 'translatable' => FALSE);
+    $options['filter'] = array('default' => '', 'translatable' => FALSE);
+    return $options;
+  }
+
+  /**
+   * Override the default title for the operators.
+   */
+  function operators() {
+    $operators = parent::operators();
+    $operators['in']['title'] = t('Translation exists');
+    $operators['not in']['title'] = t('Translation doesn\'t exist');
+    return $operators;
+  }
+
+  /**
+   * Add option for setting entity type either directly or through a filter.
+   * @see views_handler_field::options_form()
+   */
+  function options_form(&$form, &$form_state) {
+    parent::options_form($form, $form_state);
+    $filters = $this->get_entity_type_filters();
+    if (!empty($filters)) {
+      $form['use_filter'] = array(
+        '#type' => 'checkbox',
+        '#title' => t('Use an entity type filter.'),
+        '#default_value' => $this->options['use_filter'],
+      );
+      $form['filter'] = array(
+        '#type' => 'select',
+        '#title' => t('Filter'),
+        '#options' => $filters,
+        '#dependency' => array(
+          'edit-options-use-filter' => array(1)
+        ),
+        '#default_value' => $this->options['filter'],
+      );
+    }
+    $form['entity_type'] = array(
+      '#title' => t('Entity type'),
+      '#type' => 'select',
+      '#options' => $this->get_allowed_types(),
+      '#dependency' => array(
+        'edit-options-use-filter' => array(0)
+      ),
+      '#default_value' => $this->options['entity_type'],
+      '#description' => t('You have to filter on a particular entity type when you use this filter'),
+    );
+  }
+
+  /**
+   * Get all available entity type filters that can be used to build the query.
+   */
+  function get_entity_type_filters() {
+    // We need to build the query to know about the available fields.
+    $this->view->build();
+    $filters = array();
+     foreach ($this->view->filter as $key => $filter) {
+       // Break if we encounter our filter, the filter must be before this one.
+       if ($filter == $this) {
+         break;
+       }
+       if ($filter instanceof entity_translation_handler_filter_entity_type && count($filter->value) == 1 && empty($filter->options['expose']['multiple'])) {
+        $filters[$key] = $filter->value_title;
+      }
+    }
+    return $filters;
+  }
+
+  /**
+   * Get entity types managed by entity translation.
+   */
+  function get_allowed_types() {
+    $allowed_types_options = variable_get('entity_translation_entity_types');
+    $allowed_types = array();
+    $entity_info = entity_get_info();
+    foreach ($allowed_types_options as $key => $allowed) {
+      if ($allowed) {
+        $allowed_types[$key] = $entity_info[$key]['label'];
+      }
+    }
+    return $allowed_types;
+  }
+
+  /**
+   * Override the default behaviour of the handler.
+   */
+  function query() {
+    $this->ensure_my_table();
+    // We need a subquery to determine not in.
+    if ($this->operator == 'not in') {
+      $entity_type = 'node';
+      if ($this->options['use_filter'] && isset($this->view->filter[$this->options['filter']])) {
+        $filter = $this->view->filter[$this->options['filter']];
+        $entity_type = current($filter->value);
+      }
+      else {
+        $this->query->add_where($this->options['group'], "$this->table_alias.entity_type", $this->options['entity_type'], '=');
+        $entity_type = $this->options['entity_type'];
+      }
+      $query = db_select('entity_translation', 'es')
+        ->condition('entity_type', $entity_type)
+        ->condition('language', $this->value);
+      $query->addField('es', 'entity_id');
+      $this->query->add_where($this->options['group'], "$this->table_alias.entity_id", $query, $this->operator);
+    }
+    // We can determine if a translation exists without a subquery.
+    else {
+      $value = array_keys($this->value);
+      $this->query->add_where($this->options['group'], "$this->table_alias.source", '', '<>');
+      $this->query->add_where($this->options['group'], "$this->table_alias.language", array_values($this->value), $this->operator);
+    }
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/views/entity_translation_handler_relationship.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/views/entity_translation_handler_relationship.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/views/entity_translation_handler_relationship.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/views/entity_translation_handler_relationship.inc	2014-05-21 21:43:42.000000000 +0200
@@ -0,0 +1,33 @@
+<?php
+/**
+ * @file
+ * Contains the relationship plugin for relating entities to translation metadata.
+ */
+
+/**
+ * Add a relationship to the entity translation table.
+ */
+class entity_translation_handler_relationship extends views_handler_relationship {
+
+  /**
+   * Add a relationship to the entity_translation table.
+   */
+  function query() {
+    $this->ensure_my_table();
+    $def = $this->definition;
+    $def['table'] = 'entity_translation';
+    $def['field'] = 'entity_id';
+    $def['left_table'] = $this->table_alias;
+    $def['type'] = empty($this->options['required']) ? 'LEFT' : 'INNER';
+    $join = new views_join();
+    $join->definition = $def;
+    $join->construct();
+    $join->adjusted = TRUE;
+    // Use a short alias for the table.
+    $alias = $def['table'] . '_' . $this->table;
+    // We need to add a condition on entity type to the join to avoid getting
+    // relationships to entities with other types.
+    $join->extra = "$alias.entity_type = '{$def['entity type']}'";
+    $this->alias = $this->query->add_relationship($alias, $join, 'entity_translation', $this->relationship);
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/views/entity_translation.views.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/views/entity_translation.views.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/views/entity_translation.views.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/entity_translation/views/entity_translation.views.inc	2014-05-21 21:43:42.000000000 +0200
@@ -0,0 +1,227 @@
+<?php
+/**
+ * @file
+ *
+ * Provide views data and handlers for entity_translation.
+ */
+
+/**
+ * Implements hook_views_data().
+ */
+function entity_translation_views_data() {
+  $data = array();
+  $data['entity_translation']['table']['group'] = t('Entity translation');
+  // Advertise this table as a possible base table.
+  $data['entity_translation']['table']['base'] = array(
+    'field' => 'entity_id',
+    'title' => t('Entity translation'),
+    'help' => t('Information about a translation of an entity.'),
+  );
+  $data['entity_translation']['entity_id'] = array(
+    'title' => t('Entity id'),
+    'help' => t('The entity id.'),
+    'field' => array(
+      'handler' => 'views_handler_field_numeric',
+      'click sortable' => TRUE,
+    ),
+    'argument' => array(
+      'handler' => 'views_handler_argument_numeric',
+      'numeric' => TRUE,
+      'validate type' => 'entity_id',
+    ),
+    'filter' => array(
+      'handler' => 'views_handler_filter_numeric',
+    ),
+    'sort' => array(
+      'handler' => 'views_handler_sort',
+    ),
+  );
+  $data['entity_translation']['entity_type'] = array(
+    'title' => t('Entity type'),
+    'help' => t('The entity type.'),
+    'field' => array(
+      'handler' => 'views_handler_field',
+      'click sortable' => TRUE,
+    ),
+    'argument' => array(
+      'handler' => 'views_handler_argument_string',
+      'numeric' => FALSE,
+      'validate type' => 'entity_type',
+    ),
+    'filter' => array(
+      'handler' => 'entity_translation_handler_filter_entity_type',
+    ),
+    'sort' => array(
+      'handler' => 'views_handler_sort',
+    ),
+  );
+  $data['entity_translation']['language'] = array(
+    'title' => t('Language'),
+    'help' => t('The language of this translation.'),
+    'field' => array(
+      'handler' => 'views_handler_field_locale_language',
+      'click sortable' => TRUE,
+    ),
+    'argument' => array(
+      'handler' => 'views_handler_argument_locale_language',
+      'numeric' => FALSE,
+      'validate type' => 'language',
+    ),
+    'filter' => array(
+      'handler' => 'entity_translation_handler_filter_language',
+      'allow empty' => TRUE,
+    ),
+    'sort' => array(
+      'handler' => 'views_handler_sort',
+    ),
+  );
+  $data['entity_translation']['source'] = array(
+    'title' => t('Source'),
+    'help' => t('The source language.'),
+    'field' => array(
+      'handler' => 'views_handler_field_locale_language',
+      'click sortable' => TRUE,
+    ),
+    'argument' => array(
+      'handler' => 'views_handler_argument_locale_language',
+      'name field' => 'title',
+      'numeric' => FALSE,
+      'validate type' => 'string',
+    ),
+    'filter' => array(
+      'handler' => 'entity_translation_handler_filter_language',
+      'allow empty' => TRUE,
+    ),
+    'sort' => array(
+      'handler' => 'views_handler_sort',
+    ),
+  );
+  $data['entity_translation']['status'] = array(
+    'title' => t('Translation status'),
+    'help' => t('The status of this translation.'),
+    'field' => array(
+      'handler' => 'views_handler_field_boolean',
+      'click sortable' => TRUE,
+    ),
+    'argument' => array(
+      'handler' => 'views_handler_argument_numeric',
+      'numeric' => TRUE,
+      'validate type' => 'boolean',
+    ),
+    'filter' => array(
+      'handler' => 'views_handler_filter_boolean_operator',
+    ),
+    'sort' => array(
+      'handler' => 'views_handler_sort',
+    ),
+  );
+  $data['entity_translation']['translate'] = array(
+    'title' => t('Needs update'),
+    'help' => t('Indicates if the translation needs to be updated.'),
+    'field' => array(
+      'handler' => 'views_handler_field_boolean',
+      'click sortable' => TRUE,
+    ),
+    'argument' => array(
+      'handler' => 'views_handler_argument_numeric',
+      'name field' => 'title',
+      'numeric' => TRUE,
+      'validate type' => 'boolean',
+    ),
+    'filter' => array(
+      'handler' => 'views_handler_filter_boolean_operator',
+    ),
+    'sort' => array(
+      'handler' => 'views_handler_sort',
+    ),
+  );
+  $data['entity_translation']['created'] = array(
+    'title' => t('Created'),
+    'help' => t('Created date.'),
+    'field' => array(
+      'handler' => 'views_handler_field_date',
+      'click sortable' => TRUE,
+    ),
+    'argument' => array(
+      'handler' => 'views_handler_argument_date',
+      'numeric' => FALSE,
+      'validate type' => 'date',
+    ),
+    'filter' => array(
+      'handler' => 'views_handler_filter_date',
+    ),
+    'sort' => array(
+      'handler' => 'views_handler_sort_date',
+    ),
+  );
+  $data['entity_translation']['changed'] = array(
+    'title' => t('Changed'),
+    'help' => t('Changed date.'),
+    'field' => array(
+      'handler' => 'views_handler_field_date',
+      'click sortable' => TRUE,
+    ),
+    'argument' => array(
+      'handler' => 'views_handler_argument_date',
+      'numeric' => FALSE,
+      'validate type' => 'date',
+    ),
+    'filter' => array(
+      'handler' => 'views_handler_filter_date',
+    ),
+    'sort' => array(
+      'handler' => 'views_handler_sort_date',
+    ),
+  );
+  $data['entity_translation']['translate_link'] = array(
+    'title' => t('Translate link'),
+    'help' => t('Link to translation overview page.'),
+    'field' => array(
+      'handler' => 'entity_translation_handler_field_translate_link',
+    ),
+  );
+  $data['entity_translation']['translation_exists'] = array(
+    'title' => t('Translation exists'),
+    'help' => t('Link to translation overview page.'),
+    'filter' => array(
+      'handler' => 'entity_translation_handler_filter_translation_exists',
+    ),
+  );
+  $data['entity_translation']['label'] = array(
+    'title' => t('Label'),
+    'help' => t('The label of the entity.'),
+    'field' => array(
+      'handler' => 'entity_translation_handler_field_label',
+    ),
+  );
+  return $data;
+}
+
+/**
+ * Implements hook_views_data_alter().
+ *
+ * Add entity translation information to the various entity tables.
+ */
+function entity_translation_views_data_alter(&$data) {
+  foreach (entity_get_info() as $type =>  $info) {
+    if ($info['fieldable'] && isset($data[$info['base table']])) {
+      $table = &$data[$info['base table']];
+      $table['entity_translations'] = array(
+        'title' => t('Entity translation: translations'),
+        'help' => t('Translation information.'),
+        'relationship' => array(
+          'label' => t('Translations'),
+          'base' => 'entity_translation',
+          'base field' => 'entity_id',
+          'relationship field' => $info['entity keys']['id'],
+          'handler' => 'entity_translation_handler_relationship',
+          // We add our information here in the definition, so we can copy it
+          // later.
+          'left_table' => $info['base table'],
+          'left_field' => $info['entity keys']['id'],
+          'entity type' => $type,
+        ),
+      );
+    }
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/epesi_commerce.features.field.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/epesi_commerce.features.field.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/epesi_commerce.features.field.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/epesi_commerce.features.field.inc	2014-06-26 12:47:01.000000000 +0200
@@ -0,0 +1,1228 @@
+<?php
+/**
+ * @file
+ * epesi_commerce.features.field.inc
+ */
+
+/**
+ * Implements hook_field_default_fields().
+ */
+function epesi_commerce_field_default_fields() {
+  $fields = array();
+
+  // Exported field: 'commerce_product-epesi_products-commerce_price'.
+  $fields['commerce_product-epesi_products-commerce_price'] = array(
+    'field_config' => array(
+      'active' => '1',
+      'cardinality' => '1',
+      'deleted' => '0',
+      'entity_types' => array(
+        0 => 'commerce_product',
+      ),
+      'field_name' => 'commerce_price',
+      'foreign keys' => array(),
+      'indexes' => array(
+        'currency_price' => array(
+          0 => 'amount',
+          1 => 'currency_code',
+        ),
+      ),
+      'locked' => '1',
+      'module' => 'commerce_price',
+      'settings' => array(),
+      'translatable' => '0',
+      'type' => 'commerce_price',
+    ),
+    'field_instance' => array(
+      'bundle' => 'epesi_products',
+      'default_value' => NULL,
+      'deleted' => '0',
+      'description' => '',
+      'display' => array(
+        'add_to_cart_confirmation_view' => array(
+          'label' => 'above',
+          'settings' => array(),
+          'type' => 'hidden',
+          'weight' => '6',
+        ),
+        'commerce_line_item_display' => array(
+          'label' => 'hidden',
+          'module' => 'commerce_price',
+          'settings' => array(
+            'calculation' => 'calculated_sell_price',
+          ),
+          'type' => 'commerce_price_formatted_amount',
+          'weight' => 0,
+        ),
+        'default' => array(
+          'label' => 'hidden',
+          'module' => 'commerce_price',
+          'settings' => array(
+            'calculation' => 'calculated_sell_price',
+          ),
+          'type' => 'commerce_price_formatted_amount',
+          'weight' => '0',
+        ),
+        'full' => array(
+          'label' => 'hidden',
+          'module' => 'commerce_price',
+          'settings' => array(
+            'calculation' => 'calculated_sell_price',
+          ),
+          'type' => 'commerce_price_formatted_amount',
+          'weight' => 0,
+        ),
+        'line_item' => array(
+          'label' => 'hidden',
+          'module' => 'commerce_price',
+          'settings' => array(
+            'calculation' => 'calculated_sell_price',
+          ),
+          'type' => 'commerce_price_formatted_amount',
+          'weight' => 0,
+        ),
+        'node_full' => array(
+          'label' => 'hidden',
+          'module' => 'commerce_price',
+          'settings' => array(
+            'calculation' => 'calculated_sell_price',
+          ),
+          'type' => 'commerce_price_formatted_amount',
+          'weight' => '1',
+        ),
+        'node_product_list' => array(
+          'label' => 'hidden',
+          'module' => 'commerce_extra_price_formatters',
+          'settings' => array(
+            'alternative_text_for_zero_price' => '',
+            'calculation' => TRUE,
+            'prefix' => 'From',
+            'suffix' => '',
+            'text_format' => 'plain_text',
+            'whole_numbers_only' => FALSE,
+          ),
+          'type' => 'commerce_price_prefix_suffix',
+          'weight' => '1',
+        ),
+        'node_rss' => array(
+          'label' => 'hidden',
+          'module' => 'commerce_price',
+          'settings' => array(
+            'calculation' => 'calculated_sell_price',
+          ),
+          'type' => 'commerce_price_formatted_amount',
+          'weight' => 0,
+        ),
+        'node_search_index' => array(
+          'label' => 'hidden',
+          'module' => 'commerce_price',
+          'settings' => array(
+            'calculation' => 'calculated_sell_price',
+          ),
+          'type' => 'commerce_price_formatted_amount',
+          'weight' => 0,
+        ),
+        'node_search_result' => array(
+          'label' => 'hidden',
+          'module' => 'commerce_price',
+          'settings' => array(
+            'calculation' => 'calculated_sell_price',
+          ),
+          'type' => 'commerce_price_formatted_amount',
+          'weight' => 0,
+        ),
+        'node_teaser' => array(
+          'label' => 'hidden',
+          'module' => 'commerce_price',
+          'settings' => array(
+            'calculation' => 'calculated_sell_price',
+          ),
+          'type' => 'commerce_price_formatted_amount',
+          'weight' => 0,
+        ),
+        'product_in_cart' => array(
+          'label' => 'above',
+          'settings' => array(),
+          'type' => 'hidden',
+          'weight' => '5',
+        ),
+      ),
+      'entity_type' => 'commerce_product',
+      'field_name' => 'commerce_price',
+      'label' => 'Price',
+      'required' => TRUE,
+      'settings' => array(
+        'user_register_form' => FALSE,
+      ),
+      'widget' => array(
+        'module' => 'commerce_price',
+        'settings' => array(
+          'currency_code' => 'default',
+        ),
+        'type' => 'commerce_price_full',
+        'weight' => '0',
+      ),
+    ),
+  );
+
+  // Exported field: 'commerce_product-epesi_products-field_images'.
+  $fields['commerce_product-epesi_products-field_images'] = array(
+    'field_config' => array(
+      'active' => '1',
+      'cardinality' => '-1',
+      'deleted' => '0',
+      'entity_types' => array(),
+      'field_name' => 'field_images',
+      'foreign keys' => array(
+        'fid' => array(
+          'columns' => array(
+            'fid' => 'fid',
+          ),
+          'table' => 'file_managed',
+        ),
+      ),
+      'indexes' => array(
+        'fid' => array(
+          0 => 'fid',
+        ),
+      ),
+      'locked' => '1',
+      'module' => 'image',
+      'settings' => array(
+        'default_image' => 0,
+        'uri_scheme' => 'public',
+      ),
+      'translatable' => '1',
+      'type' => 'image',
+    ),
+    'field_instance' => array(
+      'bundle' => 'epesi_products',
+      'deleted' => '0',
+      'description' => '',
+      'display' => array(
+        'add_to_cart_confirmation_view' => array(
+          'label' => 'hidden',
+          'module' => 'image_delta_formatter',
+          'settings' => array(
+            'deltas' => '0',
+            'deltas_reversed' => 0,
+            'image_link' => '',
+            'image_style' => 'product_thumbnail',
+          ),
+          'type' => 'image_delta',
+          'weight' => '0',
+        ),
+        'default' => array(
+          'label' => 'above',
+          'module' => 'image',
+          'settings' => array(
+            'image_link' => '',
+            'image_style' => '',
+          ),
+          'type' => 'image',
+          'weight' => '1',
+        ),
+        'line_item' => array(
+          'label' => 'above',
+          'settings' => array(),
+          'type' => 'hidden',
+          'weight' => 0,
+        ),
+        'node_full' => array(
+          'label' => 'hidden',
+          'module' => 'cloud_zoom',
+          'settings' => array(
+            'gallery_filedset' => array(
+              'gallery_mode' => 1,
+              'thumb_style' => 'product_thumbnail',
+            ),
+            'slide_style' => 'product_full',
+            'zoom_position_fieldset' => array(
+              'adjust_x' => '0',
+              'adjust_y' => '0',
+              'position' => 'inside',
+              'zoom_height' => 'auto',
+              'zoom_width' => 'auto',
+            ),
+            'zoom_style' => '0',
+            'zoom_style_fieldset' => array(
+              'Show title' => 0,
+              'lens_opacity' => '0.5',
+              'smooth_move' => '3',
+              'soft_focus' => 0,
+              'tint' => 'false',
+              'tint_opacity' => '0.5',
+              'title_opacity' => '0.5',
+            ),
+          ),
+          'type' => 'cloud_zoom',
+          'weight' => '2',
+        ),
+        'node_product_list' => array(
+          'label' => 'hidden',
+          'module' => 'image_delta_formatter',
+          'settings' => array(
+            'deltas' => 0,
+            'deltas_reversed' => FALSE,
+            'image_link' => 'content',
+            'image_style' => 'product_medium',
+          ),
+          'type' => 'image_delta',
+          'weight' => '0',
+        ),
+        'node_teaser' => array(
+          'label' => 'above',
+          'settings' => array(),
+          'type' => 'hidden',
+          'weight' => 0,
+        ),
+        'product_in_cart' => array(
+          'label' => 'hidden',
+          'module' => 'image_delta_formatter',
+          'settings' => array(
+            'deltas' => '0',
+            'deltas_reversed' => 0,
+            'image_link' => '',
+            'image_style' => 'product_thumbnail',
+          ),
+          'type' => 'image_delta',
+          'weight' => '0',
+        ),
+      ),
+      'entity_type' => 'commerce_product',
+      'fences_wrapper' => 'figure',
+      'field_name' => 'field_images',
+      'label' => 'Images',
+      'required' => 0,
+      'settings' => array(
+        'alt_field' => 0,
+        'default_image' => 0,
+        'file_directory' => '',
+        'file_extensions' => 'png gif jpg jpeg',
+        'max_filesize' => '',
+        'max_resolution' => '',
+        'min_resolution' => '',
+        'title_field' => 0,
+        'user_register_form' => FALSE,
+      ),
+      'widget' => array(
+        'active' => 1,
+        'module' => 'image',
+        'settings' => array(
+          'preview_image_style' => 'thumbnail',
+          'progress_indicator' => 'throbber',
+        ),
+        'type' => 'image_image',
+        'weight' => '37',
+      ),
+    ),
+  );
+
+  // Exported field: 'commerce_product-epesi_products-title_field'.
+  $fields['commerce_product-epesi_products-title_field'] = array(
+    'field_config' => array(
+      'active' => '1',
+      'cardinality' => '1',
+      'deleted' => '0',
+      'entity_types' => array(),
+      'field_name' => 'title_field',
+      'foreign keys' => array(
+        'format' => array(
+          'columns' => array(
+            'format' => 'format',
+          ),
+          'table' => 'filter_format',
+        ),
+      ),
+      'indexes' => array(
+        'format' => array(
+          0 => 'format',
+        ),
+      ),
+      'locked' => '0',
+      'module' => 'text',
+      'settings' => array(
+        'max_length' => 255,
+      ),
+      'translatable' => '1',
+      'type' => 'text',
+    ),
+    'field_instance' => array(
+      'bundle' => 'epesi_products',
+      'default_value' => NULL,
+      'deleted' => '0',
+      'description' => '',
+      'display' => array(
+        'add_to_cart_confirmation_view' => array(
+          'label' => 'above',
+          'settings' => array(),
+          'type' => 'hidden',
+          'weight' => '5',
+        ),
+        'default' => array(
+          'label' => 'above',
+          'module' => 'text',
+          'settings' => array(),
+          'type' => 'text_default',
+          'weight' => 4,
+        ),
+        'line_item' => array(
+          'label' => 'above',
+          'settings' => array(),
+          'type' => 'hidden',
+          'weight' => 0,
+        ),
+        'node_full' => array(
+          'label' => 'above',
+          'settings' => array(),
+          'type' => 'hidden',
+          'weight' => 0,
+        ),
+        'node_product_list' => array(
+          'label' => 'above',
+          'settings' => array(),
+          'type' => 'hidden',
+          'weight' => 0,
+        ),
+        'node_teaser' => array(
+          'label' => 'above',
+          'settings' => array(),
+          'type' => 'hidden',
+          'weight' => 0,
+        ),
+        'product_in_cart' => array(
+          'label' => 'above',
+          'settings' => array(),
+          'type' => 'hidden',
+          'weight' => 0,
+        ),
+      ),
+      'entity_type' => 'commerce_product',
+      'field_name' => 'title_field',
+      'label' => 'Title',
+      'required' => TRUE,
+      'settings' => array(
+        'text_processing' => 0,
+        'user_register_form' => FALSE,
+      ),
+      'widget' => array(
+        'module' => 'text',
+        'settings' => array(
+          'size' => 60,
+        ),
+        'type' => 'text_textfield',
+        'weight' => -5,
+      ),
+    ),
+  );
+
+  // Exported field: 'commerce_product-epesi_products-field_dimensions'.
+  $fields['commerce_product-epesi_products-field_dimensions'] = array(
+    'field_config' => array(
+      'active' => '1',
+      'cardinality' => '1',
+      'deleted' => '0',
+      'entity_types' => array(),
+      'field_name' => 'field_dimensions',
+      'foreign keys' => array(),
+      'indexes' => array(),
+      'locked' => '1',
+      'module' => 'physical',
+      'settings' => array(
+        'entity_translation_sync' => FALSE,
+      ),
+      'translatable' => '0',
+      'type' => 'physical_dimensions',
+    ),
+    'field_instance' => array(
+      'bundle' => 'epesi_products',
+      'default_value' => NULL,
+      'deleted' => '0',
+      'description' => '',
+      'display' => array(
+        'add_to_cart_confirmation_view' => array(
+          'label' => 'above',
+          'settings' => array(),
+          'type' => 'hidden',
+          'weight' => 0,
+        ),
+        'default' => array(
+          'label' => 'above',
+          'module' => 'physical',
+          'settings' => array(),
+          'type' => 'physical_dimensions_formatted',
+          'weight' => 7,
+        ),
+        'line_item' => array(
+          'label' => 'above',
+          'settings' => array(),
+          'type' => 'hidden',
+          'weight' => 0,
+        ),
+        'node_teaser' => array(
+          'label' => 'above',
+          'settings' => array(),
+          'type' => 'hidden',
+          'weight' => 0,
+        ),
+        'product_in_cart' => array(
+          'label' => 'above',
+          'settings' => array(),
+          'type' => 'hidden',
+          'weight' => 0,
+        ),
+      ),
+      'entity_type' => 'commerce_product',
+      'fences_wrapper' => '',
+      'field_name' => 'field_dimensions',
+      'label' => 'Dimensions',
+      'required' => 0,
+      'settings' => array(
+        'entity_translation_sync' => FALSE,
+        'user_register_form' => FALSE,
+      ),
+      'widget' => array(
+        'active' => 1,
+        'module' => 'physical',
+        'settings' => array(
+          'default_unit' => 'in',
+          'unit_select_list' => 1,
+        ),
+        'type' => 'physical_dimensions_textfields',
+        'weight' => '40',
+      ),
+    ),
+  );
+
+  // Exported field: 'commerce_product-epesi_products-field_weight'.
+  $fields['commerce_product-epesi_products-field_weight'] = array(
+    'field_config' => array(
+      'active' => '1',
+      'cardinality' => '1',
+      'deleted' => '0',
+      'entity_types' => array(),
+      'field_name' => 'field_weight',
+      'foreign keys' => array(),
+      'indexes' => array(
+        'weight' => array(
+          0 => 'weight',
+        ),
+      ),
+      'locked' => '1',
+      'module' => 'physical',
+      'settings' => array(
+        'entity_translation_sync' => FALSE,
+      ),
+      'translatable' => '0',
+      'type' => 'physical_weight',
+    ),
+    'field_instance' => array(
+      'bundle' => 'epesi_products',
+      'default_value' => NULL,
+      'deleted' => '0',
+      'description' => '',
+      'display' => array(
+        'add_to_cart_confirmation_view' => array(
+          'label' => 'above',
+          'settings' => array(),
+          'type' => 'hidden',
+          'weight' => 0,
+        ),
+        'default' => array(
+          'label' => 'above',
+          'module' => 'physical',
+          'settings' => array(),
+          'type' => 'physical_weight_formatted',
+          'weight' => 6,
+        ),
+        'line_item' => array(
+          'label' => 'above',
+          'settings' => array(),
+          'type' => 'hidden',
+          'weight' => 0,
+        ),
+        'node_teaser' => array(
+          'label' => 'above',
+          'settings' => array(),
+          'type' => 'hidden',
+          'weight' => 0,
+        ),
+        'product_in_cart' => array(
+          'label' => 'above',
+          'settings' => array(),
+          'type' => 'hidden',
+          'weight' => 0,
+        ),
+      ),
+      'entity_type' => 'commerce_product',
+      'fences_wrapper' => '',
+      'field_name' => 'field_weight',
+      'label' => 'Weight',
+      'required' => 0,
+      'settings' => array(
+        'entity_translation_sync' => FALSE,
+        'user_register_form' => FALSE,
+      ),
+      'widget' => array(
+        'active' => 1,
+        'module' => 'physical',
+        'settings' => array(
+          'default_unit' => 'lb',
+          'unit_select_list' => 1,
+        ),
+        'type' => 'physical_weight_textfield',
+        'weight' => '39',
+      ),
+    ),
+  );
+
+  // Exported field: 'node-epesi_products-body'.
+  $fields['node-epesi_products-body'] = array(
+    'field_config' => array(
+      'active' => '1',
+      'cardinality' => '1',
+      'deleted' => '0',
+      'entity_types' => array(
+        0 => 'node',
+      ),
+      'field_name' => 'body',
+      'foreign keys' => array(
+        'format' => array(
+          'columns' => array(
+            'format' => 'format',
+          ),
+          'table' => 'filter_format',
+        ),
+      ),
+      'indexes' => array(
+        'format' => array(
+          0 => 'format',
+        ),
+      ),
+      'locked' => '0',
+      'module' => 'text',
+      'settings' => array(
+        'entity_translation_sync' => FALSE,
+      ),
+      'translatable' => '1',
+      'type' => 'text_with_summary',
+    ),
+    'field_instance' => array(
+      'bundle' => 'epesi_products',
+      'default_value' => NULL,
+      'deleted' => '0',
+      'description' => '',
+      'display' => array(
+        'default' => array(
+          'label' => 'hidden',
+          'module' => 'text',
+          'settings' => array(),
+          'type' => 'text_default',
+          'weight' => '1',
+        ),
+        'full' => array(
+          'label' => 'hidden',
+          'module' => 'text',
+          'settings' => array(),
+          'type' => 'text_default',
+          'weight' => '4',
+        ),
+        'product_in_cart' => array(
+          'label' => 'above',
+          'settings' => array(),
+          'type' => 'hidden',
+          'weight' => 0,
+        ),
+        'product_list' => array(
+          'label' => 'above',
+          'settings' => array(),
+          'type' => 'hidden',
+          'weight' => '10',
+        ),
+        'teaser' => array(
+          'label' => 'hidden',
+          'module' => 'text',
+          'settings' => array(
+            'trim_length' => 600,
+          ),
+          'type' => 'text_summary_or_trimmed',
+          'weight' => 0,
+        ),
+      ),
+      'entity_type' => 'node',
+      'fences_wrapper' => '',
+      'field_name' => 'body',
+      'label' => 'Body',
+      'required' => 0,
+      'settings' => array(
+        'display_summary' => 0,
+        'entity_translation_sync' => FALSE,
+        'text_processing' => '1',
+        'user_register_form' => FALSE,
+      ),
+      'widget' => array(
+        'active' => 1,
+        'module' => 'text',
+        'settings' => array(
+          'rows' => '20',
+          'summary_rows' => 5,
+        ),
+        'type' => 'text_textarea_with_summary',
+        'weight' => '1',
+      ),
+    ),
+  );
+
+  // Exported field: 'node-epesi_products-field_manufacturer'.
+  $fields['node-epesi_products-field_manufacturer'] = array(
+    'field_config' => array(
+      'active' => '1',
+      'cardinality' => '1',
+      'deleted' => '0',
+      'entity_types' => array(),
+      'field_name' => 'field_manufacturer',
+      'foreign keys' => array(
+        'tid' => array(
+          'columns' => array(
+            'tid' => 'tid',
+          ),
+          'table' => 'taxonomy_term_data',
+        ),
+      ),
+      'indexes' => array(
+        'tid' => array(
+          0 => 'tid',
+        ),
+      ),
+      'locked' => '1',
+      'module' => 'taxonomy',
+      'settings' => array(
+        'allowed_values' => array(
+          0 => array(
+            'vocabulary' => 'epesi_manufacturer',
+            'parent' => '0',
+          ),
+        ),
+      ),
+      'translatable' => '0',
+      'type' => 'taxonomy_term_reference',
+    ),
+    'field_instance' => array(
+      'bundle' => 'epesi_products',
+      'default_value' => NULL,
+      'deleted' => '0',
+      'description' => '',
+      'display' => array(
+        'default' => array(
+          'label' => 'above',
+          'module' => 'taxonomy',
+          'settings' => array(),
+          'type' => 'taxonomy_term_reference_link',
+          'weight' => '7',
+        ),
+        'full' => array(
+          'label' => 'hidden',
+          'module' => 'taxonomy',
+          'settings' => array(),
+          'type' => 'taxonomy_term_reference_plain',
+          'weight' => '2',
+        ),
+        'product_in_cart' => array(
+          'label' => 'above',
+          'settings' => array(),
+          'type' => 'hidden',
+          'weight' => 0,
+        ),
+        'product_list' => array(
+          'label' => 'above',
+          'settings' => array(),
+          'type' => 'hidden',
+          'weight' => '13',
+        ),
+        'teaser' => array(
+          'label' => 'above',
+          'settings' => array(),
+          'type' => 'hidden',
+          'weight' => 0,
+        ),
+      ),
+      'entity_type' => 'node',
+      'field_name' => 'field_manufacturer',
+      'label' => 'Manufacturer',
+      'required' => 0,
+      'settings' => array(
+        'user_register_form' => FALSE,
+      ),
+      'widget' => array(
+        'active' => 1,
+        'module' => 'options',
+        'settings' => array(
+          'apply_chosen' => 0,
+        ),
+        'type' => 'options_select',
+        'weight' => '7',
+      ),
+    ),
+  );
+
+  // Exported field: 'node-epesi_products-field_epesi_category'.
+  $fields['node-epesi_products-field_epesi_category'] = array(
+    'field_config' => array(
+      'active' => '1',
+      'cardinality' => '-1',
+      'deleted' => '0',
+      'entity_types' => array(),
+      'field_name' => 'field_epesi_category',
+      'foreign keys' => array(
+        'tid' => array(
+          'columns' => array(
+            'tid' => 'tid',
+          ),
+          'table' => 'taxonomy_term_data',
+        ),
+      ),
+      'indexes' => array(
+        'tid' => array(
+          0 => 'tid',
+        ),
+      ),
+      'locked' => '1',
+      'module' => 'taxonomy',
+      'settings' => array(
+        'allowed_values' => array(
+          0 => array(
+            'vocabulary' => 'epesi_category',
+            'parent' => '0',
+          ),
+        ),
+      ),
+      'translatable' => '0',
+      'type' => 'taxonomy_term_reference',
+    ),
+    'field_instance' => array(
+      'bundle' => 'epesi_products',
+      'default_value' => NULL,
+      'deleted' => '0',
+      'description' => '',
+      'display' => array(
+        'default' => array(
+          'label' => 'above',
+          'module' => 'taxonomy',
+          'settings' => array(),
+          'type' => 'taxonomy_term_reference_link',
+          'weight' => '6',
+        ),
+        'full' => array(
+          'label' => 'above',
+          'settings' => array(),
+          'type' => 'hidden',
+          'weight' => '13',
+        ),
+        'product_in_cart' => array(
+          'label' => 'above',
+          'settings' => array(),
+          'type' => 'hidden',
+          'weight' => 0,
+        ),
+        'product_list' => array(
+          'label' => 'above',
+          'settings' => array(),
+          'type' => 'hidden',
+          'weight' => '11',
+        ),
+        'teaser' => array(
+          'label' => 'above',
+          'settings' => array(),
+          'type' => 'hidden',
+          'weight' => 0,
+        ),
+      ),
+      'entity_type' => 'node',
+      'field_name' => 'field_epesi_category',
+      'label' => 'Category',
+      'required' => 0,
+      'settings' => array(
+        'user_register_form' => FALSE,
+      ),
+      'widget' => array(
+        'active' => 1,
+        'module' => 'options',
+        'settings' => array(
+          'apply_chosen' => 0,
+        ),
+        'type' => 'options_select',
+        'weight' => '4',
+      ),
+    ),
+  );
+
+  // Exported field: 'node-epesi_products-field_product'.
+  $fields['node-epesi_products-field_product'] = array(
+    'field_config' => array(
+      'active' => '1',
+      'cardinality' => '-1',
+      'deleted' => '0',
+      'entity_types' => array(),
+      'field_name' => 'field_product',
+      'foreign keys' => array(
+        'product_id' => array(
+          'columns' => array(
+            'product_id' => 'product_id',
+          ),
+          'table' => 'commerce_product',
+        ),
+      ),
+      'indexes' => array(
+        'product_id' => array(
+          0 => 'product_id',
+        ),
+      ),
+      'locked' => '0',
+      'module' => 'commerce_product_reference',
+      'settings' => array(
+        'options_list_limit' => NULL,
+      ),
+      'translatable' => '0',
+      'type' => 'commerce_product_reference',
+    ),
+    'field_instance' => array(
+      'bundle' => 'epesi_products',
+      'deleted' => '0',
+      'description' => '',
+      'display' => array(
+        'default' => array(
+          'label' => 'above',
+          'module' => 'commerce_cart',
+          'settings' => array(
+            'attributes_single' => 1,
+            'combine' => 1,
+            'default_quantity' => '1',
+            'line_item_type' => 0,
+            'show_quantity' => 1,
+            'show_single_product_attributes' => FALSE,
+          ),
+          'type' => 'commerce_cart_add_to_cart_form',
+          'weight' => '3',
+        ),
+        'full' => array(
+          'label' => 'hidden',
+          'module' => 'commerce_cart',
+          'settings' => array(
+            'combine' => 1,
+            'default_quantity' => '1',
+            'line_item_type' => 0,
+            'show_quantity' => 1,
+            'show_single_product_attributes' => FALSE,
+          ),
+          'type' => 'commerce_cart_add_to_cart_form',
+          'weight' => '5',
+        ),
+        'product_in_cart' => array(
+          'label' => 'above',
+          'settings' => array(),
+          'type' => 'hidden',
+          'weight' => 0,
+        ),
+        'product_list' => array(
+          'label' => 'hidden',
+          'module' => 'field_extractor',
+          'settings' => array(
+            'field_name' => 'field_color',
+            'formatter' => 'entityreference_entity_view',
+            'settings' => array(
+              'links' => 1,
+              'view_mode' => 'add_to_cart_form',
+            ),
+          ),
+          'type' => 'field_extractor',
+          'weight' => '9',
+        ),
+        'teaser' => array(
+          'label' => 'above',
+          'settings' => array(),
+          'type' => 'hidden',
+          'weight' => 0,
+        ),
+      ),
+      'entity_type' => 'node',
+      'fences_wrapper' => 'div',
+      'field_name' => 'field_product',
+      'label' => 'Product variations',
+      'required' => 1,
+      'settings' => array(
+        'field_injection' => 1,
+        'referenceable_types' => array(
+          'epesi_products' => 'epesi_products',
+        ),
+        'user_register_form' => FALSE,
+      ),
+      'widget' => array(
+        'active' => 1,
+        'module' => 'inline_entity_form',
+        'settings' => array(
+          'fields' => array(),
+          'type_settings' => array(
+            'allow_existing' => 0,
+            'autogenerate_title' => 1,
+            'delete_references' => 1,
+            'match_operator' => 'CONTAINS',
+            'use_variation_language' => 1,
+          ),
+        ),
+        'type' => 'inline_entity_form',
+        'weight' => '2',
+      ),
+    ),
+  );
+
+  // Exported field: 'node-epesi_products-title_field'.
+  $fields['node-epesi_products-title_field'] = array(
+    'field_config' => array(
+      'active' => '1',
+      'cardinality' => '1',
+      'deleted' => '0',
+      'entity_types' => array(),
+      'field_name' => 'title_field',
+      'foreign keys' => array(
+        'format' => array(
+          'columns' => array(
+            'format' => 'format',
+          ),
+          'table' => 'filter_format',
+        ),
+      ),
+      'indexes' => array(
+        'format' => array(
+          0 => 'format',
+        ),
+      ),
+      'locked' => '0',
+      'module' => 'text',
+      'settings' => array(
+        'max_length' => 255,
+      ),
+      'translatable' => '1',
+      'type' => 'text',
+    ),
+    'field_instance' => array(
+      'bundle' => 'epesi_products',
+      'default_value' => NULL,
+      'deleted' => '0',
+      'description' => '',
+      'display' => array(
+        'default' => array(
+          'label' => 'above',
+          'settings' => array(),
+          'type' => 'hidden',
+          'weight' => 8,
+        ),
+        'full' => array(
+          'label' => 'hidden',
+          'module' => 'text',
+          'settings' => array(),
+          'type' => 'text_default',
+          'weight' => '0',
+        ),
+        'product_list' => array(
+          'label' => 'hidden',
+          'module' => 'title',
+          'settings' => array(
+            'title_class' => '',
+            'title_link' => 'content',
+            'title_style' => '_none',
+          ),
+          'type' => 'title_linked',
+          'weight' => '1',
+        ),
+        'teaser' => array(
+          'label' => 'above',
+          'settings' => array(),
+          'type' => 'hidden',
+          'weight' => 0,
+        ),
+      ),
+      'entity_type' => 'node',
+      'fences_wrapper' => 'h2',
+      'field_name' => 'title_field',
+      'label' => 'Title',
+      'required' => 1,
+      'settings' => array(
+        'hide_label' => array(
+          'entity' => 0,
+          'page' => 0,
+        ),
+        'text_processing' => '0',
+        'user_register_form' => FALSE,
+      ),
+      'widget' => array(
+        'active' => 1,
+        'module' => 'text',
+        'settings' => array(
+          'size' => '60',
+        ),
+        'type' => 'text_textfield',
+        'weight' => -5,
+      ),
+    ),
+  );
+
+  // Exported field: 'taxonomy_term-epesi_category-field_epesi_category_id'.
+  $fields['taxonomy_term-epesi_category-field_epesi_category_id'] = array(
+    'field_config' => array(
+      'active' => '1',
+      'cardinality' => '1',
+      'deleted' => '0',
+      'entity_types' => array(),
+      'field_name' => 'field_epesi_category_id',
+      'foreign keys' => array(
+        'format' => array(
+          'columns' => array(
+            'format' => 'format',
+          ),
+          'table' => 'filter_format',
+        ),
+      ),
+      'indexes' => array(
+        'format' => array(
+          0 => 'format',
+        ),
+      ),
+      'locked' => '1',
+      'module' => 'text',
+      'settings' => array(
+        'max_length' => '7',
+      ),
+      'translatable' => '0',
+      'type' => 'text',
+    ),
+    'field_instance' => array(
+      'bundle' => 'epesi_category',
+      'default_value' => array(
+        0 => array(
+          'value' => '',
+        ),
+      ),
+      'deleted' => '0',
+      'description' => '',
+      'display' => array(
+        'add_to_cart_form' => array(
+          'label' => 'above',
+          'settings' => array(),
+          'type' => 'hidden',
+          'weight' => 0,
+        ),
+        'default' => array(
+          'label' => 'above',
+          'module' => 'text',
+          'settings' => array(),
+          'type' => 'text_default',
+          'weight' => 0,
+        ),
+      ),
+      'entity_type' => 'taxonomy_term',
+      'field_name' => 'field_epesi_category_id',
+      'label' => 'Epesi Category ID',
+      'required' => 0,
+      'settings' => array(
+        'text_processing' => '0',
+        'user_register_form' => FALSE,
+      ),
+      'widget' => array(
+        'active' => 1,
+        'module' => 'text',
+        'settings' => array(
+          'size' => '7',
+        ),
+        'type' => 'text_textfield',
+        'weight' => '1',
+      ),
+    ),
+  );
+
+  // Exported field: 'taxonomy_term-epesi_manufacturer-field_epesi_manufacturer_id'.
+  $fields['taxonomy_term-epesi_manufacturer-field_epesi_manufacturer_id'] = array(
+    'field_config' => array(
+      'active' => '1',
+      'cardinality' => '1',
+      'deleted' => '0',
+      'entity_types' => array(),
+      'field_name' => 'field_epesi_manufacturer_id',
+      'foreign keys' => array(
+        'format' => array(
+          'columns' => array(
+            'format' => 'format',
+          ),
+          'table' => 'filter_format',
+        ),
+      ),
+      'indexes' => array(
+        'format' => array(
+          0 => 'format',
+        ),
+      ),
+      'locked' => '1',
+      'module' => 'text',
+      'settings' => array(
+        'max_length' => '7',
+      ),
+      'translatable' => '0',
+      'type' => 'text',
+    ),
+    'field_instance' => array(
+      'bundle' => 'epesi_manufacturer',
+      'default_value' => array(
+        0 => array(
+          'value' => '',
+        ),
+      ),
+      'deleted' => '0',
+      'description' => '',
+      'display' => array(
+        'add_to_cart_form' => array(
+          'label' => 'above',
+          'settings' => array(),
+          'type' => 'hidden',
+          'weight' => 0,
+        ),
+        'default' => array(
+          'label' => 'above',
+          'module' => 'text',
+          'settings' => array(),
+          'type' => 'text_default',
+          'weight' => 0,
+        ),
+      ),
+      'entity_type' => 'taxonomy_term',
+      'field_name' => 'field_epesi_manufacturer_id',
+      'label' => 'Manufacturer',
+      'required' => 0,
+      'settings' => array(
+        'text_processing' => '0',
+        'user_register_form' => FALSE,
+      ),
+      'widget' => array(
+        'active' => 1,
+        'module' => 'text',
+        'settings' => array(
+          'size' => '7',
+        ),
+        'type' => 'text_textfield',
+        'weight' => '1',
+      ),
+    ),
+  );
+
+  // Translatables
+  // Included for use with string extractors like potx.
+  t('Body');
+  t('Manufacturer');
+  t('Category');
+  t('Image');
+  t('Price');
+  t('Product variations');
+  t('Title');
+  t('Dimensions');
+  t('Weight');
+
+  return $fields;
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/epesi_commerce.features.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/epesi_commerce.features.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/epesi_commerce.features.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/epesi_commerce.features.inc	2014-04-16 14:25:45.000000000 +0200
@@ -0,0 +1,130 @@
+<?php
+/**
+ * @file
+ * epesi_commerce.features.inc
+ */
+
+/**
+ * Implements hook_commerce_product_default_types().
+ */
+function epesi_commerce_commerce_product_default_types() {
+  $items = array(
+    'epesi_products' => array(
+      'type' => 'epesi_products',
+      'name' => 'Epesi Products',
+      'description' => '<em>Epesi Products</em> are products exported from Epesi Warehouse.',
+      'help' => '',
+      'revision' => '0',
+    ),
+  );
+  return $items;
+}
+
+/**
+ * Implements hook_ctools_plugin_api().
+ */
+function epesi_commerce_ctools_plugin_api() {
+  list($module, $api) = func_get_args();
+  if ($module == "strongarm" && $api == "strongarm") {
+    return array("version" => "1");
+  }
+}
+
+/**
+ * Implements hook_image_default_styles().
+ */
+function epesi_commerce_image_default_styles() {
+  $styles = array();
+
+  // Exported image style: product_full.
+  $styles['product_full'] = array(
+    'name' => 'product_full',
+    'effects' => array(
+      1 => array(
+        'label' => 'Scale and crop',
+        'help' => 'Scale and crop will maintain the aspect-ratio of the original image, then crop the larger dimension. This is most useful for creating perfectly square thumbnails without stretching the image.',
+        'effect callback' => 'image_scale_and_crop_effect',
+        'dimensions callback' => 'image_resize_dimensions',
+        'form callback' => 'image_resize_form',
+        'summary theme' => 'image_resize_summary',
+        'module' => 'image',
+        'name' => 'image_scale_and_crop',
+        'data' => array(
+          'width' => '400',
+          'height' => '550',
+        ),
+        'weight' => '1',
+      ),
+    ),
+  );
+
+  // Exported image style: product_medium.
+  $styles['product_medium'] = array(
+    'name' => 'product_medium',
+    'effects' => array(
+      1 => array(
+        'label' => 'Scale and crop',
+        'help' => 'Scale and crop will maintain the aspect-ratio of the original image, then crop the larger dimension. This is most useful for creating perfectly square thumbnails without stretching the image.',
+        'effect callback' => 'image_scale_and_crop_effect',
+        'dimensions callback' => 'image_resize_dimensions',
+        'form callback' => 'image_resize_form',
+        'summary theme' => 'image_resize_summary',
+        'module' => 'image',
+        'name' => 'image_scale_and_crop',
+        'data' => array(
+          'width' => '230',
+          'height' => '260',
+        ),
+        'weight' => '1',
+      ),
+    ),
+  );
+
+  // Exported image style: product_thumbnail.
+  $styles['product_thumbnail'] = array(
+    'name' => 'product_thumbnail',
+    'effects' => array(
+      1 => array(
+        'label' => 'Scale and crop',
+        'help' => 'Scale and crop will maintain the aspect-ratio of the original image, then crop the larger dimension. This is most useful for creating perfectly square thumbnails without stretching the image.',
+        'effect callback' => 'image_scale_and_crop_effect',
+        'dimensions callback' => 'image_resize_dimensions',
+        'form callback' => 'image_resize_form',
+        'summary theme' => 'image_resize_summary',
+        'module' => 'image',
+        'name' => 'image_scale_and_crop',
+        'data' => array(
+          'width' => '110',
+          'height' => '130',
+        ),
+        'weight' => '1',
+      ),
+    ),
+  );
+
+  return $styles;
+}
+
+/**
+ * Implements hook_node_info().
+ */
+function epesi_commerce_node_info() {
+  $items = array(
+    'epesi_products' => array(
+      'name' => t('Epesi Products'),
+      'base' => 'node_content',
+      'description' => t('A <em>Epesi Priducts</em> is a content type which contain product variations.'),
+      'has_title' => '1',
+      'title_label' => t('Title'),
+      'help' => '',
+    ),
+  );
+  return $items;
+}
+
+/**
+ * Implements hook_views_api().
+ */
+function epesi_commerce_views_api() {
+  return array("version" => "3.0");
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/epesi_commerce.features.taxonomy.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/epesi_commerce.features.taxonomy.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/epesi_commerce.features.taxonomy.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/epesi_commerce.features.taxonomy.inc	2014-04-16 14:25:45.000000000 +0200
@@ -0,0 +1,29 @@
+<?php
+/**
+ * @file
+ * epesi_commerce.features.taxonomy.inc
+ */
+
+/**
+ * Implements hook_taxonomy_default_vocabularies().
+ */
+function epesi_commerce_taxonomy_default_vocabularies() {
+  return array(
+    'epesi_manufacturer' => array(
+      'name' => 'Manufacturer',
+      'machine_name' => 'epesi_manufacturer',
+      'description' => '',
+      'hierarchy' => '0',
+      'module' => 'taxonomy',
+      'weight' => '0',
+    ),
+    'epesi_category' => array(
+      'name' => 'Epesi Category',
+      'machine_name' => 'epesi_category',
+      'description' => '',
+      'hierarchy' => '0',
+      'module' => 'taxonomy',
+      'weight' => '0',
+    ),
+  );
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/epesi_commerce.features.user_permission.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/epesi_commerce.features.user_permission.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/epesi_commerce.features.user_permission.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/epesi_commerce.features.user_permission.inc	2014-04-16 14:25:45.000000000 +0200
@@ -0,0 +1,36 @@
+<?php
+/**
+ * @file
+ * epesi_commerce.features.user_permission.inc
+ */
+
+/**
+ * Implements hook_user_default_permissions().
+ */
+function epesi_commerce_user_default_permissions() {
+  $permissions = array();
+
+  // Exported permission: view any commerce_product entity of bundle shoes.
+  $permissions['view any commerce_product entity of bundle epesi_products'] = array(
+    'name' => 'view any commerce_product entity of bundle epesi_products',
+    'roles' => array(
+      0 => 'administrator',
+      1 => 'anonymous user',
+      2 => 'authenticated user',
+    ),
+    'module' => 'commerce_product',
+  );
+
+  // Exported permission: view own commerce_product entities of bundle shoes.
+  $permissions['view own commerce_product entities of bundle epesi_products'] = array(
+    'name' => 'view own commerce_product entities of bundle epesi_products',
+    'roles' => array(
+      0 => 'administrator',
+      1 => 'anonymous user',
+      2 => 'authenticated user',
+    ),
+    'module' => 'commerce_product',
+  );
+
+  return $permissions;
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/epesi_commerce.info drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/epesi_commerce.info
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/epesi_commerce.info	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/epesi_commerce.info	2014-06-26 15:47:24.000000000 +0200
@@ -0,0 +1,76 @@
+name = Epesi Commerce connector
+description = Defines Services resources for Epesi Commerce entities and systems.
+package = Services
+dependencies[] = ctools
+dependencies[] = views
+dependencies[] = entity
+dependencies[] = entity_translation
+#dependencies[] = i18n_node
+#dependencies[] = i18n_taxonomy
+#dependencies[] = i18n_menu
+dependencies[] = title
+dependencies[] = services
+dependencies[] = services_entity
+dependencies[] = services_views
+dependencies[] = services_entity_translation
+dependencies[] = rest_server
+dependencies[] = physical
+dependencies[] = commerce_cart
+dependencies[] = commerce_extra_price_formatters
+dependencies[] = commerce_fancy_attributes
+dependencies[] = commerce_features
+dependencies[] = commerce_flat_rate
+dependencies[] = commerce_price
+dependencies[] = commerce_product
+dependencies[] = commerce_product_reference
+dependencies[] = commerce_product_ui
+dependencies[] = commerce_services
+dependencies[] = commerce_stock
+dependencies[] = commerce_stock_ui
+dependencies[] = commerce_ss
+dependencies[] = commerce_ssr
+dependencies[] = commerce_multicurrency
+dependencies[] = commerce_physical
+features[commerce_product_type][] = epesi_products
+features[field][] = commerce_product-epesi_products-commerce_price
+features[field][] = commerce_product-epesi_products-field_images
+features[field][] = commerce_product-epesi_products-title_field
+features[field][] = commerce_product-epesi_products-field_dimensions
+features[field][] = commerce_product-epesi_products-field_weight
+features[field][] = node-epesi_products-body
+features[field][] = node-epesi_products-field_epesi_manufacturer
+features[field][] = node-epesi_products-field_epesi_category
+features[field][] = node-epesi_products-field_product
+features[field][] = node-epesi_products-title_field
+features[field][] = taxonomy_term-epesi_category-field_epesi_category_id
+features[field][] = taxonomy_term-epesi_manufacturer-field_epesi_manufacturer_id
+features[image][] = product_full
+features[image][] = product_medium
+features[image][] = product_thumbnail
+features[node][] = epesi_products
+features[taxonomy][] = epesi_category
+features[taxonomy][] = epesi_manufacturer
+features[user_permission][] = view any commerce_product entity of bundle epesi_products
+features[user_permission][] = view own commerce_product entities of bundle epesi_products
+features[variable][] = comment_epesi_products
+features[variable][] = field_bundle_settings_commerce_product__epesi_products
+features[variable][] = field_bundle_settings_node__epesi_products
+features[variable][] = menu_options_epesi_products
+features[variable][] = node_options_epesi_products
+features[variable][] = node_submitted_epesi_products
+features[variable][] = pathauto_node_epesi_products_pattern
+features[variable][] = pathauto_punctuation_hyphen
+features[variable][] = pathauto_taxonomy_term_epesi_category_pattern
+features[variable][] = pathauto_taxonomy_term_manufacturer_pattern
+features[ctools][] = views:views_default:3.0
+features[features_api][] = api:1
+features[views_view][] = epesi_product_images_search_by_filename
+features[views_view][] = epesi_products_search_by_product_id
+core = 7.x
+
+; Information added by drupal.org packaging script on 2013-05-22
+version = "7.x-1.0"
+core = "7.x"
+project = "epesi_commerce"
+project status url = http://drupal.epe.si
+datestamp = "1403782451"
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/epesi_commerce.install drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/epesi_commerce.install
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/epesi_commerce.install	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/epesi_commerce.install	2014-06-26 12:47:01.000000000 +0200
@@ -0,0 +1,275 @@
+<?php
+
+/**
+ * Implements hook_enable().
+ *
+ * Rebuilds the feature immediately after it's enabled.
+ */
+function epesi_commerce_enable() {
+  // Rebuild the features static caches.
+  features_include(TRUE);
+
+  $module = 'epesi_commerce';
+  $feature = feature_load($module);
+  $items[$module] = array_keys($feature->info['features']);
+  _features_restore('enable', $items);
+  _features_restore('rebuild', $items);
+
+  //convert title and description to be translatable
+  $name = 'epesi_category';
+  $entity_type = 'taxonomy_term';
+  foreach (title_field_replacement_info($entity_type) as $legacy_field => $info) {
+    title_field_replacement_toggle($entity_type, $name, $legacy_field);
+  }
+  
+  module_load_include('inc', 'commerce_ss', 'includes/commerce_ss.admin');
+  commerce_ss_admin_create_instance('commerce_stock', 'number_decimal', TRUE, 'commerce_product', 'epesi_products', t('Stock'));
+
+  $enabled = array_filter(variable_get('entity_translation_entity_types', array()));
+  $enabled['taxonomy_term'] = 'taxonomy_term';
+  variable_set('entity_translation_entity_types', $enabled);
+}
+
+/**
+ * Implements of hook_install()
+ */
+function epesi_commerce_install() {
+  db_update('system')
+    ->fields(array('weight' => 10))
+    ->condition('name', 'epesi_commerce')
+    ->execute();
+    
+
+$endpoint = new stdClass();
+$endpoint->disabled = FALSE; /* Edit this to true to make a default endpoint disabled initially */
+$endpoint->api_version = 3;
+$endpoint->name = 'epesi';
+$endpoint->server = 'rest_server';
+$endpoint->path = 'epesi';
+$endpoint->authentication = array(
+  'services' => 'services',
+);
+$endpoint->server_settings = array(
+  'formatters' => array(
+    'bencode' => TRUE,
+    'json' => TRUE,
+    'php' => TRUE,
+    'xml' => TRUE,
+    'jsonp' => FALSE,
+  ),
+  'parsers' => array(
+    'application/json' => TRUE,
+    'application/vnd.php.serialized' => TRUE,
+    'application/xml' => TRUE,
+    'multipart/form-data' => TRUE,
+    'text/xml' => TRUE,
+    'application/x-www-form-urlencoded' => FALSE,
+  ),
+);
+$endpoint->resources = array(
+  'product-display' => array(
+    'operations' => array(
+      'index' => array(
+        'enabled' => '1',
+      ),
+      'retrieve' => array(
+        'enabled' => '1',
+      ),
+    ),
+  ),
+  'product' => array(
+    'operations' => array(
+      'index' => array(
+        'enabled' => '1',
+      ),
+      'retrieve' => array(
+        'enabled' => '1',
+      ),
+      'create' => array(
+        'enabled' => '1',
+      ),
+      'update' => array(
+        'enabled' => '1',
+      ),
+      'delete' => array(
+        'enabled' => '1',
+      ),
+    ),
+  ),
+  'order' => array(
+    'operations' => array(
+      'index' => array(
+        'enabled' => '1',
+      ),
+      'retrieve' => array(
+        'enabled' => '1',
+      ),
+      'update' => array(
+        'enabled' => '1',
+      ),
+      'delete' => array(
+        'enabled' => '1',
+      ),
+    ),
+    'relationships' => array(
+      'line-items' => array(
+        'enabled' => '1',
+      ),
+    ),
+  ),
+  'line-item' => array(
+    'operations' => array(
+      'index' => array(
+        'enabled' => '1',
+      ),
+      'retrieve' => array(
+        'enabled' => '1',
+      ),
+      'create' => array(
+        'enabled' => '1',
+      ),
+      'update' => array(
+        'enabled' => '1',
+      ),
+      'delete' => array(
+        'enabled' => '1',
+      ),
+    ),
+  ),
+  'file' => array(
+    'operations' => array(
+      'create' => array(
+        'enabled' => '1',
+      ),
+    ),
+    'actions' => array(
+      'create_raw' => array(
+        'enabled' => '1',
+      ),
+    ),
+  ),
+  'entity_node' => array(
+    'operations' => array(
+      'retrieve' => array(
+        'enabled' => '1',
+      ),
+      'create' => array(
+        'enabled' => '1',
+      ),
+      'update' => array(
+        'enabled' => '1',
+      ),
+      'delete' => array(
+        'enabled' => '1',
+      ),
+      'index' => array(
+        'enabled' => '1',
+      ),
+    ),
+    'relationships' => array(
+      'files' => array(
+        'enabled' => '1',
+      ),
+      'comments' => array(
+        'enabled' => '1',
+      ),
+    ),
+    'targeted_actions' => array(
+      'attach_file' => array(
+        'enabled' => '1',
+      ),
+    ),
+  ),
+  'taxonomy_term' => array(
+    'operations' => array(
+      'retrieve' => array(
+        'enabled' => '1',
+      ),
+      'create' => array(
+        'enabled' => '1',
+      ),
+      'update' => array(
+        'enabled' => '1',
+      ),
+      'delete' => array(
+        'enabled' => '1',
+      ),
+      'index' => array(
+        'enabled' => '1',
+      ),
+    ),
+    'actions' => array(
+      'selectNodes' => array(
+        'enabled' => '1',
+      ),
+    ),
+  ),
+  'taxonomy_vocabulary' => array(
+    'operations' => array(
+      'index' => array(
+        'enabled' => '1',
+      ),
+    ),
+    'actions' => array(
+      'getTree' => array(
+        'enabled' => '1',
+      ),
+    ),
+  ),
+  'user' => array(
+    'operations' => array(
+      'retrieve' => array(
+        'enabled' => '1',
+      ),
+    ),
+    'actions' => array(
+      'login' => array(
+        'enabled' => '1',
+        'settings' => array(
+          'services' => array(
+            'resource_api_version' => '1.0',
+          ),
+        ),
+      ),
+      'logout' => array(
+        'enabled' => '1',
+        'settings' => array(
+          'services' => array(
+            'resource_api_version' => '1.0',
+          ),
+        ),
+      ),
+      'token' => array(
+        'enabled' => '1',
+      ),
+    ),
+  ),
+  'entity_translation' => array(
+    'actions' => array(
+      'translate' => array(
+        'enabled' => '1',
+      ),
+    ),
+  ),
+  'epesi_commerce' => array(
+    'actions'=> array(
+      'get_product_fields' => array(
+        'enabled' => '1',
+      ),
+      'get_node_fields' => array(
+        'enabled' => '1',
+      ),
+    ),
+  ),
+  'views' => array(
+    'operations' => array(
+      'retrieve' => array(
+        'enabled' => '1',
+      ),
+    ),
+  ),
+);
+$endpoint->debug = 0;
+
+  services_endpoint_save($endpoint);
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/epesi_commerce.module drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/epesi_commerce.module
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/epesi_commerce.module	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/epesi_commerce.module	2014-04-16 14:25:45.000000000 +0200
@@ -0,0 +1,21 @@
+<?php
+
+include_once 'epesi_commerce.features.inc';
+
+function epesi_commerce_views_default_views() {
+  // Check for all view file in views directory
+  $files = file_scan_directory(drupal_get_path('module', 'epesi_commerce') . '/views', '/.*\.inc$/');
+  
+  // Add view to list of views
+  $views = array();
+  foreach ($files as $filepath => $file) {
+      $view = null;
+      require $filepath;
+      if (isset($view)) {
+        $views[$view->name] = $view;
+      }
+  }
+  
+  // At the end, return array of default views.
+  return $views;
+}
\ Brak znaku nowej linii na końcu pliku
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/epesi_commerce.resources.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/epesi_commerce.resources.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/epesi_commerce.resources.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/epesi_commerce.resources.inc	2014-06-26 12:47:01.000000000 +0200
@@ -0,0 +1,11 @@
+<?php
+
+function _epesi_commerce_resource_get_product_fields() {
+	$fields = field_info_instances("commerce_product", "epesi_products");
+	return array_keys($fields);
+}
+
+function _epesi_commerce_resource_get_node_fields() {
+	$fields = field_info_instances("node", "epesi_products");
+	return array_keys($fields);
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/epesi_commerce.rules_defaults.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/epesi_commerce.rules_defaults.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/epesi_commerce.rules_defaults.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/epesi_commerce.rules_defaults.inc	2014-04-16 14:25:45.000000000 +0200
@@ -0,0 +1,42 @@
+<?php
+function epesi_commerce_default_rules_configuration() {
+  $configs = array();
+  $rule = '{ "commerce_multicurrency_set_currency_price_eur" : {
+  "LABEL" : "Set the currency price to EUR",
+  "PLUGIN" : "reaction rule",
+  "WEIGHT" : "-9",
+  "REQUIRES" : [ "rules", "commerce_line_item", "commerce_product_reference" ],
+  "ON" : [ "commerce_product_calculate_sell_price" ],
+  "IF" : [
+  { "data_is" : { "data" : [ "site:commerce-currency" ], "value" : "EUR" } },
+  { "entity_has_field" : { "entity" : [ "commerce-line-item" ], "field" : "commerce_product" } },
+  { "entity_has_field" : {
+  "entity" : [ "commerce-line-item:commerce-product" ],
+  "field" : "commerce_price_eur"
+  }
+  },
+  { "NOT data_is_empty" : { "data" : [ "commerce-line-item:commerce-product:commerce-price-eur" ] } }
+  ],
+  "DO" : [
+  { "commerce_line_item_unit_price_amount" : {
+  "commerce_line_item" : [ "commerce-line-item" ],
+  "amount" : [ "commerce-line-item:commerce-product:commerce-price-eur:amount" ],
+  "component_name" : "base_price",
+  "round_mode" : "1"
+  }
+  },
+  { "commerce_line_item_unit_price_currency_code" : {
+  "commerce_line_item" : [ "commerce_line_item" ],
+  "currency_code" : "EUR"
+  }
+  }
+  ]
+  }
+  }';
+  $configs['commerce_multicurrency_set_currency_price_eur'] = rules_import($rule);
+  $currencies = array('usd','pln','jpy','gbp','chf','cad','aud','nzd','rub');
+  foreach($currencies as $curr)
+    $configs['commerce_multicurrency_set_currency_price_'.strtolower($curr)] = rules_import(str_replace(array('eur','EUR'),array(strtolower($curr),strtoupper($curr)),$rule));
+  return $configs;
+}
+?>
\ Brak znaku nowej linii na końcu pliku
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/epesi_commerce.services.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/epesi_commerce.services.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/epesi_commerce.services.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/epesi_commerce.services.inc	2014-06-26 12:47:01.000000000 +0200
@@ -0,0 +1,26 @@
+<?php
+
+/**
+ * Implementation of hook_services_resources().
+ */
+function epesi_commerce_services_resources() {
+  $resources = array();
+
+      $resources["epesi_commerce"]['actions']['get_product_fields'] = array(
+        'file' => array('type' => 'inc', 'module' => 'epesi_commerce', 'name' => 'epesi_commerce.resources'),
+        'callback' => '_epesi_commerce_resource_get_product_fields',
+        'description' => "Get available epesi product fields",
+        'args' => array(),
+        'access arguments' => array('access content'),
+      );
+
+      $resources["epesi_commerce"]['actions']['get_node_fields'] = array(
+        'file' => array('type' => 'inc', 'module' => 'epesi_commerce', 'name' => 'epesi_commerce.resources'),
+        'callback' => '_epesi_commerce_resource_get_node_fields',
+        'description' => "Get available epesi product node fields",
+        'args' => array(),
+        'access arguments' => array('access content'),
+      );
+
+  return $resources;
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/epesi_commerce.strongarm.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/epesi_commerce.strongarm.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/epesi_commerce.strongarm.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/epesi_commerce.strongarm.inc	2014-04-16 14:25:45.000000000 +0200
@@ -0,0 +1,273 @@
+<?php
+/**
+ * @file
+ * epesi_commerce.strongarm.inc
+ */
+
+/**
+ * Implements hook_strongarm().
+ */
+function epesi_commerce_strongarm() {
+  $export = array();
+
+  $strongarm = new stdClass();
+  $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
+  $strongarm->api_version = 1;
+  $strongarm->name = 'comment_epesi_products';
+  $strongarm->value = '1';
+  $export['comment_epesi_products'] = $strongarm;
+
+  $strongarm = new stdClass();
+  $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
+  $strongarm->api_version = 1;
+  $strongarm->name = 'field_bundle_settings_commerce_product__epesi_products';
+  $strongarm->value = array(
+    'view_modes' => array(
+      'node_product_list' => array(
+        'custom_settings' => TRUE,
+      ),
+      'line_item' => array(
+        'custom_settings' => TRUE,
+      ),
+      'node_full' => array(
+        'custom_settings' => TRUE,
+      ),
+      'node_teaser' => array(
+        'custom_settings' => TRUE,
+      ),
+      'full' => array(
+        'custom_settings' => FALSE,
+      ),
+      'commerce_line_item_display' => array(
+        'custom_settings' => FALSE,
+      ),
+      'node_rss' => array(
+        'custom_settings' => FALSE,
+      ),
+      'node_search_index' => array(
+        'custom_settings' => FALSE,
+      ),
+      'node_search_result' => array(
+        'custom_settings' => FALSE,
+      ),
+    ),
+    'extra_fields' => array(
+      'form' => array(),
+      'display' => array(
+        'sku' => array(
+          'default' => array(
+            'weight' => '-10',
+            'visible' => TRUE,
+          ),
+          'node_product_list' => array(
+            'weight' => '2',
+            'visible' => FALSE,
+          ),
+          'node_full' => array(
+            'weight' => '0',
+            'visible' => TRUE,
+          ),
+          'product_in_cart' => array(
+            'weight' => '2',
+            'visible' => TRUE,
+          ),
+          'add_to_cart_confirmation_view' => array(
+            'weight' => '1',
+            'visible' => TRUE,
+          ),
+        ),
+        'title' => array(
+          'default' => array(
+            'weight' => '-5',
+            'visible' => TRUE,
+          ),
+          'node_product_list' => array(
+            'weight' => '4',
+            'visible' => FALSE,
+          ),
+          'node_full' => array(
+            'weight' => '3',
+            'visible' => FALSE,
+          ),
+          'product_in_cart' => array(
+            'weight' => '1',
+            'visible' => TRUE,
+          ),
+        ),
+        'status' => array(
+          'product_in_cart' => array(
+            'weight' => '6',
+            'visible' => FALSE,
+          ),
+          'add_to_cart_confirmation_view' => array(
+            'weight' => '4',
+            'visible' => FALSE,
+          ),
+        ),
+      ),
+    ),
+  );
+  $export['field_bundle_settings_commerce_product__epesi_products'] = $strongarm;
+
+  $strongarm = new stdClass();
+  $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
+  $strongarm->api_version = 1;
+  $strongarm->name = 'field_bundle_settings_node__epesi_products';
+  $strongarm->value = array(
+    'view_modes' => array(
+      'full' => array(
+        'custom_settings' => TRUE,
+      ),
+      'teaser' => array(
+        'custom_settings' => TRUE,
+      ),
+      'product_list' => array(
+        'custom_settings' => TRUE,
+      ),
+      'rss' => array(
+        'custom_settings' => FALSE,
+      ),
+      'search_index' => array(
+        'custom_settings' => FALSE,
+      ),
+      'search_result' => array(
+        'custom_settings' => FALSE,
+      ),
+    ),
+    'extra_fields' => array(
+      'form' => array(),
+      'display' => array(
+        'product:sku' => array(
+          'default' => array(
+            'weight' => '-10',
+            'visible' => FALSE,
+          ),
+          'full' => array(
+            'weight' => '1',
+            'visible' => TRUE,
+          ),
+          'product_list' => array(
+            'weight' => '4',
+            'visible' => FALSE,
+          ),
+        ),
+        'product:title' => array(
+          'default' => array(
+            'weight' => '-5',
+            'visible' => FALSE,
+          ),
+          'full' => array(
+            'weight' => '9',
+            'visible' => FALSE,
+          ),
+          'product_list' => array(
+            'weight' => '9',
+            'visible' => FALSE,
+          ),
+        ),
+        'product:commerce_price' => array(
+          'default' => array(
+            'weight' => '0',
+            'visible' => TRUE,
+          ),
+          'full' => array(
+            'weight' => '3',
+            'visible' => TRUE,
+          ),
+          'product_list' => array(
+            'weight' => '2',
+            'visible' => TRUE,
+          ),
+        ),
+        'product:field_images' => array(
+          'default' => array(
+            'weight' => '37',
+            'visible' => TRUE,
+          ),
+          'full' => array(
+            'weight' => '6',
+            'visible' => TRUE,
+          ),
+          'product_list' => array(
+            'weight' => '0',
+            'visible' => TRUE,
+          ),
+        ),
+        'product:status' => array(
+          'full' => array(
+            'weight' => '8',
+            'visible' => FALSE,
+          ),
+          'product_list' => array(
+            'weight' => '6',
+            'visible' => FALSE,
+          ),
+        ),
+        'product:title_field' => array(
+          'full' => array(
+            'weight' => '7',
+            'visible' => FALSE,
+          ),
+          'product_list' => array(
+            'weight' => '3',
+            'visible' => FALSE,
+          ),
+        ),
+      ),
+    ),
+  );
+  $export['field_bundle_settings_node__epesi_products'] = $strongarm;
+
+  $strongarm = new stdClass();
+  $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
+  $strongarm->api_version = 1;
+  $strongarm->name = 'menu_options_epesi_products';
+  $strongarm->value = array();
+  $export['menu_options_epesi_products'] = $strongarm;
+
+  $strongarm = new stdClass();
+  $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
+  $strongarm->api_version = 1;
+  $strongarm->name = 'node_options_epesi_products';
+  $strongarm->value = array(
+    0 => 'status',
+  );
+  $export['node_options_epesi_products'] = $strongarm;
+
+  $strongarm = new stdClass();
+  $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
+  $strongarm->api_version = 1;
+  $strongarm->name = 'node_submitted_epesi_products';
+  $strongarm->value = 0;
+  $export['node_submitted_epesi_products'] = $strongarm;
+
+  $strongarm = new stdClass();
+  $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
+  $strongarm->api_version = 1;
+  $strongarm->name = 'pathauto_node_epesi_products_pattern';
+  $strongarm->value = 'epesi-products/[node:title]';
+  $export['pathauto_node_epesi_products_pattern'] = $strongarm;
+
+  $strongarm = new stdClass();
+  $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
+  $strongarm->api_version = 1;
+  $strongarm->name = 'pathauto_punctuation_hyphen';
+  $strongarm->value = 1;
+  $export['pathauto_punctuation_hyphen'] = $strongarm;
+
+  $strongarm = new stdClass();
+  $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
+  $strongarm->api_version = 1;
+  $strongarm->name = 'pathauto_taxonomy_term_manufacturer_pattern';
+  $strongarm->value = 'manufacturer/[term:name]';
+  $export['pathauto_taxonomy_term_manufacturer_pattern'] = $strongarm;
+
+  $strongarm = new stdClass();
+  $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
+  $strongarm->api_version = 1;
+  $strongarm->name = 'pathauto_taxonomy_term_epesi_category_pattern';
+  $strongarm->value = 'epesi-category/[term:name]';
+  $export['pathauto_taxonomy_term_category_epesi_pattern'] = $strongarm;
+
+  return $export;
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/views/product_images_by_filename.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/views/product_images_by_filename.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/views/product_images_by_filename.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/views/product_images_by_filename.inc	2014-05-21 21:07:09.000000000 +0200
@@ -0,0 +1,60 @@
+<?php
+
+$view = new view();
+$view->name = 'epesi_product_images_search_by_filename';
+$view->description = '';
+$view->tag = 'default';
+$view->base_table = 'file_managed';
+$view->human_name = 'Epesi Product Images - search by filename';
+$view->core = 7;
+$view->api_version = '3.0';
+$view->disabled = FALSE; /* Edit this to true to make a default view disabled initially */
+
+/* Display: Master */
+$handler = $view->new_display('default', 'Master', 'default');
+$handler->display->display_options['use_more_always'] = FALSE;
+$handler->display->display_options['access']['type'] = 'perm';
+$handler->display->display_options['cache']['type'] = 'none';
+$handler->display->display_options['query']['type'] = 'views_query';
+$handler->display->display_options['exposed_form']['type'] = 'basic';
+$handler->display->display_options['pager']['type'] = 'full';
+$handler->display->display_options['style_plugin'] = 'default';
+$handler->display->display_options['row_plugin'] = 'fields';
+/* Field: File: File ID */
+$handler->display->display_options['fields']['fid']['id'] = 'fid';
+$handler->display->display_options['fields']['fid']['table'] = 'file_managed';
+$handler->display->display_options['fields']['fid']['field'] = 'fid';
+$handler->display->display_options['fields']['fid']['label'] = '';
+$handler->display->display_options['fields']['fid']['element_label_colon'] = FALSE;
+/* Contextual filter: File: Name */
+$handler->display->display_options['arguments']['filename']['id'] = 'filename';
+$handler->display->display_options['arguments']['filename']['table'] = 'file_managed';
+$handler->display->display_options['arguments']['filename']['field'] = 'filename';
+$handler->display->display_options['arguments']['filename']['default_action'] = 'empty';
+$handler->display->display_options['arguments']['filename']['default_argument_type'] = 'fixed';
+$handler->display->display_options['arguments']['filename']['summary']['number_of_records'] = '0';
+$handler->display->display_options['arguments']['filename']['summary']['format'] = 'default_summary';
+$handler->display->display_options['arguments']['filename']['summary_options']['items_per_page'] = '25';
+$handler->display->display_options['arguments']['filename']['limit'] = '0';
+
+/* Display: Services */
+$handler = $view->new_display('services', 'Services', 'services_1');
+$handler->display->display_options['path'] = 'epesi_product_images_search_by_filename';
+$translatables['epesi_product_images_search_by_filename'] = array(
+  t('Master'),
+  t('more'),
+  t('Apply'),
+  t('Reset'),
+  t('Sort by'),
+  t('Asc'),
+  t('Desc'),
+  t('Items per page'),
+  t('- All -'),
+  t('Offset'),
+  t('« first'),
+  t('‹ previous'),
+  t('next ›'),
+  t('last »'),
+  t('All'),
+  t('Services'),
+);
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/views/search_by_product_id.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/views/search_by_product_id.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/views/search_by_product_id.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/epesi_commerce/views/search_by_product_id.inc	2014-05-21 21:07:09.000000000 +0200
@@ -0,0 +1,79 @@
+<?php
+
+$view = new view();
+$view->name = 'epesi_products_search_by_product_id';
+$view->description = '';
+$view->tag = 'default';
+$view->base_table = 'node';
+$view->human_name = 'Epesi Products - search by product_id';
+$view->core = 7;
+$view->api_version = '3.0';
+$view->disabled = FALSE; /* Edit this to true to make a default view disabled initially */
+
+/* Display: Master */
+$handler = $view->new_display('default', 'Master', 'default');
+$handler->display->display_options['use_more_always'] = FALSE;
+$handler->display->display_options['access']['type'] = 'perm';
+$handler->display->display_options['cache']['type'] = 'none';
+$handler->display->display_options['query']['type'] = 'views_query';
+$handler->display->display_options['exposed_form']['type'] = 'basic';
+$handler->display->display_options['pager']['type'] = 'full';
+$handler->display->display_options['style_plugin'] = 'default';
+$handler->display->display_options['row_plugin'] = 'fields';
+/* Field: Content: Nid */
+$handler->display->display_options['fields']['nid']['id'] = 'nid';
+$handler->display->display_options['fields']['nid']['table'] = 'node';
+$handler->display->display_options['fields']['nid']['field'] = 'nid';
+$handler->display->display_options['fields']['nid']['label'] = '';
+$handler->display->display_options['fields']['nid']['element_label_colon'] = FALSE;
+/* Sort criterion: Content: Post date */
+$handler->display->display_options['sorts']['created']['id'] = 'created';
+$handler->display->display_options['sorts']['created']['table'] = 'node';
+$handler->display->display_options['sorts']['created']['field'] = 'created';
+$handler->display->display_options['sorts']['created']['order'] = 'DESC';
+/* Contextual filter: Content: Product variations (field_product) */
+$handler->display->display_options['arguments']['field_product_product_id']['id'] = 'field_product_product_id';
+$handler->display->display_options['arguments']['field_product_product_id']['table'] = 'field_data_field_product';
+$handler->display->display_options['arguments']['field_product_product_id']['field'] = 'field_product_product_id';
+$handler->display->display_options['arguments']['field_product_product_id']['default_action'] = 'empty';
+$handler->display->display_options['arguments']['field_product_product_id']['default_argument_type'] = 'fixed';
+$handler->display->display_options['arguments']['field_product_product_id']['summary']['number_of_records'] = '0';
+$handler->display->display_options['arguments']['field_product_product_id']['summary']['format'] = 'default_summary';
+$handler->display->display_options['arguments']['field_product_product_id']['summary_options']['items_per_page'] = '25';
+/* Filter criterion: Content: Published */
+$handler->display->display_options['filters']['status']['id'] = 'status';
+$handler->display->display_options['filters']['status']['table'] = 'node';
+$handler->display->display_options['filters']['status']['field'] = 'status';
+$handler->display->display_options['filters']['status']['value'] = 1;
+$handler->display->display_options['filters']['status']['group'] = 1;
+$handler->display->display_options['filters']['status']['expose']['operator'] = FALSE;
+/* Filter criterion: Content: Type */
+$handler->display->display_options['filters']['type']['id'] = 'type';
+$handler->display->display_options['filters']['type']['table'] = 'node';
+$handler->display->display_options['filters']['type']['field'] = 'type';
+$handler->display->display_options['filters']['type']['value'] = array(
+'epesi_products' => 'epesi_products',
+);
+
+/* Display: Services */
+$handler = $view->new_display('services', 'Services', 'services_1');
+$handler->display->display_options['path'] = 'epesi_products_search_by_product_id';
+$translatables['epesi_products_search_by_product_id'] = array(
+t('Master'),
+t('more'),
+t('Apply'),
+t('Reset'),
+t('Sort by'),
+t('Asc'),
+t('Desc'),
+t('Items per page'),
+t('- All -'),
+t('Offset'),
+t('« first'),
+t('‹ previous'),
+t('next ›'),
+t('last »'),
+t('All'),
+t('Services'),
+);
+
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/auth/services_oauth/services_oauth.css drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/auth/services_oauth/services_oauth.css
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/auth/services_oauth/services_oauth.css	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/auth/services_oauth/services_oauth.css	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,4 @@
+.auth-authorization > .fieldset-wrapper > .form-item {
+  float: left;
+  margin-right: 20px;
+}
\ Brak znaku nowej linii na końcu pliku
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/auth/services_oauth/services_oauth.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/auth/services_oauth/services_oauth.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/auth/services_oauth/services_oauth.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/auth/services_oauth/services_oauth.inc	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,206 @@
+<?php
+
+/**
+ * @file
+ * Include file for services_oauth module.
+ */
+
+/**
+ * Authenticates a call using OAuth to verify the request.
+ *
+ * @param array $settings
+  *  The settings for the authentication module.
+ * @param array $method
+ *  The method that's being called
+ * @param array $args
+ *  The arguments that are being used to call the method
+ * @return void|string
+ *  Returns nothing, or a error message if authentication fails
+ */
+function _services_oauth_authenticate_call($settings, $method, $args) {
+  $endpoint = array();
+  // Grep the specific settings for this method
+  if (!empty($method['endpoint']['services_oauth']['credentials'])) {
+    $endpoint += array_filter($method['endpoint']['services_oauth']);
+  }
+  $endpoint += $settings;
+  $cred       = isset($endpoint['credentials']) ? $endpoint['credentials'] : 'token';
+  $auth_level = isset($endpoint['authorization']) ? $endpoint['authorization'] : '*';
+
+  // If no credentials are needed we'll pass this one through
+  if ($cred == 'none') {
+    return FALSE;
+  }
+
+  try {
+    module_load_include('inc', 'oauth_common');
+
+    list($signed, $consumer, $token) = oauth_common_verify_request();
+
+    // if we have no oauth info - pass this one through
+    if (!$signed && is_null($consumer) && is_null($token)) {
+      return FALSE;
+    }
+    if (!$signed && ($cred == 'consumer' || $cred == 'token')) {
+      throw new OAuthException('The request must be signed');
+    }
+    if ($consumer == NULL) {
+      throw new OAuthException('Missing consumer token');
+    }
+    if ($consumer->context !== $settings['oauth_context']) {
+      throw new OAuthException('The consumer is not valid in the current context');
+    }
+
+    // Validate the token, if it's required by the method
+    if ($cred == 'token') {
+      if (empty($token->key)) {
+        throw new OAuthException('Missing access token');
+      }
+      if (!$token->authorized) {
+        throw new OAuthException('The access token is not authorized');
+      }
+      // Check that the consumer has been granted the required authorization level
+      if (!empty($auth_level) && !in_array('*', $token->services) && !in_array($auth_level, $token->services)) {
+        throw new OAuthException('The consumer is not authorized to access this service');
+      }
+    }
+
+    // Add the oauth authentication info to server info
+    services_set_server_info('oauth_consumer', $consumer);
+    services_set_server_info('oauth_token', $token);
+
+    // Load the user if the request was authenticated using a token
+    // that's associated with a account.
+    if ($cred == 'token') {
+      if ($token->uid) {
+        global $user;
+        $user = user_load($token->uid);
+      }
+    }
+    else if ($cred == 'consumer') {
+      if ($consumer->uid) {
+        // This authenticates as the user who owns 'key';  It is for 2-stage
+        // OAuth and is vastly inferior to 3-stage OAuth.
+        global $user;
+        $user = user_load($consumer->uid);
+      }
+    }
+  }
+  catch (OAuthException $e) {
+    drupal_add_http_header('WWW-Authenticate', sprintf('OAuth realm="%s"', url('', array('absolute' => TRUE))));
+    return $e->getMessage();
+  }
+}
+
+function _services_oauth_security_settings_authorization($settings) {
+  return isset($settings['authorization']) ? $settings['authorization'] : '';
+}
+
+function _services_oauth_security_settings($settings, &$form_state) {
+  if (isset($form_state['values']['services_oauth']['oauth_context'])) {
+    $settings['oauth_context'] = $form_state['values']['services_oauth']['oauth_context'];
+  }
+
+  $form = array();
+  $form['oauth_context'] = array(
+    '#type'          => 'select',
+    '#options'       => array('' => t('-- Select an OAuth context')),
+    '#default_value' => isset($settings['oauth_context']) ? $settings['oauth_context'] : '',
+    '#title'         => t('OAuth context'),
+    '#description'   => t('The OAuth contexts provides a scope for consumers and authorizations and have their own authorization levels. Different services endpoints may share OAuth contexts and thereby allow the use of consumers and tokens across the services endpoint boundraries.'),
+  );
+  $form['authorization'] = array(
+    '#type'          => 'select',
+    '#options'       => array(),
+    '#default_value' => isset($settings['authorization']) ? $settings['authorization'] : '',
+    '#title'         => t('Default required OAuth Authorization level'),
+    '#description'   => t('The default OAuth authorization level that will be required to access resources.'),
+  );
+
+  $contexts = oauth_common_context_load_all();
+  foreach ($contexts as $context) {
+    $form['oauth_context']['#options'][$context->name] = $context->title;
+    if (isset($context->authorization_levels) && $context->name == $settings['oauth_context']) {
+      foreach ($context->authorization_levels as $name => $level) {
+        $form['authorization']['#options'][$name] = t($level['title']) . " ({$context->name})";
+      }
+    }
+  }
+  if (empty($form['authorization']['#options'])) {
+    $form['authorization'] = array(
+      '#type' => 'item',
+      '#title' => t('Select an OAuth context enable default required OAuth Authorization level')
+    ) + $form['authorization'];
+  }
+  else {
+    $form['authorization']['#options'] = array('' => t('None')) + $form['authorization']['#options'];
+  }
+
+  $form['credentials'] = array(
+    '#type'          => 'select',
+    '#options'       => array(
+      'none'              => t('None, OAuth authentication will be disabled by default'),
+      'unsigned_consumer' => t('Unsigned with consumer key'),
+      'consumer'          => t('Consumer key, also known as 2-legged OAuth'),
+      'token'             => t('Consumer key and access token, also known as 3-legged OAuth'),
+    ),
+    '#default_value' => $settings['credentials'],
+    '#title'         => t('Default required authentication'),
+    '#description'   => t('Authorization levels will <em>not</em> be applied if the consumer isn\'t required to supply a access token.'),
+  );
+
+  return $form;
+}
+
+function _services_oauth_default_security_settings() {
+  return array(
+    'oauth_context' => '',
+    'authorization' => '',
+    'credentials' => 'token',
+  );
+}
+
+function _services_oauth_controller_settings($settings, $controller, $endpoint, $class, $name) {
+  $form = array();
+  $cc = array(
+    'credentials' => '',
+    'authorization' => '',
+  );
+  if (!empty($controller['endpoint']['services_oauth'])) {
+     $cc = $controller['endpoint']['services_oauth'] + $cc;
+  }
+  $auth_levels = array();
+  if (is_array($endpoint) && isset($endpoint['oauth_context'])) {
+    $context = oauth_common_context_load($endpoint['oauth_context']);
+    if (isset($context->authorization_levels)) {
+      foreach ($context->authorization_levels as $name => $level) {
+        $auth_levels[$name] = t($level['title']);
+      }
+    }
+  }
+
+  $form['credentials'] = array(
+    '#type'          => 'select',
+    '#options'       => array(
+      ''                  => t('Default'),
+      'none'              => t('None'),
+      'unsigned_consumer' => t('Unsigned with consumer key'),
+      'consumer'          => t('Consumer key'),
+      'token'             => t('Consumer key and access token'),
+    ),
+    '#default_value' => isset($settings['credentials']) ? $settings['credentials'] : '',
+    '#title'         => t('Required authentication'),
+    '#description'   => t('Authorization levels will <em>not</em> be applied if the consumer isn\'t required to supply a access token.'),
+  );
+
+  $form['authorization'] = array(
+    '#type'          => 'select',
+    '#options'       => array(
+      '' => t('Default'),
+    ) + $auth_levels,
+    '#default_value' => isset($settings['authorization']) ? $settings['authorization'] : '',
+    '#title'         => t('Required authorization'),
+  );
+
+  return $form;
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/auth/services_oauth/services_oauth.info drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/auth/services_oauth/services_oauth.info
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/auth/services_oauth/services_oauth.info	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/auth/services_oauth/services_oauth.info	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,13 @@
+name = OAuth Authentication
+description = Provides OAuth authentication for the services module
+package = Services - authentication
+dependencies[] = services
+dependencies[] = oauth_common
+core = 7.x
+php = 5.2
+; Information added by Drupal.org packaging script on 2014-01-31
+version = "7.x-3.7"
+core = "7.x"
+project = "services"
+datestamp = "1391207946"
+
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/auth/services_oauth/services_oauth.install drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/auth/services_oauth/services_oauth.install
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/auth/services_oauth/services_oauth.install	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/auth/services_oauth/services_oauth.install	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,45 @@
+<?php
+
+/**
+ * Implements hook_install().
+ */
+function services_oauth_install() {
+  drupal_install_schema('services_oauth');
+}
+
+/**
+ * Implements hook_uninstall().
+ */
+function services_oauth_uninstall() {
+  drupal_uninstall_schema('services_oauth');
+}
+
+/**
+ * Implements hook_schema().
+ */
+function services_oauth_schema() {
+  $schema = array();
+
+  return $schema;
+}
+
+function services_oauth_update_6001() {
+  $ret = array();
+
+  // Rename the authentication and authorization settings variables
+  $authentication = variable_get('services_oauth_authentication_levels', array());
+  $authorization = variable_get('services_oauth_authorization_settings', array());
+  variable_del('services_oauth_authentication_levels');
+  variable_del('services_oauth_authorization_settings');
+  variable_set('services_oauth_authentication_levels_', $authentication);
+  variable_set('services_oauth_authorization_settings_', $authorization);
+
+  return $ret;
+}
+
+function services_oauth_update_6200() {
+  variable_del('services_oauth_authentication_levels_');
+  variable_del('services_oauth_authorization_settings_');
+
+  return array();
+}
\ Brak znaku nowej linii na końcu pliku
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/auth/services_oauth/services_oauth.module drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/auth/services_oauth/services_oauth.module
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/auth/services_oauth/services_oauth.module	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/auth/services_oauth/services_oauth.module	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,16 @@
+<?php
+
+/**
+ * Implementation of hook_services_authentication().
+ */
+function services_oauth_services_authentication_info() {
+  return array(
+    'file'             => 'services_oauth.inc',
+    'title'            => t('OAuth authentication'),
+    'description'      => t('An open protocol to allow secure API authorization'),
+    'security_settings' => '_services_oauth_security_settings',
+    'default_security_settings' => '_services_oauth_default_security_settings',
+    'authenticate_call' => '_services_oauth_authenticate_call',
+    'controller_settings' => '_services_oauth_controller_settings',
+  );
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/css/services.admin.css drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/css/services.admin.css
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/css/services.admin.css	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/css/services.admin.css	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,73 @@
+/* Resource Table */
+#resource-form-table th.select-all {
+  width: 1em;
+}
+th.resource_test {
+  width: 16em;
+}
+
+.resource-image {
+  display: inline-block;
+  cursor: pointer;
+  width: 1em;
+}
+.resource-group-label label {
+  display: inline;
+  font-weight: bold;
+}
+.resource-test-label label {
+  margin-left: 1em; /* LTR */
+}
+.resource-test-description .description {
+  margin: 0;
+}
+#resource-form-table tr td {
+  background-color: white;
+  color: #494949;
+  vertical-align: top;
+}
+#resource-form-table tr.resource-group td {
+  background-color: #EDF5FA;
+  color: #494949;
+}
+
+#resource-form-table tr.resource-method {
+  border-bottom: 1px solid #494949;
+}
+
+#resource-form-table tr.resource-operation-class {
+  border-bottom: 2px solid #494949;
+  border-top: 2px solid #494949;
+}
+
+
+table#resource-form-table tr.resource-group label {
+  display: inline;
+}
+
+div.message > div.item-list {
+  font-weight: normal;
+}
+a.resource-collapse {
+  height: 0;
+  width: 0;
+  top: -99em;
+  position: absolute;
+}
+a.resource-collapse:focus,
+a.resource-collapse:hover {
+  font-size: 80%;
+  top: 0px;
+  height: auto;
+  width: auto;
+  overflow: visible;
+  position: relative;
+  z-index: 1000;
+}
+td.resource-group-alias {
+  width:130px;
+}
+/* Zebra colors for resources admin table */
+#resource-form-table tr.resource-even td {
+  background: none repeat scroll 0 0 #F3F4EE;
+}
\ Brak znaku nowej linii na końcu pliku
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/docs/services.alter.api.php drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/docs/services.alter.api.php
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/docs/services.alter.api.php	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/docs/services.alter.api.php	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,200 @@
+<?php
+
+/**
+ * @file Documentation about Services alter hooks and variables.
+ */
+
+/**
+ * Variables.
+ *
+ * 'rest_server_default_response_format' default value 'json' -- default response format for REST server.
+ */
+
+/**
+ * Allow to alter arguments before they are passed to service callback.
+ *
+ * @param $controller
+ *   Controller definition
+ * @param $args
+ *   Array of arguments
+ * @param $options
+ *
+ * @see services_controller_execute()
+ * @see services.runtime.inc
+ */
+function hook_services_request_preprocess_alter($controller, &$args, $options) {
+
+}
+
+/**
+ * Alter results of the services call.
+ *
+ * @param $controller
+ *   Controller definition
+ * @param array $args
+ *   Arguments passed to services callback
+ * @param array $result
+ *   Array of results that can be altered
+ *
+ * @see services_controller_execute()
+ * @see services.runtime.inc
+ */
+function hook_services_request_postprocess_alter($controller, $args, &$result) {
+
+}
+
+/**
+ * Allows alteration of the services_resources array.
+ *
+ * @param array $resources
+ *   The combined array of resource definitions from hook_services_resources.
+ * @param array $endpoint
+ *   An array describing the endpoint that resources are being built for.
+ */
+function hook_services_resources_alter(&$resources, &$endpoint) {
+
+}
+
+/**
+ * Allows alteration of the services_resources array after processing
+ *
+ * @param array $resources
+ *   The combined array of resource definitions from hook_services_resources.
+ * @param array $endpoint
+ *   An array describing the endpoint that resources are being built for.
+ *
+ * @deprecated
+ * @see _services_build_resources()
+ * @see services.resource_build.inc
+ */
+function hook_services_resources_post_processing_alter(&$resources, &$endpoint) {
+
+}
+
+/**
+ * Allows alteration of authentication methods.
+ *
+ * The paramaters passed to this function are a bit difficult to understand.
+ * Example params:
+ *   $info = services_services_authentication_info();
+ *   $module = 'services';
+ *
+ * @param array $info
+ *   The array describing the authentication method provided by $module.
+ * @param string $module
+ *   The module providing the authentication method.
+ *
+ * @see services_authentication_info()
+ */
+function hook_services_authentication_info_alter(&$info, $module) {
+
+}
+
+/**
+ * Allows alteration of controller settings for services endpoints
+ *
+ * @param array $controller_info
+ *   An array of controller settings added by other modules. By default, this is
+ *   an empty array.
+ *
+ * @see services_edit_form_endpoint_resources()
+ */
+function hook_controller_settings_alter(&$controller_info) {
+
+}
+
+/**
+ * Allows alteration of the REST server request parser list.
+ *
+ * @param array $parsers
+ *   An associative array of parser callbacks keyed by mime-type.
+ *
+ * @see rest_server_request_parsers()
+ */
+function hook_rest_server_request_parsers_alter(&$parsers) {
+
+}
+
+/**
+ * Allows alteration of the REST server response formatter list.
+ *
+ * @param array $formatters
+ *  An associative array of formatter info arrays keyed by type extension.
+ *
+ * @see rest_server_response_formatters()
+ */
+function hook_rest_server_response_formatters_alter(&$formatters) {
+
+}
+
+/**
+ * Allows alteration of the response when just the endpoint is requested.
+ *
+ * @param string $response
+ *   The text displayed to the user.
+ *
+ * @see RESTServer->handle()
+ */
+function hook_services_endpoint_response_alter(&$response) {
+
+}
+
+/**
+ * Allows alteration of the parsed request data before calling the controller.
+ *
+ * @param array $data
+ *   The parsed request data.
+ * @param array $controller
+ *   The current controller definition.
+ *
+ * @see RESTServer->getControllerArguments()
+ */
+function hook_rest_server_request_parsed_alter(&$data, $controller) {
+
+}
+
+/**
+ * Allows alteration of the parsed request headers before calling the controller.
+ *
+ * @param array $data
+ *   The parsed request data.
+ *
+ * @see RESTServer->getControllerArguments()
+ */
+function hook_rest_server_headers_parsed_alter(&$headers) {
+
+}
+
+/**
+ * Allows alteration of error data before the status code or message are returned.
+ *
+ * @param array $error_alter_array
+ *   An associative array with the following keys:
+ *     - 'code': the HTTP status code.
+ *     - 'header_message': the message returned as part of the error response
+ *       (for instance, "404 Not found").
+ *     - 'body_data': data that was passed to the thrown exception.
+ * @param array $controller
+ *   The current controller definition.
+ * @param array $arguments
+ *   Arguments passed to the current controller.
+ *
+ * @see RESTServer->handleException()
+ */
+function hook_rest_server_execute_errors_alter(&$error_alter_array, $controller, $arguments) {
+
+}
+
+/**
+ * Allows alteration of the user object after services removes sensitive information.
+ *
+ * @param object $user
+ *   A user object without the 'pass' attribute, and if the current user doesn't
+ *   have the 'administer users' permission, this will also not include the
+ *   'mail' or 'init' attributes.
+ *
+ * @see services_remove_user_data()
+ */
+function hook_services_account_object_alter(&$user) {
+
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/docs/services.authentication.api.php drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/docs/services.authentication.api.php
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/docs/services.authentication.api.php	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/docs/services.authentication.api.php	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,42 @@
+<?php
+
+/**
+ * @file
+ * Hooks provided by Services for the definition of authentication plugins.
+ */
+
+/**
+ * @addtogroup hooks
+ * @{
+ */
+
+/**
+ * Supplies information about a given authentication method to Services.
+ *
+ * @return
+ *   An associative array with information about the authentication method
+ *   and its callbacks. The possible keys are as follows (all keys are
+ *   optional unless noted).
+ *
+ *   - title (required): The display name for this authentication method.
+ *   - description (required): Longer text describing this authentciation
+ *     method.
+ *   - authenticate_call (required): The name of a function to be called
+ *     to perform the actual authentication. <details of params/return>
+ *   - security_settings: A callback function which returns an associative
+ *     array of Form API elements for a settings form.
+ *   - default_security_settings: A callback funtion which returns an array
+ *     with the default settings for the auth module.
+ *   - _services_security_settings_validate: The name of a standard form
+ *     validation callback for the form defined in 'security_settings'.
+ *   - _services_security_settings_submit: The name of a standard form
+ *     submit callback for the form defined in 'security_settings'.
+ *   - alter_controllers: The name of a callback function which will alter a
+ *     services method signature in order to add required arguments.
+ *   - controller_settings: A callback function which returns an associative
+ *     array of Form API elements for a controller settings form.
+ *   - file: An include file which contains the authentication callbacks.
+ */
+function hook_services_authentication_info() {
+
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/docs/services.servers.api.php drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/docs/services.servers.api.php
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/docs/services.servers.api.php	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/docs/services.servers.api.php	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,54 @@
+<?php
+
+/**
+ * @file
+ * Hooks provided by Services for the definition of servers.
+ */
+
+/**
+ * @addtogroup hooks
+ * @{
+ */
+
+/**
+ * Identifies a server implementation to Services.
+ *
+ * @return
+ *   An associative array with the following keys.
+ *
+ *   - name: The display name of this server.
+ *	 - settings: an assoc array containing settings information per endpoint that this server is enabled.
+ */
+function hook_server_info() {
+  return array(
+    'name' => 'REST',
+    'path' => 'rest',
+    'settings' => array(
+      'file' => array('inc', 'rest_server'),
+      'form' => '_rest_server_settings',
+      'submit' => '_rest_server_settings_submit',
+    ),
+  );
+}
+
+/**
+ * Acts on requests to the server defined in hook_server_info().
+ *
+ * This is the main entry point to your server implementation.
+ * Need to get some more description about the best way to implement
+ * servers.
+ */
+function hook_server() {
+  $endpoint_path = services_get_server_info('endpoint_path', 'services/rest');
+  $canonical_path = trim(drupal_substr($_GET['q'], drupal_strlen($endpoint_path)), '/');
+  $canonical_path = explode('/', $_GET['q']);
+  $endpoint_path_count = count(explode('/', $endpoint_path));
+  for ($x = 0; $x < $endpoint_path_count; $x++) {
+    array_shift($canonical_path);
+  }
+  $canonical_path = implode('/', $canonical_path);
+  if (empty($canonical_path)) {
+    return '';
+  }
+  //Handle server based on $canonical_path
+}
\ Brak znaku nowej linii na końcu pliku
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/docs/services.services.api.php drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/docs/services.services.api.php
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/docs/services.services.api.php	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/docs/services.services.api.php	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,336 @@
+<?php
+
+/**
+ * @file
+ * Hooks provided by Services for the definition of new services.
+ */
+
+/**
+ * @addtogroup hooks
+ */
+
+/**
+ * Defines function signatures for resources available to services.
+ *
+ * Functionally this is very similar to the way hook_menu() works, and in many
+ * ways Services can be seen as an abstraction layer on top of hook_menu().
+ *
+ * @return
+ *   An associative array which defines available resources.
+ *
+ *   The associative array which defines services has five possible top
+ *   level keys. The operations array has five possible keys representing
+ *   the CRUD operations.
+ *
+ *     - #api_version
+ *     - operations
+ *       - create
+ *       - retrieve
+ *       - update
+ *       - delete
+ *       - index
+ *     - actions
+ *     - targeted_actions
+ *     - relationships
+ *
+ *   The #api_version is the services resource API that the resource is written
+ *   for. This makes it possible for services to upgrade resource declarations
+ *   if the format changes. See services_resource_api_version_info(). If no
+ *   version is given then 3001 is assumed. Which is the format used before the
+ *   versioning was introduced.
+ *
+ *   The CRUD functions in 'operations' are pretty self-explanatory. Index is
+ *   an extra CRUD-type function that allows you to create pageable lists.
+ *
+ *   Actions are performed directly on the resource type, not a individual
+ *   resource. The following example is hypothetical (but plausible). Say
+ *   that you want to expose a API for the apachesolr module. One of the
+ *   things that could be exposed is the functionality to reindex the whole
+ *   site at apachesolr/reindex.
+ *
+ *   Targeted actions acts on a individual resource. A good, but again -
+ *   hypothetical, example would be the publishing and unpublishing of nodes
+ *   at node/123/publish.
+ *
+ *   Relationship requests are convenience methods (sugar) to get something
+ *   thats related to a individual resource. A real example would be the
+ *   ability to get the files for a node at node/123/files.
+ *
+ *   The first five (the CRUD functions + index) define the indvidual service
+ *   callbacks for each function. However 'actions', 'targeted_actions',
+ *   and 'relationships' can contain multiple callbacks.
+ *
+ *   For those familiar with Services 2.x, these callbacks are created
+ *   similarly, but the keys have changed around a bit. The following keys
+ *   are used to describe a callback.
+ *
+ *   - help: Text describing what this callback does.
+ *   - callback: The name of a function to call when this resource is
+ *     requested.
+ *   - file: an array describing the file which contains the callback
+ *     function
+ *   - access callback: The name of a function to call to check whether
+ *     the requesting user has permission to access this resource. If not
+ *     specified, this defaults to 'user_access'.
+ *   - access callback file: an array describing the file which contains the
+ *     access callback function.  This attribute only needs to be supplied if
+ *     the method callback and the access callback are defined in different
+ *     files, for example when a method callback is overridden using
+ *     hook_services_resources_alter but the access callback is not
+ *   - access arguments: The arguments to pass to the access callback.
+ *   - access arguments append: A boolean indicating whether the resource's
+ *     arguments should be appended to the access arguments. This can be useful
+ *     in situations where an access callback is specific to the particular
+ *     item ('edit all nodes' vs 'edit my nodes'). Defaults to FALSE.
+ *   - args: an array describing the arguments which should be passed to this
+ *     resource when it is called. Each element in the array is an associative
+ *     array containing the following keys:
+ *
+ *     - name: The name of this argument.
+ *     - type: The data type of this argument (int, string, array)
+ *     - description: Text describing this argument's usage.
+ *     - optional: A boolean indicating whether or not this argument is optional.
+ *     - source: Where this argument should be retrieved from. This can be
+ *       'data' (indicating the POST data), 'param' (indicating the query
+ *       string) or 'path' (indicating the url path). In the case of path,
+ *       an additional parameter must be passed indicating the index to be used.
+ *       In the case of 'data' unless you put things in an array, you will get 
+ *       passed to your functions. 'source' => array('data' => 'nid'), will pass
+ *       them off as a single variable, 'source' => array('data') will give you 
+ *       all argument values to each argument. 
+ *     - default value: this is a value that will be passed to the method for
+ *       this particular argument if no argument value is passed
+ *
+ *   A detailed example of creating a new resource can be found at
+ *   http://drupal.org/node/783460 and more information about how
+ *   REST resources are managed can be found at http://drupal.org/node/783254.
+ */
+function hook_services_resources() {
+$node_resource = array(
+    'node' => array(
+      'operations' => array(
+        'retrieve' => array(
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/node_resource'),
+          'callback' => '_node_resource_retrieve',
+          'args' => array(
+            array(
+              'name' => 'nid',
+              'optional' => FALSE,
+              'source' => array('path' => 0),
+              'type' => 'int',
+              'description' => 'The nid of the node to get',
+            ),
+          ),
+          'access callback' => '_node_resource_access',
+          'access arguments' => array('view'),
+          'access arguments append' => TRUE,
+        ),
+        'create' => array(
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/node_resource'),
+          'callback' => '_node_resource_create',
+          'args' => array(
+            array(
+              'name' => 'node',
+              'optional' => FALSE,
+              'source' => 'data',
+              'description' => 'The node data to create',
+              'type' => 'array',
+            ),
+          ),
+          'access callback' => '_node_resource_access',
+          'access arguments' => array('create'),
+          'access arguments append' => TRUE,
+        ),
+        'update' => array(
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/node_resource'),
+          'callback' => '_node_resource_update',
+          'args' => array(
+            array(
+              'name' => 'nid',
+              'optional' => FALSE,
+              'source' => array('path' => 0),
+              'type' => 'int',
+              'description' => 'The nid of the node to get',
+            ),
+            array(
+              'name' => 'node',
+              'optional' => FALSE,
+              'source' => 'data',
+              'description' => 'The node data to update',
+              'type' => 'array',
+            ),
+          ),
+          'access callback' => '_node_resource_access',
+          'access arguments' => array('update'),
+          'access arguments append' => TRUE,
+        ),
+        'delete' => array(
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/node_resource'),
+          'callback' => '_node_resource_delete',
+          'args' => array(
+            array(
+              'name' => 'nid',
+              'optional' => FALSE,
+              'source' => array('path' => 0),
+              'type' => 'int',
+            ),
+          ),
+          'access callback' => '_node_resource_access',
+          'access arguments' => array('delete'),
+          'access arguments append' => TRUE,
+        ),
+        'index' => array(
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/node_resource'),
+          'callback' => '_node_resource_index',
+          'args' => array(
+            array(
+              'name' => 'page',
+              'optional' => TRUE,
+              'type' => 'int',
+              'description' => 'The zero-based index of the page to get, defaults to 0.',
+              'default value' => 0,
+              'source' => array('param' => 'page'),
+            ),
+            array(
+              'name' => 'fields',
+              'optional' => TRUE,
+              'type' => 'string',
+              'description' => 'The fields to get.',
+              'default value' => '*',
+              'source' => array('param' => 'fields'),
+            ),
+            array(
+              'name' => 'parameters',
+              'optional' => TRUE,
+              'type' => 'array',
+              'description' => 'Parameters array',
+              'default value' => array(),
+              'source' => array('param' => 'parameters'),
+            ),
+            array(
+              'name' => 'pagesize',
+              'optional' => TRUE,
+              'type' => 'int',
+              'description' => 'Number of records to get per page.',
+              'default value' => variable_get('services_node_index_page_size', 20),
+              'source' => array('param' => 'pagesize'),
+            ),
+          ),
+          'access arguments' => array('access content'),
+        ),
+      ),
+      'targeted_actions' => array(
+        'attach_file' => array(
+          'help' => 'Upload and attach file(s) to a node. POST multipart/form-data to node/123/attach_file',
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/node_resource'),
+          'callback' => '_node_resource_attach_file',
+          'access callback' => '_node_resource_access',
+          'access arguments' => array('update'),
+          'access arguments append' => TRUE,
+          'args' => array(
+            array(
+              'name' => 'nid',
+              'optional' => FALSE,
+              'source' => array('path' => 0),
+              'type' => 'int',
+              'description' => 'The nid of the node to attach a file to',
+            ),
+            array(
+              'name' => 'field_name',
+              'optional' => FALSE,
+              'source' => array('data' => 'field_name'),
+              'description' => 'The file parameters',
+              'type' => 'string',
+            ),
+            array(
+              'name' => 'attach',
+              'optional' => TRUE,
+              'source' => array('data' => 'attach'),
+              'description' => 'Attach the file(s) to the node. If FALSE, this clears ALL files attached, and attaches the files',
+              'type' => 'int',
+              'default value' => TRUE,
+            ),
+            array(
+              'name' => 'field_values',
+              'optional' => TRUE,
+              'source' => array('data' => 'field_values'),
+              'description' => 'The extra field values',
+              'type' => 'array',
+              'default value' => array(),
+            ),
+          ),
+        ),
+      ),
+      'relationships' => array(
+        'files' => array(
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/node_resource'),
+          'help'   => t('This method returns files associated with a node.'),
+          'access callback' => '_node_resource_access',
+          'access arguments' => array('view'),
+          'access arguments append' => TRUE,
+          'callback' => '_node_resource_load_node_files',
+          'args'     => array(
+            array(
+              'name' => 'nid',
+              'optional' => FALSE,
+              'source' => array('path' => 0),
+              'type' => 'int',
+              'description' => 'The nid of the node whose files we are getting',
+            ),
+            array(
+              'name' => 'file_contents',
+              'type' => 'int',
+              'description'  => t('To return file contents or not.'),
+              'source' => array('path' => 2),
+              'optional' => TRUE,
+              'default value' => TRUE,
+            ),
+            array(
+              'name'         => 'image_styles',
+              'type'         => 'int',
+              'description'  => t('To return image styles or not.'),
+              'source'       => array('path' => 3),
+              'optional'     => TRUE,
+              'default value' => FALSE,
+            ),
+          ),
+        ),
+      ),
+    ),
+  );
+  if (module_exists('comment')) {
+    $comments = array(
+      'file'                    => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/node_resource'),
+      'help'                    => t('This method returns the number of new comments on a given node.'),
+      'access callback'         => 'user_access',
+      'access arguments'        => array('access comments'),
+      'access arguments append' => FALSE,
+      'callback'                => '_node_resource_load_node_comments',
+      'args'                    => array(
+        array(
+          'name'         => 'nid',
+          'type'         => 'int',
+          'description'  => t('The node id to load comments for.'),
+          'source'       => array('path' => 0),
+          'optional'     => FALSE,
+        ),
+        array(
+          'name'         => 'count',
+          'type'         => 'int',
+          'description'  => t('Number of comments to load.'),
+          'source'       => array('param' => 'count'),
+          'optional'     => TRUE,
+        ),
+        array(
+          'name'         => 'offset',
+          'type'         => 'int',
+          'description'  => t('If count is set to non-zero value, you can pass also non-zero value for start. For example to get comments from 5 to 15, pass count=10 and start=5.'),
+          'source'       => array('param' => 'offset'),
+          'optional'     => TRUE,
+        ),
+      ),
+    );
+    $node_resource['node']['relationships']['comments'] =  $comments;
+  }
+  return $node_resource;
+}
\ Brak znaku nowej linii na końcu pliku
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/docs/services.versions.api.php drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/docs/services.versions.api.php
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/docs/services.versions.api.php	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/docs/services.versions.api.php	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,52 @@
+<?php
+/**
+ * @file
+ * Explains how to use versions
+ */
+
+/*
+ * All functions that want to be considered for updates need to use a specific naming convention
+ * We took the same approach as the standard Drupal hook_update methods. The pattern of update functions is
+ * _{RESOURCE_NAME}_resource_{METHOD_NAME}_update_{MAJOR_VERSION}_{MINOR_VERSION}
+ * @see services_get_updates() for exact regular expression used.
+ *
+ * For clients that want to request a specific version they need to pass a certain header
+ * services_RESOURCE_METHOD_version = version
+ * as an example, services_system_set_variable_version = 1.2
+ * @see ServicesVersionTests for code examples
+ *
+ * Services by default will always use the original resource shipped
+ * with services. If you wish to change this you can go to the resource page,
+ * and select an api version for the specific resource. The version option will
+ * only be enabled if version changes exist.
+ */
+
+function _system_resource_set_variable_update_1_1() {
+  $new_set = array(
+    'help' => 'Create a node with an nid test',
+  );
+  return $new_set;
+}
+
+function _system_resource_set_variable_update_1_2() {
+  $new_set = array(
+    'help' => 'Create a node with an nid optional prams.',
+    'args' => array(
+      array(
+        'name' => 'name',
+        'optional' => TRUE,
+        'source' => array('data' => 'name'),
+        'description' => t('The name of the variable to set.'),
+        'type' => 'string',
+      ),
+      array(
+        'name' => 'value',
+        'optional' => TRUE,
+        'source' => array('data' => 'value'),
+        'description' => t('The value to set.'),
+        'type' => 'string',
+      ),
+    ),
+  );
+  return $new_set;
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/includes/services.resource_build.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/includes/services.resource_build.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/includes/services.resource_build.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/includes/services.resource_build.inc	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,210 @@
+<?php
+
+/**
+ * @file
+ *  Contains functions necessary for building the resource definitions. This
+ *  is only needed the first time a the resources for a endpoint are fetched,
+ *  or when the cache has been cleared.
+ */
+
+/**
+ * Builds the resource definition array for a endpoint.
+ *
+ * @param string $endpoint_name
+ *  Optional. The endpoint name.
+ * @return array
+ *  The resource definitions.
+ */
+function _services_build_resources($endpoint_name = '') {
+  module_load_include('inc', 'services', 'includes/services.runtime');
+
+  $resources = array();
+  $version_info = services_resource_api_version_info();
+  $resource_modules = module_implements('services_resources');
+  // Get all installed resources
+  foreach ($resource_modules as $resource_module) {
+    $module_resources = call_user_func("{$resource_module}_services_resources");
+    if (empty($module_resources)) {
+      continue;
+    }
+
+    // Check resource versions.
+    $api_version = $version_info['default_version'];
+    if (!empty($module_resources['#api_version'])) {
+      $api_version = $module_resources['#api_version'];
+      unset($module_resources['#api_version']);
+    }
+    // Upgrade resources if needed.
+    if ($api_version < $version_info['current_version']) {
+      _services_resource_upgrade($api_version, $module_resources, $version_info);
+    }
+
+    $resources = array_merge_recursive($resources, $module_resources);
+  }
+
+  // Load the endpoint.
+  $endpoint = NULL;
+  if (!empty($endpoint_name)) {
+    $endpoint = services_endpoint_load($endpoint_name);
+    // Apply the endpoint on the services
+    _services_apply_endpoint($resources, $endpoint, FALSE);
+  }
+  drupal_alter('services_resources', $resources, $endpoint);
+  // Process the resources, and collect all controllers in the process
+  $controllers = array();
+  $class_info = services_operation_class_info();
+  foreach ($resources as $resource_name => &$resource) {
+    foreach ($class_info as $class_name => $class) {
+      if (!isset($resource[$class_name])) {
+        continue;
+      }
+
+      foreach (array_keys($resource[$class_name]) as $action_name) {
+        $controllers["{$resource_name}/{$class['class_singular']}/{$action_name}"] = &$resource[$class_name][$action_name];
+      }
+    }
+  }
+
+  // Make sure that we got a access callback for all resources
+  foreach ($controllers as &$controller) {
+    if (!empty($controller['file'])) {
+      // Convert old-style file references to something that fits module_load_include() better.
+      if (!empty($controller['file']['file']) && empty($controller['file']['type'])) {
+        $controller['file']['type'] = $controller['file']['file'];
+      }
+    }
+    if (!isset($controller['access callback'])) {
+      $controller['access callback'] = 'user_access';
+    }
+  }
+  // This hook is deprecated and will be removed in next versions of services.
+  // Use hook_services_resources_alter instead.
+  drupal_alter('services_resources_post_processing', $resources, $endpoint);
+
+  // Do some endpoint-dependent processing.
+  if ($endpoint) {
+    // Let the authentication modules alter our controllers
+    foreach ($endpoint->authentication as $auth_module => $auth_settings) {
+      services_auth_invoke($auth_module, 'alter_controllers', $auth_settings, $controllers, $endpoint);
+    }
+
+    // Apply any aliases from endpoint
+    $aliased = array();
+    foreach ($resources as $key => $def) {
+      $def['key'] = $key;
+      if (!empty($def['endpoint']['alias'])) {
+        $aliased[$def['endpoint']['alias']] = $def;
+      }
+      else {
+        $aliased[$key] = $def;
+      }
+    }
+    $resources = $aliased;
+  }
+
+  return $resources;
+}
+
+/**
+ * Upgrades old resource definition to the newer format.
+ *
+ * @param int $from
+ *  The API version that the resource was written for.
+ * @param array $resources
+ *  The resource definitions.
+ * @param array $version_info
+ *  Optional. The version info array as returned from services_resource_api_version_info().
+ * @return void
+ */
+function _services_resource_upgrade($from, &$resources, $version_info = NULL) {
+  module_load_include('inc', 'services', 'includes/services.resource_update');
+
+  // Get version info if needed.
+  if ($version_info == NULL) {
+    $version_info = services_resource_api_version_info();
+  }
+
+  // Run upgrades.
+  foreach ($version_info['versions'] as $update) {
+    if ($update > $from) {
+      call_user_func_array("services_resource_api_update_{$update}", array(&$resources));
+    }
+  }
+}
+
+/**
+ * Applies the endpoint to a set of resources. Resources and controllers that
+ * aren't supported will be removed (if $strict is set to TRUE) and both
+ * resources and controllers will get the 'endpoint' attribute set.
+ *
+ * @param array $resources
+ *  An array of resources that the endpoint should be applied on.
+ * @param array $endpoint
+ *  A endpoint information array.
+ * @param bool $strict
+ *  Optional.
+ * @return void
+ */
+function _services_apply_endpoint(&$resources, $endpoint, $strict = TRUE) {
+  if (is_array($endpoint) && isset($endpoint['build_info'])) {
+    $endpoint = $endpoint['build_info']['args'][0];
+  }
+  $classes = array_keys(services_operation_class_info());
+  foreach ($resources as $name => &$resource) {
+    $cres = ($endpoint && isset($endpoint->resources[$name])) ? $endpoint->resources[$name] : array();
+    if (isset($resource['key']) && $resource['key'] !== $name && $endpoint && isset($endpoint->resources[$resource['key']])) {
+      $cres = $endpoint->resources[$resource['key']];
+    }
+    $resource['endpoint'] = $cres;
+    if ($strict && empty($cres)) {
+      unset($resources[$name]);
+    }
+    else {
+      foreach ($classes as $class) {
+        if (!empty($resource[$class])) {
+          foreach ($resource[$class] as $op => $def) {
+            $cop = isset($cres[$class][$op]) ? $cres[$class][$op] : array();
+            if (empty($cop) || !$cop['enabled']) {
+              if ($strict) {
+                unset($resource[$class][$op]);
+              }
+            }
+            else {
+              $resource[$class][$op]['endpoint'] = empty($cop['settings']) ? array() : $cop['settings'];
+              if (isset($cres['alias'])) {
+                $resource[$class][$op]['endpoint']['alias'] =  $cres['alias'];
+              }
+            }
+          }
+        }
+      }
+    }
+  }
+}
+
+/**
+ * Supplies the resource definitions for Drupal core data
+ *
+ * @return array
+ */
+function _services_core_resources() {
+  module_load_include('inc', 'services', 'resources/comment_resource');
+  module_load_include('inc', 'services', 'resources/file_resource');
+  module_load_include('inc', 'services', 'resources/node_resource');
+  module_load_include('inc', 'services', 'resources/system_resource');
+  module_load_include('inc', 'services', 'resources/taxonomy_resource');
+  module_load_include('inc', 'services', 'resources/user_resource');
+
+  $resources = array(
+    '#api_version' => 3002,
+  );
+
+  $resources += _comment_resource_definition();
+  $resources += _file_resource_definition();
+  $resources += _node_resource_definition();
+  $resources += _system_resource_definition();
+  $resources += _taxonomy_resource_definition();
+  $resources += _user_resource_definition();
+
+  return $resources;
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/includes/services.resource_update.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/includes/services.resource_update.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/includes/services.resource_update.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/includes/services.resource_update.inc	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,21 @@
+<?php
+
+/**
+ * Updates resource definitions to the 3002 version with normalized definitions
+ * for the CRUD operations. The CRUD operations will now be namespaced just
+ * like relationships, targeted_actions and actions.
+ *
+ * @param array $resources
+ * @return void
+ */
+function services_resource_api_update_3002(&$resources) {
+  static $operations = array('create', 'retrieve', 'update', 'delete', 'index');
+  foreach ($resources as $name => &$resource) {
+    foreach ($operations as $key) {
+      if (!empty($resource[$key])) {
+        $resource['operations'][$key] = $resource[$key];
+        unset($resource[$key]);
+      }
+    }
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/includes/services.runtime.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/includes/services.runtime.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/includes/services.runtime.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/includes/services.runtime.inc	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,458 @@
+<?php
+
+/**
+ * @file
+ *  Contains functions that only are necessary when a service call is made.
+ *  This has broken out so that this code isn't loaded for every page load.
+ */
+
+/**
+ * A exception thrown by services and related modules when something goes
+ * wrong.
+ */
+class ServicesException extends Exception {
+  private $data;
+
+  /**
+   * Constructor for the ServicesException.
+   *
+   * @param string $message
+   *  Error message.
+   * @param int $code
+   *  Optional. Error code. This often maps to the HTTP status codes. Defaults
+   *  to 0.
+   * @param mixed $data
+   *  Information that can be used by the server to return information about
+   *  the error.
+   */
+  public function __construct($message, $code = 0, $data = NULL) {
+    parent::__construct($message, $code);
+
+    $this->data = !empty($data) ? $data : $message;
+  }
+
+  /**
+   * Returns the data associated with the exception.
+   *
+   * @return mixed
+   */
+  public function getData() {
+    return $this->data;
+  }
+}
+
+/**
+ * A exception thrown by services and related modules when an error related to
+ * a specific argument is encountered.
+ */
+class ServicesArgumentException extends ServicesException {
+  private $argument;
+
+  /**
+   * Constructor for the ServicesException.
+   *
+   * @param string $message
+   *  Error message.
+   * @param string $argument_name
+   *  The name of the argument that caused the error.
+   * @param int $code
+   *  Optional. Error code. This often maps to the HTTP status codes. Defaults
+   *  to 0.
+   * @param mixed $data
+   *  Information that can be used by the server to return information about
+   *  the error.
+   */
+  public function __construct($message, $argument_name, $code, $data) {
+    parent::__construct($message, $code, $data);
+
+    $this->argument = $argument_name;
+  }
+
+  /**
+   * Returns the name of the argument that caused the error.
+   *
+   * @return string
+   *  The name of the argument.
+   */
+  public function getArgumentName() {
+    return $this->argument;
+  }
+}
+
+/**
+ * Performs access checks and executes a services controller.
+ * This method is called by server implementations.
+ *
+ * @param array $controller
+ *  An array containing information about the controller
+ * @param array $args
+ *  The arguments that should be passed to the controller.
+ * @param array $options
+ *  Options for the execution. Use 'skip_authentication'=>TRUE to skip the
+ *  services-specific authentication checks. Access checks will always be
+ *  made.
+ */
+function services_controller_execute($controller, $args = array(), $options = array()) {
+  $server_info =  services_server_info_object();
+  if ($server_info->debug) {
+    watchdog('services', 'Controller: <pre>@controller</pre>', array('@controller' => print_r($controller, TRUE)), WATCHDOG_DEBUG);
+    watchdog('services', 'Passed arguments: <pre>@arguments</pre>', array('@arguments' => print_r($args, TRUE)), WATCHDOG_DEBUG);
+  }
+
+  // Switch to anonymous user preserving currently session authenticated user.
+  _services_controller_execute_preserve_user_switch_anonymous($controller);
+
+  try {
+    $result = _services_controller_execute_internals($controller, $args, $options);
+  }
+  catch (Exception $exception) {
+    _services_controller_execute_restore_user();
+    throw $exception;
+  }
+
+  _services_controller_execute_restore_user();
+
+  if ($server_info->debug) {
+    watchdog('services', 'results: <pre>@results</pre>', array('@results' => print_r($result, TRUE)), WATCHDOG_DEBUG);
+  }
+  return $result;
+}
+
+/**
+ * As authentication methods should authenticate user themselves changing global $user variable
+ * we preserve incoming session authenticated user and his session so changes made by authentication
+ * do not interfere.
+ */
+function _services_controller_execute_preserve_user_switch_anonymous($controller) {
+  global $user;
+  services_set_server_info('original_user', $user);
+
+  $preserve_session = strpos($controller['callback'], 'login') === FALSE && strpos($controller['callback'], 'logout') === FALSE;
+  services_set_server_info('preserve_session', $preserve_session);
+  if ($preserve_session) {
+    $original_session_state = drupal_save_session();
+    services_set_server_info('original_session_state', $original_session_state);
+    drupal_save_session(FALSE);
+  }
+
+  $user = drupal_anonymous_user();
+  $user->timestamp = time();
+}
+
+function _services_controller_execute_restore_user() {
+  if (services_get_server_info('preserve_session', FALSE)) {
+    $original_user = services_get_server_info('original_user');
+    $original_session_state = services_get_server_info('original_session_state');
+    global $user;
+    $user = $original_user;
+    drupal_save_session($original_session_state);
+  }
+}
+
+/**
+ * Internals of the services_controller_execute().
+ *
+ * Arguments are the same as services_controller_execute().
+ */
+function _services_controller_execute_internals($controller, $args, $options) {
+  $server_info =  services_server_info_object();
+  $endpoint_name = services_get_server_info('endpoint');
+  $endpoint = services_endpoint_load($endpoint_name);
+
+  _services_authenticate_user($controller, $endpoint, $args, $options);
+
+  // Load the proper file.
+  if (!empty($controller['file']) && $file = $controller['file']) {
+    module_load_include($file['type'], $file['module'], (isset($file['name']) ? $file['name'] : NULL));
+  }
+
+  _services_run_access_callback($controller, $args);
+
+  $endpoint_path = services_get_server_info('endpoint_path', '');
+  $endpoint_path_len = drupal_strlen($endpoint_path) + 1;
+  $canonical_path = drupal_substr($_GET['q'], $endpoint_path_len, drupal_strlen($_GET['q']) - $endpoint_path_len);
+
+  // Prepare $path array and $resource_name.
+  $path = explode('/', $canonical_path);
+  $resource_name = array_shift($path);
+  $options['version'] = _services_version_header_options() ? _services_version_header_options() : NULL;
+  $options['resource'] = $resource_name;
+  if (isset($path[0])) {
+    $options['method'] = $path[0];
+  }
+
+  if (!empty($options['version'])) {
+    services_request_apply_version($controller, $options);
+  }
+
+  drupal_alter('services_request_preprocess', $controller, $args, $options);
+
+  // Log the arguments.
+  if ($server_info->debug) {
+    watchdog('services', 'Called arguments: <pre>@arguments</pre>', array('@arguments' => print_r($args, TRUE)), WATCHDOG_DEBUG);
+  }
+
+  // Execute the controller callback.
+  $result = call_user_func_array($controller['callback'], $args);
+
+  drupal_alter('services_request_postprocess', $controller, $args, $result);
+
+  return $result;
+}
+
+/**
+ * Gets information about a authentication module.
+ *
+ * @param string $module
+ *  The module to get info for.
+ * @return mixed
+ *  The information array, or FALSE if the information wasn't found.
+ */
+function services_authentication_info($module) {
+  $info = FALSE;
+  if (!empty($module) && module_exists($module) && is_callable($module . '_services_authentication_info')) {
+    $info = call_user_func($module . '_services_authentication_info');
+  }
+  return $info;
+}
+
+/**
+ * Invokes a authentication module callback.
+ *
+ * @param string $module
+ *  The authentication module to invoke the callback for.
+ * @param string $method
+ *  The callback to invoke.
+ * @param string $arg1
+ *  Optional. First argument to pass to the callback.
+ * @param string $arg2
+ *  Optional. Second argument to pass to the callback.
+ * @param string $arg3
+ *  Optional. Third argument to pass to the callback.
+ * @return mixed
+ *
+ * Aren't these really the following?
+ *  arg1 = Settings
+ *  arg2 = Method
+ *  arg3 = Controller
+ *
+ */
+function services_auth_invoke($module, $method, &$arg1 = NULL, &$arg2 = NULL, &$arg3 = NULL) {
+  // Get information about the auth module
+  $info = services_authentication_info($module);
+  drupal_alter('services_authentication_info', $info, $module);
+  $func = $info && !empty($info[$method]) ? $info[$method] : FALSE;
+  if (!$func) {
+    return TRUE;
+  }
+
+  if (!empty($info['file'])) {
+    require_once(drupal_get_path('module', $module) . '/' . $info['file']);
+  }
+
+  if (is_callable($func)) {
+    $args = func_get_args();
+    // Replace module and method name and arg1 with reference to $arg1 and $arg2.
+    array_splice($args, 0, 5, array(&$arg1, &$arg2, &$arg3));
+    return call_user_func_array($func, $args);
+  }
+}
+
+/**
+ * Formats a resource uri using the formatter registered through
+ * services_set_server_info().
+ *
+ * @param array $path
+ *  An array of strings containing the component parts of the path to the resource.
+ * @return string
+ *  Returns the formatted resource uri, or NULL if no formatter has been registered.
+ */
+function services_resource_uri($path) {
+  $endpoint_name = services_get_server_info('endpoint');
+  $endpoint = services_endpoint_load($endpoint_name);
+  if (!empty($path[0]) && !empty($endpoint->resources[$path[0]]['alias'])) {
+    $path[0] = $endpoint->resources[$path[0]]['alias'];
+  }
+  $formatter = services_get_server_info('resource_uri_formatter');
+  if ($formatter) {
+    return call_user_func($formatter, $path);
+  }
+  return NULL;
+}
+
+/**
+ * Sets a server info value
+ *
+ * @param string $key
+ *  The key of the server info value.
+ * @param mixed $value
+ *  The value.
+ * @return void
+ */
+function services_set_server_info($key, $value) {
+  $info = services_server_info_object();
+  $info->$key = $value;
+}
+
+/**
+ * Sets multiple server info values from a associative array.
+ *
+ * @param array $values
+ *  An associative array containing server info values.
+ * @return void
+ */
+function services_set_server_info_from_array($values) {
+  $info = services_server_info_object();
+  foreach ($values as $key => $value) {
+    $info->$key = $value;
+  }
+}
+
+/**
+ * Gets a server info value.
+ *
+ * @param string $key
+ *  The key for the server info value.
+ * @param mixed $default
+ *  The default value to return if the value isn't defined.
+ * @return mixed
+ *  The server info value.
+ */
+function services_get_server_info($key, $default = NULL) {
+  $info = services_server_info_object();
+  $value = $default;
+  if (isset($info->$key)) {
+    $value = $info->$key;
+  }
+  return $value;
+}
+
+/**
+ * Gets the server info object.
+ *
+ * @param bool $reset
+ *  Pass TRUE if the server info object should be reset.
+ * @return object
+ *  Returns the server info object.
+ */
+function services_server_info_object($reset = FALSE) {
+  static $drupal_static_fast;
+  if (!isset($drupal_static_fast) || $reset) {
+    $drupal_static_fast['info'] = &drupal_static(__FUNCTION__, new stdClass());
+  }
+  return $drupal_static_fast['info'];
+}
+
+/**
+ * Prepare an error message for returning to the server.
+ *
+ * @param string $message
+ *  Error message.
+ * @param int $code
+ *  Optional. Error code. This often maps to the HTTP status codes. Defaults
+ *  to 0.
+ * @param mixed $data
+ *  Optional. Information that can be used by the server to return information about the error. Defaults to null.
+ * @return mixed
+ */
+function services_error($message, $code = 0, $data = NULL) {
+  throw new ServicesException($message, $code, $data);
+}
+
+/**
+ * Extract arguments for a services method callback, preserving backwards compatibility with #1083242.
+ *
+ * @param array $data
+ *  original argument passed to a resource method callback
+ * @param string $field
+ *  name of the field where arguments should be checked for
+ * @return array
+ */
+
+// Adds backwards compatability with regression fixed in #1083242
+function _services_arg_value($data, $field) {
+  if (isset($data[$field]) && count($data) == 1 && is_array($data[$field])) {
+    return $data[$field];
+  }
+  return $data;
+}
+
+
+/**
+ * Extract arguments for a services method access callback, preserving backwards compatibility with #1083242.
+ *
+ * @param string $data
+ *  original argument passed to a resource method callback
+ * @param mixed $fields
+ *  name of the field(s) where arguments should be checked for, either as a string or as an array of strings
+ * @return array
+ */
+
+// Adds backwards compatability with regression fixed in #1083242
+function _services_access_value($data, $fields) {
+
+  if (!is_array($fields)) {
+    $fields = array($fields);
+  }
+
+  foreach ($fields as $field) {
+    if (is_array($data) && isset($data[$field]) && count($data) == 1) {
+      return $data[$field];
+    }
+  }
+  return $data;
+}
+
+/**
+ * Run enabled authentication plugins.
+ *
+ * Plugin that authenticate user will change global $user.
+ */
+function _services_authenticate_user($controller, $endpoint, $args, $options) {
+  if (!isset($options['skip_authentication']) || !$options['skip_authentication']) {
+    foreach ($endpoint->authentication as $auth_module => $auth_settings) {
+      if (!empty($auth_settings)) {
+        // Add in the auth module's endpoint settings if present.
+        if (isset($controller['endpoint'][$auth_module])) {
+          if(is_array($auth_settings)) {
+              $auth_settings += $controller['endpoint'][$auth_module];
+          }
+        }
+        if ($auth_error = services_auth_invoke($auth_module, 'authenticate_call', $auth_settings, $controller, $args)) {
+          return services_error($auth_error, 401);
+        }
+      }
+    }
+  }
+}
+
+/**
+ * Call access callback of the method.
+ */
+function _services_run_access_callback($controller, $args) {
+  // Construct access arguments array.
+  if (isset($controller['access arguments'])) {
+    $access_arguments = $controller['access arguments'];
+    if (isset($controller['access arguments append']) && $controller['access arguments append']) {
+      $access_arguments[] = $args;
+    }
+  }
+  else {
+    // Just use the arguments array if no access arguments have been specified
+    $access_arguments = $args;
+  }
+
+  // Load the proper file for the access callback.
+  if (!empty($controller['access callback file']) && $access_cb_file = $controller['access callback file']) {
+    $access_cb_file_name = isset($access_cb_file['name']) ? $access_cb_file['name'] : NULL;
+    module_load_include($access_cb_file['type'], $access_cb_file['module'], $access_cb_file_name);
+  }
+
+  // Call default or custom access callback.
+  if (call_user_func_array($controller['access callback'], $access_arguments) != TRUE) {
+    global $user;
+    return services_error(t('Access denied for user @user', array(
+      '@user' => isset($user->name) ? $user->name : 'anonymous',
+    )), 403);
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/js/services.admin.js drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/js/services.admin.js
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/js/services.admin.js	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/js/services.admin.js	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,73 @@
+(function ($) {
+  /**
+   * Add the table collapsing on the methoding overview page.
+   */
+  Drupal.behaviors.resourceMenuCollapse = {
+    attach: function (context, settings) {
+      var timeout = null,
+        arrowImageHTML = function(collapsed) {
+          return settings.services.images[collapsed ? 'collapsed' : 'expanded'];
+        },
+        setRowsCollapsedState = function(toggle, $rows, collapsed) {
+          if (collapsed) {
+            $rows.addClass('js-hide');
+          }
+          else {
+            $rows.removeClass('js-hide');
+          }
+          $(toggle).html(arrowImageHTML(collapsed));
+        };
+
+      $('td.resource-select-all').each(function() {
+        var resourceName = this.id,
+          resource = settings.services.resources[this.id],
+          $rowElements = $('.' + resourceName + '-method'),
+          $row = $(this.parentElement);
+        $('div.resource-image', $row)
+          // Adds group toggling functionality to arrow images.
+          .bind('click', function () {
+            resource.collapsed = !resource.collapsed;
+            setRowsCollapsedState(this, $rowElements, resource.collapsed);
+          })
+          // Set up initial toggle state
+          .each(function() {
+            setRowsCollapsedState(this, $rowElements, resource.collapsed);
+          });
+      });
+    }
+  };
+
+  /**
+   * Select/deselect all the inner checkboxes when the outer checkboxes are
+   * selected/deselected.
+   */
+  Drupal.behaviors.resourceSelectAll = {
+    attach: function (context, settings) {
+      $('td.resource-select-all').each(function () {
+        var resourceName = this.id,
+          methodCheckboxes = $('.' + resourceName + '-method .resource-method-select input[type=checkbox]'),
+          groupCheckbox = $('<input type="checkbox" class="form-checkbox" />').attr('id', this.id + '-select-all'),
+          // Each time a single-method checkbox is checked or unchecked, make sure
+          // that the associated group checkbox gets the right state too.
+          updateGroupCheckbox = function () {
+            $(groupCheckbox).attr('checked', (methodCheckboxes.filter('[checked]').length == methodCheckboxes.length));
+          };
+
+        // Have the single-method checkboxes follow the group checkbox.
+        groupCheckbox.bind('change', function () {
+          methodCheckboxes.attr('checked', $(this).attr('checked'));
+        });
+
+        // Have the group checkbox follow the single-method checkboxes.
+        methodCheckboxes.bind('change', function () {
+          updateGroupCheckbox();
+        });
+
+        // Initialize status for the group checkbox correctly.
+        updateGroupCheckbox();
+
+        $(this).append(groupCheckbox);
+      });
+    }
+  };
+})(jQuery);
\ Brak znaku nowej linii na końcu pliku
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/LICENSE.txt drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/LICENSE.txt
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/LICENSE.txt	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/LICENSE.txt	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,339 @@
+                    GNU GENERAL PUBLIC LICENSE
+                       Version 2, June 1991
+
+ Copyright (C) 1989, 1991 Free Software Foundation, Inc.,
+ 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+                            Preamble
+
+  The licenses for most software are designed to take away your
+freedom to share and change it.  By contrast, the GNU General Public
+License is intended to guarantee your freedom to share and change free
+software--to make sure the software is free for all its users.  This
+General Public License applies to most of the Free Software
+Foundation's software and to any other program whose authors commit to
+using it.  (Some other Free Software Foundation software is covered by
+the GNU Lesser General Public License instead.)  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+this service if you wish), that you receive source code or can get it
+if you want it, that you can change the software or use pieces of it
+in new free programs; and that you know you can do these things.
+
+  To protect your rights, we need to make restrictions that forbid
+anyone to deny you these rights or to ask you to surrender the rights.
+These restrictions translate to certain responsibilities for you if you
+distribute copies of the software, or if you modify it.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must give the recipients all the rights that
+you have.  You must make sure that they, too, receive or can get the
+source code.  And you must show them these terms so they know their
+rights.
+
+  We protect your rights with two steps: (1) copyright the software, and
+(2) offer you this license which gives you legal permission to copy,
+distribute and/or modify the software.
+
+  Also, for each author's protection and ours, we want to make certain
+that everyone understands that there is no warranty for this free
+software.  If the software is modified by someone else and passed on, we
+want its recipients to know that what they have is not the original, so
+that any problems introduced by others will not reflect on the original
+authors' reputations.
+
+  Finally, any free program is threatened constantly by software
+patents.  We wish to avoid the danger that redistributors of a free
+program will individually obtain patent licenses, in effect making the
+program proprietary.  To prevent this, we have made it clear that any
+patent must be licensed for everyone's free use or not licensed at all.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+                    GNU GENERAL PUBLIC LICENSE
+   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
+
+  0. This License applies to any program or other work which contains
+a notice placed by the copyright holder saying it may be distributed
+under the terms of this General Public License.  The "Program", below,
+refers to any such program or work, and a "work based on the Program"
+means either the Program or any derivative work under copyright law:
+that is to say, a work containing the Program or a portion of it,
+either verbatim or with modifications and/or translated into another
+language.  (Hereinafter, translation is included without limitation in
+the term "modification".)  Each licensee is addressed as "you".
+
+Activities other than copying, distribution and modification are not
+covered by this License; they are outside its scope.  The act of
+running the Program is not restricted, and the output from the Program
+is covered only if its contents constitute a work based on the
+Program (independent of having been made by running the Program).
+Whether that is true depends on what the Program does.
+
+  1. You may copy and distribute verbatim copies of the Program's
+source code as you receive it, in any medium, provided that you
+conspicuously and appropriately publish on each copy an appropriate
+copyright notice and disclaimer of warranty; keep intact all the
+notices that refer to this License and to the absence of any warranty;
+and give any other recipients of the Program a copy of this License
+along with the Program.
+
+You may charge a fee for the physical act of transferring a copy, and
+you may at your option offer warranty protection in exchange for a fee.
+
+  2. You may modify your copy or copies of the Program or any portion
+of it, thus forming a work based on the Program, and copy and
+distribute such modifications or work under the terms of Section 1
+above, provided that you also meet all of these conditions:
+
+    a) You must cause the modified files to carry prominent notices
+    stating that you changed the files and the date of any change.
+
+    b) You must cause any work that you distribute or publish, that in
+    whole or in part contains or is derived from the Program or any
+    part thereof, to be licensed as a whole at no charge to all third
+    parties under the terms of this License.
+
+    c) If the modified program normally reads commands interactively
+    when run, you must cause it, when started running for such
+    interactive use in the most ordinary way, to print or display an
+    announcement including an appropriate copyright notice and a
+    notice that there is no warranty (or else, saying that you provide
+    a warranty) and that users may redistribute the program under
+    these conditions, and telling the user how to view a copy of this
+    License.  (Exception: if the Program itself is interactive but
+    does not normally print such an announcement, your work based on
+    the Program is not required to print an announcement.)
+
+These requirements apply to the modified work as a whole.  If
+identifiable sections of that work are not derived from the Program,
+and can be reasonably considered independent and separate works in
+themselves, then this License, and its terms, do not apply to those
+sections when you distribute them as separate works.  But when you
+distribute the same sections as part of a whole which is a work based
+on the Program, the distribution of the whole must be on the terms of
+this License, whose permissions for other licensees extend to the
+entire whole, and thus to each and every part regardless of who wrote it.
+
+Thus, it is not the intent of this section to claim rights or contest
+your rights to work written entirely by you; rather, the intent is to
+exercise the right to control the distribution of derivative or
+collective works based on the Program.
+
+In addition, mere aggregation of another work not based on the Program
+with the Program (or with a work based on the Program) on a volume of
+a storage or distribution medium does not bring the other work under
+the scope of this License.
+
+  3. You may copy and distribute the Program (or a work based on it,
+under Section 2) in object code or executable form under the terms of
+Sections 1 and 2 above provided that you also do one of the following:
+
+    a) Accompany it with the complete corresponding machine-readable
+    source code, which must be distributed under the terms of Sections
+    1 and 2 above on a medium customarily used for software interchange; or,
+
+    b) Accompany it with a written offer, valid for at least three
+    years, to give any third party, for a charge no more than your
+    cost of physically performing source distribution, a complete
+    machine-readable copy of the corresponding source code, to be
+    distributed under the terms of Sections 1 and 2 above on a medium
+    customarily used for software interchange; or,
+
+    c) Accompany it with the information you received as to the offer
+    to distribute corresponding source code.  (This alternative is
+    allowed only for noncommercial distribution and only if you
+    received the program in object code or executable form with such
+    an offer, in accord with Subsection b above.)
+
+The source code for a work means the preferred form of the work for
+making modifications to it.  For an executable work, complete source
+code means all the source code for all modules it contains, plus any
+associated interface definition files, plus the scripts used to
+control compilation and installation of the executable.  However, as a
+special exception, the source code distributed need not include
+anything that is normally distributed (in either source or binary
+form) with the major components (compiler, kernel, and so on) of the
+operating system on which the executable runs, unless that component
+itself accompanies the executable.
+
+If distribution of executable or object code is made by offering
+access to copy from a designated place, then offering equivalent
+access to copy the source code from the same place counts as
+distribution of the source code, even though third parties are not
+compelled to copy the source along with the object code.
+
+  4. You may not copy, modify, sublicense, or distribute the Program
+except as expressly provided under this License.  Any attempt
+otherwise to copy, modify, sublicense or distribute the Program is
+void, and will automatically terminate your rights under this License.
+However, parties who have received copies, or rights, from you under
+this License will not have their licenses terminated so long as such
+parties remain in full compliance.
+
+  5. You are not required to accept this License, since you have not
+signed it.  However, nothing else grants you permission to modify or
+distribute the Program or its derivative works.  These actions are
+prohibited by law if you do not accept this License.  Therefore, by
+modifying or distributing the Program (or any work based on the
+Program), you indicate your acceptance of this License to do so, and
+all its terms and conditions for copying, distributing or modifying
+the Program or works based on it.
+
+  6. Each time you redistribute the Program (or any work based on the
+Program), the recipient automatically receives a license from the
+original licensor to copy, distribute or modify the Program subject to
+these terms and conditions.  You may not impose any further
+restrictions on the recipients' exercise of the rights granted herein.
+You are not responsible for enforcing compliance by third parties to
+this License.
+
+  7. If, as a consequence of a court judgment or allegation of patent
+infringement or for any other reason (not limited to patent issues),
+conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot
+distribute so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you
+may not distribute the Program at all.  For example, if a patent
+license would not permit royalty-free redistribution of the Program by
+all those who receive copies directly or indirectly through you, then
+the only way you could satisfy both it and this License would be to
+refrain entirely from distribution of the Program.
+
+If any portion of this section is held invalid or unenforceable under
+any particular circumstance, the balance of the section is intended to
+apply and the section as a whole is intended to apply in other
+circumstances.
+
+It is not the purpose of this section to induce you to infringe any
+patents or other property right claims or to contest validity of any
+such claims; this section has the sole purpose of protecting the
+integrity of the free software distribution system, which is
+implemented by public license practices.  Many people have made
+generous contributions to the wide range of software distributed
+through that system in reliance on consistent application of that
+system; it is up to the author/donor to decide if he or she is willing
+to distribute software through any other system and a licensee cannot
+impose that choice.
+
+This section is intended to make thoroughly clear what is believed to
+be a consequence of the rest of this License.
+
+  8. If the distribution and/or use of the Program is restricted in
+certain countries either by patents or by copyrighted interfaces, the
+original copyright holder who places the Program under this License
+may add an explicit geographical distribution limitation excluding
+those countries, so that distribution is permitted only in or among
+countries not thus excluded.  In such case, this License incorporates
+the limitation as if written in the body of this License.
+
+  9. The Free Software Foundation may publish revised and/or new versions
+of the General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+Each version is given a distinguishing version number.  If the Program
+specifies a version number of this License which applies to it and "any
+later version", you have the option of following the terms and conditions
+either of that version or of any later version published by the Free
+Software Foundation.  If the Program does not specify a version number of
+this License, you may choose any version ever published by the Free Software
+Foundation.
+
+  10. If you wish to incorporate parts of the Program into other free
+programs whose distribution conditions are different, write to the author
+to ask for permission.  For software which is copyrighted by the Free
+Software Foundation, write to the Free Software Foundation; we sometimes
+make exceptions for this.  Our decision will be guided by the two goals
+of preserving the free status of all derivatives of our free software and
+of promoting the sharing and reuse of software generally.
+
+                            NO WARRANTY
+
+  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
+FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
+OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
+PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
+OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
+TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
+PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
+REPAIR OR CORRECTION.
+
+  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
+REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
+INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
+OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
+TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
+YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
+PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
+POSSIBILITY OF SUCH DAMAGES.
+
+                     END OF TERMS AND CONDITIONS
+
+            How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+convey the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    <one line to give the program's name and a brief idea of what it does.>
+    Copyright (C) <year>  <name of author>
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License along
+    with this program; if not, write to the Free Software Foundation, Inc.,
+    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+
+Also add information on how to contact you by electronic and paper mail.
+
+If the program is interactive, make it output a short notice like this
+when it starts in an interactive mode:
+
+    Gnomovision version 69, Copyright (C) year name of author
+    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, the commands you use may
+be called something other than `show w' and `show c'; they could even be
+mouse-clicks or menu items--whatever suits your program.
+
+You should also get your employer (if you work as a programmer) or your
+school, if any, to sign a "copyright disclaimer" for the program, if
+necessary.  Here is a sample; alter the names:
+
+  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
+  `Gnomovision' (which makes passes at compilers) written by James Hacker.
+
+  <signature of Ty Coon>, 1 April 1989
+  Ty Coon, President of Vice
+
+This General Public License does not permit incorporating your program into
+proprietary programs.  If your program is a subroutine library, you may
+consider it more useful to permit linking proprietary applications with the
+library.  If this is what you want to do, use the GNU Lesser General
+Public License instead of this License.
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/plugins/export_ui/services_ctools_export_ui.class.php drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/plugins/export_ui/services_ctools_export_ui.class.php
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/plugins/export_ui/services_ctools_export_ui.class.php	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/plugins/export_ui/services_ctools_export_ui.class.php	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,493 @@
+<?php
+
+/**
+ * @file
+ * Export-ui handler for the Services module.
+ */
+
+class services_ctools_export_ui extends ctools_export_ui {
+
+  /**
+   * Page callback for the resources page.
+   */
+  function resources_page($js, $input, $item) {
+    drupal_set_title($this->get_page_title('resources', $item));
+    return drupal_get_form('services_edit_form_endpoint_resources', $item);
+  }
+
+  /**
+   * Page callback for the server page.
+   */
+  function server_page($js, $input, $item) {
+    drupal_set_title($this->get_page_title('server', $item));
+    return drupal_get_form('services_edit_form_endpoint_server', $item);
+  }
+
+
+  /**
+   * Page callback for the authentication page.
+   */
+  function authentication_page($js, $input, $item) {
+    drupal_set_title($this->get_page_title('authentication', $item));
+    return drupal_get_form('services_edit_form_endpoint_authentication', $item);
+  }
+
+  /**
+   * Page callback for the resource authentication page.
+   */
+  function resource_authentication_page($js, $input, $item) {
+    drupal_set_title($this->get_page_title('resource_authentication', $item));
+    return drupal_get_form('services_edit_form_endpoint_resource_authentication', $item);
+  }
+
+  // Avoid standard submit of edit form by ctools.
+  function edit_save_form($form_state) { }
+
+  function set_item_state($state, $js, $input, $item) {
+    ctools_export_set_object_status($item, $state);
+
+    menu_rebuild();
+    if (!$js) {
+      drupal_goto(ctools_export_ui_plugin_base_path($this->plugin));
+    }
+    else {
+      return $this->list_page($js, $input);
+    }
+  }
+}
+
+/**
+ * Endpoint authentication configuration form.
+ */
+function services_edit_form_endpoint_authentication($form, &$form_state) {
+  list($endpoint) = $form_state['build_info']['args'];
+  // Loading runtime include as needed by services_authentication_info().
+  module_load_include('inc', 'services', 'includes/services.runtime');
+
+  $auth_modules = module_implements('services_authentication_info');
+
+  $form['endpoint_object'] = array(
+    '#type'  => 'value',
+    '#value' => $endpoint,
+  );
+  if (empty($auth_modules)) {
+    $form['message'] = array(
+      '#type'          => 'item',
+      '#title'         => t('Authentication'),
+      '#description'   => t('No authentication modules are installed, all requests will be anonymous.'),
+    );
+    return $form;
+  }
+  if (empty($endpoint->authentication)) {
+    $form['message'] = array(
+      '#type'          => 'item',
+      '#title'         => t('Authentication'),
+      '#description'   => t('No authentication modules are enabled, all requests will be anonymous.'),
+    );
+    return $form;
+  }
+  // Add configuration fieldsets for the authentication modules
+  foreach ($endpoint->authentication as $module => $settings) {
+    $info = services_authentication_info($module);
+    if (empty($info)) {
+      continue;
+    }
+    $form[$module] = array(
+      '#type' => 'fieldset',
+      '#title' => isset($info['title']) ? $info['title'] : $module,
+      '#tree' => TRUE,
+    );
+
+    // Append the default settings for the authentication module.
+    $default_security_settings = services_auth_invoke($module, 'default_security_settings');
+    if ($settings == $module && is_array($default_security_settings)) {
+      $settings = $default_security_settings;
+    }
+    // Ask the authentication module for a settings form.
+    $module_settings_form = services_auth_invoke($module, 'security_settings', $settings, $form_state);
+
+    if (is_array($module_settings_form)) {
+      $form[$module] += $module_settings_form;
+    }
+    else {
+      $form[$module]['message'] = array(
+        '#type'   => 'item',
+        '#markup'  => t('@module has no settings available.', array('@module' => drupal_ucfirst($module))),
+      );
+    }
+  }
+
+  $form['submit'] = array(
+    '#type'  => 'submit',
+    '#value' => 'Save',
+  );
+
+  return $form;
+}
+
+function services_edit_form_endpoint_authentication_submit($form, $form_state) {
+  $endpoint = $form_state['values']['endpoint_object'];
+
+  foreach (array_keys($endpoint->authentication) as $module) {
+    if (isset($form_state['values'][$module])) {
+      $endpoint->authentication[$module] = $form_state['values'][$module];
+    }
+  }
+
+  drupal_set_message(t('Your authentication options have been saved.'));
+  services_endpoint_save($endpoint);
+}
+
+function services_edit_form_endpoint_server($form, &$form_state) {
+  list($endpoint) = $form_state['build_info']['args'];
+  $servers = services_get_servers();
+  $server = !empty($servers[$endpoint->server]) ? $servers[$endpoint->server] : FALSE;
+
+  $form['endpoint_object'] = array(
+    '#type'  => 'value',
+    '#value' => $endpoint,
+  );
+
+  if (!$server) {
+    $form['message'] = array(
+      '#type'          => 'item',
+      '#title'         => t('Unknown server @name', array('@name' => $endpoint->server)),
+      '#description'   => t('No server matching the one used in the endpoint.'),
+    );
+  }
+  else if (empty($server['settings'])) {
+    $form['message'] = array(
+      '#type'          => 'item',
+      '#title'         => t('@name has no settings', array('@name' => $endpoint->server)),
+      '#description'   => t("The server doesn't have any settings that needs to be configured."),
+    );
+  }
+  else {
+    $definition = $server['settings'];
+
+    $settings = isset($endpoint->server_settings) ? $endpoint->server_settings : array();
+
+    if (!empty($definition['file'])) {
+      call_user_func_array('module_load_include', $definition['file']);
+    }
+
+    $form[$endpoint->server] = array(
+      '#type' => 'fieldset',
+      '#title' => $server['name'],
+      '#tree' => TRUE,
+    );
+    call_user_func_array($definition['form'], array(&$form[$endpoint->server], $endpoint, $settings));
+
+    $form['submit'] = array(
+      '#type'  => 'submit',
+      '#value' => 'Save',
+    );
+  }
+
+  return $form;
+}
+
+function services_edit_form_endpoint_server_submit($form, $form_state) {
+  $endpoint = $form_state['values']['endpoint_object'];
+  $servers = services_get_servers();
+  $definition = $servers[$endpoint->server]['settings'];
+
+  $values = $form_state['values'][$endpoint->server];
+
+  // Allow the server to alter the submitted values before they're stored
+  // as settings.
+  if (!empty($definition['submit'])) {
+    if (!empty($definition['file'])) {
+      call_user_func_array('module_load_include', $definition['file']);
+    }
+    $values = call_user_func_array($definition['submit'], array($endpoint, &$values));
+  }
+
+  // Store the settings in the endpoint
+  $endpoint->server_settings = $values;
+  services_endpoint_save($endpoint);
+
+  drupal_set_message(t('Your server settings have been saved.'));
+}
+
+/**
+ * services_edit_endpoint_resources function.
+ *
+ * Edit Resources endpoint form
+ * @param object $endpoint
+ * @return string  The form to be displayed
+ */
+function services_edit_endpoint_resources($endpoint) {
+  if (!is_object($endpoint)) {
+    $endpoint = services_endpoint_load($endpoint);
+  }
+  if ($endpoint && !empty($endpoint->title)) {
+    drupal_set_title($endpoint->title);
+  }
+  return drupal_get_form('services_edit_form_endpoint_resources', $endpoint);
+}
+
+/**
+ * services_edit_form_endpoint_resources function.
+ *
+ * @param array &$form_state
+ * @param object $endpoint
+ * @return Form
+ */
+function services_edit_form_endpoint_resources($form, &$form_state, $endpoint) {
+  module_load_include('inc', 'services', 'includes/services.resource_build');
+  module_load_include('inc', 'services', 'includes/services.runtime');
+
+  $form = array();
+  $form['endpoint_object'] = array(
+    '#type'  => 'value',
+    '#value' => $endpoint,
+  );
+
+  $form['#attached']['js'] = array(
+    'misc/tableselect.js',
+    drupal_get_path('module', 'services') . '/js/services.admin.js',
+  );
+
+  $form['#attached']['css'] = array(
+    drupal_get_path('module', 'services') . '/css/services.admin.css',
+  );
+
+  $ops = array(
+    'create'   => t('Create'),
+    'retrieve' => t('Retrieve'),
+    'update'   => t('Update'),
+    'delete'   => t('Delete'),
+    'index'    => t('Index'),
+  );
+
+  // Call _services_build_resources() directly instead of
+  // services_get_resources to bypass caching.
+  $resources = _services_build_resources($endpoint->name);
+  // Sort the resources by the key, which is the string used for grouping each
+  // resource in theme_services_resource_table().
+  ksort($resources);
+
+  $form['instructions'] = array(
+    '#type' => 'item',
+    '#title' => t('Resources'),
+    '#description' => t('Select the resource(s) or methods you would like to enable, and click <em>Save</em>.'),
+   );
+
+  $form['resources']= array(
+    '#theme' => 'services_resource_table',
+    '#tree' => TRUE,
+   );
+
+  $class_names = services_operation_class_info();
+  // Collect authentication module info for later use and
+  // append the default settings for authentication modules
+  $auth_info = array();
+  foreach ($endpoint->authentication as $module => $settings) {
+    $auth_info[$module] = services_authentication_info($module);
+
+    // Append the default settings for the authentication module.
+    $default_settings = services_auth_invoke($module, 'default_security_settings');
+    if (is_array($default_settings) && is_array($settings)) {
+      $settings += $default_settings;
+    }
+    $endpoint->authentication[$module] = $settings;
+  }
+  // Generate the list of methods arranged by resource.
+  foreach ($resources as $resource_name => $resource) {
+    $resource_conf = array();
+    $resource_key = $resource['key'];
+    if (isset($endpoint->resources[$resource_key])) {
+      $resource_conf = $endpoint->resources[$resource_key];
+    }
+
+    $res_item = array(
+      '#collapsed' => TRUE,
+    );
+    $alias = '';
+    if (isset($form_state['input'][$resource_key]['alias'])) {
+      $alias = $form_state['input'][$resource_key]['alias'];
+    }
+    elseif (isset($resource_conf['alias'])) {
+      $alias = $resource_conf['alias'];
+    }
+
+    $res_item['alias'] = array(
+      '#type' => 'textfield',
+      '#default_value' => $alias,
+      '#size' => 20,
+    );
+    foreach ($class_names as $class => $info) {
+      if (!empty($resource[$class])) {
+        $res_item[$class] = array(
+          '#type' => 'item',
+          '#title' => $info['title'],
+        );
+        foreach ($resource[$class] as $op_name => $op) {
+          $description = isset($op['help']) ? $op['help'] : t('No description is available');
+          $default_value = 0;
+          if (isset($resource_conf[$class][$op_name]['enabled'])) {
+            $default_value = $resource_conf[$class][$op_name]['enabled'];
+          }
+          // If any component of a resource is enabled, expand the resource.
+          if ($default_value) {
+            $res_item['#collapsed'] = FALSE;
+          }
+          $res_item[$class][$op_name] = array(
+            '#type' => 'item',
+            '#title' => $op_name,
+            '#description' => $description,
+          );
+          $res_item[$class][$op_name]['enabled'] = array(
+            '#type' => 'checkbox',
+            '#title' => t('Enabled'),
+            '#default_value' => $default_value,
+          );
+
+          $controller_settings = array();
+          // Let modules add their own settings.
+          drupal_alter('controller_settings', $controller_settings);
+          // Get service update versions.
+          $update_versions = services_get_update_versions($resource_key, $op_name);
+          $options = array(
+            '1.0' => '1.0',
+          );
+          $options = array_merge($options, $update_versions);
+          $default_api_value = 0;
+
+          if (isset($op['endpoint']) && isset($op['endpoint']['services'])) {
+            $default_api_value = $op['endpoint']['services']['resource_api_version'];
+          }
+          $disabled = (count($options) == 1);
+          // Add the version information if it has any
+          if (!$disabled) {
+            $controller_settings['services'] = array(
+              '#title' => 'Services',
+              '#type' => 'item',
+              'resource_api_version' => array(
+                '#type' => 'select',
+                '#options' => $options,
+                '#default_value' => $default_api_value,
+                '#title' => 'Resource API Version',
+                '#disabled' => $disabled,
+              ),
+            );
+          }
+          foreach ($endpoint->authentication as $module => $settings) {
+            if (isset($endpoint->resources[$resource_key][$class][$op_name]['settings'][$module])) {
+              $settings = $endpoint->resources[$resource_key][$class][$op_name]['settings'][$module];
+            }
+            $auth_settings = services_auth_invoke($module, 'controller_settings', $settings, $op, $endpoint->authentication[$module], $class, $op_name);
+            if (is_array($auth_settings)) {
+              $auth_settings = array(
+                '#title' => $auth_info[$module]['title'],
+                '#type' => 'item',
+              ) + $auth_settings;
+              $controller_settings[$module] = $auth_settings;
+              $disabled = FALSE;
+            }
+          }
+          if (!$disabled) {
+            $res_item[$class][$op_name]['settings'] = $controller_settings;
+          }
+        }
+      }
+    }
+    $form['resources'][$resource_key] = $res_item;
+  }
+  $form['save'] = array(
+     '#type'  => 'submit',
+     '#value' => t('Save'),
+  );
+  return $form;
+}
+
+/**
+ * services_edit_form_endpoint_resources_validate function.
+ *
+ * @param array $form
+ * @param array $form_state
+ * @return void
+ */
+function services_edit_form_endpoint_resources_validate($form, $form_state) {
+  $input = $form_state['values'];
+
+  // Validate aliases.
+  foreach ($input['resources'] as $resource_name => $resource) {
+    if (!empty($resource['alias']) && !preg_match('/^[a-z-_]+$/', $resource['alias'])) {
+      // Still this doesn't highlight needed form element.
+      form_set_error("resources][{$resource_name}][alias", t("The alias for the !name resource may only contain lower case a-z, underscores and dashes.", array(
+        '!name' => $resource_name,
+      )));
+    }
+  }
+}
+
+/**
+ * Resources form submit function.
+ *
+ * @param array $form
+ * @param array $form_state
+ * @return void
+ */
+function services_edit_form_endpoint_resources_submit($form, $form_state) {
+  $endpoint  = $form_state['values']['endpoint_object'];
+  $resources = $form_state['input']['resources'];
+  $class_names = services_operation_class_info();
+  // Iterate over the resources, its operation classes and operations.
+  // The main purpose is to remove empty configuration for disabled elements.
+  foreach ($resources as $resource_name => $resource) {
+    if (empty($resource['alias'])) {
+      unset($resource['alias']);
+    }
+    foreach ($class_names as $class_name => $info) {
+      if (!empty($resource[$class_name])) {
+        foreach ($resource[$class_name] as $op_name => $op) {
+          // Remove the operation if it has been disabled.
+          if (!$op['enabled']) {
+            unset($resource[$class_name][$op_name]);
+          }
+        }
+      }
+      // Remove the operation class element if it doesn't
+      // have any enabled operations.
+      if (empty($resource[$class_name])) {
+        unset($resource[$class_name]);
+      }
+    }
+    // Remove the resource if it doesn't have any properties.
+    if (empty($resource)) {
+      unset($resources[$resource_name]);
+    }
+    // Add the processed resource if it does.
+    else {
+      $resources[$resource_name] = $resource;
+    }
+  }
+  $endpoint->resources = $resources;
+  services_endpoint_save($endpoint);
+  drupal_set_message('Resources have been saved');
+}
+
+/**
+ * Returns the updates for a given resource method.
+ *
+ * @param $resource
+ *   A resource name.
+ * @param $method
+ *   A method name.
+ * @return
+ *   an array with the major and minor api versions
+ */
+function services_get_update_versions($resource, $method) {
+  $versions = array();
+  $updates = services_get_updates();
+  if (isset($updates[$resource][$method]) && is_array($updates[$resource][$method])) {
+    foreach ($updates[$resource][$method] as $update) {
+      extract($update);
+      $value = $major . '.' . $minor;
+      $versions[$value] = $value;
+    }
+  }
+  return $versions;
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/plugins/export_ui/services_ctools_export_ui.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/plugins/export_ui/services_ctools_export_ui.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/plugins/export_ui/services_ctools_export_ui.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/plugins/export_ui/services_ctools_export_ui.inc	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,231 @@
+<?php
+/*
+ * Plugin definition for Ctools Export UI
+ */
+$plugin = array(
+  'schema' => 'services_endpoint',
+  'menu' => array(
+    'menu item' => 'services',
+    'menu description' => 'Manage Services',
+    // Add services specific own menu callbacks.
+    'items' => array(
+      'resources' => array(
+        'path' => 'list/%ctools_export_ui/resources',
+        'title' => 'Resources',
+        'page callback' => 'ctools_export_ui_switcher_page',
+        'page arguments' => array('services_ctools_export_ui', 'resources', 4),
+        'load arguments' => array('services_ctools_export_ui'),
+        'access arguments' => array('administer services'),
+        'type' => MENU_LOCAL_TASK,
+        'weight' => -2,
+      ),
+      'server' => array(
+        'path' => 'list/%ctools_export_ui/server',
+        'title' => 'Server',
+        'page callback' => 'ctools_export_ui_switcher_page',
+        'page arguments' => array('services_ctools_export_ui', 'server', 4),
+        'load arguments' => array('services_ctools_export_ui'),
+        'access arguments' => array('administer services'),
+        'type' => MENU_LOCAL_TASK,
+        'weight' => -4,
+      ),
+      'authentication' => array(
+        'path' => 'list/%ctools_export_ui/authentication',
+        'title' => 'Authentication',
+        'page callback' => 'ctools_export_ui_switcher_page',
+        'page arguments' => array('services_ctools_export_ui', 'authentication', 4),
+        'load arguments' => array('services_ctools_export_ui'),
+        'access arguments' => array('administer services'),
+        'type' => MENU_LOCAL_TASK,
+        'weight' => -3,
+      ),
+    ),
+  ),
+  // Add our custom operations.
+  'allowed operations' => array(
+    'resources'  => array('title' => t('Edit Resources')),
+    'server'  => array('title' => t('Edit Server')),
+    'authentication' => array('title' => t('Edit Authentication')),
+  ),
+  'form' => array(
+    'settings' => 'services_ctools_export_ui_form',
+    'validate' => 'services_ctools_export_ui_form_validate',
+    'submit' => 'services_ctools_export_ui_form_submit',
+  ),
+  'handler' => array(
+    'class' => 'services_ctools_export_ui',
+    'parent' => 'ctools_export_ui',
+  ),
+
+  'title' => t('Services'),
+
+  'title singular' => t('endpoint'),
+  'title plural' => t('endpoints'),
+  'title singular proper' => t('Endpoint'),
+  'title plural proper' => t('Endpoints'),
+);
+
+/**
+ * Form to edit the settings of an endpoint.
+ */
+function services_ctools_export_ui_form(&$form, &$form_state) {
+  // Loading runtime include as needed by services_auth_info().
+  module_load_include('inc', 'services', 'includes/services.runtime');
+  $endpoint = $form_state['item'];
+
+  $form['info']['name'] = array_merge($form['info']['name'], array(
+    '#title' => t('Machine-readable name of the endpoint'),
+    '#type' => 'machine_name',
+    '#description' => t('The endpoint name can only consist of lowercase letters, underscores, and numbers.'),
+    '#machine_name' => array(
+      'exists' => 'services_ctools_export_ui_form_machine_name_exists',
+    ),
+  ));
+
+  $form['eid'] = array(
+    '#type'  => 'value',
+    '#value' => isset($endpoint->eid) ? $endpoint->eid : '',
+  );
+
+  $form['endpoint_object'] = array(
+    '#type'  => 'value',
+    '#value' => $endpoint,
+  );
+
+  $servers = services_get_servers();
+  $server_opts = array(
+    '' => t('-- Select a server'),
+  );
+  foreach ($servers as $server => $info) {
+    $server_opts[$server] = $info['name'];
+  }
+  $form['server'] = array(
+    '#type'          => 'select',
+    '#options'       => $server_opts,
+    '#default_value' => $endpoint->server,
+    '#title'         => t('Server'),
+    '#description'   => t('Select a the server that should be used to handle requests to this endpoint.'),
+    '#required'      => TRUE,
+  );
+
+  $form['path'] = array(
+    '#type'          => 'textfield',
+    '#size'          => 24,
+    '#maxlength'     => 255,
+    '#default_value' => $endpoint->path,
+    '#title'         => t('Path to endpoint'),
+    '#required'      => TRUE,
+  );
+
+  $form['debug'] = array(
+    '#type'          => 'checkbox',
+    '#default_value' => $endpoint->debug,
+    '#title'         => t('Debug mode enabled'),
+    '#description'   => t('Useful for developers. Do not enable on production environments'),
+    '#required'      => FALSE,
+  );
+  $auth_modules = module_implements('services_authentication_info');
+
+  if (!empty($auth_modules)) {
+    $auth_options = array();
+    foreach ($auth_modules as $module) {
+      $info = services_authentication_info($module);
+      $auth_options[$module] = $info['title'];
+    }
+    $default_values = array();
+    foreach ($endpoint->authentication as $auth_module => $settings) {
+      if (!empty($settings)) {
+        $default_values[] = $auth_module;
+      }
+    }
+
+    $form['authentication'] = array(
+      '#type'          => 'checkboxes',
+      '#options'       => $auth_options,
+      '#default_value' => $default_values,
+      '#title'         => t('Authentication'),
+      '#description'   => t('Choose which authentication schemes that should ' .
+        'be used with your endpoint. If no authentication method is selected ' .
+        'all requests will be done by an anonymous user.'),
+    );
+  }
+  else {
+    $form['authentication'] = array(
+      '#type'          => 'item',
+      '#title'         => t('Authentication'),
+      '#description'   => t('No authentication modules are installed, all ' .
+        'requests will be anonymous.'),
+    );
+  }
+
+  return $form;
+
+}
+
+/**
+ * Validate submission of the preset edit form.
+ */
+function services_ctools_export_ui_form_validate(&$form, &$form_state) {
+  // Validate path.
+  $query = db_select('services_endpoint', 'e');
+  $query->addField('e', 'eid');
+  $query->condition('path', $form_state['values']['path']);
+
+  if (!empty($form_state['values']['eid']) && is_numeric($form_state['values']['eid'])) {
+    $query->condition('eid', $form_state['values']['eid'], '!=');
+  }
+
+  $res = $query->execute()->fetchField();
+  if (!empty($res)) {
+    form_error($form['path'], t('Endpoint path must be unique.'));
+  }
+}
+
+/**
+ * Endpoint name check whether this machine name already exists.
+ */
+function services_ctools_export_ui_form_machine_name_exists($value) {
+  // Validate Name.
+//  $query = db_select('services_endpoint', 'e');
+//  $query->addField('e', 'eid');
+//  $query->condition('name', $value);
+
+  $result = db_query('SELECT eid FROM {services_endpoint} WHERE name = :name', array(':name' => $value))->fetchField();
+  return !empty($result);
+}
+
+/**
+ * Submit handler for endpoint.
+ */
+function services_ctools_export_ui_form_submit(&$form, &$form_state) {
+  $endpoint = $form_state['values']['endpoint_object'];
+
+  $endpoint->name   = $form_state['values']['name'];
+  $endpoint->server = $form_state['values']['server'];
+  $endpoint->path   = $form_state['values']['path'];
+  $endpoint->debug  = $form_state['values']['debug'];
+
+  // Set the authentication modules, and preserve the settings for modules
+  // that already exist.
+  $auth = array();
+  if (isset($form_state['values']['authentication'])) {
+    foreach (array_keys($form_state['values']['authentication']) as $module) {
+      //if module's checkbox is checked, add to empty
+      $auth_module = $form_state['values']['authentication'][$module];
+      if ($module === $auth_module) {
+        //If existing settings are set, preserve them
+        if (isset($endpoint->authentication[$module]) && is_array($endpoint->authentication[$module]) && !empty($endpoint->authentication[$module])) {
+          $auth[$module] = $endpoint->authentication[$module];
+        }
+        else {
+          $auth[$module] = $auth_module;
+        }
+      }
+      elseif ($auth_module == 0) {
+        unset($auth[$module]);
+      }
+    }
+  }
+  $endpoint->authentication = $auth;
+  services_endpoint_save($endpoint);
+}
\ Brak znaku nowej linii na końcu pliku
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/README.txt drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/README.txt
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/README.txt	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/README.txt	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,33 @@
+
+Goals
+==============
+- Create a unified Drupal API for web services to be exposed in a variety of
+  different server formats.
+- Provide a service browser to be able to test methods.
+- Allow distribution of API keys for developer access.
+
+Documentation
+==============
+http://drupal.org/node/109782
+
+Installation
+============
+If you are using the rest server you will need to download the latest version of SPYC:
+wget https://raw.github.com/mustangostang/spyc/79f61969f63ee77e0d9460bc254a27a671b445f3/spyc.php -O  servers/rest_server/lib/spyc.php
+
+Once downloaded you need to add spyc.php to the rest_server/lib folder which exists under
+the location you have installed services in.
+
+Documentation files
+===================
+You can find these files in /docs folder.
+services.authentication.api.php -- hooks related to authentication plugins
+services.servers.api.php -- servers definition hooks
+services.services.api.php -- definition of new services
+services.versions.api.php -- how to write versioned resources
+
+Settings via variables
+======================
+
+'services_{$resource}_index_page_size' -- this variable controls maximum number of results that
+will be displayed by index query. See services_resource_build_index_query() for more information.
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/resources/comment_resource.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/resources/comment_resource.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/resources/comment_resource.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/resources/comment_resource.inc	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,402 @@
+<?php
+
+function _comment_resource_definition() {
+  if (!module_exists('comment')) {
+    return array();
+  }
+
+  return array(
+    'comment' => array(
+      'operations' => array(
+        'create' => array(
+          'help' => 'Create a comment',
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/comment_resource'),
+          'callback' => '_comment_resource_create',
+          'access callback' => '_comment_resource_access',
+          'access arguments' => array('create'),
+          'access arguments append' => TRUE,
+          'args' => array(
+            array(
+              'name' => 'comment',
+              'type' => 'array',
+              'description' => 'The comment object',
+              'source' => 'data',
+              'optional' => FALSE,
+            ),
+          ),
+        ),
+
+        'retrieve' => array(
+          'help' => 'Retrieve a comment',
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/comment_resource'),
+          'callback' => '_comment_resource_retrieve',
+          'access callback' => '_comment_resource_access',
+          'access arguments' => array('view'),
+          'access arguments append' => TRUE,
+          'args' => array(
+            array(
+              'name' => 'cid',
+              'type' => 'int',
+              'description' => 'The cid of the comment to retrieve.',
+              'source' => array('path' => '0'),
+              'optional' => FALSE,
+            ),
+          ),
+        ),
+
+        'update' => array(
+          'help' => 'Update a comment',
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/comment_resource'),
+          'callback' => '_comment_resource_update',
+          'access callback' => '_comment_resource_access',
+          'access arguments' => array('edit'),
+          'access arguments append' => TRUE,
+          'args' => array(
+            array(
+              'name' => 'cid',
+              'optional' => FALSE,
+              'source' => array('path' => 0),
+              'type' => 'int',
+              'description' => 'The unique identifier for this comment.',
+            ),
+            array(
+              'name' => 'data',
+              'type' => 'array',
+              'description' => 'The comment object with updated information',
+              'source' => 'data',
+              'optional' => FALSE,
+            ),
+          ),
+        ),
+
+        'delete' => array(
+          'help' => 'Delete a comment',
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/comment_resource'),
+          'callback' => '_comment_resource_delete',
+          'access callback' => '_comment_resource_access',
+          'access arguments' => array('edit'),
+          'access arguments append' => TRUE,
+          'args' => array(
+            array(
+              'name' => 'cid',
+              'type' => 'int',
+              'description' => 'The id of the comment to delete',
+              'source' => array('path' => '0'),
+              'optional' => FALSE,
+            ),
+          ),
+        ),
+        'index' => array(
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/comment_resource'),
+          'callback' => '_comment_resource_index',
+          'args' => array(
+            array(
+              'name' => 'page',
+              'optional' => TRUE,
+              'type' => 'int',
+              'description' => 'The zero-based index of the page to get, defaults to 0.',
+              'default value' => 0,
+              'source' => array('param' => 'page'),
+            ),
+            array(
+              'name' => 'fields',
+              'optional' => TRUE,
+              'type' => 'string',
+              'description' => 'The fields to get.',
+              'default value' => '*',
+              'source' => array('param' => 'fields'),
+            ),
+            array(
+              'name' => 'parameters',
+              'optional' => TRUE,
+              'type' => 'array',
+              'description' => 'Parameters',
+              'default value' => array(),
+              'source' => array('param' => 'parameters'),
+            ),
+            array(
+              'name' => 'pagesize',
+              'optional' => TRUE,
+              'type' => 'int',
+              'description' => 'Number of records to get per page.',
+              'default value' => variable_get('services_comment_index_page_size', 20),
+              'source' => array('param' => 'pagesize'),
+            ),
+          ),
+          'access callback' => '_comment_resource_access',
+          'access arguments' => array('view'),
+          'access arguments append' => TRUE,
+        ),
+      ),
+      'actions' => array(
+        'countAll' => array(
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/comment_resource'),
+          'help'   => t('Return number of comments on a given node.'),
+          'access callback' => '_comment_resource_access',
+          'access arguments' => array('view'),
+          'access arguments append' => TRUE,
+          'callback' => '_comment_resource_count_all',
+          'args'     => array(
+            array(
+              'name'         => 'nid',
+              'type'         => 'int',
+              'description'  => t('The node id to count all comments.'),
+              'source'       => array('data' => 'nid'),
+              'optional'     => FALSE,
+            ),
+          ),
+        ),
+        'countNew' => array(
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/comment_resource'),
+          'help'   => t('Returns number of new comments on a given node since a given timestamp.'),
+          'access callback' => '_comment_resource_access',
+          'access arguments' => array('view'),
+          'access arguments append' => TRUE,
+          'callback' => '_comment_resource_count_new',
+          'args'     => array(
+            array(
+              'name'          => 'nid',
+              'type'          => 'int',
+              'description'   => t('The node id to load comments for.'),
+              'source'        => array('data' => 'nid'),
+              'optional'      => FALSE,
+            ),
+            array(
+              'name'          => 'since',
+              'type'          => 'int',
+              'optional'      => TRUE,
+              'description'   => t('Timestamp to count from (defaults to time of last user acces to node).'),
+              'source'        => array('data' => 'since'),
+              'optional'      => TRUE,
+              'default value' => 0,
+            ),
+          ),
+        ),
+      ),
+    ),
+  );
+}
+
+/**
+ * Adds a new comment to a node and returns the cid.
+ *
+ * @param $comment
+ *   An object as would be returned from comment_load().
+ * @return
+ *   Unique identifier for the comment (cid) or errors if there was a problem.
+ */
+
+function _comment_resource_create($comment) {
+  // Adds backwards compatability with regression fixed in #1083242
+  $comment = _services_arg_value($comment, 'comment');
+
+  if (empty($comment['nid'])) {
+    return services_error(t('A nid must be provided'));
+  }
+
+  $form_state['values'] = $comment;
+  $form_state['values']['op'] = variable_get('services_comment_save_button_resource_create', t('Save'));
+
+  $comment_empty = array(
+    'nid' => $comment['nid'],
+    'cid' => NULL,
+  );
+
+  // If a pid is provide use it
+  if (!empty($comment['pid'])) {
+    $comment_empty['pid'] = $comment['pid'];
+  }
+
+  $comment_empty = (object) $comment_empty;
+  $form_state['programmed_bypass_access_check'] = FALSE;
+  $ret = drupal_form_submit('comment_form', $form_state, $comment_empty);
+
+  // Error if needed.
+  if ($errors = form_get_errors()) {
+    return services_error(implode(" ", $errors), 406, array('form_errors' => $errors));
+  }
+
+  $comment = $form_state['comment'];
+
+  return array(
+    'cid' => $comment->cid,
+    'uri' => services_resource_uri(array('comment', $comment->cid)),
+  );
+}
+
+/**
+ * Returns a specified comment
+ *
+ * @param $cid
+ *   Unique identifier for the specified comment
+ * @return
+ *   The comment object
+ */
+function _comment_resource_retrieve($cid) {
+  return comment_load($cid);
+}
+
+/**
+ * Updates a comment and returns the cid.
+ *
+ * @param $cid
+ *   Unique identifier for this comment.
+ * @param $comment
+ *   An object as would be returned from comment_load().
+ * @return
+ *   Unique identifier for the comment (cid) or FALSE if there was a problem.
+ */
+function _comment_resource_update($cid, $comment) {
+  // Adds backwards compatability with regression fixed in #1083242
+  $comment = _services_arg_value($comment, 'data');
+  $comment['cid'] = $cid;
+
+  $old_comment = comment_load($cid);
+  if (empty($old_comment)) {
+    return services_error(t('Comment @cid not found', array('@cid' => $cid)), 404);
+  }
+  // Setup form_state.
+  $form_state = array();
+  $form_state['values'] = $comment;
+  $form_state['values']['op'] = variable_get('services_comment_save_button_resource_update', t('Save'));
+  $form_state['comment'] = $old_comment;
+  $form_state['programmed_bypass_access_check'] = FALSE;
+  
+  drupal_form_submit('comment_form', $form_state, $old_comment);
+
+  if ($errors = form_get_errors()) {
+    return services_error(implode(" ", $errors), 406, array('form_errors' => $errors));
+  }
+
+  return $cid;
+}
+
+/**
+ * Delete a comment.
+ *
+ * @param $cid
+ *   Unique identifier of the comment to delete.
+ * @return
+ *   True.
+ */
+function _comment_resource_delete($cid) {
+  // Load in the required includes for comment_delete.
+  module_load_include('inc', 'comment', 'comment.admin');
+
+  // The following is from comment_confirm_delete_submit in comment.admin.inc
+  $comment = comment_load($cid);
+  if (empty($comment)) {
+    return services_error(t('There is no comment found with id @cid', array('@cid' => $cid)), 404);
+  }
+
+  // Delete comment and its replies.
+  comment_delete($cid);
+
+  // Clear the cache so an anonymous user sees that his comment was deleted.
+  cache_clear_all();
+  return TRUE;
+}
+/**
+ * Return an array of optionally paged cids baed on a set of criteria.
+ *
+ * An example request might look like
+ *
+ * http://domain/endpoint/comment?fields=cid,nid&parameters[nid]=7&parameters[uid]=2
+ *
+ * This would return an array of objects with only cid and nid defined, where
+ * nid = 7 and uid = 1.
+ *
+ * @param $page
+ *   Page number of results to return (in pages of 20).
+ * @param $fields
+ *   The fields you want returned.
+ * @param $parameters
+ *   An array containing fields and values used to build a sql WHERE clause
+ *   indicating items to retrieve.
+ * @param $page_size
+ *   Integer number of items to be returned.
+ * @return
+ *   An array of comment objects.
+ *
+ * @see _node_resource_index() for more notes
+ **/
+function _comment_resource_index($page, $fields, $parameters, $page_size) {
+  $comment_select = db_select('comment', 't')
+    ->orderBy('created', 'DESC');
+
+  services_resource_build_index_query($comment_select, $page, $fields, $parameters, $page_size, 'comment');
+
+  if (!user_access('administer comments')) {
+    $comment_select->condition('status', COMMENT_PUBLISHED);
+  }
+
+  $results = services_resource_execute_index_query($comment_select);
+
+  return services_resource_build_index_list($results, 'comment', 'cid');
+}
+
+/**
+ * Returns the number of comments on a given node id.
+ *
+ * @param $nid
+ *   Unique identifier for the specified node.
+ * @return
+ *   Number of comments that node has.
+ */
+function _comment_resource_count_all($nid) {
+  $node = node_load($nid);
+  return $node->comment_count;
+}
+
+/**
+ * Returns the number of new comments on a given node id since timestamp.
+ *
+ * @param $nid
+ *   Unique identifier for the specified node.
+ * @param $since
+ *   Timestamp to indicate what nodes are new. Defaults to time of last user acces to node.
+ * @return
+ *   Number of comments that node has.
+ */
+function _comment_resource_count_new($nid, $since) {
+  return comment_num_new($nid, $since);
+}
+
+/**
+ * Access check callback for comment controllers.
+ */
+function _comment_resource_access($op = 'view', $args = array()) {
+  // Adds backwards compatability with regression fixed in #1083242
+  if (isset($args[0])) {
+    $args[0] = _services_access_value($args[0], array('comment', 'data'));
+  }
+
+  if ($op == 'create') {
+    $comment = (object)$args[0];
+  }
+  else {
+    $comment = comment_load($args[0]);
+  }
+  if(isset($comment->nid)) {
+    $node = node_load($comment->nid);
+    if($op == 'create' && !$node->nid) {
+      return services_error(t('Node nid: @nid does not exist.', array('@nid' => $comment->nid)), 406);
+    }
+  }
+  if (user_access('administer comments')) {
+    return TRUE;
+  }
+  switch ($op) {
+    case 'view':
+      // Check if the user has access to comments
+      return user_access('access comments');
+    case 'delete':
+      return user_access('administer comments');
+    case 'edit':
+      return comment_access('edit', $comment);
+    case 'create':
+      // Check if the user may post comments, node has comments enabled
+      // and that the user has access to the node.
+      return user_access('post comments') && ($node->comment == COMMENT_NODE_OPEN);
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/resources/file_resource.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/resources/file_resource.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/resources/file_resource.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/resources/file_resource.inc	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,371 @@
+<?php
+
+/**
+ * @file
+ * File resource.
+ */
+
+/**
+ * THERE SHOULD BE NO UPDATE!!!
+ * Drupal doesn't allow updating or replacing a file in the files table.
+ * If you need to, create a new file and remove the old file.
+ */
+function _file_resource_definition() {
+  return array(
+    'file' => array(
+      'operations' => array(
+        'create' => array(
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/file_resource'),
+          'help' => 'Create a file with base64 encoded data',
+          'callback' => '_file_resource_create',
+          'access callback' => '_file_resource_access',
+          'access arguments' => array('create'),
+          'access arguments append' => TRUE,
+          'args' => array(
+            array(
+              'name' => 'file',
+              'type' => 'array',
+              'description'    => t('An array representing a file.'),
+              'source' => 'data',
+              'optional' => FALSE,
+            ),
+          ),
+        ),
+        'retrieve' => array(
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/file_resource'),
+          'help' => 'Retrieve a file',
+          'callback' => '_file_resource_retrieve',
+          'access callback' => '_file_resource_access',
+          'access arguments' => array('view'),
+          'access arguments append' => TRUE,
+          'args' => array(
+            array(
+              'name' => 'fid',
+              'type' => 'int',
+              'description' => 'The fid of the file to retrieve.',
+              'source' => array('path' => '0'),
+              'optional' => FALSE,
+            ),
+            array(
+              'name'         => 'file_contents',
+              'type'         => 'int',
+              'description'  => t('To return file contents or not.'),
+              'source'       => array('param' => 'file_contents'),
+              'default value' => TRUE,
+              'optional' => TRUE,
+            ),
+            array(
+              'name'         => 'image_styles',
+              'type'         => 'int',
+              'description'  => t('To return image styles or not.'),
+              'source'       => array('param' => 'image_styles'),
+              'default value' => FALSE,
+              'optional' => TRUE,
+            ),
+          ),
+        ),
+        'delete' => array(
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/file_resource'),
+          'help' => 'Delete a file',
+          'callback' => '_file_resource_delete',
+          'access callback' => '_file_resource_access',
+          'access arguments' => array('delete'),
+          'access arguments append' => TRUE,
+          'args' => array(
+            array(
+              'name' => 'cid',
+              'type' => 'int',
+              'description' => 'The id of the file to delete',
+              'source' => array('path' => '0'),
+              'optional' => FALSE,
+            ),
+          ),
+        ),
+        'index' => array(
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/file_resource'),
+          'callback' => '_file_resource_index',
+          'help' => 'List all files',
+          'args' => array(
+            array(
+              'name' => 'page',
+              'optional' => TRUE,
+              'type' => 'int',
+              'description' => 'The zero-based index of the page to get, defaults to 0.',
+              'default value' => 0,
+              'source' => array('param' => 'page'),
+            ),
+            array(
+              'name' => 'fields',
+              'optional' => TRUE,
+              'type' => 'string',
+              'description' => 'The fields to get.',
+              'default value' => '*',
+              'source' => array('param' => 'fields'),
+            ),
+            array(
+              'name' => 'parameters',
+              'optional' => TRUE,
+              'type' => 'array',
+              'description' => 'Parameters',
+              'default value' => array(),
+              'source' => array('param' => 'parameters'),
+            ),
+            array(
+              'name' => 'pagesize',
+              'optional' => TRUE,
+              'type' => 'int',
+              'description' => 'Number of records to get per page.',
+              'default value' => variable_get('services_file_index_page_size', 20),
+              'source' => array('param' => 'pagesize'),
+            ),
+          ),
+          'access callback' => '_file_resource_access',
+          'access arguments' => array('index'),
+          'access arguments append' => TRUE,
+        ),
+      ),
+      'actions' => array(
+        'create_raw' => array(
+          'help' => 'Create a file with raw data.',
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/file_resource'),
+          'callback' => '_file_resource_create_raw',
+          'access callback' => '_file_resource_access',
+          'access arguments' => array('create_raw'),
+          'access arguments append' => TRUE,
+        ),
+      ),
+    ),
+  );
+}
+
+/**
+ * Adds a new file and returns the fid.
+ *
+ * @param $file
+ *   An array as representing the file with a base64 encoded $file['file']
+ * @return
+ *   Unique identifier for the file (fid) or errors if there was a problem.
+ */
+function _file_resource_create($file) {
+  // Adds backwards compatability with regression fixed in #1083242
+  // $file['file'] can be base64 encoded file so we check whether it is
+  // file array or file data.
+  $file = _services_arg_value($file, 'file');
+
+  // If the file data or filename is empty then bail.
+  if (!isset($file['file']) || empty($file['filename'])) {
+    return services_error(t("Missing data the file upload can not be completed"), 500);
+  }
+
+  // Get the directory name for the location of the file:
+  if (empty($file['filepath'])) {
+    $file['filepath'] = file_default_scheme() . '://' . $file['filename'];
+  }
+  $dir = drupal_dirname($file['filepath']);
+  // Build the destination folder tree if it doesn't already exists.
+  if (!file_prepare_directory($dir, FILE_CREATE_DIRECTORY)) {
+    return services_error(t("Could not create destination directory for file."), 500);
+  }
+
+  // Rename potentially executable files, to help prevent exploits.
+  if (preg_match('/\.(php|pl|py|cgi|asp|js)$/i', $file['filename']) && (drupal_substr($file['filename'], -4) != '.txt')) {
+    $file['filepath'] .= '.txt';
+    $file['filename'] .= '.txt';
+  }
+
+  // Write the file
+  if (!$file_saved = file_save_data(base64_decode($file['file']), $file['filepath'])) {
+    return services_error(t("Could not write file to destination"), 500);
+  }
+
+  if (isset($file['status']) && $file['status'] == 0) {
+    // Save as temporary file.
+    $file_saved->status = 0;
+    file_save($file_saved);
+  }
+  else {
+    // Required to be able to reference this file.
+    file_usage_add($file_saved, 'services', 'files', $file_saved->fid);
+  }
+
+  return array(
+    'fid' => $file_saved->fid,
+    'uri' => services_resource_uri(array('file', $file_saved->fid)),
+  );
+}
+/**
+ * Adds new files and returns the files array.
+ *
+ * @return
+ *   Array of file objects with URIS to access them
+ */
+function _file_resource_create_raw() {
+  $validators = array(
+    'file_validate_extensions' => array(),
+    'file_validate_size' => array(),
+  );
+
+  $files = array();
+  foreach ($_FILES['files']['name'] as $field_name => $file_name) {
+    $file = file_save_upload($field_name, $validators, file_default_scheme() . "://");
+
+    if (!empty($file->fid)) {
+      // Change the file status from temporary to permanent.
+      $file->status = FILE_STATUS_PERMANENT;
+      file_save($file);
+
+      // Required to be able to reference this file.
+      file_usage_add($file, 'services', 'files', $file->fid);
+
+      $files[] = array(
+        'fid' => $file->fid,
+        'uri' => services_resource_uri(array('file', $file->fid)),
+      );
+    }
+    else {
+      return services_error(t('An unknown error occured'), 500);
+    }
+  }
+  return $files;
+}
+/**
+ * Get a given file
+ *
+ * @param $fid
+ *   Number. File ID
+ * @param $include_file_contents
+ *   Bool Whether or not to include the base64_encoded version of the file.
+ * @param $get_image_style
+ *   Bool Whether or not to provide image style paths.
+ * @return
+ *   The file
+ */
+function _file_resource_retrieve($fid, $include_file_contents, $get_image_style) {
+  if ($file = file_load($fid)) {
+    $filepath = $file->uri;
+
+    // Convert the uri to the external url path provided by the stream wrapper.
+    $file->uri_full = file_create_url($file->uri);
+
+    // Provide a path in the form sample/test.txt.
+    $file->target_uri = file_uri_target($file->uri);
+
+    if ($include_file_contents) {
+      $file->file = base64_encode(file_get_contents(drupal_realpath($filepath)));
+    }
+
+    $file->image_styles = array();
+    // Add image style information if available.
+    if ($get_image_style) {
+      foreach (image_styles() as $style) {
+        $style_name = $style['name'];
+        $file->image_styles[$style_name] = image_style_url($style_name, $file->uri);
+      }
+    }
+    return $file;
+  }
+}
+
+/**
+ * Delete a file.
+ *
+ * @param $fid
+ *   Unique identifier of the file to delete.
+ * @return bool
+ *   Whether or not the delete was successful.
+ */
+function _file_resource_delete($fid) {
+  if ($file = file_load($fid)) {
+    file_usage_delete($file, 'services');
+    return file_delete($file);
+  }
+  return FALSE;
+}
+
+/**
+ * Return an array of optionally paged fids baed on a set of criteria.
+ *
+ * An example request might look like
+ *
+ * http://domain/endpoint/file?fields=fid,filename&parameters[fid]=7&parameters[uid]=1
+ *
+ * This would return an array of objects with only fid and filename defined, where
+ * fid = 7 and uid = 1.
+ *
+ * @param $page
+ *   Page number of results to return (in pages of 20).
+ * @param $fields
+ *   The fields you want returned.
+ * @param $parameters
+ *   An array containing fields and values used to build a sql WHERE clause
+ *   indicating items to retrieve.
+ * @param $page_size
+ *   Integer number of items to be returned.
+ * @return
+ *   An array of file objects.
+ *
+ * @see _node_resource_index() for more notes
+ **/
+function _file_resource_index($page, $fields, $parameters, $page_size) {
+  $file_select = db_select('file_managed', 't')
+    ->orderBy('timestamp', 'DESC');
+
+  services_resource_build_index_query($file_select, $page, $fields, $parameters, $page_size, 'file');
+
+  $results = services_resource_execute_index_query($file_select);
+
+  // Put together array of matching files to return.
+  return services_resource_build_index_list($results, 'file', 'fid');
+}
+
+/**
+ * Access check callback for file controllers.
+ */
+function _file_resource_access($op = 'view', $args = array()) {
+  // Adds backwards compatability with regression fixed in #1083242
+  if (isset($args[0])) {
+    $args[0] = _services_access_value($args[0], 'file');
+  }
+
+  global $user;
+
+  if (($op != 'create' && $op != 'create_raw') && $op != 'index') {
+    $file = file_load($args[0]);
+  } else if ($op == 'create' && $op != 'create_raw') {
+    $file = (object)$args[0];
+  }
+  if (empty($file) && $op != 'index' && ($op != 'create' && $op != 'create_raw')) {
+    return services_error(t('There is no file with ID @fid', array('@fid' => $args[0])), 406);
+  }
+  switch ($op) {
+    case 'view':
+      if (user_access('get any binary files')) {
+        return TRUE;
+      }
+      return $file->uid == $user->uid && user_access('get own binary files');
+      break;
+    case 'create':
+    case 'create_raw':
+      return user_access('save file information');
+    case 'delete':
+      return $file->uid == $user->uid && user_access('save file information');
+      break;
+    case 'index':
+      if (user_access('get any binary files')) {
+        return TRUE;
+      }
+  }
+
+  return FALSE;
+}
+
+function _file_resource_node_access($op = 'view', $args = array()) {
+  global $user;
+  if (user_access('get any binary files')) {
+    return TRUE;
+  }
+  elseif ($node = node_load($args[0])) {
+    return $node->uid == $user->uid && user_access('get own binary files');
+  }
+  return FALSE;
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/resources/node_resource.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/resources/node_resource.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/resources/node_resource.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/resources/node_resource.inc	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,765 @@
+<?php
+
+function _node_resource_definition() {
+  $node_resource = array(
+    'node' => array(
+      'operations' => array(
+        'retrieve' => array(
+          'help' => 'Retrieve a node',
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/node_resource'),
+          'callback' => '_node_resource_retrieve',
+          'args' => array(
+            array(
+              'name' => 'nid',
+              'optional' => FALSE,
+              'source' => array('path' => 0),
+              'type' => 'int',
+              'description' => 'The nid of the node to retrieve',
+            ),
+          ),
+          'access callback' => '_node_resource_access',
+          'access arguments' => array('view'),
+          'access arguments append' => TRUE,
+        ),
+        'create' => array(
+          'help' => 'Create a node',
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/node_resource'),
+          'callback' => '_node_resource_create',
+          'args' => array(
+            array(
+              'name' => 'node',
+              'optional' => FALSE,
+              'source' => 'data',
+              'description' => 'The node data to create',
+              'type' => 'array',
+            ),
+          ),
+          'access callback' => '_node_resource_access',
+          'access arguments' => array('create'),
+          'access arguments append' => TRUE,
+        ),
+        'update' => array(
+          'help' => 'Update a node',
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/node_resource'),
+          'callback' => '_node_resource_update',
+          'args' => array(
+            array(
+              'name' => 'nid',
+              'optional' => FALSE,
+              'source' => array('path' => 0),
+              'type' => 'int',
+              'description' => 'The nid of the node to update',
+            ),
+            array(
+              'name' => 'node',
+              'optional' => FALSE,
+              'source' => 'data',
+              'description' => 'The node data to update',
+              'type' => 'array',
+            ),
+          ),
+          'access callback' => '_node_resource_access',
+          'access arguments' => array('update'),
+          'access arguments append' => TRUE,
+        ),
+        'delete' => array(
+          'help' => t('Delete a node'),
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/node_resource'),
+          'callback' => '_node_resource_delete',
+          'args' => array(
+            array(
+              'name' => 'nid',
+              'optional' => FALSE,
+              'source' => array('path' => 0),
+              'type' => 'int',
+              'description' => 'The nid of the node to delete',
+            ),
+          ),
+          'access callback' => '_node_resource_access',
+          'access arguments' => array('delete'),
+          'access arguments append' => TRUE,
+        ),
+        'index' => array(
+          'help' => 'List all nodes',
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/node_resource'),
+          'callback' => '_node_resource_index',
+          'args' => array(
+            array(
+              'name' => 'page',
+              'optional' => TRUE,
+              'type' => 'int',
+              'description' => 'The zero-based index of the page to get, defaults to 0.',
+              'default value' => 0,
+              'source' => array('param' => 'page'),
+            ),
+            array(
+              'name' => 'fields',
+              'optional' => TRUE,
+              'type' => 'string',
+              'description' => 'The fields to get.',
+              'default value' => '*',
+              'source' => array('param' => 'fields'),
+            ),
+            array(
+              'name' => 'parameters',
+              'optional' => TRUE,
+              'type' => 'array',
+              'description' => 'Parameters array',
+              'default value' => array(),
+              'source' => array('param' => 'parameters'),
+            ),
+            array(
+              'name' => 'pagesize',
+              'optional' => TRUE,
+              'type' => 'int',
+              'description' => 'Number of records to get per page.',
+              'default value' => variable_get('services_node_index_page_size', 20),
+              'source' => array('param' => 'pagesize'),
+            ),
+          ),
+          'access arguments' => array('access content'),
+        ),
+      ),
+      'targeted_actions' => array(
+        'attach_file' => array(
+          'help' => 'Upload and attach file(s) to a node. POST multipart/form-data to node/123/attach_file',
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/node_resource'),
+          'callback' => '_node_resource_attach_file',
+          'access callback' => '_node_resource_access',
+          'access arguments' => array('update'),
+          'access arguments append' => TRUE,
+          'args' => array(
+            array(
+              'name' => 'nid',
+              'optional' => FALSE,
+              'source' => array('path' => 0),
+              'type' => 'int',
+              'description' => 'The nid of the node to attach a file to',
+            ),
+            array(
+              'name' => 'field_name',
+              'optional' => FALSE,
+              'source' => array('data' => 'field_name'),
+              'description' => 'The file field name',
+              'type' => 'string',
+            ),
+            array(
+              'name' => 'attach',
+              'optional' => TRUE,
+              'source' => array('data' => 'attach'),
+              'description' => 'Attach the file(s) to the node. If FALSE, this clears ALL files attached, and attaches the files',
+              'type' => 'int',
+              'default value' => TRUE,
+            ),
+            array(
+              'name' => 'field_values',
+              'optional' => TRUE,
+              'source' => array('data' => 'field_values'),
+              'description' => 'The extra field values',
+              'type' => 'array',
+              'default value' => array(),
+            ),
+          ),
+        ),
+      ),
+      'relationships' => array(
+        'files' => array(
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/node_resource'),
+          'help'   => 'This method returns files associated with a node.',
+          'access callback' => '_node_resource_access',
+          'access arguments' => array('view'),
+          'access arguments append' => TRUE,
+          'callback' => '_node_resource_load_node_files',
+          'args'     => array(
+            array(
+              'name' => 'nid',
+              'optional' => FALSE,
+              'source' => array('path' => 0),
+              'type' => 'int',
+              'description' => 'The nid of the node whose files we are getting',
+            ),
+            array(
+              'name' => 'file_contents',
+              'type' => 'int',
+              'description'  => t('To return file contents or not.'),
+              'source' => array('path' => 2),
+              'optional' => TRUE,
+              'default value' => TRUE,
+            ),
+            array(
+              'name'         => 'image_styles',
+              'type'         => 'int',
+              'description'  => t('To return image styles or not.'),
+              'source'       => array('path' => 3),
+              'optional'     => TRUE,
+              'default value' => FALSE,
+            ),
+          ),
+        ),
+      ),
+    ),
+  );
+  if (module_exists('comment')) {
+    $comments = array(
+      'file'                    => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/node_resource'),
+      'help'                    => 'This method returns the number of new comments on a given node.',
+      'access callback'         => 'user_access',
+      'access arguments'        => array('access comments'),
+      'access arguments append' => FALSE,
+      'callback'                => '_node_resource_load_node_comments',
+      'args'                    => array(
+        array(
+          'name'         => 'nid',
+          'type'         => 'int',
+          'description'  => t('The node id to load comments for.'),
+          'source'       => array('path' => 0),
+          'optional'     => FALSE,
+        ),
+        array(
+          'name'         => 'count',
+          'type'         => 'int',
+          'description'  => t('Number of comments to load.'),
+          'source'       => array('param' => 'count'),
+          'optional'     => TRUE,
+        ),
+        array(
+          'name'         => 'offset',
+          'type'         => 'int',
+          'description'  => t('If count is set to non-zero value, you can pass also non-zero value for start. For example to get comments from 5 to 15, pass count=10 and start=5.'),
+          'source'       => array('param' => 'offset'),
+          'optional'     => TRUE,
+        ),
+      ),
+    );
+    $node_resource['node']['relationships']['comments'] =  $comments;
+  }
+  return $node_resource;
+}
+
+/**
+ * Returns the results of a node_load() for the specified node.
+ *
+ * This returned node may optionally take content_permissions settings into
+ * account, based on a configuration setting.
+ *
+ * @param $nid
+ *   NID of the node we want to return.
+ * @return
+ *   Node object or FALSE if not found.
+ *
+ * @see node_load()
+ */
+function _node_resource_retrieve($nid) {
+  $node = node_load($nid);
+
+  if ($node) {
+    $uri = entity_uri('node', $node);
+    $node->path = url($uri['path'], array('absolute' => TRUE));
+    // Unset uri as it has complete entity and this
+    // cause never ending recursion in rendering.
+    unset($node->uri);
+  }
+  return $node;
+}
+
+/**
+ * Creates a new node based on submitted values.
+ *
+ * Note that this function uses drupal_form_submit() to create new nodes,
+ * which may require very specific formatting. The full implications of this
+ * are beyond the scope of this comment block. The Googles are your friend.
+ *
+ * @param $node
+ *   Array representing the attributes a node edit form would submit.
+ * @return
+ *   An associative array contained the new node's nid and, if applicable,
+ *   the fully qualified URI to this resource.
+ *
+ * @see drupal_form_submit()
+ */
+function _node_resource_create($node) {
+  global $user;
+  // Adds backwards compatability with regression fixed in #1083242
+  $node = _services_arg_value($node, 'node');
+  if (!isset($node['name'])) {
+    // Assign username to the node from $user created at auth step.
+    if (isset($user->name)) {
+      $node['name'] = $user->name;
+    }
+  }
+  if(!isset($node['language'])) {
+    $node['language'] = LANGUAGE_NONE;
+  }
+  // Validate the node. If there is validation error Exception will be thrown
+  // so code below won't be executed.
+  _node_resource_validate_type($node);
+
+  // Load the required includes for drupal_form_submit
+  module_load_include('inc', 'node', 'node.pages');
+
+  $node_type = $node['type'];
+
+  // Setup form_state
+  $form_state = array();
+  $form_state['values'] = $node;
+  $form_state['values']['op'] = variable_get('services_node_save_button_' . $node_type . '_resource_create', t('Save'));
+  $form_state['programmed_bypass_access_check'] = FALSE;
+
+  // Build a stub node object for the form in a similar way as node_add() does,
+  // but always make the node author default to the current user (if the user
+  // has permission to change it, $form_state['values'] will override this
+  // default when the form is submitted).
+  $stub_node = (object) array_intersect_key($node, array_flip(array('type', 'language')));
+  $stub_node->name = $user->name;
+  drupal_form_submit($node_type . '_node_form', $form_state, (object)$stub_node);
+
+  if ($errors = form_get_errors()) {
+    return services_error(implode(" ", $errors), 406, array('form_errors' => $errors));
+  }
+  // Fetch $nid out of $form_state
+  $nid = $form_state['nid'];
+  // Only add the URI for servers that support it.
+  $node = array('nid' => $nid);
+  if ($uri = services_resource_uri(array('node', $nid))) {
+    $node['uri'] = $uri;
+  }
+  return $node;
+}
+
+/*
+ * Helper function to validate node type information.
+ *
+ * @param $node
+ *   Array representing the attributes a node edit form would submit.
+ */
+function _node_resource_validate_type($node) {
+  if (!isset($node['type'])) {
+    return services_error(t('Missing node type'), 406);
+  }
+  // Wanted to return a graceful error instead of a blank nid, this should
+  // allow for that.
+  $types = node_type_get_types();
+  $node_type = $node['type'];
+  if (!isset($types[$node_type])) {
+    return services_error(t('Node type @type does not exist.', array('@type' => $node_type)), 406);
+  }
+  $allowed_node_types = variable_get('services_allowed_create_content_types', $types);
+  if (!isset($allowed_node_types[$node_type])) {
+    return services_error(t("This node type @type can't be processed via services", array('@type' => $node_type)), 406);
+  }
+}
+
+/**
+ * Updates a new node based on submitted values.
+ *
+ * Note that this function uses drupal_form_submit() to create new nodes,
+ * which may require very specific formatting. The full implications of this
+ * are beyond the scope of this comment block. The Googles are your friend.
+ *
+ * @param $nid
+ *   Node ID of the node we're editing.
+ * @param $node
+ *   Array representing the attributes a node edit form would submit.
+ * @return
+ *   The node's nid.
+ *
+ * @see drupal_form_submit()
+ */
+function _node_resource_update($nid, $node) {
+  // Adds backwards compatability with regression fixed in #1083242
+  $node = _services_arg_value($node, 'node');
+
+  $node['nid'] = $nid;
+
+  $old_node = node_load($nid);
+  if (empty($old_node->nid)) {
+    return services_error(t('Node @nid not found', array('@nid' => $old_node->nid)), 404);
+  }
+
+  // If no type is provided use the existing node type.
+  if (empty($node['type'])) {
+    $node['type'] = $old_node->type;
+  }
+  elseif ($node['type'] != $old_node->type) {
+    // Node types cannot be changed once they are created.
+    return services_error(t('Node type cannot be changed'), 406);
+  }
+
+  // Validate the node. If there is validation error Exception will be thrown
+  // so code below won't be executed.
+  _node_resource_validate_type($node);
+
+  // Load the required includes for drupal_form_submit
+  module_load_include('inc', 'node', 'node.pages');
+
+  $node_type = $node['type'];
+  node_object_prepare($old_node);
+
+  // Setup form_state.
+  $form_state = array();
+  $form_state['values'] = $node;
+  $form_state['values']['op'] = variable_get('services_node_save_button_' . $node_type . '_resource_update', t('Save'));
+  $form_state['node'] = $old_node;
+  $form_state['programmed_bypass_access_check'] = FALSE;
+  drupal_form_submit($node_type . '_node_form', $form_state, $old_node);
+
+  if ($errors = form_get_errors()) {
+    return services_error(implode(" ", $errors), 406, array('form_errors' => $errors));
+  }
+
+  $node = array('nid' => $nid);
+  if ($uri = services_resource_uri(array('node', $nid))) {
+    $node['uri'] = $uri;
+  }
+  return $node;
+}
+
+/**
+ * Delete a node given its nid.
+ *
+ * @param int $nid
+ *   Node ID of the node we're deleting.
+ * @return bool
+ *   Always returns true.
+ */
+function _node_resource_delete($nid) {
+  node_delete($nid);
+  return TRUE;
+}
+
+/**
+ * Return an array of optionally paged nids baed on a set of criteria.
+ *
+ * An example request might look like
+ *
+ * http://domain/endpoint/node?fields=nid,vid&parameters[nid]=7&parameters[uid]=1
+ *
+ * This would return an array of objects with only nid and vid defined, where
+ * nid = 7 and uid = 1.
+ *
+ * @param $page
+ *   Page number of results to return (in pages of 20).
+ * @param $fields
+ *   The fields you want returned.
+ * @param $parameters
+ *   An array containing fields and values used to build a sql WHERE clause
+ *   indicating items to retrieve.
+ * @param $page_size
+ *   Integer number of items to be returned.
+ * @return
+ *   An array of node objects.
+ *
+ * @todo
+ *   Evaluate the functionality here in general. Particularly around
+ *     - Do we need fields at all? Should this just return full nodes?
+ *     - Is there an easier syntax we can define which can make the urls
+ *       for index requests more straightforward?
+ */
+function _node_resource_index($page, $fields, $parameters, $page_size) {
+  module_load_include('inc', 'services', 'services.module');
+  $node_select = db_select('node', 't')
+    ->addTag('node_access')
+    ->orderBy('sticky', 'DESC')
+    ->orderBy('created', 'DESC');
+
+  services_resource_build_index_query($node_select, $page, $fields, $parameters, $page_size, 'node');
+
+  if (!user_access('administer nodes')) {
+    $node_select->condition('status', 1);
+  }
+
+  $results = services_resource_execute_index_query($node_select);
+
+  return services_resource_build_index_list($results, 'node', 'nid');
+}
+
+/**
+ * Determine whether the current user can access a node resource.
+ *
+ * @param $op
+ *   One of view, update, create, delete per node_access().
+ * @param $args
+ *   Resource arguments passed through from the original request.
+ * @return bool
+ *
+ * @see node_access()
+ */
+function _node_resource_access($op = 'view', $args = array()) {
+  // Adds backwards compatability with regression fixed in #1083242
+  if (isset($args[0])) {
+    $args[0] = _services_access_value($args[0], 'node');
+  }
+
+  // Make sure we have an object or this all fails, some servers can
+  // mess up the types.
+  if (is_array($args[0])) {
+    $args[0] = (object) $args[0];
+  }
+  elseif (!is_array($args[0]) && !is_object($args[0])) {  //This is to determine if it is just a string happens on node/%NID
+    $args[0] = (object)array('nid' => $args[0]);
+  }
+
+  if ($op != 'create' && !empty($args)) {
+    $node = node_load($args[0]->nid);
+  }
+  elseif ($op == 'create') {
+    if (isset($args[0]->type)) {
+      $node = $args[0]->type;
+      return node_access($op, $node);
+    }
+    else {
+      return services_error(t('Node type is required'), 406);
+    }
+  }
+  if (isset($node->nid) && $node->nid) {
+    return node_access($op, $node);
+  }
+  else {
+    return services_error(t('Node @nid could not be found', array('@nid' => $args[0]->nid)), 404);
+  }
+}
+
+/**
+ * Generates an array of base64 encoded files attached to a node
+ *
+ * @param $nid
+ *   Number. Node ID
+ * @param $include_file_contents
+ *   Bool Whether or not to include the base64_encoded version of the file.
+  * @param $get_image_style
+ *   Bool Whether or not to provide image style paths.
+ * @return
+ *   Array. A list of all files from the given node
+ */
+function _node_resource_load_node_files($nid, $include_file_contents, $get_image_style) {
+  module_load_include('inc', 'services', 'resources/file_resource');
+  $node = node_load($nid);
+
+  // Hopefully theres another way to get a nodes fields that are a file, but this was the only way I could do it.
+  $fields = field_info_fields();
+  $files = array();
+
+  // Loop through all of the fields on the site
+  foreach ($fields as $key => $field) {
+    //if we are a field type of file
+    if ($field['type'] == 'image' || $field['type'] == 'file') {
+      // If this field exists on our current node..
+      if (isset($node->{$field['field_name']})) {
+        // If there are items in the field...
+        if (isset($node->{$field['field_name']}[LANGUAGE_NONE])) {
+          // Grab the items given and attach them to the array.
+          $node_file_field_items = $node->{$field['field_name']}[LANGUAGE_NONE];
+          foreach ($node_file_field_items as $file) {
+            $files[] = _file_resource_retrieve($file['fid'], $include_file_contents, $get_image_style);
+          }
+        }
+      }
+    }
+  }
+
+  return $files;
+}
+
+/**
+ * Returns the comments of a specified node.
+ *
+ * @param $nid
+ *   Unique identifier for the node.
+ * @param $count
+ *   Number of comments to return.
+ * @param $start
+ *   Which comment to start with. If present, $start and $count are used together
+ *   to create a LIMIT clause for selecting comments. This could be used to do paging.
+ * @return
+ *   An array of comment objects.
+ */
+function _node_resource_load_node_comments($nid, $count = 0, $start = 0) {
+  $query = db_select('comment', 'c');
+  $query->innerJoin('node', 'n', 'n.nid = c.nid');
+  $query->addTag('node_access');
+  $query->fields('c', array('cid'))
+    ->condition('c.nid', $nid);
+
+  if ($count) {
+    $query->range($start, $count);
+  }
+
+  $result = $query->execute()
+    ->fetchAll();
+
+  foreach ($result as $record) {
+    $cids[] = $record->cid;
+  }
+
+  return !empty($cids) ? comment_load_multiple($cids) : array();
+}
+
+/**
+ * Attaches or overwrites file(s) to an existing node.
+ *
+ * Example form element used to post files to attach_file:
+ * <form action="site.com/endpoint/node/1234/attach_file" method="post"
+ * enctype="multipart/form-data">
+ * <input name="files[anything1]" type="file" />
+ * <input name="files[anything2]" type="file" />
+ * <input name="field_name" type="text" value="field_image" />
+ * <input name="attach" type="text" value="0" />
+ *
+ * The name="files[anything]" format is required to use file_save_upload().
+ *
+ * @param $nid
+ *   Node ID of the node the file(s) is being attached to.
+ * @param $field_name
+ *   Machine name of the field that is attached to the node.
+ * @param $attach
+ *   Optional. Defaults to true. This means that files will be attached to the
+ *   node, alongside existing files. If the maximum number of files have already
+ *   been uploaded to this node an error is given.
+ *   If false, it removes the files, and attaches the new files uploaded.
+ * @return
+ *   An array of files that were attached in the form:
+ *   array(
+ *     array(
+ *       fid => N,
+ *       uri => http://site.com/endpoint/file/N
+ *     ),
+ *     ...
+ *   )
+ *
+ * @see file_save_upload()
+ * @see file
+ */
+function _node_resource_attach_file($nid, $field_name, $attach, $field_values) {
+  $node = node_load($nid);
+  $node_type=$node->type;
+
+  if (empty($node->{$field_name}[LANGUAGE_NONE] )) {
+    $node->{$field_name}[LANGUAGE_NONE] = array();
+  }
+
+  // Validate whether field instance exists and this node type can be edited.
+  _node_resource_validate_node_type_field_name('update', array($node_type, $field_name));
+
+  $counter = 0;
+  if ($attach) {
+    $counter = count($node->{$field_name}[LANGUAGE_NONE]);
+  }
+  else {
+    $node->{$field_name}[LANGUAGE_NONE] = array();
+  }
+
+  $options = array('attach' => $attach, 'file_count' => $counter);
+
+  list($files, $file_objs) = _node_resource_file_save_upload($node_type, $field_name, $options);
+  // Retrieve the field settings.
+  $field = field_info_field($field_name);
+
+  foreach ($file_objs as $key => $file_obj) {
+    if (isset($field_values[$key])) {
+      foreach ($field_values[$key] as $key => $value) {
+        $file_obj->$key = $value;
+      }
+    }
+
+    $node->{$field_name}[LANGUAGE_NONE][$counter] = (array)$file_obj;
+    // Check the field display settings.
+    if (isset($field['settings']['display_field'])) {
+      // Set the display option.
+      $node->{$field_name}[LANGUAGE_NONE][$counter]['display'] = $field['settings']['display_field'];
+    }
+    $counter++;
+  }
+
+  node_save($node);
+
+  return $files;
+}
+
+/**
+ * Services wrapper for file_save_upload.
+ *
+ * @see file_save_upload()
+ * @see file_managed_file_save_upload()
+ */
+function _node_resource_file_save_upload($node_type, $field_name, $options= array() ) {
+  // The field_name on node_type should be checked in the access callback.
+  $instance = field_info_instance('node', $field_name, $node_type);
+  $field = field_read_field($field_name);
+  $cardinality = $field['cardinality'];
+
+  // If cardinality is not unlimited check the how many 'slots' we have left.
+  if (($cardinality > 0) && isset($options['file_count'])) {
+    // Already uploaded files
+    $file_already_uploaded_count = $options['file_count'];
+    // How many files we are going to upload.
+    $file_upload_count = count($_FILES['files']['name']);
+           // If we add new files and not replace already uploaded.
+    if (   (isset($options['attach']) && ($options['attach']) && ($file_already_uploaded_count + $file_upload_count > $cardinality))
+           // If we replace existing files.
+        || ((!isset($options['attach']) || !$options['attach']) && $file_upload_count > $cardinality)) {
+      return services_error(t('You cannot upload so many files.'));
+    }
+  }
+
+  $destination = file_field_widget_uri($field, $instance );
+  if (isset($destination) && !file_prepare_directory($destination, FILE_CREATE_DIRECTORY)) {
+    return services_error(t('The upload directory %directory for the file field !name could not be created or is not accessible. A newly uploaded file could not be saved in this directory as a consequence, and the upload was canceled.', array('%directory' => $destination, '!name' => $field_name)));
+  }
+
+  $validators = array(
+    'file_validate_extensions' =>  (array)$instance['settings']['file_extensions'],
+    'file_validate_size' => array(0 => parse_size($instance['settings']['max_filesize'])),
+  );
+
+  $files = $file_objs = array();
+
+  foreach ($_FILES['files']['name'] as $key => $val) {
+
+    // Let the file module handle the upload and moving.
+    if (!$file = file_save_upload($key, $validators, $destination, FILE_EXISTS_RENAME) ) {
+      return services_error(t('Failed to upload file. @upload', array('@upload' => $key)), 406);
+    }
+
+    if ($file->fid) {
+      // Add info to the array that will be returned/encdoed to xml/json.
+      $files[] = array(
+        'fid' => $file->fid,
+        'uri' => services_resource_uri(array('file', $file->fid)),
+      );
+      $file_objs[] = $file;
+    }
+    else {
+      return services_error(t('An unknown error occurred'), 500);
+    }
+  }
+
+  return array($files, $file_objs);
+}
+
+/**
+ * Helper function to validate data.
+ *
+ * @param $op
+ *   Array representing the attributes a node edit form would submit.
+ * @param $args
+ *   Resource arguments passed through from the original request (node_type,
+ *   field_name).
+ *
+ * @return bool
+ *   TRUE/FALSE based on access.
+ */
+function _node_resource_validate_node_type_field_name($op = 'create', $args = array()) {
+  $node_type = $args[0];
+  $field_name = $args[1];
+
+  $temp_node= array('type' => $node_type);
+
+  // An invalid node type throws an exception, and stops before the return below.
+  _node_resource_validate_type($temp_node);
+
+  if (!field_info_instance('node', $field_name, $node_type)) {
+    return services_error(t('Field name \'@field_name\' not found on node type \'@node_type\'', array('@field_name' => $field_name, '@node_type' => $node_type)), 406);
+  }
+
+  return TRUE;
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/resources/system_resource.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/resources/system_resource.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/resources/system_resource.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/resources/system_resource.inc	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,101 @@
+<?php
+
+/**
+ * @file
+ *  Link general system functionalities to services module.
+ */
+
+function _system_resource_definition() {
+  return array(
+    'system' => array(
+      'actions' => array(
+        'connect' => array(
+          'access callback' => 'services_access_menu',
+          'help' => 'Returns the details of currently logged in user.',
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/system_resource'),
+          'callback' => '_system_resource_connect',
+        ),
+        'get_variable' => array(
+          'help'   => 'Returns the value of a system variable using variable_get().',
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/system_resource'),
+          'callback' => 'variable_get',
+          'access arguments' => array('get a system variable'),
+          'access arguments append' => FALSE,
+          'args' => array(
+            array(
+              'name' => 'name',
+              'optional' => FALSE,
+              'source' => array('data' => 'name'),
+              'description' => t('The name of the variable to return.'),
+              'type' => 'string',
+            ),
+            array(
+              'name' => 'default',
+              'optional' => TRUE,
+              'source' => array('data' => 'default'),
+              'description' => t('The default value to use if this variable has never been set.'),
+              'type' => 'string',
+            ),
+          ),
+        ),
+        'set_variable' => array(
+          'help'   => 'Sets the value of a system variable using variable_set().',
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/system_resource'),
+          'callback' => 'variable_set',
+          'access arguments' => array('set a system variable'),
+          'access arguments append' => FALSE,
+          'args' => array(
+            array(
+              'name' => 'name',
+              'optional' => FALSE,
+              'source' => array('data' => 'name'),
+              'description' => t('The name of the variable to set.'),
+              'type' => 'string',
+            ),
+            array(
+              'name' => 'value',
+              'optional' => FALSE,
+              'source' => array('data' => 'value'),
+              'description' => t('The value to set.'),
+              'type' => 'string',
+            ),
+          ),
+        ),
+        'del_variable' => array(
+          'help'   => 'Deletes a system variable using variable_del().',
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/system_resource'),
+          'callback' => 'variable_del',
+          'access arguments' => array('set a system variable'),
+          'access arguments append' => FALSE,
+          'args' => array(
+            array(
+              'name' => 'name',
+              'optional' => FALSE,
+              'source' => array('data' => 'name'),
+              'description' => t('The name of the variable to delete.'),
+              'type' => 'string',
+            ),
+          ),
+        ),
+      ),
+    ),
+  );
+}
+
+/**
+ * Returns the details of currently logged in user.
+ *
+ * @return
+ *   object with session id, session name and a user object.
+ */
+function _system_resource_connect() {
+  global $user;
+  services_remove_user_data($user);
+
+  $return = new stdClass();
+  $return->sessid = session_id();
+  $return->session_name = session_name();
+  $return->user = $user;
+
+  return $return;
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/resources/taxonomy_resource.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/resources/taxonomy_resource.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/resources/taxonomy_resource.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/resources/taxonomy_resource.inc	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,641 @@
+<?php
+/**
+ * @file
+ *  Link general taxonomy functionalities to services module.
+ */
+
+function _taxonomy_resource_definition() {
+  if (!module_exists('taxonomy')) {
+    return array();
+  }
+
+  return array(
+    'taxonomy_term' => array(
+      'operations' => array(
+        'retrieve' => array(
+          'help' => 'Retrieve a term',
+          'callback' => '_taxonomy_term_resource_retrieve',
+          'args' => array(
+            array(
+              'name' => 'tid',
+              'optional' => FALSE,
+              'source' => array('path' => 0),
+              'type' => 'int',
+              'description' => 'The tid of the taxonomy term to get',
+            ),
+          ),
+          'access arguments' => array('access content'),
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/taxonomy_resource'),
+        ),
+        'create' => array(
+          'help' => 'Create a term',
+          'callback' => '_taxonomy_term_resource_create',
+          'args' => array(
+            array(
+              'name' => 'term',
+              'optional' => FALSE,
+              'source' => 'data',
+              'description' => 'The taxonomy term object to create',
+              'type' => 'array',
+            ),
+          ),
+          'access callback' => '_taxonomy_resource_create_access',
+          'access arguments append' => TRUE,
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/taxonomy_resource'),
+        ),
+        'update' => array(
+          'help' => 'Update a term',
+          'callback' => '_taxonomy_term_resource_update',
+          'args' => array(
+            array(
+              'name' => 'tid',
+              'optional' => FALSE,
+              'source' => array('path' => 0),
+              'description' => 'The unique identifier for this taxonomy term.',
+              'type' => 'int',
+            ),
+            array(
+              'name' => 'term',
+              'optional' => FALSE,
+              'source' => 'data',
+              'description' => 'The taxonomy term data to update',
+              'type' => 'array',
+            ),
+          ),
+          'access callback' => '_taxonomy_resource_update_access',
+          'access arguments append' => TRUE,
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/taxonomy_resource'),
+        ),
+        'delete' => array(
+          'help' => 'Delete the term',
+          'callback' => '_taxonomy_term_resource_delete',
+          'args' => array(
+            array(
+              'name' => 'tid',
+              'optional' => FALSE,
+              'source' => array('path' => 0),
+              'type' => 'int',
+            ),
+          ),
+          'access callback' => '_taxonomy_resource_delete_access',
+          'access arguments append' => TRUE,
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/taxonomy_resource'),
+        ),
+        'index' => array(
+          'help' => 'List all terms',
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/taxonomy_resource'),
+          'callback' => '_taxonomy_term_resource_index',
+          'args' => array(
+            array(
+              'name' => 'page',
+              'optional' => TRUE,
+              'type' => 'int',
+              'description' => 'The zero-based index of the page to get, defaults to 0.',
+              'default value' => 0,
+              'source' => array('param' => 'page'),
+            ),
+            array(
+              'name' => 'fields',
+              'optional' => TRUE,
+              'type' => 'string',
+              'description' => 'The fields to get.',
+              'default value' => '*',
+              'source' => array('param' => 'fields'),
+            ),
+            array(
+              'name' => 'parameters',
+              'optional' => TRUE,
+              'type' => 'array',
+              'description' => 'Parameters',
+              'default value' => array(),
+              'source' => array('param' => 'parameters'),
+            ),
+            array(
+              'name' => 'pagesize',
+              'optional' => TRUE,
+              'type' => 'int',
+              'description' => 'Number of records to get per page.',
+              'default value' => variable_get('services_taxonomy_term_index_page_size', 20),
+              'source' => array('param' => 'pagesize'),
+            ),
+          ),
+          'access arguments' => array('access content'),
+        ),
+      ),
+      'actions' => array(
+        'selectNodes' => array(
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/taxonomy_resource'),
+          'help'   => t('Returns all nodes with provided taxonomy id.'),
+          'access arguments' => array('access content'),
+          'callback' => 'taxonomy_service_select_nodes',
+          'args'     => array(
+            array(
+              'name'         => 'tid',
+              'type'         => 'string',
+              'description'  => t('The vocabulary ids to retrieve, separated by comma.'),
+              'source'       => array('data' => 'tid'),
+              'optional'     => FALSE,
+            ),
+            array(
+              'name'         => 'pager',
+              'type'         => 'int',
+              'description'  => t('Whether the nodes are to be used with a pager (the case on most Drupal pages) or not (in an XML feed, for example).'),
+              'source'       => array('data' => 'pager'),
+              'optional'     => TRUE,
+              'default value'=> TRUE,
+            ),
+            array(
+              'name'         => 'limit',
+              'type'         => 'int',
+              'description'  => t('Maximum number of nodes to find.'),
+              'source'       => array('data' => 'limit'),
+              'optional'     => TRUE,
+              'default value'=> FALSE,
+            ),
+            array(
+              'name'         => 'order',
+              'type'         => 'int',
+              'description'  => t('The order clause for the query that retrieve the nodes.'),
+              'source'       => array('data' => 'order'),
+              'optional'     => TRUE,
+              'default value'=> array('t.sticky' => 'DESC', 't.created' => 'DESC'),
+            ),
+          ),
+        ),
+      ),
+    ),
+    'taxonomy_vocabulary' => array(
+      'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/taxonomy_resource'),
+      'operations' => array(
+        'retrieve' => array(
+          'help' => 'Retrieve a taxonomy vocabulary',
+          'callback' => '_taxonomy_vocabulary_resource_retrieve',
+          'args' => array(
+            array(
+              'name' => 'vid',
+              'optional' => FALSE,
+              'source' => array('path' => 0),
+              'type' => 'int',
+              'description' => 'The vid of the taxonomy vocabulary to get',
+            ),
+          ),
+          'access arguments' => array('access content'),
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/taxonomy_resource'),
+        ),
+        'create' => array(
+          'help' => 'Create a taxonomy vocabulary',
+          'callback' => '_taxonomy_vocabulary_resource_create',
+          'args' => array(
+            array(
+              'name' => 'vocabulary',
+              'optional' => FALSE,
+              'source' => 'data',
+              'description' => 'The taxonomy vocabulary object to create',
+              'type' => 'array',
+            ),
+          ),
+          'access arguments' => array('administer taxonomy'),
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/taxonomy_resource'),
+        ),
+        'update' => array(
+          'help' => 'Update a taxonomy vocabulary',
+          'callback' => '_taxonomy_vocabulary_resource_update',
+          'args' => array(
+            array(
+              'name' => 'vid',
+              'optional' => FALSE,
+              'source' => array('path' => 0),
+              'description' => 'The unique identifier for this taxonomy vocabulary.',
+              'type' => 'int',
+            ),
+            array(
+              'name' => 'vocabulary',
+              'optional' => FALSE,
+              'source' => 'data',
+              'description' => 'The taxonomy vocabulary data to update',
+              'type' => 'array',
+            ),
+          ),
+          'access arguments' => array('administer taxonomy'),
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/taxonomy_resource'),
+        ),
+        'delete' => array(
+          'help' => 'Delete a taxonomy vocabulary',
+          'callback' => '_taxonomy_vocabulary_resource_delete',
+          'args' => array(
+            array(
+              'name' => 'vid',
+              'optional' => FALSE,
+              'source' => array('path' => 0),
+              'type' => 'int',
+            ),
+          ),
+          'access arguments' => array('administer taxonomy'),
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/taxonomy_resource'),
+        ),
+        'index' => array(
+          'help' => 'List all taxonomy vocabularies',
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/taxonomy_resource'),
+          'callback' => '_taxonomy_vocabulary_resource_index',
+          'args' => array(
+            array(
+              'name' => 'page',
+              'optional' => TRUE,
+              'type' => 'int',
+              'description' => 'The zero-based index of the page to get, defaults to 0.',
+              'default value' => 0,
+              'source' => array('param' => 'page'),
+            ),
+            array(
+              'name' => 'fields',
+              'optional' => TRUE,
+              'type' => 'string',
+              'description' => 'The fields to get.',
+              'default value' => '*',
+              'source' => array('param' => 'fields'),
+            ),
+            array(
+              'name' => 'parameters',
+              'optional' => TRUE,
+              'type' => 'array',
+              'description' => 'Parameters',
+              'default value' => array(),
+              'source' => array('param' => 'parameters'),
+            ),
+            array(
+              'name' => 'pagesize',
+              'optional' => TRUE,
+              'type' => 'int',
+              'description' => 'Number of records to get per page.',
+              'default value' => variable_get('services_taxonomy_vocabulary_index_page_size', 20),
+              'source' => array('param' => 'pagesize'),
+            ),
+          ),
+          'access arguments' => array('access content'),
+        ),
+      ),
+      'actions' => array(
+        'getTree' => array(
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/taxonomy_resource'),
+          'help'   => t('Returns a full list of taxonomy terms.'),
+          'access arguments' => array('access content'),
+          'callback' => 'taxonomy_service_get_tree',
+          'args'     => array(
+            array(
+              'name'         => 'vid',
+              'type'         => 'int',
+              'description'  => t('The vocabulary id to retrieve.'),
+              'source'       => array('data' => 'vid'),
+              'optional'     => FALSE,
+            ),
+            array(
+              'name'         => 'parent',
+              'type'         => 'int',
+              'description'  => t('The term ID under which to generate the tree. If 0, generate the tree for the entire vocabulary.'),
+              'source'       => array('data' => 'parent'),
+              'default value' => 0,
+              'optional'     => TRUE,
+            ),
+            array(
+              'name'         => 'maxdepth',
+              'type'         => 'int',
+              'description'  => t('The number of levels of the tree to return. Leave NULL to return all levels.'),
+              'source'       => array('data' => 'maxdepth'),
+              'default value' => NULL,
+              'optional'     => TRUE,
+            ),
+            array(
+              'name'         => 'load_entities',
+              'type'         => 'int',
+              'description'  => t('Whether the tree of terms should contain full term entity objects. If 1 (TRUE), a full entity load will occur on the term objects. Otherwise they are partial objects to save execution time and memory consumption. Defaults to 0 (FALSE).'),
+              'source'       => array('data' => 'load_entities'),
+              'default value' => 0,
+              'optional'     => TRUE,
+            ),
+          ),
+        ),
+      ),
+    ),
+  );
+}
+
+/**
+ * Return the results of taxonomy_get_term() for a specified term id.
+ *
+ * @param $tid
+ *   Unique identifier for the taxonomy term to retrieve.
+ * @return
+ *   A term object.
+ *
+ * @see taxonomy_get_term()
+ */
+function _taxonomy_term_resource_retrieve($tid) {
+  return taxonomy_term_load($tid);
+}
+
+/**
+ * Create a new taxonomy term based on submitted values.
+ *
+ * @param $term
+ *   Array of values for the taxonomy term.
+ * @return
+ *   Status constant indicating if term was inserted or updated.
+ *
+ * @see taxonomy_save_term()
+ */
+function _taxonomy_term_resource_create($term) {
+  // Adds backwards compatability with regression fixed in #1083242
+  $term = _services_arg_value($term, 'term');
+
+  $term = (object)$term;
+  return taxonomy_term_save($term);
+}
+
+/**
+ * Update a taxonomy term based on submitted values.
+ *
+ * @param $tid
+ *   Unique identifier for the taxonomy term to update.
+ * @param $term
+ *   Array of values for the taxonomy term.
+ * @return
+ *   Status constant indicating if term was inserted or updated.
+ *
+ * @see taxonomy_save_term()
+ */
+function _taxonomy_term_resource_update($tid, $term) {
+  // Adds backwards compatability with regression fixed in #1083242
+  $term = _services_arg_value($term, 'term');
+
+  $term = (object) $term;
+  $term->tid = $tid;
+  return taxonomy_term_save($term);
+}
+
+/**
+ * Delete a taxonomy term.
+ *
+ * @param $tid
+ *   Unique identifier for the taxonomy term to delete.
+ * @return
+ *   Status constant indicating deletion.
+ *
+ * @see taxonomy_del_term()
+ */
+function _taxonomy_term_resource_delete($tid) {
+  return taxonomy_term_delete($tid);
+}
+
+
+/**
+ * Return the results of taxonomy_vocabulary_load() for a specified vocabulary id.
+ *
+ * @param $vid
+ *   Unique identifier for the taxonomy term to retrieve.
+ * @return
+ *   A vocabulary object or FALSE.
+ *
+ * @see taxonomy_vocabulary_load()
+ */
+function _taxonomy_vocabulary_resource_retrieve($vid) {
+  return taxonomy_vocabulary_load($vid);
+}
+
+/**
+ * Create a new taxonomy vocabulary based on submitted values.
+ *
+ * Here is a sample vocabulary array, taken from
+ * http://drupaldeveloper.in/article/programmatically-create-vocabulary
+ *
+ * @code
+ * $vocabulary = array(
+ *   'name'  => t("Name"). // Human readable name of the vocabulary
+ *   'description' => t("Description"), // extended description of the vocabulary
+ *   'help' => t("help"), // help text
+ *   'tags' => 0, // 1 to make this vocabulary free tagging
+ *   'multiple' => 0, // 1 to allow multiple selection
+ *   'required' => 0, // 1 to make the terms mandatory to be selected
+ *   'hierarchy' => 0, // 1 to allow and create hierarchy of the terms within the vocabulary
+ *   'relations' => 0, // 1 to set and allow relation amongst multiple terms
+ *   'module' => 'mymodule', // provide the module name in which the vocabulary is defined and which is calling this function
+ *   'node' => array('story' => 1), // content types to which this vocabulary will be attached to
+ *   'weight' => -9, // set the weight to display the vocabulary in the list
+ * );
+ * @endcode
+ *
+ * @param $vocabulary
+ *   Array of values for the taxonomy vocabulary.
+ * @return
+ *   Status constant indicating if vocabulary was inserted or updated.
+ *
+ * @see taxonomy_vocabulary_save()
+ */
+function _taxonomy_vocabulary_resource_create($vocabulary) {
+  // Adds backwards compatability with regression fixed in #1083242
+  $vocabulary = _services_arg_value($vocabulary, 'vocabulary');
+
+  $vocabulary = (object) $vocabulary;
+  return taxonomy_vocabulary_save($vocabulary);
+}
+
+/**
+ * Update a taxonomy vocabulary based on submitted values.
+ *
+ * @param $vid
+ *   Unique identifier for the taxonomy term to retrieve.
+ * @param $vocabulary
+ *   Array of values for the taxonomy vocabulary.
+ * @return
+ *   Status constant indicating if vocabulary was inserted or updated.
+ *
+ * @see taxonomy_vocabulary_save()
+ */
+function _taxonomy_vocabulary_resource_update($vid, $vocabulary) {
+  // Adds backwards compatability with regression fixed in #1083242
+  $vocabulary = _services_arg_value($vocabulary, 'vocabulary');
+
+  $vocabulary = (object) $vocabulary;
+  $vocabulary->vid = $vid;
+  return taxonomy_vocabulary_save($vocabulary);
+}
+
+/**
+ * Delete a taxonomy vocabulary.
+ *
+ * @param $vid
+ *   Unique identifier for the taxonomy term to retrieve.
+ * @return
+ *   Status constant indicating deletion.
+ *
+ * @see taxonomy_del_vocabulary()
+ */
+function _taxonomy_vocabulary_resource_delete($vid) {
+  return taxonomy_vocabulary_delete($vid);
+}
+
+
+
+/**
+ * Services interface to taxonomy_get_tree().
+ *
+ * @see taxonomy_get_tree()
+ */
+function taxonomy_service_get_tree($vid, $parent = 0, $max_depth = NULL, $load_entities = 0) {
+  $terms = taxonomy_get_tree($vid, $parent, $max_depth, $load_entities);
+  if (empty($terms)) {
+    return services_error(t('No vocabulary with id @vid found.', array('@vid' => $vid)), 404);
+  }
+  return $terms;
+}
+
+/**
+ * Services interface to taxonomy_select_nodes().
+ *
+ * Note that where taxonomy_select_nodes() returns the results
+ * of a db_query(), this function returns an array of node objects.
+ *
+ * @see taxonomy_select_nodes()
+ * @return
+ *   An array of node objects.
+ */
+function taxonomy_service_select_nodes($tid = '', $pager, $limit,  $order) {
+  $result = taxonomy_select_nodes($tid, (bool)$pager, $limit, $order);
+  foreach ($result as $nid) {
+    $node = node_load($nid);
+    if ($uri = services_resource_uri(array('node', $nid))) {
+      $node->uri = $uri;
+    }
+    $nodes[] = $node;
+  }
+  if (empty($nodes)) {
+    return services_error(t('No nodes were found with tid @tid', array('@tid' => $tid)), 404);
+  }
+  return $nodes;
+}
+
+/**
+ * Access callback for term updating.
+ *
+ * @param $term
+ *   An taxonomy term object
+ * @return
+ *   Boolean whether or not the user has access to create or edit the term.
+ */
+function _taxonomy_resource_update_access($tid, $term) {
+  // Adds backwards compatability with regression fixed in #1083242
+  $term = _services_arg_value($term, 'term');
+
+  $term = (object) $term;
+  if (!isset($term->vid)) {
+    return services_error(t('Term object needs vid property.'), 406);
+  }
+  return user_access('edit terms in ' . $term->vid) || user_access('administer taxonomy');
+}
+
+/**
+ * Access callback for term creating.
+ *
+ * @param $term
+ *   An taxonomy term object
+ * @return
+ *   Boolean whether or not the user has access to create or edit the term.
+ */
+function _taxonomy_resource_create_access($term) {
+  // Adds backwards compatability with regression fixed in #1083242
+  $term = _services_arg_value($term, 'term');
+
+  $term = (object) $term;
+  return user_access('edit terms in ' . $term->vid) || user_access('administer taxonomy');
+}
+
+/**
+ * Access callback for term deleting.
+ *
+ * @param $term
+ *   An taxonomy term object
+ * @return
+ *   Boolean whether or not the user has access to delete the term.
+ */
+function _taxonomy_resource_delete_access($tid) {
+  $term = taxonomy_term_load($tid);
+  if (!$term) {
+    return services_error(t('There is no term with id @tid.', array('@tid' => $tid)), 406);
+  }
+  return user_access('delete terms in ' . $term->vid) || user_access('administer taxonomy');
+}
+
+/**
+ * Return an array of optionally paged tids baed on a set of criteria.
+ *
+ * An example request might look like
+ *
+ * http://domain/endpoint/taxonomy_term?fields=tid,name&parameters[tid]=7&parameters[vid]=1
+ *
+ * This would return an array of objects with only tid and name defined, where
+ * tid = 7 and vid = 1.
+ *
+ * @param $page
+ *   Page number of results to return (in pages of 20).
+ * @param $fields
+ *   The fields you want returned.
+ * @param $parameters
+ *   An array containing fields and values used to build a sql WHERE clause
+ *   indicating items to retrieve.
+ * @param $page_size
+ *   Integer number of items to be returned.
+ * @return
+ *   An array of term objects.
+ *
+ * @see _node_resource_index() for more notes
+ **/
+function _taxonomy_term_resource_index($page, $fields, $parameters, $page_size) {
+  $taxonomy_select = db_select('taxonomy_term_data', 't')
+    ->orderBy('vid', 'DESC')
+    ->orderBy('weight', 'DESC')
+    ->orderBy('name', 'DESC');
+
+  services_resource_build_index_query($taxonomy_select, $page, $fields, $parameters, $page_size, 'taxonomy_term');
+
+  $results = services_resource_execute_index_query($taxonomy_select);
+
+  return services_resource_build_index_list($results, 'taxonomy_term', 'tid');
+}
+
+/**
+ * Return an array of optionally paged vids baed on a set of criteria.
+ *
+ * An example request might look like
+ *
+ * http://domain/endpoint/taxonomy_vocabulary?fields=vid,name&parameters[vid]=2
+ *
+ * This would return an array of objects with only vid and name defined, where
+ * vid = 2.
+ *
+ * @param $page
+ *   Page number of results to return (in pages of 20).
+ * @param $fields
+ *   The fields you want returned.
+ * @param $parameters
+ *   An array containing fields and values used to build a sql WHERE clause
+ *   indicating items to retrieve.
+ * @param $page_size
+ *   Integer number of items to be returned.
+ * @return
+ *   An array of vocabulary objects.
+ *
+ * @todo
+ *   Support node types as parameters.
+ *
+ * @see _node_resource_index() for more notes
+ **/
+function _taxonomy_vocabulary_resource_index($page, $fields, $parameters, $page_size) {
+  $taxonomy_select = db_select('taxonomy_vocabulary', 't')
+    ->orderBy('weight', 'DESC')
+    ->orderBy('name', 'DESC');
+
+  services_resource_build_index_query($taxonomy_select, $page, $fields, $parameters, $page_size, 'taxonomy_vocabulary');
+
+  $results = $taxonomy_select->execute();
+
+  return services_resource_build_index_list($results, 'taxonomy_vocabulary', 'vid');
+}
\ Brak znaku nowej linii na końcu pliku
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/resources/user_resource.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/resources/user_resource.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/resources/user_resource.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/resources/user_resource.inc	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,785 @@
+<?php
+
+function _user_resource_definition() {
+  $definition = array(
+    'user' => array(
+      'operations' => array(
+        'retrieve' => array(
+          'help' => 'Retrieve a user',
+          'callback' => '_user_resource_retrieve',
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/user_resource'),
+          'access callback' => '_user_resource_access',
+          'access arguments' => array('view'),
+          'access arguments append' => TRUE,
+          'args' => array(
+            array(
+              'name' => 'uid',
+              'type' => 'int',
+              'description' => 'The uid of the user to retrieve.',
+              'source' => array('path' => 0),
+              'optional' => FALSE,
+            ),
+          ),
+        ),
+
+        'create' => array(
+          'help' => 'Create a user',
+          'callback' => '_user_resource_create',
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/user_resource'),
+          'access callback' => '_user_resource_access',
+          'access arguments' => array('create'),
+          'access arguments append' => FALSE,
+          'args' => array(
+            array(
+              'name' => 'account',
+              'type' => 'array',
+              'description' => 'The user object',
+              'source' => 'data',
+              'optional' => FALSE,
+            ),
+          ),
+        ),
+
+        'update' => array(
+          'help' => 'Update a user',
+          'callback' => '_user_resource_update',
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/user_resource'),
+          'access callback' => '_user_resource_access',
+          'access arguments' => array('update'),
+          'access arguments append' => TRUE,
+          'args' => array(
+            array(
+              'name' => 'uid',
+              'type' => 'int',
+              'description' => 'Unique identifier for this user',
+              'source' => array('path' => 0),
+              'optional' => FALSE,
+            ),
+            array(
+              'name' => 'data',
+              'type' => 'array',
+              'description' => 'The user object with updated information',
+              'source' => 'data',
+              'optional' => FALSE,
+            ),
+          ),
+        ),
+
+        'delete' => array(
+          'help' => 'Delete a user',
+          'callback' => '_user_resource_delete',
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/user_resource'),
+          'access callback' => '_user_resource_access',
+          'access arguments' => array('delete'),
+          'access arguments append' => TRUE,
+          'args' => array(
+            array(
+              'name' => 'uid',
+              'type' => 'int',
+              'description' => 'The id of the user to delete',
+              'source' => array('path' => 0),
+              'optional' => FALSE,
+            ),
+          ),
+        ),
+        'index' => array(
+          'help' => 'List all users',
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/user_resource'),
+          'callback' => '_user_resource_index',
+          'args' => array(
+            array(
+              'name' => 'page',
+              'optional' => TRUE,
+              'type' => 'int',
+              'description' => 'The zero-based index of the page to get, defaults to 0.',
+              'default value' => 0,
+              'source' => array('param' => 'page'),
+            ),
+            array(
+              'name' => 'fields',
+              'optional' => TRUE,
+              'type' => 'string',
+              'description' => 'The fields to get.',
+              'default value' => '*',
+              'source' => array('param' => 'fields'),
+            ),
+            array(
+              'name' => 'parameters',
+              'optional' => TRUE,
+              'type' => 'array',
+              'description' => 'Parameters',
+              'default value' => array(),
+              'source' => array('param' => 'parameters'),
+            ),
+            array(
+              'name' => 'pagesize',
+              'optional' => TRUE,
+              'type' => 'int',
+              'description' => 'Number of records to get per page.',
+              'default value' => variable_get('services_user_index_page_size', 20),
+              'source' => array('param' => 'pagesize'),
+            ),
+          ),
+          'access arguments' => array('access user profiles'),
+          'access arguments append' => FALSE,
+        ),
+      ),
+      'actions' => array(
+        'login' => array(
+          'help' => 'Login a user for a new session',
+          'callback' => '_user_resource_login',
+          'args' => array(
+            array(
+              'name' => 'username',
+              'type' => 'string',
+              'description' => 'A valid username',
+              'source' => array('data' => 'username'),
+              'optional' => FALSE,
+            ),
+            array(
+              'name' => 'password',
+              'type' => 'string',
+              'description' => 'A valid password',
+              'source' => array('data' => 'password'),
+              'optional' => FALSE,
+            ),
+          ),
+          'access callback' => 'services_access_menu',
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/user_resource'),
+        ),
+
+        'logout' => array(
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/user_resource'),
+          'help' => 'Logout a user session',
+          'callback' => '_user_resource_logout',
+          'access callback' => 'services_access_menu',
+        ),
+        'token' => array(
+          'file' => array(
+            'type' => 'inc',
+            'module' => 'services',
+            'name' => 'user_resource',
+          ),
+          'callback' => '_user_resource_get_token',
+          'access callback' => 'services_access_menu',
+          'help' => t('Returns the CSRF token.'),
+        ),
+      ),
+      'targeted_actions' => array(
+        'cancel' => array(
+          'help' => 'Cancel a user',
+          'callback' => '_user_resource_cancel',
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/user_resource'),
+          'access callback' => '_user_resource_access',
+          'access arguments' => array('cancel'),
+          'access arguments append' => TRUE,
+          'args' => array(
+            array(
+              'name' => 'uid',
+              'optional' => FALSE,
+              'source' => array('path' => 0),
+              'type' => 'int',
+              'description' => 'The id of the user to cancel.',
+            ),
+          ),
+        ),
+        'password_reset' => array(
+          'access callback' => '_user_resource_access',
+          'access arguments' => array('password_reset'),
+          'access arguments append' => TRUE,
+          'callback' => '_user_resource_password_reset',
+          'args' => array(
+            array(
+              'name' => 'uid',
+              'optional' => FALSE,
+              'source' => array('path' => 0),
+              'type' => 'int',
+              'description' => 'The id of the user whose password to reset.',
+            ),
+          ),
+        ),
+        'resend_welcome_email' => array(
+          'access callback' => '_user_resource_access',
+          'access arguments' => array('resend_welcome_email'),
+          'access arguments append' => TRUE,
+          'callback' => '_user_resource_resend_welcome_email',
+          'args' => array(
+            array(
+              'name' => 'uid',
+              'optional' => FALSE,
+              'source' => array('path' => 0),
+              'type' => 'int',
+              'description' => 'The id of the user whose welcome email to resend.',
+            ),
+          ),
+        ),
+      ),
+    ),
+  );
+
+  $definition['user']['actions']['register'] = array_merge($definition['user']['operations']['create'], array(
+    'help' => 'Register a user',
+  ));
+
+  return $definition;
+}
+
+/**
+ * Get user details.
+ *
+ * @param $uid
+ *   UID of the user to be loaded.
+ *
+ * @return
+ *   A user object.
+ *
+ * @see user_load()
+ */
+function _user_resource_retrieve($uid) {
+  $account = user_load($uid);
+  if (empty($account)) {
+    return services_error(t('There is no user with ID @uid.', array('@uid' => $uid)), 404);
+  }
+
+  services_remove_user_data($account);
+
+  // Everything went right.
+  return $account;
+}
+
+/**
+ * Create a new user.
+ *
+ * This function uses drupal_form_submit() and as such expects all input to match
+ * the submitting form in question.
+ *
+ * @param $account
+ *   A object containing account information. The $account object should
+ *   contain, at minimum, the following properties:
+ *     - name (user name)
+ *     - mail (email address)
+ *     - pass (plain text unencrypted password)
+ *
+ *   These properties can be passed but are optional
+ *     - status (0 for blocked, otherwise will be active by default)
+ *     - notify (1 to notify user of new account, will not notify by default)
+ *
+ *  Roles can be passed in a roles property which is an associative
+ *  array formatted with '<role id>' => '<role id>', not including
+ *  the authenticated user role, which is given by default.
+ *
+ * @return
+ *   The user object of the newly created user.
+ */
+function _user_resource_create($account) {
+  // Adds backwards compatability with regression fixed in #1083242
+  $account = _services_arg_value($account, 'account');
+
+  // Load the required includes for saving profile information
+  // with drupal_form_submit().
+  module_load_include('inc', 'user', 'user.pages');
+
+  // register a new user
+  $form_state['values'] = $account;
+  // Password may be not available as this callback is used for register as well.
+  $form_state['values']['pass'] = array(
+    'pass1' => isset($account['pass']) ?: '',
+    'pass2' => isset($account['pass']) ?: '',
+  );
+  $form_state['values']['op'] = variable_get('services_user_create_button_resource_create', t('Create new account'));
+
+  // execute the register form
+  $form_state['programmed_bypass_access_check'] = FALSE;
+  drupal_form_submit('user_register_form', $form_state);
+  // find and store the new user into the form_state
+  if(isset($form_state['values']['uid'])) {
+    $form_state['user'] = user_load($form_state['values']['uid']);
+  }
+
+  // Error if needed.
+  if ($errors = form_get_errors()) {
+    return services_error(implode(" ", $errors), 406, array('form_errors' => $errors));
+  }
+  else {
+    $user = array('uid' => $form_state['user']->uid);
+    if ($uri = services_resource_uri(array('user', $user['uid']))) {
+      $user['uri'] = $uri;
+    }
+    return $user;
+  }
+}
+
+/**
+ * Update an existing user.
+ *
+ * This function uses drupal_form_submit() and as such expects all input to match
+ * the submitting form in question.
+ *
+ * @param $uid
+ *   Unique identifier for this user
+ * @param $account
+ *   Fields to modify for this user.
+ *
+ * @return
+ *   The modified user object.
+ */
+function _user_resource_update($uid, $account) {
+  // Adds backwards compatability with regression fixed in #1083242
+  $account = _services_arg_value($account, 'data');
+
+  $account['uid'] = $uid;
+
+  $account_loaded = user_load($uid);
+
+  // Load the required includes for saving profile information
+  // with drupal_form_submit().
+  module_load_include('inc', 'user', 'user.pages');
+
+  // If a profile category was passed in, use it. Otherwise default
+  // to 'account' (for saving core user data.)
+  $category = 'account';
+  if (isset($account['category'])) {
+    $category = $account['category'];
+    unset($account['category']);
+  }
+
+  // Drop any passed in values into the $account var. Anything
+  // unused by the form just gets ignored. We handle roles and
+  // password separately.
+  foreach ($account as $key => $value) {
+    if ($key != 'pass' && $key != 'roles') {
+      $form_state['values'][$key] = $value;
+    }
+  }
+
+  // Prepare values of roles. Check user's permission before allowing changes to roles.
+  if (!isset($account['roles']) || !user_access('administer users')) {
+    $account['roles'] = $account_loaded->roles;
+  }
+  foreach ($account['roles'] as $key => $value) {
+    if (!empty($value)) {
+      $form_state['values']['roles'][$key] = $key;
+    }
+  }
+  unset($form_state['values']['roles'][2]);
+
+  // Prepare values for password.
+  if (isset($account['pass'])) {
+    $form_state['values']['pass']['pass1'] = $account['pass'];
+    $form_state['values']['pass']['pass2'] = $account['pass'];
+  }
+
+  // If user is changing name, make sure they have permission.
+  if (isset($account['name']) && $account['name'] != $account_loaded->name && !(user_access('change own username') || user_access('administer users'))) {
+    return services_error(t('You are not allowed to change your username.'), 406);
+  }
+
+  $form_state['values']['op'] = variable_get('services_user_save_button_resource_update', t('Save'));
+  $form_state['values']['#user_category'] = $category;
+  $form_state['values']['#account'] = $account_loaded;
+  $form_state['programmed_bypass_access_check'] = FALSE;
+  $ret = drupal_form_submit('user_profile_form', $form_state, $account_loaded, $category);
+
+  // Error if needed.
+  if ($errors = form_get_errors()) {
+    return services_error(implode(" ", $errors), 406, array('form_errors' => $errors));
+  }
+  else {
+    services_remove_user_data($account);
+    return $account;
+  }
+}
+
+/**
+ * Delete a user.
+ *
+ * @param $uid
+ *   UID of the user to be deleted.
+ *
+ * @see user_delete()
+ */
+function _user_resource_delete($uid) {
+  if ($uid == 1) {
+    return services_error(t('The admin user cannot be deleted.'), 403);
+  }
+
+  $account = user_load($uid);
+  if (empty($account)) {
+    return services_error(t('There is no user with ID @uid.', array('@uid' => $uid)), 404);
+  }
+  user_delete($uid);
+
+  // Everything went right.
+  return TRUE;
+}
+
+/**
+ * Cancel a user.
+ *
+ * @param $uid
+ *   UID of the user to be canceled.
+ *
+ * @see user_cancel()
+ */
+function _user_resource_cancel($uid) {
+  if ($uid == 1) {
+    return services_error(t('The admin user cannot be canceled.'), 403);
+  }
+  $account = user_load($uid);
+  if (empty($account)) {
+    return services_error(t('There is no user with ID @uid.', array('@uid' => $uid)), 404);
+  }
+  $edit = array(
+    'user_cancel_notify' => isset($account->data['user_cancel_notify']) ? $account->data['user_cancel_notify'] : variable_get('user_mail_status_canceled_notify', FALSE),
+  );
+  // This defult setting is defined under "admin/config/people/accounts".
+  $default_method = variable_get('user_cancel_method', 'user_cancel_block');
+
+  switch ($default_method) {
+    case 'user_cancel_block_unpublish':
+      // Unpublish nodes (current revisions).
+      module_load_include('inc', 'node', 'node.admin');
+      $nodes = db_select('node', 'n')->fields('n', array('nid'))->condition('uid', $account->uid)->execute()->fetchCol();
+      node_mass_update($nodes, array('status' => 0));
+      break;
+
+    case 'user_cancel_reassign':
+      // Anonymize nodes (current revisions).
+      module_load_include('inc', 'node', 'node.admin');
+      $nodes = db_select('node', 'n')->fields('n', array('nid'))->condition('uid', $account->uid)->execute()->fetchCol();
+      node_mass_update($nodes, array('uid' => 0));
+      // Anonymize old revisions.
+      db_update('node_revision')->fields(array('uid' => 0))->condition('uid', $account->uid)->execute();
+      // Clean history.
+      db_delete('history')->condition('uid', $account->uid)->execute();
+      break;
+  }
+
+  _user_cancel($edit, $account, $default_method);
+
+  // Everything went right.
+  return TRUE;
+}
+
+/**
+ * Login a user using the specified credentials.
+ *
+ * Note this will transfer a plaintext password.
+ *
+ * @param $username
+ *   Username to be logged in.
+ * @param $password
+ *   Password, must be plain text and not hashed.
+ *
+ * @return
+ *   A valid session object.
+ */
+function _user_resource_login($username, $password) {
+  global $user;
+
+  if ($user->uid) {
+    // user is already logged in
+    return services_error(t('Already logged in as @user.', array('@user' => $user->name)), 406);
+  }
+
+  // Check if account is active.
+  if (user_is_blocked($username)) {
+    return services_error(t('The username %name has not been activated or is blocked.', array('%name' => $username)), 403);
+  }
+
+  $uid = user_authenticate($username, $password);
+
+  // Emulate drupal native flood control
+  if (empty($uid) && variable_get('services_flood_control_enabled', TRUE)) {
+    _user_resource_flood_control($username);
+  }
+
+  if ($uid) {
+    $user = user_load($uid);
+    if ($user->uid) {
+      user_login_finalize();
+
+      $return = new stdClass();
+      $return->sessid = session_id();
+      $return->session_name = session_name();
+      $return->token = drupal_get_token('services');
+
+      $account = clone $user;
+
+      services_remove_user_data($account);
+
+      $return->user = $account;
+
+      return $return;
+    }
+  }
+  watchdog('user', 'Invalid login attempt for %username.', array('%username' => $username));
+  return services_error(t('Wrong username or password.'), 401);
+}
+
+/**
+ * Logout the current user.
+ */
+function _user_resource_logout() {
+  global $user;
+
+  if (!$user->uid) {
+    // User is not logged in
+    return services_error(t('User is not logged in.'), 406);
+  }
+
+  watchdog('user', 'Session closed for %name.', array('%name' => $user->name));
+
+  // Destroy the current session.
+  module_invoke_all('user_logout', $user);
+  session_destroy();
+
+  // Load the anonymous user.
+  $user = drupal_anonymous_user();
+
+  return TRUE;
+}
+
+/**
+ *  Update the current user logout callback to the new callback with a better return value.
+ */
+function _user_resource_logout_update_1_1() {
+  $new_set = array(
+    'callback' => '_user_resource_logout_1_1',
+  );
+  return $new_set;
+}
+
+/**
+ * Logs out the currently logged in user and returns the new user object.
+ */
+function _user_resource_logout_1_1() {
+  global $user;
+
+  if (!$user->uid) {
+    // User is not logged in
+    return services_error(t('User is not logged in.'), 406);
+  }
+
+  watchdog('user', 'Session closed for %name.', array('%name' => $user->name));
+
+  // Destroy the current session.
+  module_invoke_all('user_logout', $user);
+  session_destroy();
+
+  // Load the anonymous user.
+  $user = drupal_anonymous_user();
+
+  return $user;
+}
+
+/**
+ * Send a password reset email for the specified user.
+ */
+function _user_resource_password_reset($uid) {
+  global $language;
+
+  $account = user_load($uid);
+  if (empty($account)) {
+    return services_error(t('There is no user with ID @uid.', array('@uid' => $uid)), 404);
+  }
+
+  // Mail one time login URL and instructions using current language.
+  $mail = _user_mail_notify('password_reset', $account, $language);
+  if (!empty($mail)) {
+    watchdog('user', 'Password reset instructions mailed to %name at %email.', array('%name' => $account->name, '%email' => $account->mail));
+  }
+  else {
+    watchdog('user', 'There was an error re-sending password reset instructions mailed to %name at %email', array('%name' => $account->name, '%email' => $account->mail));
+  }
+  // Everything went right.
+  return TRUE;
+}
+
+/**
+ * Send a welcome email for the specified user.
+ */
+function _user_resource_resend_welcome_email($uid) {
+  global $language;
+
+  $account = user_load($uid);
+  if (empty($account)) {
+    return services_error(t('There is no user with ID @uid.', array('@uid' => $uid)), 404);
+  }
+
+  $user_register = variable_get('user_register', 2);
+  switch ($user_register) {
+    case USER_REGISTER_ADMINISTRATORS_ONLY:
+      $op = 'register_admin_created';
+      break;
+    case USER_REGISTER_VISITORS:
+      $op = 'register_no_approval_required';
+      break;
+    case USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL:
+      $op = 'register_pending_approval';
+  }
+
+  // Mail the welcome emaiil using current language.
+  $mail = _user_mail_notify($op, $account, $language);
+  if (!empty($mail)) {
+    watchdog('user', 'Welcome message has been re-sent to %name at %email.', array('%name' => $account->name, '%email' => $account->mail));
+  }
+  else {
+    watchdog('user', 'There was an error re-sending welcome message to %name at %email', array('%name' => $account->name, '%email' => $account->mail));
+  }
+  // Everything went right.
+  return TRUE;
+}
+
+/**
+ * Return an array of optionally paged uids baed on a set of criteria.
+ *
+ * An example request might look like
+ *
+ * http://domain/endpoint/user?fields=uid,name,mail&parameters[uid]=1
+ *
+ * This would return an array of objects with only uid, name and mail defined,
+ * where uid = 1.
+ *
+ * @param $page
+ *   Page number of results to return (in pages of 20).
+ * @param $fields
+ *   The fields you want returned.
+ * @param $parameters
+ *   An array containing fields and values used to build a sql WHERE clause
+ *   indicating items to retrieve.
+ * @param $page_size
+ *   Integer number of items to be returned.
+ * @return
+ *   An array of user objects.
+ *
+ * @see _node_resource_index() for more notes
+ */
+function _user_resource_index($page, $fields, $parameters, $page_size) {
+  $user_select = db_select('users', 't')
+    ->orderBy('created', 'DESC');
+
+  services_resource_build_index_query($user_select, $page, $fields, $parameters, $page_size, 'user');
+
+  $results = services_resource_execute_index_query($user_select);
+
+  return services_resource_build_index_list($results, 'user', 'uid');
+}
+
+/**
+ * Access check callback for user resource.
+ */
+function _user_resource_access($op = 'view', $args = array()) {
+  // Adds backwards compatability with regression fixed in #1083242
+  if (isset($args[0])) {
+    $args[0] = _services_access_value($args[0], array('account', 'data'));
+  }
+
+  // Check if the user exists if appropriate.
+  if ($op != 'create' && $op != 'register' ) {
+    $account = user_load($args[0]);
+    if (!$account) {
+      return services_error(t('There is no user with ID @uid.', array('@uid' => $args[0])), 406);
+    }
+  }
+
+  global $user;
+  switch ($op) {
+    case 'view':
+      return user_view_access($account);
+    case 'update':
+      return ($user->uid == $account->uid || user_access('administer users'));
+    case 'create':
+    case 'register':
+      if (!$user->uid && variable_get('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL) != USER_REGISTER_ADMINISTRATORS_ONLY) {
+        return TRUE;
+      }
+      else {
+        return user_access('administer users');
+      }
+    case 'password_reset':
+      return TRUE;
+    case 'delete':
+    case 'cancel':
+    case 'resend_welcome_email':
+      return user_access('administer users');
+  }
+}
+
+/**
+ * Changes the user/login endpoint to accept the same parameters as the user/register endpoint, namely
+ * "name" instead of "username" and "pass" instead of "password"
+ */
+function _user_resource_login_update_1_1() {
+  $new_set = array(
+    'args' => array(
+      array(
+        'name' => 'name',
+        'type' => 'string',
+        'description' => 'A valid username',
+        'source' => array('data' => 'name'),
+        'optional' => FALSE,
+      ),
+      array(
+        'name' => 'pass',
+        'type' => 'string',
+        'description' => 'A valid password',
+        'source' => array('data' => 'pass'),
+        'optional' => FALSE,
+      ),
+    ),
+  );
+  return $new_set;
+}
+
+function _user_resource_get_token() {
+  return array('token' => drupal_get_token('services'));
+}
+
+
+
+/**
+ * Callback that emulate drupal native flood control.
+ * @param $username
+ *  Username we register flood event for
+ * @see user_login_authenticate_validate()
+ * @see user_login_final_validate()
+ */
+function _user_resource_flood_control($username) {
+  $flood_message = '';
+
+  // Always register an IP-based failed login event.
+  flood_register_event('failed_login_attempt_ip', variable_get('user_failed_login_ip_window', 3600));
+
+  if (!flood_is_allowed('failed_login_attempt_ip', variable_get('user_failed_login_ip_limit', 50), variable_get('user_failed_login_ip_window', 3600))) {
+    $flood_message = t('This IP address is temporarily blocked.');
+  }
+
+  $account = db_query("SELECT * FROM {users} WHERE name = :name AND status = 1", array(':name' => $username))->fetchObject();
+
+  if ($account) {
+    if (variable_get('user_failed_login_identifier_uid_only', FALSE)) {
+      // Register flood events based on the uid only, so they apply for any
+      // IP address. This is the most secure option.
+      $identifier = $account->uid;
+    }
+    else {
+      // The default identifier is a combination of uid and IP address. This
+      // is less secure but more resistant to denial-of-service attacks that
+      // could lock out all users with public user names.
+      $identifier = $account->uid . '-' . ip_address();
+      flood_register_event('failed_login_attempt_user', variable_get('user_failed_login_user_window', 21600), $identifier);
+    }
+
+    // Don't allow login if the limit for this user has been reached.
+    // Default is to allow 5 failed attempts every 6 hours.
+    if (!flood_is_allowed('failed_login_attempt_user', variable_get('user_failed_login_user_limit', 5), variable_get('user_failed_login_user_window', 21600), $identifier)) {
+      $flood_message = t('Account is temporarily blocked.');
+    }
+  }
+
+  // Throw exception if have blocking
+  if (!empty($flood_message)) {
+    services_error($flood_message, 406);
+  }
+}
\ Brak znaku nowej linii na końcu pliku
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/includes/RESTServer.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/includes/RESTServer.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/includes/RESTServer.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/includes/RESTServer.inc	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,689 @@
+<?php
+
+/**
+ * @file
+ * Class for handling REST calls.
+ */
+
+class RESTServer {
+  /* @var $negotiator ServicesContentTypeNegotiatorInterface */
+  protected $negotiator;
+  /* @var $context ServicesContextInterface */
+  protected $context;
+
+  protected $resources;
+  protected $parsers;
+  protected $formatters;
+
+  protected $controller;
+
+  /**
+   * Constructor. Initialize properties.
+   */
+  function __construct(ServicesContextInterface $context, ServicesContentTypeNegotiatorInterface $negotiator, $resources, $parsers, $formatters) {
+    $this->context = $context;
+    $this->negotiator = $negotiator;
+
+    $this->resources = $resources;
+    $this->parsers = $parsers;
+    $this->formatters = $formatters;
+  }
+
+  /**
+   * Handles the call to the REST server
+   */
+  public function handle() {
+    $controller = $this->getController();
+
+    $formatter = $this->getResponseFormatter();
+
+    services_set_server_info('resource_uri_formatter', array(&$this, 'uri_formatter'));
+
+    try {
+      // Parse the request data
+      $arguments = $this->getControllerArguments($controller);
+      $result = services_controller_execute($controller, $arguments);
+    }
+    catch (ServicesException $e) {
+      $result = $this->handleException($e);
+    }
+
+    return $this->render($formatter, $result);
+  }
+
+  /**
+   * Controller is part of the resource like
+   *
+   * array(
+   *  'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/node_resource'),
+   *  'callback' => '_node_resource_create',
+   *  'args' => array(
+   *    array(
+   *      'name' => 'node',
+   *      'optional' => FALSE,
+   *      'source' => 'data',
+   *      'description' => 'The node data to create',
+   *      'type' => 'array',
+   *    ),
+   *  ),
+   *  'access callback' => '_node_resource_access',
+   *  'access arguments' => array('create'),
+   *  'access arguments append' => TRUE,
+   * ),
+   *
+   * This method determines what is the controller responsible for processing of the request.
+   *
+   * @return array
+   */
+  protected function getController() {
+    if (empty($this->controller)) {
+      $resource_name = $this->getResourceName();
+
+      if (empty($resource_name) || !isset($this->resources[$resource_name])) {
+        return services_error(t('Could not find resource @name.', array('@name' => $resource_name)), 404);
+      }
+
+      $resource = $this->resources[$resource_name];
+      $this->controller = $this->resolveControllerApplyVersion($resource, $resource_name);
+
+      if (empty($this->controller)) {
+        return services_error(t('Could not find the controller.'), 404);
+      }
+    }
+
+    return $this->controller;
+  }
+
+  /**
+   * Wrapper around resolveController() to apply version.
+   *
+   * @param array $resource
+   *   Resource definition
+   * @param string $resource_name
+   *   Name of the resource. Needed for applying version.
+   *
+   * @return array $controller
+   *   Controller definition
+   */
+  protected function resolveControllerApplyVersion($resource, $resource_name) {
+    $apply_version_method = '';
+    $controller = $this->resolveController($resource, $apply_version_method);
+    services_request_apply_version($controller, array('method' => $apply_version_method, 'resource' => $resource_name));
+
+    return $controller;
+  }
+
+  /**
+   * Canonical path is the url of the request without path of endpoint.
+   *
+   * For example endpoint has path 'rest'. Canonical of request to url
+   * 'rest/node/1.php' will be 'node/1.php'.
+   *
+   * @return string
+   */
+  public function getCanonicalPath() {
+    // Use drupal_static so we can clear this static cache during unit testing.
+    // @see MockServicesRESTServerFactory constructor.
+    $canonical_path = &drupal_static('RESTServerGetCanonicalPath');
+    if (empty($canonical_path)) {
+      $canonical_path = $this->context->getCanonicalPath();
+      $canonical_path = $this->negotiator->getParsedCanonicalPath($canonical_path);
+    }
+    return $canonical_path;
+  }
+
+  /**
+   * Explode canonical path to parts by '/'.
+   *
+   * @return array
+   */
+  protected function getCanonicalPathArray() {
+    $canonical_path = $this->getCanonicalPath();
+    $canonical_path_array = explode('/', $canonical_path);
+
+    return $canonical_path_array;
+  }
+
+  /**
+   * Example. We have endpoint with path 'rest'.
+   * Request is done to url /rest/node/1.php'.
+   * Name of resource in this case is 'node'.
+   *
+   * @return string
+   */
+  protected function getResourceName() {
+    $canonical_path_array = $this->getCanonicalPathArray();
+    $resource_name = array_shift($canonical_path_array);
+
+    return $resource_name;
+  }
+
+  /**
+   * Response formatter is responsible for encoding the response.
+   *
+   * @return array
+   * example:
+   * array(
+   *  'xml' => array(
+   *    'mime types' => array('application/xml', 'text/xml'),
+   *    'formatter class' => 'ServicesXMLFormatter',
+   *  ),
+   * )
+   */
+  protected function getResponseFormatter() {
+    $mime_type = '';
+
+    $canonical_path_not_parsed = $this->context->getCanonicalPath();
+    $response_format = $this->getResponseFormatFromURL($canonical_path_not_parsed);
+
+    if (empty($response_format)) {
+      $response_format = $this->getResponseFormatContentTypeNegotiations($mime_type, $canonical_path_not_parsed, $this->formatters);
+    }
+
+    $formatter = array();
+
+    if (isset($this->formatters[$response_format])) {
+      $formatter = $this->formatters[$response_format];
+    }
+
+    // Check if we support the response format and determine the mime type
+    if (empty($mime_type) && !empty($formatter)) {
+      $mime_type = $formatter['mime types'][0];
+    }
+
+    if (empty($response_format) || empty($mime_type)) {
+      return services_error(t('Unknown or unsupported response format.'), 406);
+    }
+
+    // Set the content type and render output.
+    drupal_add_http_header('Content-type', $mime_type);
+
+    return $formatter;
+  }
+
+
+  /**
+   * Retrieve formatter from URL. If format is in the path, we remove it from $canonical_path.
+   *
+   * For example <endpoint>/<path>.<format>
+   *
+   * @param $canonical_path
+   *
+   * @return string
+   */
+  protected function getResponseFormatFromURL($canonical_path) {
+    return $this->negotiator->getResponseFormatFromURL($canonical_path);
+  }
+
+  /**
+   * Determine response format and mime type using headers to negotiate content types.
+   *
+   * @param string $mime_type
+   *   Mime type. This variable to be overriden.
+   * @param string $canonical_path
+   *   Canonical path of the request.
+   * @param array $formats
+   *   Enabled formats by endpoint.
+   *
+   * @return string
+   *   Negotiated response format. For example 'json'.
+   */
+  protected function getResponseFormatContentTypeNegotiations(&$mime_type, $canonical_path, $formats) {
+    return $this->negotiator->getResponseFormatContentTypeNegotiations($mime_type, $canonical_path, $formats, $this->context);
+  }
+
+  /**
+   * Determine the request method
+   */
+  protected function getRequestMethod() {
+    return $this->context->getRequestMethod();
+  }
+
+  /**
+   * Formats a resource uri
+   *
+   * @param array $path
+   *  An array of strings containing the component parts of the path to the resource.
+   * @return string
+   *  Returns the formatted resource uri
+   */
+  public function uri_formatter($path) {
+    return url($this->context->getEndpointPath() . '/' . join($path, '/'), array(
+      'absolute' => TRUE,
+    ));
+  }
+
+  /**
+   * Parses controller arguments from request
+   *
+   * @param array $controller
+   *  The controller definition
+   * @return void
+   */
+  protected function getControllerArguments($controller) {
+    $path_array = $this->getCanonicalPathArray();
+    array_shift($path_array);
+
+    $data = $this->parseRequestBody();
+    drupal_alter('rest_server_request_parsed', $data, $controller);
+
+    $headers = $this->parseRequestHeaders();
+    drupal_alter('rest_server_headers_parsed', $headers);
+
+    $sources = array(
+      'path' => $path_array,
+      'param' => $this->context->getGetVariable(),
+      'data' => $data,
+      'headers' => $headers,
+    );
+    // Map source data to arguments.
+    return $this->getControllerArgumentsFromSources($controller, $sources);
+  }
+
+  /**
+   * array $controller
+   *   Controller definition
+   * array $sources
+   *   Array of sources for arguments. Consists of following elements:
+   *  'path' - path requested
+   *  'params' - GET variables
+   *  'data' - parsed POST data
+   *  'headers' - request headers
+   *
+   * @return array
+   */
+  protected function getControllerArgumentsFromSources($controller, $sources) {
+    $arguments = array();
+    if (!isset($controller['args'])) {
+      return array();
+    }
+
+    foreach ($controller['args'] as $argument_number => $argument_info) {
+      // Fill in argument from source
+      if (isset($argument_info['source'])) {
+        $argument_source = $argument_info['source'];
+        if (is_array($argument_source)) {
+          $argument_source_keys = array_keys($argument_source);
+          $source_name = reset($argument_source_keys);
+          $argument_name = $argument_source[$source_name];
+          // Path arguments can be only integers. i.e.'path' => 0 and not 'path' => '0'.
+          if ($source_name == 'path') {
+            $argument_name = (int) $argument_name;
+          }
+          if (isset($sources[$source_name][$argument_name])) {
+            $arguments[$argument_number] = $sources[$source_name][$argument_name];
+          }
+        }
+        else {
+          if (isset($sources[$argument_source])) {
+            $arguments[$argument_number] = $sources[$argument_source];
+          }
+        }
+        // Convert to specific data type.
+        if (isset($argument_info['type']) && isset($arguments[$argument_number])) {
+          switch ($argument_info['type']) {
+            case 'array':
+              $arguments[$argument_number] = (array) $arguments[$argument_number];
+              break;
+          }
+        }
+      }
+      // When argument isn't set, insert default value if provided or
+      // throw a exception if the argument isn't optional.
+      if (!isset($arguments[$argument_number])) {
+        if (!isset($argument_info['optional']) || !$argument_info['optional']) {
+          return services_error(t('Missing required argument @arg', array('@arg' => $argument_info['name'])), 401);
+        }
+        // Set default value or NULL if default value is not set.
+        $arguments[$argument_number] = isset($argument_info['default value']) ? $argument_info['default value'] : NULL;
+      }
+    }
+    return $arguments;
+  }
+
+  protected function parseRequestHeaders() {
+    $headers = array();
+    $http_if_modified_since = $this->context->getServerVariable('HTTP_IF_MODIFIED_SINCE');
+    if (!empty($http_if_modified_since)) {
+      $headers['IF_MODIFIED_SINCE'] = strtotime(preg_replace('/;.*$/', '', $http_if_modified_since));
+    }
+    return $headers;
+  }
+
+  /**
+   * Parse request body based on $_SERVER['CONTENT_TYPE'].s
+   *
+   * @return array|mixed
+   */
+  protected function parseRequestBody() {
+    $method = $this->getRequestMethod();
+    switch ($method) {
+      case 'POST':
+      case 'PUT':
+        $server_content_type = $this->context->getServerVariable('CONTENT_TYPE');
+        if (!empty($server_content_type)) {
+          $type = $this->parseContentHeader($server_content_type);
+        }
+
+        // Get the mime type for the request, default to form-urlencoded
+        if (isset($type['value'])) {
+          $mime = $type['value'];
+        }
+        else {
+          $mime = 'application/x-www-form-urlencoded';
+        }
+
+        // Get the parser for the mime type
+        $parser = $this->matchParser($mime, $this->parsers);
+        if (!$parser) {
+          return services_error(t('Unsupported request content type @mime', array('@mime' => $mime)), 406);
+        }
+
+        $data = array();
+        if (class_exists($parser) && in_array('ServicesParserInterface', class_implements($parser))) {
+          $parser_object = new $parser;
+          $data = $parser_object->parse($this->context);
+        }
+        return $data;
+
+      default:
+        return array();
+    }
+  }
+
+  /**
+   * Extract value of the header string.
+   *
+   * @param string $value
+   *
+   * @return array $type
+   *   Value that is used $type['value']
+   */
+  protected function parseContentHeader($value) {
+    $ret_val = array();
+    $value_pattern = '/^([^;]+)(;\s*(.+)\s*)?$/';
+    $param_pattern = '/([a-z]+)=(([^\"][^;]+)|(\"(\\\"|[^"])+\"))/';
+    $vm=array();
+
+    if (preg_match($value_pattern, $value, $vm)) {
+      $ret_val['value'] = $vm[1];
+      if (count($vm)>2) {
+        $pm = array();
+        if (preg_match_all($param_pattern, $vm[3], $pm)) {
+          $pcount = count($pm[0]);
+          for ($i=0; $i<$pcount; $i++) {
+            $value = $pm[2][$i];
+            if (drupal_substr($value, 0, 1) == '"') {
+              $value = stripcslashes(drupal_substr($value, 1, mb_strlen($value)-2));
+            }
+            $ret_val['param'][$pm[1][$i]] = $value;
+          }
+        }
+      }
+    }
+
+    return $ret_val;
+  }
+
+  /**
+   * Render results using formatter.
+   *
+   * @param array $formatter
+   *   Formatter definition
+   * @param $result
+   *   Value to be rendered
+   *
+   * @return string
+   *   Rendered result
+   */
+  protected function render($formatter, $result) {
+    if ( !isset($formatter['formatter class'])
+      || array_search('ServicesFormatterInterface', class_implements($formatter['formatter class'])) === FALSE) {
+      return services_error('Formatter is invalid.', 500);
+    }
+    $formatter_object = new $formatter['formatter class'];
+    return $formatter_object->render($result);
+  }
+
+  /**
+   * Matches a mime-type against a set of parsers.
+   *
+   * @param string $mime
+   *  The mime-type of the request.
+   * @param array $parsers
+   *  An associative array of parser callbacks keyed by mime-type.
+   * @return mixed
+   *  Returns a parser callback or FALSE if no match was found.
+   */
+  protected function matchParser($mime, $parsers) {
+    $mimeparse = $this->negotiator->mimeParse();
+    $mime_type = $mimeparse->best_match(array_keys($parsers), $mime);
+
+    return ($mime_type) ? $parsers[$mime_type] : FALSE;
+  }
+
+  /**
+   * Determine controller.
+   *
+   * @param array $resource
+   *   Full definition of the resource.
+   * @param string $operation
+   *   Type of operation ('index', 'retrieve' etc.). We are going to override this variable.
+   *   Needed for applying version.
+   *
+   * @return array
+   *   Controller definition.
+   */
+  protected function resolveController($resource, &$operation) {
+    $request_method = $this->getRequestMethod();
+
+    $canonical_path_array = $this->getCanonicalPathArray();
+    array_shift($canonical_path_array);
+
+    $canon_path_count = count($canonical_path_array);
+    $operation_type = NULL;
+    $operation = NULL;
+
+    // For any HEAD request return response "200 OK".
+    if ($request_method == 'HEAD') {
+      return services_error('OK', 200);
+    }
+
+    // For any OPTIONS request return only the headers.
+    if ($request_method == 'OPTIONS') {
+      exit;
+    }
+
+    // We do not group "if" conditions on purpose for better readability.
+
+    // 'index' method.
+    if (   $request_method == 'GET'
+        && isset($resource['operations']['index'])
+        && $this->checkNumberOfArguments($canon_path_count, $resource['operations']['index'])
+      ) {
+      $operation_type = 'operations';
+      $operation = 'index';
+    }
+
+    // 'retrieve' method.
+    // First path element should be not empty.
+    if (   $request_method == 'GET'
+        && $canon_path_count >= 1
+        && isset($resource['operations']['retrieve'])
+        && $this->checkNumberOfArguments($canon_path_count, $resource['operations']['retrieve'])
+        && !empty($canonical_path_array[0])
+      ) {
+      $operation_type = 'operations';
+      $operation = 'retrieve';
+    }
+
+    // 'relationships'
+    // First path element should be not empty,
+    // second should be name of targeted action.
+    if (   $request_method == 'GET'
+        && $canon_path_count >= 2
+        && isset($resource['relationships'][$canonical_path_array[1]])
+        && $this->checkNumberOfArguments($canon_path_count, $resource['relationships'][$canonical_path_array[1]], 1)
+        && isset($canonical_path_array[0])
+      ) {
+      $operation_type = 'relationships';
+      $operation = $canonical_path_array[1];
+    }
+
+    // 'update'
+    // First path element should be not empty.
+    if (   $request_method == 'PUT'
+        && $canon_path_count >= 1
+        && isset($resource['operations']['update'])
+        && $this->checkNumberOfArguments($canon_path_count, $resource['operations']['update'])
+        && !empty($canonical_path_array[0])
+      ) {
+      $operation_type = 'operations';
+      $operation = 'update';
+    }
+
+    // 'delete'
+    // First path element should be not empty.
+    if (   $request_method == 'DELETE'
+        && $canon_path_count >= 1
+        && isset($resource['operations']['delete'])
+        && $this->checkNumberOfArguments($canon_path_count, $resource['operations']['delete'])
+        && !empty($canonical_path_array[0])
+      ) {
+      $operation_type = 'operations';
+      $operation = 'delete';
+    }
+
+    // 'create' method.
+    // First path element should be not empty.
+    if (   $request_method == 'POST'
+        && isset($resource['operations']['create'])
+        && $this->checkNumberOfArguments($canon_path_count, $resource['operations']['create'])
+      ) {
+      $operation_type = 'operations';
+      $operation = 'create';
+    }
+
+    // 'actions'
+    // First path element should be action name
+    if (   $request_method == 'POST'
+        && $canon_path_count >= 1
+        && isset($resource['actions'][$canonical_path_array[0]])
+        && $this->checkNumberOfArguments($canon_path_count, $resource['actions'][$canonical_path_array[0]], 1)
+      ) {
+      $operation_type = 'actions';
+      $operation = $canonical_path_array[0];
+    }
+
+    // 'targeted_actions'
+    // First path element should be not empty,
+    // second should be name of targeted action.
+    if (   $request_method == 'POST'
+        && $canon_path_count >= 2
+        && isset($resource['targeted_actions'][$canonical_path_array[1]])
+        && $this->checkNumberOfArguments($canon_path_count, $resource['targeted_actions'][$canonical_path_array[1]], 1)
+        && !empty($canonical_path_array[0])
+      ) {
+      $operation_type = 'targeted_actions';
+      $operation = $canonical_path_array[1];
+    }
+
+    if (empty($operation_type) || empty($operation) || empty($resource[$operation_type][$operation])) {
+      return FALSE;
+    }
+
+    $controller = $resource[$operation_type][$operation];
+
+    if (isset($resource['endpoint']['operations'][$operation]['settings'])) {
+      // Add the endpoint's settings for the specified operation.
+      $controller['endpoint'] = $resource['endpoint']['operations'][$operation]['settings'];
+    }
+
+    if (isset($resource['file']) && empty($controller['file'])) {
+      $controller['file'] = $resource['file'];
+    }
+
+    return $controller;
+  }
+
+  /**
+   * Count possible numbers of 'path' arguments of the method.
+   */
+  protected function checkNumberOfArguments($args_number, $resource_operation, $required_args = 0) {
+    $not_required_args = 0;
+
+    if (isset($resource_operation['args'])) {
+      foreach ($resource_operation['args'] as $argument) {
+        if (isset($argument['source']) && is_array($argument['source']) && isset($argument['source']['path'])) {
+          if (!empty($argument['optional'])) {
+            $not_required_args++;
+          }
+          else {
+            $required_args++;
+          }
+        }
+      }
+    }
+
+    return $args_number >= $required_args && $args_number <= $required_args + $not_required_args;
+  }
+
+  /**
+   * Set proper header and message in case of exception.
+   *
+   * @param object $exception
+   *   Exception object
+   * @param array $controller
+   *   Controller that was executed.
+   * @param array $arguments
+   *   Set of arguments.
+   *
+   * @return string $error_data
+   *   Error message from exception.
+   */
+  public function handleException($exception, $controller = array(), $arguments = array()){
+    $error_code = $exception->getCode();
+    $error_message = $exception->getMessage();
+    $error_data = method_exists($exception, 'getData') ? $exception->getData() : '';
+
+    switch ($error_code) {
+      case 204:
+        $error_header_status_message = '204 No Content: ' . $error_message;
+        break;
+      case 304:
+        $error_header_status_message =  '304 Not Modified: ' . $error_message;
+        break;
+      case 401:
+        $error_header_status_message =  '401 Unauthorized: ' . $error_message;
+        break;
+      case 404:
+        $error_header_status_message =  '404 Not found: ' . $error_message;
+        break;
+      case 406:
+        $error_header_status_message = '406 Not Acceptable: ' . $error_message;
+        break;
+      case 200:
+        $error_header_status_message = '200 ' . $error_message;
+        break;
+      default:
+        if ($error_code >= 400 && $error_code < 600) {
+          $error_header_status_message = $error_code . ' :' . $error_message;
+        }
+        else {
+          $error_header_status_message = '500 Internal Server Error: An error occurred (' . $error_code . '): ' . $error_message;
+        }
+        break;
+    }
+
+    $error_alter_array = array(
+      'code' => $error_code,
+      'header_message' => &$error_header_status_message,
+      'body_data' => &$error_data,
+    );
+    drupal_alter('rest_server_execute_errors', $error_alter_array, $controller, $arguments);
+
+    drupal_add_http_header('Status', strip_tags($error_header_status_message));
+
+    return $error_data;
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/includes/ServicesContentTypeNegotiator.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/includes/ServicesContentTypeNegotiator.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/includes/ServicesContentTypeNegotiator.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/includes/ServicesContentTypeNegotiator.inc	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,111 @@
+<?php
+
+interface ServicesContentTypeNegotiatorInterface {
+  public function getResponseFormatFromURL($canonical_path);
+  public function getResponseFormatContentTypeNegotiations(&$mime_type, $canonical_path, $formats, $context);
+}
+
+/**
+ * Class used to do Content Type negotiation.
+ */
+
+class ServicesContentTypeNegotiator implements ServicesContentTypeNegotiatorInterface {
+
+  /**
+   * Retrieve formatter from URL. If format is in the path, we remove it from $canonical_path.
+   *
+   * For example <endpoint>/<path>.<format>
+   *
+   * @param $canonical_path
+   *
+   * @return string
+   */
+  public function getResponseFormatFromURL($canonical_path) {
+    $matches = $this->getCanonicalPathMatches($canonical_path);
+    return $matches[2];
+  }
+
+  /**
+   * Parse canonical path. It may have extension in the end (example node/1.json).
+   * This function returns canonical path without extension.
+   *
+   * @param string $canonical_path
+   *
+   * @return string
+   *   Canonical path without extension.
+   */
+  public function getParsedCanonicalPath($canonical_path) {
+    $matches = $this->getCanonicalPathMatches($canonical_path);
+    return $matches[1];
+  }
+
+  /**
+   * Preg match canonical path to split it to clean path and extension.
+   *
+   * @param string $canonical_path
+   *   Canonical path with extension.
+   * @return array
+   *   Array of matches.
+   */
+  public function getCanonicalPathMatches($canonical_path) {
+    $matches = array();
+    if (preg_match('/^(.+)\.([^\.^\/]+)$/', $canonical_path, $matches)) {
+      return $matches;
+    }
+    return array('', $canonical_path, '');
+  }
+
+  /**
+   * Determine response format and mime type using headers to negotiate content types.
+   *
+   * @param string $mime_type
+   *   Mime type. This variable to be overriden.
+   * @param string $canonical_path
+   *   Canonical path of the request.
+   * @param array $formats
+   *   Enabled formats by endpoint.
+   *
+   * @return string
+   *   Negotiated response format. For example 'json'.
+   */
+  public function getResponseFormatContentTypeNegotiations(&$mime_type, $canonical_path, $formats, $context) {
+    drupal_add_http_header('Vary', 'Accept');
+
+    // Negotiate response format based on accept-headers if we
+    // don't have a response format.
+    $mime_candidates = array();
+    $mime_map = array();
+
+    foreach ($formats as $format => $formatter) {
+      foreach ($formatter['mime types'] as $m) {
+        $mime_candidates[] = $m;
+        $mime_map[$m] = $format;
+      }
+    }
+
+    // Get the best matching format, default to json
+    $response_format = variable_get('rest_server_default_response_format', 'json');
+    $http_accept = $context->getServerVariable('HTTP_ACCEPT');
+    if (!empty($http_accept)) {
+      $mime = $this->mimeParse();
+      $mime_type = $mime->best_match($mime_candidates, $http_accept);
+      $response_format = isset($mime_map[$mime_type]) ? $mime_map[$mime_type] : '';
+    }
+
+    return $response_format;
+  }
+
+  /**
+   * Create a instance of the Mimeparse utility class.
+   *
+   * @return Mimeparse
+   */
+  public function mimeParse() {
+    static $mimeparse;
+    if (!$mimeparse) {
+      module_load_include('php', 'rest_server', 'lib/mimeparse');
+      $mimeparse = new Mimeparse();
+    }
+    return $mimeparse;
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/includes/ServicesContext.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/includes/ServicesContext.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/includes/ServicesContext.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/includes/ServicesContext.inc	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,188 @@
+<?php
+
+/**
+ * ServicesContext object is for storing all global variables. The idea is to prevent
+ * RESTServer from accessing global variables directly and get them only from Context.
+ */
+
+interface ServicesContextInterface {
+  public function buildFromGlobals();
+  public function getEndpointPath();
+  public function getCanonicalPath();
+  public function getPostData();
+  public function getRequestBody();
+  public function getServerVariable($variable_name);
+  public function getGetVariable($variable_name = NULL);
+}
+
+class ServicesContext implements ServicesContextInterface {
+  /**
+   * Main storage of all data.
+   *
+   * @var array
+   */
+  protected $data = array();
+
+  /**
+   * Context constructor.
+   *
+   * @param string $endpoint_path
+   *   Path of endpoint. Example call is to /{endpoint path}/node/1.json.
+   *   When context is built we keep endpoint path as separate variable
+   *   as it is needed to determine canonical path.
+   */
+  function __construct($endpoint_path) {
+    $this->data['endpoint_path'] = $endpoint_path;
+  }
+
+  /**
+   * Build all context data from global variables.
+   */
+  public function buildFromGlobals() {
+    $this->data['get'] = $_GET;
+    $this->data['server'] = $_SERVER;
+    $this->data['post'] = $_POST;
+    $this->data['request_body'] = '';
+    if ($this->isRequestHasPostBody()) {
+      $this->data['request_body'] = $this->getRequestBodyData();
+    }
+  }
+
+  /**
+   * Retrieve endpoint path. It is saved in constructor.
+   *
+   * @return string
+   */
+  public function getEndpointPath() {
+    return $this->data['endpoint_path'];
+  }
+
+  /**
+   * Retrieve canonical path.
+   *
+   * @return string
+   */
+  public function getCanonicalPath() {
+    if (!isset($this->data['canonical_path'])) {
+      $endpoint_path = $this->getEndpointPath();
+      $endpoint_path_len = drupal_strlen($endpoint_path . '/');
+      $this->data['canonical_path'] = drupal_substr($this->data['get']['q'], $endpoint_path_len);
+    }
+
+    return $this->data['canonical_path'];
+  }
+
+  /**
+   * Determine Request Method of the request.
+   *
+   * @return string
+   *   Name of request method (i.e. GET, POST, PUT ...).
+   */
+  public function getRequestMethod() {
+    if (!isset($this->data['request_method'])) {
+      $this->data['request_method'] = $this->getRequestMethodFromGlobals();
+    }
+
+    return $this->data['request_method'];
+  }
+
+  /**
+   * Retrieve request method from global variables.
+   *
+   * @return string
+   *   For example GET, POST
+   */
+  protected function getRequestMethodFromGlobals() {
+    $server = &$this->data['server'];
+    $get = &$this->data['get'];
+
+    $method = $server['REQUEST_METHOD'];
+    if ($method == 'POST' && isset($server['HTTP_X_HTTP_METHOD_OVERRIDE'])) {
+      $method = $server['HTTP_X_HTTP_METHOD_OVERRIDE'];
+    }
+    if ($method == 'POST' && isset($get['_method']) && $get['_method']) {
+      $method = $get['_method'];
+    }
+    if (isset($get['_method'])) {
+      unset($get['_method']);
+    }
+
+    return $method;
+  }
+
+  /**
+   * Determine whether we should expect request body to be available.
+   *
+   * @return bool
+   */
+  protected function isRequestHasPostBody() {
+    $method = $this->getRequestMethod();
+    return (in_array($method, array('POST', 'PUT')));
+  }
+
+  /**
+   * Fetch request body using php://input handler.
+   *
+   * @return string
+   *   Content of the request body.
+   */
+  protected function getRequestBodyData() {
+    return file_get_contents('php://input');
+  }
+
+  /**
+   * Return value of global $_POST.
+   *
+   * @return string
+   */
+  public function getPostData() {
+    return $this->data['post'];
+  }
+
+  /**
+   * Return value of the request body.
+   *
+   * @return string
+   */
+  public function getRequestBody() {
+    return $this->data['request_body'];
+  }
+
+  /**
+   * Access to $_SERVER variables.
+   *
+   * @param string $variable_name
+   *   Key of the server variable.
+   *
+   * @return string
+   *   Value of the server variable.
+   */
+  public function getServerVariable($variable_name) {
+    if (isset($this->data['server'][$variable_name])) {
+      return $this->data['server'][$variable_name];
+    }
+    else {
+      if ($variable_name == 'CONTENT_TYPE' && isset($this->data['server']['HTTP_CONTENT_TYPE'])) {
+        return $this->data['server']['HTTP_CONTENT_TYPE'];
+      }
+    }
+  }
+
+  /**
+   * Access to $_GET variables.
+   *
+   * @param string $variable_name
+   *   Name of the variable or NULL if all content of $_GET to be returned.
+   *
+   * @return mixed
+   *   Value of variable or array of all variables.
+   */
+  public function getGetVariable($variable_name = NULL) {
+    if (empty($variable_name)) {
+      return $this->data['get'];
+    }
+    if (isset($this->data['get'][$variable_name])) {
+      return $this->data['get'][$variable_name];
+    }
+  }
+}
\ Brak znaku nowej linii na końcu pliku
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/includes/ServicesFormatter.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/includes/ServicesFormatter.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/includes/ServicesFormatter.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/includes/ServicesFormatter.inc	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,101 @@
+<?php
+
+interface ServicesFormatterInterface {
+  /**
+   * Render data to the string.
+   *
+   * @param $data
+   *   Data to render
+   *
+   * @return string
+   */
+  public function render($data);
+}
+
+class ServicesJSONFormatter implements ServicesFormatterInterface {
+  public function render($data) {
+    // json_encode doesn't give valid json with data that isn't an array/object.
+    if (is_scalar($data)) {
+      $data = array($data);
+    }
+    return str_replace('\\/', '/', json_encode($data));
+  }
+}
+
+class ServicesJSONPFormatter extends ServicesJSONFormatter {
+  public function render($data) {
+    $json = parent::render($data);
+
+    if (isset($_GET['callback'])) {
+      return sprintf('%s(%s);', $_GET['callback'], $json);
+    }
+    return $json;
+  }
+}
+
+class ServicesPHPFormatter implements ServicesFormatterInterface {
+  public function render($data) {
+    return serialize($data);
+  }
+}
+
+class ServicesXMLFormatter implements ServicesFormatterInterface {
+  public function render($data) {
+    $doc = new DOMDocument('1.0', 'utf-8');
+    $root = $doc->createElement('result');
+    $doc->appendChild($root);
+
+    $this->xml_recursive($doc, $root, $data);
+
+    return $doc->saveXML();
+  }
+
+  private function xml_recursive(&$doc, &$parent, $data) {
+    if (is_object($data)) {
+      $data = get_object_vars($data);
+    }
+
+    if (is_array($data)) {
+      $assoc = FALSE || empty($data);
+      foreach ($data as $key => $value) {
+        if (is_numeric($key)) {
+          $key = 'item';
+        }
+        else {
+          $assoc = TRUE;
+          $key = preg_replace('/[^A-Za-z0-9_]/', '_', $key);
+          $key = preg_replace('/^([0-9]+)/', '_$1', $key);
+        }
+        $element = $doc->createElement($key);
+        $parent->appendChild($element);
+        $this->xml_recursive($doc, $element, $value);
+      }
+
+      if (!$assoc) {
+        $parent->setAttribute('is_array', 'true');
+      }
+    }
+    elseif ($data !== NULL) {
+      $parent->appendChild($doc->createTextNode($data));
+    }
+  }
+}
+
+class ServicesYAMLFormatter implements ServicesFormatterInterface {
+  public function render($data) {
+    if (($library = libraries_load('spyc')) && !empty($library['loaded'])) {
+      return Spyc::YAMLDump($data, 4, 60);
+    }
+    else {
+      watchdog('REST Server', 'Spyc library not found!', array(), WATCHDOG_ERROR);
+      return '';
+    }
+  }
+}
+
+class ServicesBencodeFormatter implements ServicesFormatterInterface {
+  public function render($data) {
+    module_load_include('php', 'rest_server', 'lib/bencode');
+    return bencode($data);
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/includes/ServicesParser.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/includes/ServicesParser.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/includes/ServicesParser.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/includes/ServicesParser.inc	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,142 @@
+<?php
+
+interface ServicesParserInterface {
+  public function parse(ServicesContextInterface $context);
+}
+
+class ServicesParserURLEncoded implements ServicesParserInterface {
+  public function parse(ServicesContextInterface $context) {
+    parse_str($context->getRequestBody(), $data);
+    return $data;
+  }
+}
+
+class ServicesParserPHP implements ServicesParserInterface {
+  public function parse(ServicesContextInterface $context) {
+    return unserialize($context->getRequestBody());
+  }
+}
+
+class ServicesParserXML implements ServicesParserInterface {
+  public function parse(ServicesContextInterface $context) {
+    // get/hold the old error state
+    $old_error_state = libxml_use_internal_errors(1);
+
+    // clear all libxml errors
+    libxml_clear_errors();
+
+    // get a now SimpleXmlElement object from the XML string
+    $xml_data = simplexml_load_string($context->getRequestBody());
+
+    // if $xml_data is Null then we expect errors
+    if (!$xml_data) {
+      // build an error message string
+      $message = '';
+      $errors = libxml_get_errors();
+      foreach ($errors as $error) {
+        $message .= t('Line @line, Col @column: @message', array('@line' => $error->line, '@column' => $error->column, '@message' => $error->message)) . "\n\n";
+      }
+
+      // clear all libxml errors and restore the old error state
+      libxml_clear_errors();
+      libxml_use_internal_errors($old_error_state);
+
+      // throw an error
+      services_error($message, 406);
+    }
+    // whew, no errors, restore the old error state
+    libxml_use_internal_errors($old_error_state);
+
+    // unmarshal the SimpleXmlElement, and return the resulting array
+    $php_array = $this->unmarshalXML($xml_data, NULL);
+    return (array) $php_array;
+  }
+
+  /**
+   * A recusive function that unmarshals an XML string, into a php array.
+   */
+  protected function unmarshalXML($node, $array) {
+    // For all child XML elements
+    foreach ($node->children() as $child) {
+      if (count($child->children()) > 0) {
+        // if the child has children
+        $att = 'is_array';
+        if ($child->attributes()->$att) {
+          $new_array = array();
+          // recursive through <item>
+          foreach($child->children() as $item) {
+            // Make sure that elements with no children gets a value assigned.
+            $item_keys = array_keys((array) $item);
+            if (count($item_keys) == 1 && current($item_keys) === 0) {
+              $new_array[] = (string) $item[0];
+            }
+            elseif (is_object($item)) {
+              $new_array[] = (string) $item;
+            }
+            else {
+              $new_array[] = self::unmarshalXML($item, $array[$item->getName()]);
+            }
+          }
+        }
+        else {
+          // else, simply create an array where the key is name of the element
+          $new_array = $this->unmarshalXML($child, $array[$child->getName()]);
+        }
+        // add $new_array to $array
+        $array[$child->getName()] = $new_array;
+      }
+      else {
+        // Use the is_raw attribute on value elements for select type fields to
+        // pass form validation. Example:
+        // <field_terms_select>
+        //    <und is_array="true">
+        //      <item>
+        //        <tid is_raw="true">10513</tid>
+        //      </item>
+        //      <item>
+        //        <tid is_raw="true">10523</tid>
+        //      </item>
+        //    </und>
+        //  </field_terms_select>
+        if ($child->attributes()->is_raw) {
+          return (string) $child;
+        }
+        $array[$child->getName()] = (string) $child;
+      }
+    }
+    // return the resulting array
+    return $array;
+  }
+}
+
+class ServicesParserJSON implements ServicesParserInterface {
+  public function parse(ServicesContextInterface $context) {
+    return json_decode($context->getRequestBody(), TRUE);
+  }
+}
+
+class ServicesParserFile implements ServicesParserInterface {
+  public function parse(ServicesContextInterface $context) {
+    return $context->getRequestBody();
+  }
+}
+
+class ServicesParserYAML implements ServicesParserInterface {
+  public function parse(ServicesContextInterface $context) {
+    if (($library = libraries_load('spyc')) && !empty($library['loaded'])) {
+      return Spyc::YAMLLoadString($context->getPostData());
+    }
+    else {
+      watchdog('REST Server', 'Spyc library not found!', array(), WATCHDOG_ERROR);
+      return array();
+    }
+  }
+}
+
+class ServicesParserMultipart implements ServicesParserInterface {
+  public function parse(ServicesContextInterface $context) {
+    // php://input is not available with enctype="multipart/form-data".
+    // see http://php.net/manual/en/wrappers.php.php
+    return $context->getPostData();
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/includes/ServicesRESTServerFactory.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/includes/ServicesRESTServerFactory.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/includes/ServicesRESTServerFactory.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/includes/ServicesRESTServerFactory.inc	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,105 @@
+<?php
+
+/**
+ * Factory class to build RESTServer object.
+ *
+ * If you want to change it
+ */
+
+class ServicesRESTServerFactory {
+  protected $data = array();
+  static $class_name = 'RESTServer';
+
+  /**
+   * We need data property to pass additional arguments to methods.
+   *
+   * Required property is 'endpoint_path' -- base path of endpoint.
+   * Example: GET rest/node/1.php -- "rest" is endpoint path.
+   */
+  public function __construct($data = array()) {
+    if (!isset($data['endpoint_path'])) {
+      throw new Exception('ServicesRESTServerFactory constructor requires "endpoint_data" property.');
+    }
+    $this->data = $data;
+  }
+
+  public function getRESTServer() {
+    $content_type_negotiator = $this->getContentTypeNegotiator();
+    $context = $this->getContext();
+    $resources = $this->getResources();
+    $parsers = $this->getParsers();
+    $formatters = $this->getFormatters();
+
+    $class_name = static::$class_name;
+    return new $class_name($context, $content_type_negotiator, $resources, $parsers, $formatters);
+  }
+
+  protected function getContentTypeNegotiator() {
+    return new ServicesContentTypeNegotiator();
+  }
+
+  protected function getContext() {
+    $context = new ServicesContext($this->data['endpoint_path']);
+    $context->buildFromGlobals();
+    return $context;
+  }
+
+  protected function getResources() {
+    $endpoint_name = services_get_server_info('endpoint', '');
+    $endpoint = services_endpoint_load($endpoint_name);
+    $resources = services_get_resources($endpoint->name);
+    module_load_include('inc', 'services', 'includes/services.resource_build');
+    _services_apply_endpoint($resources, $endpoint, TRUE);
+
+    return $resources;
+  }
+
+  protected function getEndpoint() {
+    $endpoint_name = services_get_server_info('endpoint', '');
+    return services_endpoint_load($endpoint_name);
+  }
+
+  protected function getEndpointSettings() {
+    static $settings;
+
+    if (empty($settings)) {
+      $endpoint = $this->getEndpoint();
+
+      // Get the server settings from the endpoint.
+      $settings = !empty($endpoint->server_settings) ? $endpoint->server_settings : array();
+      // Normalize the settings so that we get the expected structure
+      // and sensible defaults.
+      $settings = rest_server_setup_settings($settings);
+    }
+
+    return $settings;
+  }
+
+  protected function getParsers() {
+    $settings = $this->getEndpointSettings();
+
+    $parsers = rest_server_request_parsers();
+    // Remove parsers that have been disabled for this endpoint.
+    foreach (array_keys($parsers) as $key) {
+      if (!$settings['parsers'][$key]) {
+        unset($parsers[$key]);
+      }
+    }
+
+    return $parsers;
+  }
+
+  protected function getFormatters() {
+    $settings = $this->getEndpointSettings();
+
+    $formatters = rest_server_response_formatters();
+    // Remove formatters that have been disabled for this endpoint.
+    foreach (array_keys($formatters) as $key) {
+      if (!$settings['formatters'][$key]) {
+        unset($formatters[$key]);
+      }
+    }
+
+    return $formatters;
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/lib/bencode.php drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/lib/bencode.php
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/lib/bencode.php	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/lib/bencode.php	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,27 @@
+<?php
+/**
+ *  Bencode snippet from http://paste.lisp.org/display/17178
+ */
+
+function bencode($element) { 
+   $out = ""; 
+   if (is_numeric($element) && $element == intval($element)) {
+      $out = 'i'.$element.'e'; 
+   } else if (is_string($element)) { 
+      $out = strlen($element).':'.$element; 
+   } else if (is_array($element) || (is_object($element) && $element=get_object_vars($element))) { 
+      ksort($element); 
+      if (is_string(key($element))) { 
+         $out ='d'; 
+         foreach($element as $key => $val) 
+            $out .= bencode($key).bencode($val); 
+         $out .= 'e'; 
+      } else { 
+         $out ='l'; 
+         foreach($element as $val) 
+            $out .= bencode($val); 
+         $out .= 'e'; 
+      } 
+   }
+   return $out; 
+}
\ Brak znaku nowej linii na końcu pliku
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/lib/mimeparse.php drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/lib/mimeparse.php
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/lib/mimeparse.php	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/lib/mimeparse.php	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,179 @@
+<?php
+class Mimeparse {        
+    /**
+     * Carves up a mime-type and returns an Array of the [type, subtype, params] 
+     * where "params" is a Hash of all the parameters for the media range.
+     *
+     * For example, the media range "application/xhtml;q=0.5" would
+     * get parsed into:
+     *
+     * array("application", "xhtml", array( "q" => "0.5" )) 
+     *
+     * @param string $mime_type
+     * @return array ($type, $subtype, $params)
+     */
+    public function parse_mime_type($mime_type) {
+      $parts = explode(";", $mime_type);
+      
+      $params = array();
+      foreach ($parts as $i=>$param) {
+        if (strpos($param, '=') !== false) {
+            list ($k, $v) = explode('=', trim($param));
+            $params[$k] = $v;
+        }
+      }
+
+      $full_type = trim($parts[0]);
+      /* Java URLConnection class sends an Accept header that includes a single "*"
+         Turn it into a legal wildcard. */
+      if ($full_type == '*') {
+          $full_type = '*/*';
+      }
+      list ($type, $subtype) = explode('/', $full_type);
+      if (!$subtype) throw (new Exception("malformed mime type"));
+    
+      return array(trim($type), trim($subtype), $params);
+    }
+    
+    
+    /**
+     * Carves up a media range and returns an Array of the
+     * [type, subtype, params] where "params" is a Hash of all
+     * the parameters for the media range.
+     *
+     * For example, the media range "application/*;q=0.5" would
+     * get parsed into:
+     *
+     * array("application", "*", ( "q", "0.5" ))
+     *
+     * In addition this function also guarantees that there
+     * is a value for "q" in the params dictionary, filling it
+     * in with a proper default if necessary. 
+     *
+     * @param string $range
+     * @return array ($type, $subtype, $params)
+     */
+    public function parse_media_range($range) {
+      list ($type, $subtype, $params) = $this->parse_mime_type($range);
+      
+      if (!(isset($params['q']) && $params['q'] && floatval($params['q']) &&
+        floatval($params['q']) <= 1 && floatval($params['q']) >= 0))
+            $params['q'] = '1';
+      
+      return array($type, $subtype, $params);
+    }
+    
+    /**
+     * Find the best match for a given mime-type against a list of
+     * media_ranges that have already been parsed by Mimeparser::parse_media_range()
+     *
+     * Returns the fitness and the "q" quality parameter of the best match, or an
+     * array [-1, 0] if no match was found. Just as for Mimeparser::quality(),
+     * "parsed_ranges" must be an Enumerable of parsed media ranges. 
+     *
+     * @param string $mime_type
+     * @param array  $parsed_ranges
+     * @return array ($best_fitness, $best_fit_q)
+     */
+    public function fitness_and_quality_parsed($mime_type, $parsed_ranges) {
+      $best_fitness = -1;
+      $best_fit_q   = 0;
+      list ($target_type, $target_subtype, $target_params) = $this->parse_media_range($mime_type);
+    
+      foreach ($parsed_ranges as $item) {
+        list ($type, $subtype, $params) = $item;
+
+        if (($type == $target_type or $type == "*" or $target_type == "*") &&
+            ($subtype == $target_subtype or $subtype == "*" or $target_subtype == "*")) {
+    
+          $param_matches = 0;
+          foreach ($target_params as $k=>$v) {
+            if ($k != 'q' && isset($params[$k]) && $v == $params[$k])
+              $param_matches++;
+          }
+        
+          $fitness  = ($type == $target_type) ? 100 : 0;
+          $fitness += ($subtype == $target_subtype) ? 10 : 0;
+          $fitness += $param_matches;
+    
+          if ($fitness > $best_fitness) {
+            $best_fitness = $fitness;
+            $best_fit_q   = $params['q'];
+          }
+        }
+      }
+    
+      return array( $best_fitness, (float) $best_fit_q );
+    }
+    
+    /**
+     * Find the best match for a given mime-type against a list of
+     * media_ranges that have already been parsed by Mimeparser::parse_media_range()
+     *
+     * Returns the "q" quality parameter of the best match, 0 if no match
+     * was found. This function behaves the same as Mimeparser::quality() except that
+     * "parsed_ranges" must be an Enumerable of parsed media ranges. 
+     *
+     * @param string $mime_type
+     * @param array  $parsed_ranges
+     * @return float $q
+     */
+    public function quality_parsed($mime_type, $parsed_ranges) {
+      list ($fitness, $q) = $this->fitness_and_quality_parsed($mime_type, $parsed_ranges);
+      return $q;
+    }
+    
+    /**
+     * Returns the quality "q" of a mime-type when compared against
+     * the media-ranges in ranges. For example:
+     *
+     * Mimeparser::quality("text/html", "text/*;q=0.3, text/html;q=0.7, 
+     * text/html;level=1, text/html;level=2;q=0.4, *\/*;q=0.5")
+     * => 0.7 
+     *
+     * @param unknown_type $mime_type
+     * @param unknown_type $ranges
+     * @return unknown
+     */
+    public function quality($mime_type, $ranges) {
+      $parsed_ranges = explode(',', $ranges);
+      
+      foreach ($parsed_ranges as $i=>$r)
+          $parsed_ranges[ $i ] = $this->parse_media_range($r);
+      
+      return $this->quality_parsed($mime_type, $parsed_ranges);
+    }
+    
+    /**
+     * Takes a list of supported mime-types and finds the best match
+     * for all the media-ranges listed in header. The value of header
+     * must be a string that conforms to the format of the HTTP Accept:
+     * header. The value of supported is an Enumerable of mime-types
+     *
+     * Mimeparser::best_match(array("application/xbel+xml", "text/xml"), "text/*;q=0.5,*\/*; q=0.1")
+     * => "text/xml"
+     *
+     * @param  array  $supported
+     * @param  string $header
+     * @return mixed  $mime_type or NULL 
+     */
+    public function best_match($supported, $header) {
+      $parsed_header = explode(',', $header);
+      
+      foreach ($parsed_header as $i=>$r)
+          $parsed_header[ $i ] = $this->parse_media_range($r);
+        
+      $weighted_matches = array();
+      foreach ($supported as $mime_type) {
+          $weighted_matches[] = array(
+            $this->fitness_and_quality_parsed($mime_type, $parsed_header),
+            $mime_type
+          );
+      }
+    
+      array_multisort($weighted_matches);
+
+      $a = $weighted_matches[ count($weighted_matches) - 1 ];
+      return ( empty( $a[0][1] ) ? null :  $a[1] );
+    }
+}
\ Brak znaku nowej linii na końcu pliku
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/README.markdown drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/README.markdown
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/README.markdown	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/README.markdown	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,78 @@
+README
+===================
+
+This is a brief introduction to how the rest server works. See the [services_oop][services_oop] module to find out more about how you easily can expose functionality in a resource-oriented way.
+
+All this depends on the functionality added by the [oauth-rest branch of services][oauth-rest].
+
+Controllers
+-------------------
+
+Tabulation of the controller mapping for the REST server. Requests gets mapped to different controllers based on the HTTP method used and the number of parts in the path.
+
+Count refers to the number of path parts that comes after the path that identifies the resource type. The request for `/services/rest/node/123` would have the count 1, as `/services/rest/node` identifies the resource.
+
+    X = CRUD
+    A = Action
+    T = Targeted action
+    R = Relationship request
+
+    COUNT |0|1|2|3|4|N|
+    -------------------
+    GET   |X|X|R|R|R|R|
+    -------------------
+    POST  |X|A|T|T|T|T|
+    -------------------
+    PUT   | |X| | | | |
+    -------------------
+    DELETE| |X| | | | |
+    -------------------
+
+CRUD
+-------------------
+
+The basis of the REST server.
+
+    Create:   POST /services/rest/node + body data
+    Retrieve: GET /services/rest/node/123
+    Update:   PUT /services/rest/node/123 + body data
+    Delete:   DELETE /services/rest/node/123
+
+And last but least, the little bastard sibling to Retrieve that didn't get it's place in the acronym: 
+
+    Index:    GET /services/rest/node
+
+In the REST server the index often doubles as a search function. The comment resource allows queries like the following for checking for new comments on a node (where 123456 is the timestamp for the last check and 123600 is now):
+
+    New comments: GET /services/comment?nid=123&timestamp=123456:
+    Comments in the last hour: GET /services/comment?timestamp=120000:123600
+
+Actions
+-------------------
+
+Actions are performed directly on the resource type, not a individual resource. The following example is hypothetical (but plausible). Say that you want to expose a API for the [apachesolr][apachesolr] module. One of the things that could be exposed is the functionality to reindex the whole site.
+
+    Publish:  POST /services/rest/apachesolr/reindex
+
+Targeted actions
+-------------------
+
+Targeted actions acts on a individual resource. A good, but again - hypothetical, example would be the publishing and unpublishing of nodes. 
+
+    Publish:  POST /services/rest/node/123/publish
+
+Relationships
+-------------------
+
+Relationship requests are convenience methods (sugar) to get something thats related to a individual resource. A real example would be the relationship that the [comment_resource][comment_resource] module adds to the node resource:
+
+    Get comments: GET /services/rest/node/123/comments
+
+This more or less duplicates the functionality of the comment index:
+
+    Get comments: GET /services/rest/comments?nid=123
+
+[apachesolr]: http://drupal.org/project/apachesolr "Apache Solr Search Integration"
+[comment_resource]: http://github.com/hugowetterberg/comment_resource "Comment resource"
+[services_oop]: http://github.com/hugowetterberg/services_oop "Services OOP"
+[oauth-rest]: http://github.com/hugowetterberg/services/tree/oauth-rest "Services oAuth REST branch"
\ Brak znaku nowej linii na końcu pliku
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/rest_server.api.php drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/rest_server.api.php
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/rest_server.api.php	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/rest_server.api.php	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,60 @@
+<?php
+
+/**
+ * @file
+ * Hooks provided by Services for the definition of servers.
+ */
+
+/**
+ * @addtogroup hooks
+ * @{
+ */
+
+/**
+ * Triggered when the REST server request a list of available request parsers.
+ *
+ * @param array $parsers
+ *  An associative array of parser callbacks keyed by mime-type.
+ * @return void
+ */
+function hook_rest_server_request_parsers_alter(&$parsers) {
+  unset($parsers['application/x-www-form-urlencoded']);
+}
+
+/**
+ * Triggered when the REST server request a list of supported response formats.
+ *
+ * @param array $formatters
+ *  An associative array of formatter info arrays keyed by type extension. The
+ *  formatter info specifies an array of 'mime types' that corresponds to the
+ *  output format; a 'formatter class' class implements ServicesFormatterInterface
+ *  and is responsible for encoding the output.
+ * @return void
+ */
+function hook_rest_server_response_formatters_alter(&$formatters) {
+  // Remove the jsonp response format.
+  unset($formatters['jsonp']);
+}
+
+/**
+ * Alter error messages right before delivering.
+ *
+ * @param array $errors
+ *  Array of following properties:
+ *   'code' -- error code
+ *   'header_message' -- message that will be returned in Status header
+ *   'body_data' -- data returned in the body of the response
+ *  You can alter 'header_message' and 'body_data' in your hook implementations.
+ * @param type $controller
+ *  Executed controller.
+ * @param type $arguments
+ *  Arguments of the controller.
+ */
+function hook_rest_server_execute_errors_alter(&$error, $controller, $arguments) {
+  $error_code = $error['code'];
+  if (user_is_logged_in() && $error_code == 401) {
+    global $user;
+    $error['header_message'] = '403 ' . t('Access denied for user @user',
+      array('@user' => $user->name));
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/rest_server.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/rest_server.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/rest_server.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/rest_server.inc	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,88 @@
+<?php
+
+/**
+ * @file
+ * Autoload classes and server settings.
+ */
+
+/**
+ * REST server settings form. Generates the form fragment for configuring the REST server
+ * for an endpoint.
+ *
+ * @param array $form
+ *  The form fragment from services that we should add our fields to.
+ * @param object $endpoint
+ *  The endpoint that we're configuring the REST server for.
+ * @param array $settings
+ *  The current settings.
+ * @return void
+ */
+function _rest_server_settings(&$form, $endpoint, $settings) {
+  $settings = rest_server_setup_settings($settings);
+
+  $form['formatters'] = array(
+    '#type'          => 'checkboxes',
+    '#title'         => t('Response formatters'),
+    '#required'      => TRUE,
+    '#description'   => t('Select the response formats you want to enable for the rest server.'),
+  ) + _rest_server_settings_checkboxes_attributes($settings['formatters']);
+
+  $form['parsers'] = array(
+    '#type'          => 'checkboxes',
+    '#title'         => t('Request parsing'),
+    '#required'      => TRUE,
+    '#description'   => t('Select the request parser types you want to enable for the rest server.'),
+  ) + _rest_server_settings_checkboxes_attributes($settings['parsers']);
+}
+
+/**
+ * Utility function that creates attributes for a checkboxes-type form
+ * element from a rest server settings array.
+ *
+ * @param array $settings
+ * @return array
+ */
+function _rest_server_settings_checkboxes_attributes($settings) {
+  $keys = array_keys($settings);
+  $options = array_combine($keys, $keys);
+  $default = array();
+  foreach ($settings as $key => $enabled) {
+    if ($enabled) {
+      $default[] = $key;
+    }
+  }
+  ksort($options);
+  return array(
+    '#options' => $options,
+    '#default_value' => $default,
+  );
+}
+
+/**
+ * Submit handler for the services REST server settings form.
+ *
+ * @param object $endpoint
+ *  The endpoint that's being configured.
+ * @param array $values
+ *  The partial form-state from services.
+ * @return array
+ *  The settings for the REST server in this endpoint.
+ */
+function _rest_server_settings_submit($endpoint, &$values) {
+  $values['formatters'] = array_map('_rest_server_settings_not_zero', $values['formatters']);
+  $values['parsers'] = array_map('_rest_server_settings_not_zero', $values['parsers']);
+  return $values;
+}
+
+/**
+ * Utility function intended for use with array_map to change everything that
+ * isn't === 0 into TRUE.
+ *
+ * @param string $value
+ *  The value to map.
+ * @return bool
+ *  FALSE if the $value is === 0 otherwise TRUE is returned.
+ */
+function _rest_server_settings_not_zero($value) {
+  return $value !== 0;
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/rest_server.info drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/rest_server.info
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/rest_server.info	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/rest_server.info	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,28 @@
+name = REST Server
+description = Provides an REST server.
+package = Services - servers
+
+files[] = rest_server.module
+
+files[] = includes/RESTServer.inc
+files[] = includes/ServicesContentTypeNegotiator.inc
+files[] = includes/ServicesRESTServerFactory.inc
+files[] = includes/ServicesContext.inc
+files[] = includes/ServicesParser.inc
+files[] = includes/ServicesFormatter.inc
+files[] = tests/ServicesRESTServerTests.test
+files[] = tests/rest_server_mock_classes.inc
+files[] = lib/bencode.php
+files[] = lib/mimeparse.php
+
+dependencies[] = services
+dependencies[] = libraries (>=2.x)
+
+core = 7.x
+
+; Information added by Drupal.org packaging script on 2014-01-31
+version = "7.x-3.7"
+core = "7.x"
+project = "services"
+datestamp = "1391207946"
+
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/rest_server.install drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/rest_server.install
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/rest_server.install	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/rest_server.install	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,35 @@
+<?php
+/**
+ * @file
+ * Install, uninstall and update the rest server module.
+ */
+
+/**
+ * Implements hook_requirements().
+ */
+function rest_server_requirements($phase) {
+  $requirements = array();
+
+  // Report the version of libraries.
+  if ($phase == 'runtime') {
+    drupal_load('module', 'libraries');
+    $libraries = rest_server_libraries_info();
+    foreach ($libraries as $name => $info) {
+      $library = libraries_detect($name);
+      $requirements[$name] = array(
+        'title' => $library['name'],
+        'severity' => $library['installed'] ? REQUIREMENT_OK : REQUIREMENT_WARNING,
+        'value' => $library['installed'] ? l($library['version'], $library['vendor url']) : $library['error message'],
+      );
+    }
+  }
+  
+  return $requirements;
+}
+
+/**
+ * Implements hook_uninstall().
+ */
+function rest_server_uninstall() {
+  variable_del('rest_server_default_response_format');
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/rest_server.module drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/rest_server.module
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/rest_server.module	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/rest_server.module	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,195 @@
+<?php
+
+/**
+ * Implements hook_server_info().
+ */
+function rest_server_server_info() {
+  return array(
+    'name' => 'REST',
+    'path' => 'rest',
+    'settings' => array(
+      'file' => array('inc', 'rest_server'),
+      'form' => '_rest_server_settings',
+      'submit' => '_rest_server_settings_submit',
+    ),
+  );
+}
+
+/**
+ * Starting point of the REST server.
+ *
+ * @return type
+ */
+function rest_server_server() {
+  $endpoint_path = services_get_server_info('endpoint_path', 'services/rest');
+
+  $services_rest_server_factory = variable_get('services_rest_server_factory_class', 'ServicesRESTServerFactory');
+  $rest_server_factory = new $services_rest_server_factory(array('endpoint_path' => $endpoint_path));
+  /* @var $rest_server RESTServer */
+  $rest_server = $rest_server_factory->getRESTServer();
+
+  $canonical_path = $rest_server->getCanonicalPath();
+  if (empty($canonical_path)) {
+    $endpoint_name = services_get_server_info('endpoint', '');
+    $endpoint = services_endpoint_load($endpoint_name);
+    return t('Services Endpoint "@name" has been setup successfully.', array('@name' => $endpoint->name));
+  }
+
+  try {
+    return $rest_server->handle();
+  }
+  catch (Exception $e) {
+    $rest_server->handleException($e);
+  }
+}
+
+/**
+ * Builds a list of request parsers that are available to the RESTServer.
+ *
+ * @return array
+ *  An associative array of parser callbacks keyed by mime-type.
+ */
+function rest_server_request_parsers() {
+  static $parsers = NULL;
+  if (!$parsers) {
+    $parsers = array(
+      'application/x-www-form-urlencoded' => 'ServicesParserURLEncoded',
+      'application/json' => 'ServicesParserJSON',
+      'application/vnd.php.serialized' => 'ServicesParserPHP',
+      'multipart/form-data' => 'ServicesParserMultipart',
+      'application/xml' => 'ServicesParserXML',
+      'text/xml' => 'ServicesParserXML',
+    );
+
+    if (($library = libraries_load('spyc')) && !empty($library['loaded'])) {
+      $parsers['application/x-yaml'] = 'ServicesParserYAML';
+    }
+
+    drupal_alter('rest_server_request_parsers', $parsers);
+  }
+  return $parsers;
+}
+
+/**
+ * Builds a list of response formatters that are available to the RESTServer.
+ *
+ * @return array
+ *  An associative array of formatter info arrays keyed by type extension. The
+ *  formatter info specifies an array of 'mime types' that corresponds to the
+ *  output format; a 'view' class that is a subclass of RESTServerView; and
+ *  'view arguments' that should be passed to the view when it is created;
+ */
+function rest_server_response_formatters() {
+  static $formatters = NULL;
+  if (!$formatters) {
+    $formatters = array(
+      'xml' => array(
+        'mime types' => array('application/xml', 'text/xml'),
+        'formatter class' => 'ServicesXMLFormatter',
+      ),
+      'json' => array(
+        'mime types' => array('application/json'),
+        'formatter class' => 'ServicesJSONFormatter',
+      ),
+      'jsonp' => array(
+        'mime types' => array('text/javascript', 'application/javascript'),
+        'formatter class' => 'ServicesJSONPFormatter',
+      ),
+      'php' => array(
+        'mime types' => array('application/vnd.php.serialized'),
+        'formatter class' => 'ServicesPHPFormatter',
+      ),
+      'bencode' => array(
+        'mime types' => array('application/x-bencode'),
+        'formatter class' => 'ServicesBencodeFormatter',
+      ),
+    );
+
+    if (($library = libraries_load('spyc')) && !empty($library['loaded'])) {
+      $formatters['yaml'] = array(
+        'mime types' => array('text/plain', 'application/x-yaml', 'text/yaml'),
+        'formatter class' => 'ServicesYAMLFormatter',
+      );
+    }
+
+    drupal_alter('rest_server_response_formatters', $formatters);
+  }
+  return $formatters;
+}
+
+/**
+ * Set up settings for a rest server endpoint, fills the settings
+ * array with defaults. This is done to ensure that the default state
+ * is consistent between what's shown by default in the settings form
+ * and used by default by the REST server if it hasn't been configured.
+ *
+ * @param array $settings
+ * @return array
+ *  The standardized settings array.
+ */
+function rest_server_setup_settings($settings = array()) {
+  // Apply defaults
+  $settings = $settings + array(
+    'formatters' => array('jsonp' => FALSE),
+    'parsers' => array('application/x-www-form-urlencoded' => FALSE),
+  );
+
+  // Get all available parsers and formatters.
+  $parsers = rest_server_request_parsers();
+  $formatters = rest_server_response_formatters();
+
+  _rest_server_add_default_and_remove_unknown($settings['parsers'], array_keys($parsers), TRUE);
+  _rest_server_add_default_and_remove_unknown($settings['formatters'], array_keys($formatters), TRUE);
+
+  return $settings;
+}
+
+/**
+ * Utility function set set up an array with default values for a set
+ * of keys and remove all entries that does not match a key in the set.
+ *
+ * @param array $array
+ *  The array to modify.
+ * @param array $keys
+ *  An array of keys.
+ * @param mixed $default
+ *  A default value.
+ * @return void
+ */
+function _rest_server_add_default_and_remove_unknown(&$array, $keys, $default) {
+  // Add default values to all keys that do not
+  // exist in $array but exist in $keys.
+  foreach ($keys as $k) {
+    if (!isset($array[$k])) {
+      $array[$k] = $default;
+    }
+  }
+  // Unset all values that key exist in $array
+  // but does not exist in $keys.
+  foreach (array_keys($array) as $key) {
+    if (!in_array($key, $keys)) {
+      unset($array[$key]);
+    }
+  }
+}
+
+/**
+ * Implements hook_libraries_info().
+ */
+function rest_server_libraries_info() {
+  $libraries['spyc'] = array(
+    'name' => 'Spyc',
+    'version' => '0.5.1',
+    'vendor url' => 'https://github.com/mustangostang/spyc',
+    'download url' => 'https://raw2.github.com/mustangostang/spyc/master/Spyc.php',
+    'version arguments' => array(
+      'file' => 'Spyc.php',
+      'pattern' => '@version\s+([0-9a-zA-Z\.-]+)@',
+    ),
+    'files' => array(
+      'php' => array('Spyc.php'),
+    ),
+  );
+
+  return $libraries;
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/tests/rest_server_mock_classes.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/tests/rest_server_mock_classes.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/tests/rest_server_mock_classes.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/tests/rest_server_mock_classes.inc	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,78 @@
+<?php
+
+/**
+ * Factory to build RESTServer object for testing.
+ */
+class MockServicesRESTServerFactory extends ServicesRESTServerFactory {
+  static $class_name = 'MockRESTServer';
+
+  public function __construct($data = array()) {
+    parent::__construct($data);
+    drupal_static_reset();
+  }
+
+  protected function getContext() {
+    $context = new MockServicesContext($this->data['endpoint_path']);
+    $context->setData($this->data['context_data']);
+    return $context;
+  }
+
+  protected function getResources() {
+    if (isset($this->data['resources'])) {
+      return $this->data['resources'];
+    }
+    return array();
+  }
+
+  protected function getFormatters() {
+    if (isset($this->data['formatters'])) {
+      return $this->data['formatters'];
+    }
+    return array();
+  }
+
+  protected function getParsers() {
+    if (isset($this->data['parsers'])) {
+      return $this->data['parsers'];
+    }
+    return array();
+  }
+}
+
+/**
+ * Mock ServicesContext object.
+ */
+class MockServicesContext extends ServicesContext {
+  public function setData($data) {
+    $this->data = array_merge($this->data, $data);
+  }
+}
+
+/**
+ * Extend RESTServer to test protected methods.
+ */
+class MockRESTServer extends RESTServer {
+  public function protectedGetControllerArgumentsFromSources($controller, $sources) {
+    return $this->getControllerArgumentsFromSources($controller, $sources);
+  }
+
+  public function protectedRender($formatter, $result) {
+    return $this->render($formatter, $result);
+  }
+
+  public function protectedGetResourceName() {
+    return $this->getResourceName();
+  }
+
+  public function protectedGetResponseFormatter() {
+    return $this->getResponseFormatter();
+  }
+
+  public function protectedResolveController($resource, &$operation) {
+    return $this->resolveController($resource, $operation);
+  }
+
+  public function protectedParseRequestBody() {
+    return $this->parseRequestBody();
+  }
+}
\ Brak znaku nowej linii na końcu pliku
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/tests/ServicesRESTServerTests.test drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/tests/ServicesRESTServerTests.test
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/tests/ServicesRESTServerTests.test	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/rest_server/tests/ServicesRESTServerTests.test	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,617 @@
+<?php
+
+
+/**
+ * Unit tests for RESTServer class.
+ */
+class ServicesRESTServerTests extends DrupalUnitTestCase {
+
+  /**
+   * Implementation of getInfo().
+   */
+  public static function getInfo() {
+    return array(
+      'name' => t('RESTServer unit tests'),
+      'description' => t('Test separate methods of class.'),
+      'group' => t('Services'),
+    );
+  }
+
+  public function setUp() {
+    parent::setUp();
+
+    module_load_include('inc', 'services', 'includes/services.runtime');
+    module_load_include('inc', 'rest_server', 'includes/RESTServer');
+    module_load_include('inc', 'rest_server', 'includes/ServicesContentTypeNegotiator');
+    module_load_include('inc', 'rest_server', 'includes/ServicesContext');
+    module_load_include('inc', 'rest_server', 'includes/ServicesParser');
+    module_load_include('inc', 'rest_server', 'includes/ServicesFormatter');
+    module_load_include('inc', 'rest_server', 'includes/ServicesRESTServerFactory');
+    module_load_include('inc', 'rest_server', 'tests/rest_server_mock_classes');
+  }
+
+  /**
+   * Test method getResourceName().
+   */
+  public function testGetResourceName() {
+    $factory_args = $this->getDefaultFactoryArguments();
+
+    $rest_server_factory = new MockServicesRESTServerFactory($factory_args);
+    $rest_server = $rest_server_factory->getRESTServer();
+
+    $resource_name = $rest_server->protectedGetResourceName();
+    $this->assertEqual($resource_name, 'node', 'Retrieve call resource name determined properly.');
+
+
+    $factory_args['context_data']['get']['q'] = 'rest/user';
+    $rest_server_factory = new MockServicesRESTServerFactory($factory_args);
+    $rest_server = $rest_server_factory->getRESTServer();
+
+    $resource_name = $rest_server->protectedGetResourceName();
+    $this->assertEqual($resource_name, 'user', 'Index call resource name determined properly.');
+  }
+
+  /**
+   * Test method getResponseFormatter().
+   */
+  public function testGetResponseFormatter() {
+    $factory_args = $this->getDefaultFactoryArguments();
+
+    $formatter = $this->getResponseFormatter($factory_args);
+    $this->assertEqual($formatter, $factory_args['formatters']['xml'], 'XML formatter determined properly from URL');
+
+    // Pass formatter in url that is not recognizable.
+    $factory_args['context_data']['get']['q'] = 'rest/node/1.php';
+    $formatter = $this->getResponseFormatter($factory_args);
+    $this->assertEqual($formatter, FALSE, 'Unknown formatter "php" path extension.');
+
+    // Default formatter is json.
+    $factory_args['context_data']['get']['q'] = 'rest/node/1';
+    $formatter = $this->getResponseFormatter($factory_args);
+    $this->assertEqual($formatter, $factory_args['formatters']['json'], 'Default is json');
+
+    // Pass Accept headers.
+    $factory_args['context_data']['server']['HTTP_ACCEPT'] = 'application/xml';
+    $formatter = $this->getResponseFormatter($factory_args);
+    $this->assertEqual($formatter, $factory_args['formatters']['xml'], 'XML formatter determined properly from Accept header "application/xml"');
+
+    $factory_args['context_data']['server']['HTTP_ACCEPT'] = 'text/xml';
+    $formatter = $this->getResponseFormatter($factory_args);
+    $this->assertEqual($formatter, $factory_args['formatters']['xml'], 'XML formatter determined properly from Accept header "text/xml"');
+
+    $factory_args['context_data']['server']['HTTP_ACCEPT'] = 'text/html;level=2;q=0.7,text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8';
+    $formatter = $this->getResponseFormatter($factory_args);
+    $this->assertEqual($formatter, $factory_args['formatters']['xml'], 'XML formatter determined properly from Accept header "text/html;level=2;q=0.7,text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"');
+
+    $factory_args['context_data']['server']['HTTP_ACCEPT'] = 'text/html;level=2;q=0.7,application/json,application/xml;q=0.9,*/*;q=0.8';
+    $formatter = $this->getResponseFormatter($factory_args);
+    $this->assertEqual($formatter, $factory_args['formatters']['json'], 'JSON formatter determined properly from Accept header "text/html;level=2;q=0.7,application/json,application/xml;q=0.9,*/*;q=0.8"');
+
+    $factory_args['context_data']['server']['HTTP_ACCEPT'] = 'text/yaml';
+    $formatter = $this->getResponseFormatter($factory_args);
+    $this->assertEqual($formatter, FALSE, 'Unknown formatter Accept "text/yaml" header.');
+  }
+
+  /**
+   * Test for method resolveController().
+   */
+  function testResolveController() {
+    $resource = $this->getTestResource();
+    $resource_name = 'node';
+
+    $factory_args = $this->getDefaultFactoryArguments();
+
+    // Create operation.
+    $factory_args['context_data']['request_method'] = 'POST';
+    $factory_args['context_data']['get']['q'] = 'rest/node';
+    $rest_server = $this->getRESTSever($factory_args);
+    $controller = $rest_server->protectedResolveController($resource, $resource_name);
+    $this->assertEqual($controller, $resource['operations']['create'], 'Create operation controller found.');
+
+    $factory_args['context_data']['request_method'] = 'POST';
+    $factory_args['context_data']['get']['q'] = 'rest/node/1.xml';
+    $rest_server = $this->getRESTSever($factory_args);
+    $controller = $rest_server->protectedResolveController($resource, $resource_name);
+    $this->assertEqual($controller, FALSE, 'POST request to "node/1.xml" not recognized.');
+
+    // Retrieve operation.
+    $factory_args['context_data']['request_method'] = 'GET';
+    $factory_args['context_data']['get']['q'] = 'rest/node/1.xml';
+    $rest_server = $this->getRESTSever($factory_args);
+    $controller = $rest_server->protectedResolveController($resource, $resource_name);
+    $this->assertEqual($controller, $resource['operations']['retrieve'], 'Retrieve operation controller found.');
+
+    // Update operation.
+    $factory_args['context_data']['request_method'] = 'PUT';
+    $factory_args['context_data']['get']['q'] = 'rest/node/1.xml';
+    $rest_server = $this->getRESTSever($factory_args);
+    $controller = $rest_server->protectedResolveController($resource, $resource_name);
+    $this->assertEqual($controller, $resource['operations']['update'], 'Update operation controller found.');
+
+    $factory_args['context_data']['request_method'] = 'PUT';
+    $factory_args['context_data']['get']['q'] = 'rest/node';
+    $rest_server = $this->getRESTSever($factory_args);
+    $controller = $rest_server->protectedResolveController($resource, $resource_name);
+    $this->assertEqual($controller, FALSE, 'PUT request to "node" not recognized.');
+
+    // Delete operation.
+    $factory_args['context_data']['request_method'] = 'DELETE';
+    $factory_args['context_data']['get']['q'] = 'rest/node/1.xml';
+    $rest_server = $this->getRESTSever($factory_args);
+    $controller = $rest_server->protectedResolveController($resource, $resource_name);
+    $this->assertEqual($controller, $resource['operations']['delete'], 'Delete operation controller found.');
+
+    $factory_args['context_data']['request_method'] = 'DELETE';
+    $factory_args['context_data']['get']['q'] = 'rest/node';
+    $rest_server = $this->getRESTSever($factory_args);
+    $controller = $rest_server->protectedResolveController($resource, $resource_name);
+    $this->assertEqual($controller, FALSE, 'DELETE request to "node" not recognized.');
+
+    // Index operation.
+    $factory_args['context_data']['request_method'] = 'GET';
+    $factory_args['context_data']['get']['q'] = 'rest/node';
+    $rest_server = $this->getRESTSever($factory_args);
+    $controller = $rest_server->protectedResolveController($resource, $resource_name);
+    $this->assertEqual($controller, $resource['operations']['index'], 'Index operation controller found.');
+
+    // Actions.
+    $factory_args['context_data']['request_method'] = 'POST';
+    $factory_args['context_data']['get']['q'] = 'rest/node/connect';
+    $rest_server = $this->getRESTSever($factory_args);
+    $controller = $rest_server->protectedResolveController($resource, $resource_name);
+    $this->assertEqual($controller, $resource['actions']['connect'], 'Action "connect" controller found.');
+
+    $factory_args['context_data']['request_method'] = 'POST';
+    $factory_args['context_data']['get']['q'] = 'rest/node/connect/1';
+    $rest_server = $this->getRESTSever($factory_args);
+    $controller = $rest_server->protectedResolveController($resource, $resource_name);
+    $this->assertEqual($controller, FALSE, 'POST request to "node/connect/1" not recognized.');
+
+    $factory_args['context_data']['request_method'] = 'POST';
+    $factory_args['context_data']['get']['q'] = 'rest/node/not_connect';
+    $rest_server = $this->getRESTSever($factory_args);
+    $controller = $rest_server->protectedResolveController($resource, $resource_name);
+    $this->assertEqual($controller, FALSE, 'POST request to "node/not_connect" not recognized.');
+
+    // Targeted Actions.
+    $factory_args['context_data']['request_method'] = 'POST';
+    $factory_args['context_data']['get']['q'] = 'rest/node/1/attach_file';
+    $rest_server = $this->getRESTSever($factory_args);
+    $controller = $rest_server->protectedResolveController($resource, $resource_name);
+    $this->assertEqual($controller, $resource['targeted_actions']['attach_file'], 'Targeted action "attach_file" controller found.');
+
+    $factory_args['context_data']['request_method'] = 'POST';
+    $factory_args['context_data']['get']['q'] = 'rest/node/1/attach_file_fake';
+    $rest_server = $this->getRESTSever($factory_args);
+    $controller = $rest_server->protectedResolveController($resource, $resource_name);
+    $this->assertEqual($controller, FALSE, 'POST request to "rest/node/1/attach_file_fake" not recognized.');
+
+    // Relationships.
+    $factory_args['context_data']['request_method'] = 'GET';
+    $factory_args['context_data']['get']['q'] = 'rest/node/1/files';
+    $rest_server = $this->getRESTSever($factory_args);
+    $controller = $rest_server->protectedResolveController($resource, $resource_name);
+    $this->assertEqual($controller, $resource['relationships']['files'], 'Relationship "files" controller found.');
+
+    $factory_args['context_data']['request_method'] = 'GET';
+    $factory_args['context_data']['get']['q'] = 'rest/node/1/files_fake';
+    $rest_server = $this->getRESTSever($factory_args);
+    $controller = $rest_server->protectedResolveController($resource, $resource_name);
+    $this->assertEqual($controller, FALSE, 'GET request to "rest/node/1/files_fake" not recognized.');
+  }
+
+  /**
+   * Test for parseRequestBody() method.
+   */
+  public function testParseRequestBody() {
+    $factory_args = $this->getDefaultFactoryArguments();
+    $factory_args['parsers'] = array(
+      'application/x-www-form-urlencoded' => 'ServicesParserURLEncoded',
+      'application/json' => 'ServicesParserJSON',
+      'application/vnd.php.serialized' => 'ServicesParserPHP',
+      'multipart/form-data' => 'ServicesParserMultipart',
+      'application/xml' => 'ServicesParserXML',
+      'text/xml' => 'ServicesParserXML',
+    );
+    $factory_args['context_data']['request_method'] = 'POST';
+
+    $test_data = array('username' => 1, 'password' => 2);
+
+    $factory_args['context_data']['request_body'] = drupal_http_build_query($test_data, '', '&');
+    $factory_args['context_data']['server']['CONTENT_TYPE'] = 'application/x-www-form-urlencoded';
+    $rest_server = $this->getRESTSever($factory_args);
+    $decoded_data = $rest_server->protectedParseRequestBody();
+    $this->assertEqual($decoded_data, $test_data, 'URL Enconed parser decoded request data properly.');
+
+    $factory_args['context_data']['request_body'] = json_encode($test_data);
+    $factory_args['context_data']['server']['CONTENT_TYPE'] = 'application/json';
+    $rest_server = $this->getRESTSever($factory_args);
+    $decoded_data = $rest_server->protectedParseRequestBody();
+    $this->assertEqual($decoded_data, $test_data, 'JSON parser decoded request data properly.');
+
+    $factory_args['context_data']['request_body'] = serialize($test_data);
+    $factory_args['context_data']['server']['CONTENT_TYPE'] = 'application/vnd.php.serialized';
+    $rest_server = $this->getRESTSever($factory_args);
+    $decoded_data = $rest_server->protectedParseRequestBody();
+    $this->assertEqual($decoded_data, $test_data, 'PHP Serialize parser decoded request data properly.');
+
+    $factory_args['context_data']['post'] = $test_data;
+    $factory_args['context_data']['server']['CONTENT_TYPE'] = 'multipart/form-data';
+    $rest_server = $this->getRESTSever($factory_args);
+    $decoded_data = $rest_server->protectedParseRequestBody();
+    $this->assertEqual($decoded_data, $test_data, 'Multipart parser decoded request data properly.');
+
+    $factory_args['context_data']['request_body'] =
+      '<xml>
+        <username>1</username>
+        <password>2</password>
+      </xml>';
+    $factory_args['context_data']['server']['CONTENT_TYPE'] = 'application/xml';
+    $rest_server = $this->getRESTSever($factory_args);
+    $decoded_data = $rest_server->protectedParseRequestBody();
+    $this->assertEqual($decoded_data, $test_data, 'XML parser decoded request data properly.');
+
+    $factory_args['context_data']['server']['CONTENT_TYPE'] = 'application/xml-not-recognized';
+    $rest_server = $this->getRESTSever($factory_args);
+    try {
+      $decoded_data = $rest_server->protectedParseRequestBody();
+      $this->assert(FALSE, 'Unknown Content Type no exception.');
+    }
+    catch (Exception $e) {
+      $this->assert(TRUE, 'Unknown Content Type thown exception');
+    }
+  }
+
+  /**
+   * Test for getControllerArgumentsFromSources() method.
+   */
+  public function testGetControllerArgumentsFromSources() {
+    $test_resources = $this->getTestResource();
+    $factory_args = $this->getDefaultFactoryArguments();
+    $rest_server = $this->getRESTSever($factory_args);
+
+    $retrieve_controller = $test_resources['operations']['retrieve'];
+
+    $sources = array(
+      'path' => array('1'),
+      'param' => array(),
+      'data' => array(),
+      'headers' => array(),
+    );
+
+    // Arguments from path.
+    $arguments = $rest_server->protectedGetControllerArgumentsFromSources($retrieve_controller, $sources);
+    $this->assertEqual($arguments, array(0 => 1), 'Path argument retrieved.');
+
+//    $sources['path'][0] = $this->randomName();
+//    $arguments = $rest_server->protectedGetControllerArgumentsFromSources($retrieve_controller, $sources);
+//    $this->assertEqual($arguments, array(0 => 0), 'Path argument retrieved and converted to integer.');
+
+    // Arguments from 'data'
+    $create_controller = $test_resources['operations']['create'];
+
+    $sources['data'] = array(1, 2);
+    $arguments = $rest_server->protectedGetControllerArgumentsFromSources($create_controller, $sources);
+    $this->assertEqual($arguments, array($sources['data']), 'Data argument that is array retrieved.');
+
+    $sources['data'] = $this->randomName();
+    $arguments = $rest_server->protectedGetControllerArgumentsFromSources($create_controller, $sources);
+    $this->assertEqual($arguments, array(array($sources['data'])), 'Data argument that is string retrieved and converted to array.');
+
+    unset($create_controller['args'][0]['type']);
+    $arguments = $rest_server->protectedGetControllerArgumentsFromSources($create_controller, $sources);
+    $this->assertEqual($arguments, array($sources['data']), 'Data argument that is string retrieved and converted to array.');
+
+    // Arguments from 'get'
+    $create_controller['args'][0]['source'] = array('get' => 'node');
+    $sources['data'] = array();
+    $sources['get'] = array('node' => $this->randomString());
+    $arguments = $rest_server->protectedGetControllerArgumentsFromSources($create_controller, $sources);
+    $this->assertEqual($arguments, array($sources['get']['node']), 'Get argument retrieved.');
+
+    // Arguments combination.
+    $sources['data'] = array('comment' => $this->randomString());
+    $create_controller['args'][] = array(
+      'name' => 'comment',
+      'optional' => FALSE,
+      'source' => array('data' => 'comment'),
+      'type' => 'string',
+    );
+    $arguments = $rest_server->protectedGetControllerArgumentsFromSources($create_controller, $sources);
+    $this->assertEqual($arguments, array($sources['get']['node'], $sources['data']['comment']), 'Get and Data arguments retrieved.');
+
+    // Required argument.
+    $sources['get'] = array();
+    try {
+      $rest_server->protectedGetControllerArgumentsFromSources($create_controller, $sources);
+      $this->assert(FALSE, 'Missing required argument no error thrown.');
+    }
+    catch (Exception $e) {
+      $this->assert(TRUE, 'Missing required argument error thrown.');
+    }
+  }
+
+  /**
+   * Test for render() method.
+   */
+  public function testRender() {
+    $factory_args = $this->getDefaultFactoryArguments();
+    $rest_server = $this->getRESTSever($factory_args);
+
+    $formatters = array(
+      'xml' => array(
+        'mime types' => array('application/xml', 'text/xml'),
+        'formatter class' => 'ServicesXMLFormatter',
+      ),
+      'json' => array(
+        'mime types' => array('application/json'),
+        'formatter class' => 'ServicesJSONFormatter',
+      ),
+      'php' => array(
+        'mime types' => array('application/vnd.php.serialized'),
+        'formatter class' => 'ServicesPHPFormatter',
+      ),
+    );
+    $result = array('a' => 'b', 1, FALSE);
+
+
+    $xml_formatter = $formatters['xml'];
+    $formatted_output = $rest_server->protectedRender($xml_formatter, $result);
+    $expected_formatted_output =
+      '<?xml version="1.0" encoding="utf-8"?>' . "\n" .
+      '<result><a>b</a><item>1</item><item></item></result>' . "\n";
+    $this->assertEqual($formatted_output, $expected_formatted_output, 'XML formatter encoded correctly.');
+
+    $json_formatter = $formatters['json'];
+    $formatted_output = $rest_server->protectedRender($json_formatter, $result);
+    $this->assertEqual($formatted_output, '{"a":"b","0":1,"1":false}', 'JSON formatter encoded correctly.');
+
+    $php_formatter = $formatters['php'];
+    $formatted_output = $rest_server->protectedRender($php_formatter, $result);
+    $this->assertEqual($formatted_output, 'a:3:{s:1:"a";s:1:"b";i:0;i:1;i:1;b:0;}', 'PHP formatter encoded correctly.');
+  }
+
+  protected function getRESTSever($factory_args) {
+    $rest_server_factory = new MockServicesRESTServerFactory($factory_args);
+    return $rest_server_factory->getRESTServer();
+  }
+
+  protected function getResponseFormatter($factory_args) {
+    try {
+      $rest_server = $this->getRESTSever($factory_args);
+      return $rest_server->protectedGetResponseFormatter();
+    }
+    catch (Exception $e) {
+      return FALSE;
+    }
+  }
+
+  protected function getDefaultFactoryArguments() {
+    $context_data = array(
+      'get' => array('q' => 'rest/node/1.xml'),
+      'server' => array(),
+      'post' => array(),
+      'request_body' => '',
+    );
+
+    $formatters = array(
+      'xml' => array(
+        'mime types' => array('application/xml', 'text/xml'),
+        'formatter class' => 'ServicesXMLFormatter',
+      ),
+      'json' => array(
+        'mime types' => array('application/json'),
+        'formatter class' => 'ServicesJSONFormatter',
+      ),
+    );
+
+    $factory_args = array(
+      'endpoint_path' => 'rest',
+      'context_data' => $context_data,
+      'formatters' => $formatters,
+    );
+
+    return $factory_args;
+  }
+
+  protected function getTestResource() {
+    return array(
+      'operations' => array(
+        'retrieve' => array(
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/node_resource'),
+          'callback' => '_node_resource_retrieve',
+          'args' => array(
+            array(
+              'name' => 'nid',
+              'optional' => FALSE,
+              'source' => array('path' => 0),
+              'type' => 'int',
+              'description' => 'The nid of the node to get',
+            ),
+          ),
+          'access callback' => '_node_resource_access',
+          'access arguments' => array('view'),
+          'access arguments append' => TRUE,
+        ),
+        'create' => array(
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/node_resource'),
+          'callback' => '_node_resource_create',
+          'args' => array(
+            array(
+              'name' => 'node',
+              'optional' => FALSE,
+              'source' => 'data',
+              'description' => 'The node data to create',
+              'type' => 'array',
+            ),
+          ),
+          'access callback' => '_node_resource_access',
+          'access arguments' => array('create'),
+          'access arguments append' => TRUE,
+        ),
+        'update' => array(
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/node_resource'),
+          'callback' => '_node_resource_update',
+          'args' => array(
+            array(
+              'name' => 'nid',
+              'optional' => FALSE,
+              'source' => array('path' => 0),
+              'type' => 'int',
+              'description' => 'The nid of the node to get',
+            ),
+            array(
+              'name' => 'node',
+              'optional' => FALSE,
+              'source' => 'data',
+              'description' => 'The node data to update',
+              'type' => 'array',
+            ),
+          ),
+          'access callback' => '_node_resource_access',
+          'access arguments' => array('update'),
+          'access arguments append' => TRUE,
+        ),
+        'delete' => array(
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/node_resource'),
+          'callback' => '_node_resource_delete',
+          'args' => array(
+            array(
+              'name' => 'nid',
+              'optional' => FALSE,
+              'source' => array('path' => 0),
+              'type' => 'int',
+            ),
+          ),
+          'access callback' => '_node_resource_access',
+          'access arguments' => array('delete'),
+          'access arguments append' => TRUE,
+        ),
+        'index' => array(
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/node_resource'),
+          'callback' => '_node_resource_index',
+          'args' => array(
+            array(
+              'name' => 'page',
+              'optional' => TRUE,
+              'type' => 'int',
+              'description' => 'The zero-based index of the page to get, defaults to 0.',
+              'default value' => 0,
+              'source' => array('param' => 'page'),
+            ),
+            array(
+              'name' => 'fields',
+              'optional' => TRUE,
+              'type' => 'string',
+              'description' => 'The fields to get.',
+              'default value' => '*',
+              'source' => array('param' => 'fields'),
+            ),
+            array(
+              'name' => 'parameters',
+              'optional' => TRUE,
+              'type' => 'array',
+              'description' => 'Parameters array',
+              'default value' => array(),
+              'source' => array('param' => 'parameters'),
+            ),
+            array(
+              'name' => 'pagesize',
+              'optional' => TRUE,
+              'type' => 'int',
+              'description' => 'Number of records to get per page.',
+              'default value' => variable_get('services_node_index_page_size', 20),
+              'source' => array('param' => 'pagesize'),
+            ),
+          ),
+          'access arguments' => array('access content'),
+        ),
+      ),
+      'targeted_actions' => array(
+        'attach_file' => array(
+          'help' => 'Upload and attach file(s) to a node. POST multipart/form-data to node/123/attach_file',
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/node_resource'),
+          'callback' => '_node_resource_attach_file',
+          'access callback' => '_node_resource_access',
+          'access arguments' => array('update'),
+          'access arguments append' => TRUE,
+          'args' => array(
+            array(
+              'name' => 'nid',
+              'optional' => FALSE,
+              'source' => array('path' => 0),
+              'type' => 'int',
+              'description' => 'The nid of the node to attach a file to',
+            ),
+            array(
+              'name' => 'field_name',
+              'optional' => FALSE,
+              'source' => array('data' => 'field_name'),
+              'description' => 'The file parameters',
+              'type' => 'string',
+            ),
+            array(
+              'name' => 'attach',
+              'optional' => TRUE,
+              'source' => array('data' => 'attach'),
+              'description' => 'Attach the file(s) to the node. If FALSE, this clears ALL files attached, and attaches the files',
+              'type' => 'int',
+              'default value' => TRUE,
+            ),
+            array(
+              'name' => 'field_values',
+              'optional' => TRUE,
+              'source' => array('data' => 'field_values'),
+              'description' => 'The extra field values',
+              'type' => 'array',
+              'default value' => array(),
+            ),
+          ),
+        ),
+      ),
+      'relationships' => array(
+        'files' => array(
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/node_resource'),
+          'help'   => t('This method returns files associated with a node.'),
+          'access callback' => '_node_resource_access',
+          'access arguments' => array('view'),
+          'access arguments append' => TRUE,
+          'callback' => '_node_resource_load_node_files',
+          'args'     => array(
+            array(
+              'name' => 'nid',
+              'optional' => FALSE,
+              'source' => array('path' => 0),
+              'type' => 'int',
+              'description' => 'The nid of the node whose files we are getting',
+            ),
+            array(
+              'name' => 'file_contents',
+              'type' => 'int',
+              'description'  => t('To return file contents or not.'),
+              'source' => array('path' => 2),
+              'optional' => TRUE,
+              'default value' => TRUE,
+            ),
+            array(
+              'name'         => 'image_styles',
+              'type'         => 'int',
+              'description'  => t('To return image styles or not.'),
+              'source'       => array('path' => 3),
+              'optional'     => TRUE,
+              'default value' => FALSE,
+            ),
+          ),
+        ),
+      ),
+      'actions' => array(
+        'connect' => array(
+          'access callback' => 'services_access_menu',
+          'help' => t('Returns the details of currently logged in user.'),
+          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/system_resource'),
+          'callback' => '_system_resource_connect',
+        ),
+      ),
+    );
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/xmlrpc_server/xmlrpc_server.info drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/xmlrpc_server/xmlrpc_server.info
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/xmlrpc_server/xmlrpc_server.info	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/xmlrpc_server/xmlrpc_server.info	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,15 @@
+name = XMLRPC Server
+description = Provides a XMLRPC server.
+package = Services - servers
+
+files[] = xmlrpc_server.module
+
+dependencies[] = services
+
+core = 7.x
+; Information added by Drupal.org packaging script on 2014-01-31
+version = "7.x-3.7"
+core = "7.x"
+project = "services"
+datestamp = "1391207946"
+
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/xmlrpc_server/xmlrpc_server.module drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/xmlrpc_server/xmlrpc_server.module
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/xmlrpc_server/xmlrpc_server.module	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/servers/xmlrpc_server/xmlrpc_server.module	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,83 @@
+<?php
+/**
+ * @file
+ *  Enable XML-RPC for services module.
+ *
+ * Resource definitions get converted to RPC-style procedure names, but
+ * otherwise this is really just a wrapper around the core xmlrpc server.
+ * These procedures are renamed as <resource>.<method>. So the node
+ * resource's retrieve method has an XMLRPC procedure name of node.retrieve,
+ * the user resource's login action has an XMLRPC procedure name of
+ * user.login, etc.
+ */
+
+/**
+ * Implementation of hook_server_info().
+ */
+function xmlrpc_server_server_info() {
+  return array(
+    'name' => 'XMLRPC',
+  );
+}
+
+/**
+ * Implementation of hook_server().
+ */
+function xmlrpc_server_server() {
+  require_once './includes/xmlrpc.inc';
+  require_once './includes/xmlrpcs.inc';
+
+  return xmlrpc_server(array_merge(xmlrpc_server_xmlrpc(), module_invoke_all('xmlrpc')));
+}
+
+/**
+ * Return an array of all defined services methods and callbacks.
+ *
+ * @see xmlrpc_server()
+ */
+function xmlrpc_server_xmlrpc() {
+  $callbacks = array();
+  module_load_include('inc', 'services', 'includes/services.runtime');
+  $resources = services_get_resources(services_get_server_info('endpoint', ''));
+  if (!empty($resources)) {
+    // Translate all resources
+    foreach ($resources as $name => $def) {
+      foreach (services_resources_as_procedures($def, $name) as $method) {
+        $callbacks[$method['method']] = 'xmlrpc_server_call_wrapper';
+      }
+    }
+  }
+
+  return $callbacks;
+}
+
+/**
+ * Pass XMLRPC server requests to the appropriate services method.
+ *
+ * This function can take varying parameters as are appropriate to
+ * the service in question.
+ */
+function xmlrpc_server_call_wrapper() {
+  $xmlrpc_server = xmlrpc_server_get();
+  $method_name = $xmlrpc_server->message->methodname;
+  $args = func_get_args();
+  $endpoint = services_get_server_info('endpoint', '');
+  $controller = services_controller_get($method_name, $endpoint);
+  try {
+    // Add in default arguments if arguments still dont exist.
+    if (isset($controller['args'])  && is_array($controller['args'])) {
+      foreach ($controller['args'] as $index => $arg) {
+        if ($arg['optional'] && isset($arg['default value']) && !isset($args[$index])) {
+          $args[$index] = $arg['default value'];
+        }
+        elseif ($arg['optional'] == FALSE && !isset($args[$index])) {
+          return services_error(t('Missing required argument @arg', array('@arg' => $arg['name'])), 401);
+        }
+      }
+    }
+    return services_controller_execute($controller, $args);
+  }
+  catch (Exception $e) {
+    return xmlrpc_error($e->getCode(), $e->getMessage());
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/services.admin.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/services.admin.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/services.admin.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/services.admin.inc	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,126 @@
+<?php
+function theme_services_resource_table($variables) {
+  $table = $variables['table'];
+
+  drupal_add_css(drupal_get_path('module', 'services') . '/css/services.admin.css');
+  drupal_add_js(drupal_get_path('module', 'services') . '/js/services.admin.js');
+  drupal_add_js('misc/tableselect.js');
+
+  // Create header for resource selection table.
+  $header = array(
+    array('class' => array('select-all')),
+    array('data' => t('Resource'), 'class' => array('resource_method')),
+    array('data' => t('Settings'), 'class' => array('resource_settings')),
+    array('data' => t('Alias'), 'class' => array('resource_alias')),
+  );
+
+  // Define the images used to expand/collapse the method groups.
+  $js = array(
+    'images' => array(
+      'collapsed' => theme('image', array('path' => 'misc/menu-collapsed.png', 'alt' => t('Expand'), 'title' => t('Expand'))) . ' <a href="#" class="resource-collapse">(' . t('Expand') . ')</a>',
+      'expanded' => theme('image', array('path' => 'misc/menu-expanded.png', 'alt' => t('Collapse'), 'title' => t('Collapse'))) . ' <a href="#" class="resource-collapse">(' . t('Collapse') . ')</a>',
+    ),
+  );
+
+  // Cycle through each method group and create a row.
+  $rows = array();
+  foreach (element_children($table) as $key) {
+    $element = &$table[$key];
+    $row = array();
+
+    // Make the class name safe for output on the page by replacing all
+    // non-word/decimal characters with a dash (-).
+    $method_class = strtolower(trim(preg_replace("/[^\w\d]/", "-", $key)));
+
+    // Select the right "expand"/"collapse" image, depending on whether the
+    // category is expanded (at least one method selected) or not.
+    $collapsed = !empty($element['#collapsed']);
+
+    // Place-holder for checkboxes to select group of methods.
+    $row[] = array('id' => $method_class, 'class' => array('resource-select-all'));
+
+    // Expand/collapse image and group title.
+    $row[] = array(
+      'data' => '<div class="resource-image" id="resource-method-group-' . $method_class . '" data-resource="' . $method_class . '"></div>' .
+        '<label for="' . $method_class . '-select-all" class="resource-group-label">' . $key . '</label>',
+      'class' => array('resource-group-label'),
+    );
+
+    $row[] = array(
+      'data' => '&nbsp;',
+      'class' => array('resource-group-description'),
+    );
+    $row[] = array(
+      'data' => drupal_render($element['alias']),
+      'class' => array('resource-group-alias'),
+    );
+    $rows[] = array('data' => $row, 'class' => array('resource-group'));
+
+    // Add individual methods to group.
+    $current_js = array(
+      'methodClass' => $method_class . '-method',
+      'collapsed' => $collapsed,
+      'clickActive' => FALSE,
+    );
+
+    // Cycle through each method within the current group.
+    foreach (element_children($element) as $class) {
+      if($class != 'alias') {
+        $class_element = $element[$class];
+
+        // Add group (class) header row.
+        $rows[] = array('data' => array(NULL, array(
+          'data' => '<label>' . $class_element['#title'] . '</label>',
+          'class' => array('resource-operation-class'),
+        ), NULL, NULL), 'class' => array($method_class . '-method', 'resource-operation-class'));
+
+        foreach (element_children($class_element) as $op_name) {
+          $row = array();
+          $method = $class_element[$op_name];
+
+          // Store method title and description so that checkbox won't render them.
+          $title = $method['#title'];
+          $description = $method['#description'];
+
+          $method['#title_display'] = 'invisible';
+          $method['enabled']['#title_display'] = 'invisible';
+          unset($method['#description']);
+
+          // Test name is used to determine what methods to run.
+          $method['#name'] = $class;
+
+          $row[] = array(
+            'data' => drupal_render($method['enabled']),
+            'class' => array('resource-method-select'),
+          );
+          $row[] = array(
+            'data' => '<label for="' . $method['#id'] . '">' . $title . '</label>' . '<div class="description">' . $description . '</div>',
+            'class' => array('resource-method-description'),
+          );
+          $row[] = array(
+            'data' => drupal_render($method['settings']),
+            'class' => array('resource-method-settings'),
+          );
+          $row[] = array(
+            'data' => '<div class="alias">&nbsp;</div>',
+            'class' => array('resource-method-alias'),
+          );
+          $rows[] = array('data' => $row, 'class' => array($method_class . '-method', 'resource-method'));
+        }
+      }
+
+    }
+    $js['resources'][$method_class] = $current_js;
+    unset($table[$key]);
+  }
+
+  // Add js array of settings.
+  drupal_add_js(array('services' => $js), 'setting');
+
+  if (empty($rows)) {
+    return '<strong>' . t('No resourcess to display.') . '</strong>';
+  }
+  else {
+    return theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => 'resource-form-table')));
+  }
+}
\ Brak znaku nowej linii na końcu pliku
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/services.info drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/services.info
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/services.info	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/services.info	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,36 @@
+name = Services
+description = Provide an API for creating web services.
+package = Services
+core = 7.x
+php = 5.x
+configure = admin/structure/services
+
+files[] = includes/services.runtime.inc
+files[] = tests/functional/NoAuthEndpointTestRunner.test
+files[] = tests/functional/ServicesResourceNodeTests.test
+files[] = tests/functional/ServicesResourceUserTests.test
+files[] = tests/functional/ServicesResourceSystemTests.test
+files[] = tests/functional/ServicesResourceCommentTests.test
+files[] = tests/functional/ServicesResourceTaxonomyTests.test
+files[] = tests/functional/ServicesResourceFileTests.test
+files[] = tests/functional/ServicesResourceDisabledTests.test
+files[] = tests/functional/ServicesEndpointTests.test
+files[] = tests/functional/ServicesParserTests.test
+files[] = tests/functional/ServicesAliasTests.test
+files[] = tests/functional/ServicesXMLRPCTests.test
+files[] = tests/functional/ServicesVersionTests.test
+files[] = tests/functional/ServicesArgumentsTests.test
+files[] = tests/functional/ServicesSecurityTests.test
+files[] = tests/unit/ServicesSpycLibraryTests.test
+files[] = tests/ui/ServicesUITests.test
+files[] = tests/services.test
+
+dependencies[] = ctools
+
+
+; Information added by Drupal.org packaging script on 2014-01-31
+version = "7.x-3.7"
+core = "7.x"
+project = "services"
+datestamp = "1391207946"
+
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/services.install drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/services.install
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/services.install	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/services.install	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,237 @@
+<?php
+/**
+ * @file
+ * Install, uninstall and update the Services module.
+ */
+
+/**
+ * Implements hook_schema().
+ */
+function services_schema() {
+  $schema = array();
+
+  $schema['services_endpoint'] = array(
+    'description' => 'Stores endpoint information for services',
+    'fields' => array(
+      'eid' => array(
+        'type'        => 'serial',
+        'description' => 'Primary ID field for the table. Not used for anything except internal lookups.',
+        'unsigned'    => TRUE,
+        'not null'    => TRUE,
+        'no export'   => TRUE,
+      ),
+      'name' => array(
+        'description' => 'The name of the endpoint.',
+        'type'        => 'varchar',
+        'length'      => 255,
+        'not null'    => TRUE,
+      ),
+      'server' => array(
+        'description' => 'The name of the server used in this endpoint.',
+        'type'        => 'varchar',
+        'length'      => 32,
+        'not null'    => TRUE,
+      ),
+      'path' => array(
+        'description' => 'The path to the endpoint for this server.',
+        'type'        => 'varchar',
+        'length'      => 255,
+        'not null'    => TRUE,
+      ),
+      'authentication' => array(
+        'description'    => 'The authentication settings for the endpoint.',
+        'type'           => 'text',
+        'size'           => 'big',
+        'not null'       => TRUE,
+        'serialize'      => TRUE,
+        'object default' => array(),
+      ),
+      'server_settings' => array(
+         'description'    => 'The server settings for the endpoint.',
+         'type' => 'blob',
+         'size' => 'big',
+         'not null' => TRUE,
+         'serialize' => TRUE
+      ),
+      'resources' => array(
+        'description'    => 'Information about the resources exposed in this endpoint.',
+        'type'           => 'text',
+        'size'           => 'big',
+        'not null'       => TRUE,
+        'serialize'      => TRUE,
+        'object default' => array(),
+      ),
+      'debug' => array(
+       'description' => 'Set the endpoint in debug mode.',
+         'type'        => 'int',
+         'not null'    => TRUE,
+         'default'     => 0
+      ),
+    ),
+    'primary key' => array('eid'),
+    'unique keys' => array(
+      'name' => array('name'),
+    ),
+    'export' => array(
+      'key' => 'name',
+      'identifier' => 'endpoint',
+      'primary key' => 'name',
+      'api' => array(
+        'owner' => 'services',
+        'api' => 'services',
+        'minimum_version' => 3,
+        'current_version' => 3,
+      ),
+    ),
+  );
+
+  return $schema;
+}
+
+/**
+ * Implements hook_requirements().
+ */
+function services_requirements($phase) {
+  $requirements = array();
+  $t = get_t();
+  // Warn users of the possible threat.
+  if ($phase == 'runtime') {
+    //Pull endpoints that do not have services authentication enabled
+    $result = db_query('SELECT * FROM {services_endpoint} AS se WHERE se.authentication NOT LIKE :services', array(':services' => '%services%'));
+    $items = array();
+    // Build our items array
+    foreach ($result as $endpoint) {
+      $items[] = l($endpoint->name, 'admin/structure/services/list/'. $endpoint->name .'/edit');
+    }
+    // theme the endpoints list
+    $endpoints = '';
+    if (!empty($items)) {
+      $endpoints = theme('item_list', array('items' => $items));
+    }
+    // Only display the list if we have at least one endpoint without services authentication.
+    if (count($items)) {
+      $requirements['services'] = array(
+        'description' => $t('Services authentication mechanism has not been enabled for the following endpoints. Requests to these endpoints will always be anonymous.'),
+        'severity' => REQUIREMENT_WARNING,
+        'value' => $endpoints,
+        'title' => 'Services Authentication Mechanism',
+      );
+    } else {
+      $requirements['services'] = array(
+        'severity' => REQUIREMENT_OK,
+        'value' => 'Enabled for all Endpoints',
+        'title' => 'Services Authentication Mechanism',
+      );
+    }
+  }
+
+  return $requirements;
+}
+
+/**
+ * Implements hook_uninstall().
+ */
+function services_uninstall() {
+  $ret = array();
+
+  // Drop legacy tables
+  $legacy_tables = array('services_keys', 'services_timestamp_nonce');
+  foreach ($legacy_tables as $table) {
+    if (db_table_exists($table)) {
+      db_drop_table($ret, $table);
+    }
+  }
+
+  variable_del('services_use_key');
+  variable_del('services_use_sessid');
+  variable_del('services_debug');
+  variable_del('services_auth_module');
+}
+
+/**
+ * Update 7301 adds debugging to each endopint to facilitate easier development
+ */
+function services_update_7301() {
+  $table = 'services_endpoint';
+  foreach (array('debug' => 0, 'status' => 1) as $field => $value) {
+    if (!db_field_exists($table, $field)) {
+      db_add_field($table, $field, array('type' => 'int', 'not null' => TRUE, 'default' => $value));
+    }
+  }
+}
+
+/**
+ * Update 7302 restores the usage of Chaos tools to check for enable/disable-status
+ */
+function services_update_7302() {
+  $table = 'services_endpoint';
+  if (db_field_exists($table, 'status')) {
+    db_drop_field($table, 'status');
+  }
+}
+
+/**
+ * Update 7303 adds the possibility to configure server settings on a per-endpoint basis.
+ * and sets upgrades all new servers to have at least services session enabled.
+ */
+function services_update_7303() {
+  // Add the new server settings field.
+  if (!db_field_exists('services_endpoint', 'server_settings')) {
+    db_add_field('services_endpoint', 'server_settings', array(
+      'description'    => 'The server settings for the endpoint.',
+      'type' => 'blob',
+      'size' => 'big',
+      'not null' => TRUE,
+      'serialize' => TRUE,
+      'initial' => '',
+    ));
+  }
+  // Fetch all endpoints that currently exist
+  $result = db_select('services_endpoint', 'se')
+    ->fields('se')
+    ->execute()
+    ->fetchAll();
+  // Loop through every endpoint and update the authentication section.
+  // Note, this will not remove previous authentication settings, it will
+  // only add to them.
+  foreach($result as $services_endpoint_object) {
+    $new_authentication = array(
+      'services' => 'services',
+    );
+    $unserial_endpoint_settings = unserialize($services_endpoint_object->authentication);
+    db_update('services_endpoint')
+      ->fields(array('authentication' => serialize(array_merge($unserial_endpoint_settings, $new_authentication))))
+      ->condition('eid',  $services_endpoint_object->eid)
+      ->execute();
+  }
+}
+/**
+ * Update 7304 removes the title as it is no longer used
+ */
+function services_update_7399() {
+  $table = 'services_endpoint';
+  if (db_field_exists($table, 'title')) {
+    db_drop_field($table, 'title');
+  }
+}
+
+/**
+ * Update 7400 reduces nesting in the way server settings are stored
+ */
+function services_update_7400() {
+  module_load_include('module','services');
+  $server_names = array_keys(services_get_servers());
+  foreach (services_endpoint_load_all() as $endpoint) {
+    $settings = $endpoint->server_settings;
+    if (!empty($settings)) {
+      if (in_array(key($settings), $server_names)) {
+        $settings = current($settings);
+      }
+    }
+    else {
+      $settings = array();
+    }
+    $endpoint->server_settings = $settings;
+    services_endpoint_save($endpoint);
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/services.make drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/services.make
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/services.make	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/services.make	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,8 @@
+api = 2
+core = 7.x
+
+; Libraries
+libraries[spyc][directory_name] = spyc
+libraries[spyc][download][type] = file
+libraries[spyc][download][url] = https://raw2.github.com/mustangostang/spyc/master/Spyc.php
+libraries[spyc][type] = library
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/services.module drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/services.module
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/services.module	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/services.module	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,849 @@
+<?php
+
+/**
+ * @file
+ *  Provides a generic but powerful API for web services.
+ */
+
+/**
+ * Minimum CTools version needed.
+ */
+define('SERVICES_REQUIRED_CTOOLS_API', '1.7');
+
+/**
+ * Implements hook_help().
+ */
+function services_help($path, $arg) {
+  $output = NULL;
+
+  switch ($path) {
+    case 'admin/help#services':
+      $output = '<p>' . t('Visit the <a href="@handbook_url">Services Handbook</a> for help and information.', array('@handbook_url' => 'http://drupal.org/node/109782')) . '</p>';
+      break;
+    case 'admin/structure/services':
+      $output = '<p>' . t('Services are collections of methods available to remote applications. They are defined in modules, and may be accessed in a number of ways through server modules. Visit the <a href="@handbook_url">Services Handbook</a> for help and information.', array('@handbook_url' => 'http://drupal.org/node/109782')) . '</p>';
+      $output .= '<p>' . t('All enabled services and methods are shown. Click on any method to view information or test.') . '</p>';
+      break;
+  }
+
+  return $output;
+}
+
+/**
+ * Implements hook_perm().
+ */
+function services_permission() {
+  return array(
+    'administer services' => array(
+      'title' => t('Administer services'),
+      'description' => t('Configure and setup services module.'),
+    ),
+    // File resource permissions
+    'get any binary files' => array(
+      'title' => t('Get any binary files'),
+      'description' => t(''),
+    ),
+    'get own binary files' => array(
+      'title' => t('Get own binary files'),
+      'description' => t(''),
+    ),
+    'save file information' => array(
+      'title' => t('Save file information'),
+      'description' => t(''),
+    ),
+    // System resource permissions
+    'get a system variable' => array(
+      'title' => t('Get a system variable'),
+      'description' => t(''),
+    ),
+    'set a system variable' => array(
+      'title' => t('Set a system variable'),
+      'description' => t(''),
+    ),
+    // Query-limiting permissions
+    'perform unlimited index queries' => array(
+      'title' => t('Perform unlimited index queries'),
+      'description' => t('This permission will allow user to perform index queries with unlimited number of results.'),
+    ),
+  );
+}
+
+/**
+ * Implements hook_hook_info().
+ */
+function services_hook_info() {
+  $hooks['services_resources'] = array(
+    'group' => 'services',
+  );
+  return $hooks;
+}
+
+/**
+ * Implements hook_menu().
+ *
+ * Services UI is defined in the export-ui plugin.
+ */
+function services_menu() {
+  $items = array();
+  if (module_exists('ctools')) {
+    $endpoints = services_endpoint_load_all();
+    foreach ($endpoints as $endpoint) {
+      if (empty($endpoint->disabled)) {
+        $items[$endpoint->path] = array(
+          'title'             => 'Services endpoint',
+          'access callback'   => 'services_access_menu',
+          'page callback'     => 'services_endpoint_callback',
+          'page arguments'    => array($endpoint->name),
+          'type'              => MENU_CALLBACK,
+        );
+      }
+    }
+  }
+
+  $items['services/session/token'] = array(
+    'page callback' => '_services_session_token',
+    'access callback' => TRUE,
+    'type' => MENU_CALLBACK,
+  );
+
+  return $items;
+}
+
+/**
+ * Implements of hook_ctools_plugin_api().
+ */
+function services_ctools_plugin_api($module, $api) {
+  if ($module == 'services' && $api == 'plugins') {
+    return array('version' => 3);
+  }
+}
+
+/**
+ * Implement of hook_ctools_plugin_directory().
+ */
+function services_ctools_plugin_directory($module, $type) {
+  // Safety: go away if CTools is not at an appropriate version.
+  if (!module_invoke('ctools', 'api_version', SERVICES_REQUIRED_CTOOLS_API)) {
+    return;
+  }
+  if ($type =='export_ui') {
+    return 'plugins/export_ui';
+  }
+}
+
+/**
+ * Access callback that always returns TRUE.
+ *
+ * This callback is necessary for services like login and logout that should
+ * always be wide open and accessible.
+ *
+ * *** USE THIS WITH GREAT CAUTION ***
+ *
+ * If you think you need it you are almost certainly wrong.
+ */
+function services_access_menu() {
+  return TRUE;
+}
+
+/**
+ * Implements hook_theme().
+ */
+function services_theme() {
+  return array(
+    'services_endpoint_index' => array(
+      'template'  => 'services_endpoint_index',
+      'arguments' => array('endpoints' => NULL),
+    ),
+    'services_resource_table' => array(
+     'render element' => 'table',
+      'file' => 'services.admin.inc',
+    ),
+  );
+}
+
+/**
+ * Returns information about the installed server modules on the system.
+ *
+ * @return array
+ *  An associative array keyed after module name containing information about
+ *  the installed server implementations.
+ */
+function services_get_servers($reset = FALSE) {
+  $servers = &drupal_static(__FUNCTION__);
+
+  if (!$servers || $reset) {
+    $servers = array();
+    foreach (module_implements('server_info') as $module) {
+      if ($module != 'sqlsrv') {
+        $servers[$module] = call_user_func($module . '_server_info');
+      }
+    }
+  }
+
+  return $servers;
+}
+
+/**
+ * Menu system page callback for server endpoints.
+ *
+ * @param string $endpoint
+ *  The endpoint name.
+ * @return void
+ */
+function services_endpoint_callback($endpoint_name) {
+  module_load_include('inc', 'services', 'includes/services.runtime');
+
+  // Explicitly set the title to avoid expensive menu calls in token
+  // and elsewhere.
+  if (!($title = drupal_set_title())) {
+    drupal_set_title('Services endpoint');
+  }
+
+  $endpoint = services_endpoint_load($endpoint_name);
+  $server = $endpoint->server;
+
+  if (function_exists($server . '_server')) {
+    // call the server
+    services_set_server_info_from_array(array(
+      'module'        => $server,
+      'endpoint'      => $endpoint_name,
+      'endpoint_path' => $endpoint->path,
+      'debug'         => $endpoint->debug,
+      'settings'      => $endpoint->server_settings,
+    ));
+    if ($endpoint->debug) {
+      watchdog('services', 'Calling server: %server', array('%server' => $server . '_server'), WATCHDOG_DEBUG);
+      watchdog('services', 'Server info main object: <pre>@info</pre>', array('@info' => print_r(services_server_info_object(), TRUE)), WATCHDOG_DEBUG);
+    }
+    print call_user_func($server . '_server');
+
+    // Do not let this output
+    drupal_page_footer();
+    exit();
+  }
+  // return 404 if the server doesn't exist
+  drupal_not_found();
+}
+
+
+
+/**
+ * Create a new endpoint with defaults appropriately set from schema.
+ *
+ * @return stdClass
+ *  An endpoint initialized with the default values.
+ */
+function services_endpoint_new() {
+  ctools_include('export');
+  return ctools_export_new_object('services_endpoint');
+}
+
+/**
+ * Load a single endpoint.
+ *
+ * @param string $name
+ *  The name of the endpoint.
+ * @return stdClass
+ *  The endpoint configuration.
+ */
+function services_endpoint_load($name) {
+  ctools_include('export');
+  $result = ctools_export_load_object('services_endpoint', 'names', array($name));
+  if (isset($result[$name])) {
+    return $result[$name];
+  }
+  return FALSE;
+}
+
+/**
+ * Load all endpoints.
+ *
+ * @return array
+ *  Array of endpoint objects keyed by endpoint names.
+ */
+function services_endpoint_load_all() {
+  ctools_include('export');
+  return ctools_export_load_object('services_endpoint');
+}
+
+/**
+ * Saves an endpoint in the database.
+ *
+ * @return void
+ */
+function services_endpoint_save($endpoint) {
+  if (is_array($endpoint) && isset($endpoint['build_info'])) {
+    $endpoint = $endpoint['build_info']['args'][0];
+  }
+
+  // Set a default of an array if the value is not present.
+  foreach (array('server_settings', 'resources', 'authentication') as $endpoint_field) {
+    if (empty($endpoint->{$endpoint_field})) {
+      $endpoint->{$endpoint_field} = array();
+    }
+  }
+
+  ctools_export_crud_save('services_endpoint', $endpoint);
+  ctools_export_load_object_reset('services_endpoint');
+  menu_rebuild();
+  cache_clear_all('services:' . $endpoint->name . ':', 'cache', TRUE);
+}
+
+/**
+ * Remove an endpoint.
+ *
+ * @return void
+ */
+function services_endpoint_delete($endpoint) {
+  ctools_export_crud_delete('services_endpoint', $endpoint);
+  ctools_export_load_object_reset('services_endpoint');
+  menu_rebuild();
+  cache_clear_all('services:' . $endpoint->name . ':', 'cache', TRUE);
+}
+
+/**
+ * Export an endpoint.
+ *
+ * @return string
+ */
+function services_endpoint_export($endpoint, $indent = '') {
+  ctools_include('export');
+  return ctools_export_object('services_endpoint', $endpoint, $indent);
+}
+
+
+/**
+ * Gets all resource definitions.
+ *
+ * @param string $endpoint_name
+ *   Optional. The endpoint endpoint that's being used.
+ * @return array
+ *  An array containing all resources.
+ */
+function services_get_resources($endpoint_name = '') {
+  $cache_key = 'services:' . $endpoint_name . ':resources';
+
+  $resources = array();
+  if (($cache = cache_get($cache_key)) && isset($cache->data)) {
+    $resources = $cache->data;
+  }
+  else {
+    module_load_include('inc', 'services', 'includes/services.resource_build');
+    $resources = _services_build_resources($endpoint_name);
+    cache_set($cache_key, $resources);
+  }
+
+  return $resources;
+}
+
+/**
+ * Load the resources of the endpoint.
+ *
+ * @return array
+ */
+function services_get_resources_apply_settings($endpoint_name) {
+  $resources = services_get_resources($endpoint_name);
+  module_load_include('inc', 'services', 'includes/services.resource_build');
+  $endpoint = services_endpoint_load($endpoint_name);
+  _services_apply_endpoint($resources, $endpoint, TRUE);
+
+  return $resources;
+}
+
+/**
+ * Returns information about resource API version information.
+ * The resource API is the way modules expose resources to services,
+ * not the API that is exposed to the consumers of your services.
+ *
+ * @return array
+ *  API version information. 'default_version' is the version that's assumed
+ *  if the module doesn't declare an API version. 'versions' is an array
+ *  containing the known API versions. 'current_version' is the current
+ *  version number.
+ */
+function services_resource_api_version_info() {
+  $info = array(
+    'default_version' => 3001,
+    'versions' => array(3002),
+  );
+  $info['current_version'] = max($info['versions']);
+  return $info;
+}
+
+/**
+ * Implements hook_services_resources().
+ */
+function services_services_resources() {
+  module_load_include('inc', 'services', 'includes/services.resource_build');
+  // Return resources representing legacy services
+  return _services_core_resources();
+}
+
+/**
+ * Implementation of hook_services_authentication_info().
+ */
+function services_services_authentication_info() {
+  return array(
+    'title'             => t('Session authentication'),
+    'description'       => t("Uses Drupal's built in sessions to authenticate."),
+    'authenticate_call' => '_services_sessions_authenticate_call',
+  );
+}
+
+/**
+ * Authenticates a call using Drupal's built in sessions
+ *
+ * @return string
+ *   Error message in case error occured.
+ */
+function _services_sessions_authenticate_call($module, $controller) {
+  global $user;
+  $original_user = services_get_server_info('original_user');
+  if ($original_user->uid == 0) {
+    return;
+  }
+
+  if ($controller['callback'] != '_user_resource_get_token') {
+    $non_safe_method_called = !in_array($_SERVER['REQUEST_METHOD'], array('GET', 'HEAD', 'OPTIONS', 'TRACE'));
+    $csrf_token_invalid = !isset($_SERVER['HTTP_X_CSRF_TOKEN']) || !drupal_valid_token($_SERVER['HTTP_X_CSRF_TOKEN'], 'services');
+    if ($non_safe_method_called && $csrf_token_invalid) {
+      return t('CSRF validation failed');
+    }
+  }
+
+  if ($user->uid != $original_user->uid) {
+    $user = $original_user;
+  }
+}
+
+/**
+ * Get operation class information.
+ *
+ * @return array An array with operation class information keyed by operation machine name.
+ */
+function services_operation_class_info() {
+  return array(
+    'operations' => array(
+      'title' => t('CRUD operations'),
+      'name' => t('CRUD operation'),
+      'class_singular' => 'operation',
+    ),
+    'actions' => array(
+      'title' => t('Actions'),
+      'name' => t('action'),
+      'class_singular' => 'action',
+    ),
+    'relationships' => array(
+      'title' => t('Relationships'),
+      'name' => t('relationship'),
+      'class_singular' => 'relationship',
+    ),
+    'targeted_actions' => array(
+      'title' => t('Targeted actions'),
+      'name' => t('targeted action'),
+      'class_singular' => 'targeted_action',
+    ),
+  );
+}
+
+/**
+ * Returns all the controller names for a endpoint.
+ *
+ * @param string $endpoint
+ *  The endpoint that should be used.
+ * @return array
+ *  An array containing all controller names.
+ */
+function services_controllers_list($endpoint) {
+  $controllers = array();
+  $class_info = services_operation_class_info();
+
+  $resources = services_get_resources($endpoint);
+  foreach ($resources as $resource_name => $resource) {
+    foreach ($class_info as $class_name => $class) {
+      if (empty($resource[$class_name])) {
+        continue;
+      }
+      foreach ($resource[$class_name] as $op_name => $op) {
+        $method = "{$resource_name}.{$op_name}";
+        if (empty($controllers[$method])) {
+          $controllers[$method] = $method;
+        }
+        else {
+          watchdog('services', 'Naming collision when listing controllers as methods. The %class %operation is not included in the listing.', array(
+            '%class' => $class['name'],
+            '%operation' => $op_name,
+          ), WATCHDOG_WARNING);
+        }
+      }
+    }
+  }
+  return $controllers;
+}
+
+/**
+ * Returns the requested controller.
+ *
+ * @param string $name
+ *  The name of the controller in the format: {resource}.{name} or
+ *  {resource}.{operation}. Examples: "node.retrieve", "system.getVariable".
+ * @param string $endpoint
+ *  The endpoint that should be used.
+ */
+function services_controller_get($name, $endpoint) {
+  list($resource_name, $method) = explode('.', $name);
+
+  $resources = services_get_resources($endpoint);
+  if (isset($resources[$resource_name])) {
+    $res = $resources[$resource_name];
+    if (isset($res[$method])) {
+      return $res[$method];
+    }
+    else {
+      $class_info = services_operation_class_info();
+      // Handle extended operations
+      foreach ($class_info as $class => $info) {
+        if (isset($res[$class]) && isset($res[$class][$method])) {
+          return $res[$class][$method];
+        }
+      }
+    }
+  }
+}
+
+/**
+ * Returns an array of available updates versions for a resource.
+ *
+ * @return
+ *   If services has updates, an array of available updates sorted by version.
+ *   Otherwise, array().
+ */
+function services_get_updates() {
+  $updates = &drupal_static(__FUNCTION__, array());
+  if (!isset($updates) || empty($updates)) {
+    $updates = array();
+    module_load_include('inc', 'services', 'includes/services.resource_build');
+    // Load the resources for services.
+    _services_core_resources();
+    // Prepare regular expression to match all possible defined
+    // _resource_resource_method_update_N_N().
+    $regexp = '/_(?P<resource>.+)_resource_(?P<method>.+)_update_(?P<major>\d+)_(?P<minor>\d+)$/';
+    $functions = get_defined_functions();
+    // Narrow this down to functions ending with an integer, since all
+    // _resource_resource_method_update_N_N() functions end this way, and there are other
+    // possible functions which match '_update_'. We use preg_grep() here
+    // instead of foreaching through all defined functions, since the loop
+    // through all PHP functions can take significant page execution time.
+    // Luckily this only happens when the cache is cleared for an endpoint
+    // and resources are re-generated.
+    foreach (preg_grep('/_\d+$/', $functions['user']) as $function) {
+      // If this function is a service update function, add it to the list of
+      // services updates.
+      if (preg_match($regexp, $function, $matches)) {
+        $resource = $matches['resource'];
+        $method   = $matches['method'];
+        $major    = $matches['major'];
+        $minor    = $matches['minor'];
+
+        $updates[$resource][$method][] = array(
+          'version'  => $major .'_'. $minor,
+          'major'    => $major,
+          'minor'    => $minor,
+          'callback' => $function,
+          'resource' => $resource,
+          'method'   => $method,
+        );
+      }
+    }
+  }
+  return $updates;
+}
+
+/**
+ * Determine if any potential versions exist as valid headers.
+ * returns false if no version is present in the header for the specific call.
+ */
+function _services_version_header_options() {
+  $available_headers = array();
+  $updates = services_get_updates();
+  if(is_array($updates)) {
+    foreach ($updates as $resource => $update) {
+      foreach ($update as $method_name => $method) {
+        $available_headers[] = 'services_'. $resource .'_'.$method_name .'_version';
+      }
+    }
+  }
+  foreach($available_headers as $key => $version_header_option) {
+    if(array_key_exists($version_header_option, $headers = getallheaders())) {
+      $version = $headers[$version_header_option];
+    }
+  }
+  return isset($version) ? $version : FALSE;
+}
+
+/**
+ * Returns currently set api version for an endpoint resource method.
+ *
+ * @param $endpoint
+ *   A fully loadded endpoint.
+ * @param $resource
+ *   A resource name.
+ * @param $method
+ *   A method name.
+ * @return
+ *   an array with the major and minor api versions
+ */
+function services_get_resource_api_version($endpoint, $resource, $method) {
+  if (isset($endpoint->resources[$resource]) ) {
+    $class_info = services_operation_class_info();
+    foreach ($class_info as $class_name => $class) {
+      if (!empty($resource[$class_name])) {
+        if (isset($endpoint->resources[$resource][$class_name][$method]['settings']['services']['resource_api_version'])) {
+          if($version = _services_version_header_options()) {
+            $split = explode('.', $version);
+          } else {
+            $split = explode('.', $endpoint->resources[$resource][$class_name][$method]['settings']['services']['resource_api_version']);
+          }
+          return array(
+            'major' => $split[0],
+            'minor' => $split[1],
+          );
+        }
+      }
+    }
+  }
+}
+
+/**
+ * Apply versions to the controller.
+ *
+ * @param $controller
+ *   A controller array.
+ * @param $options
+ *   A options array filled with verison information.
+ * @return
+ *   An array with the major and minor api versions
+ */
+function services_request_apply_version(&$controller, $options = array()) {
+  if (isset($options)) {
+    extract($options);
+  }
+  if (isset($version) && $version == '1.0') {
+    //do nothing
+    return;
+  }
+  $updates = services_get_updates();
+  if (isset($method) && isset($updates[$resource][$method])) {
+    foreach ($updates[$resource][$method] as $update) {
+      if (!isset($version)) {
+        $endpoint = services_get_server_info('endpoint', '');
+        $endpoint = services_endpoint_load($endpoint);
+        $default_version = services_get_resource_api_version($endpoint, $resource, $method);
+      }
+      else {
+        $default_version = explode('.', $version);
+        $default_version['major'] = $default_version[0];
+        $default_version['minor'] = $default_version[1];
+      }
+
+      // Apply updates until we hit our default update for the site.
+      if ($update['major'] <= $default_version['major'] && $update['minor'] <= $default_version['minor']) {
+        $update_data = call_user_func($update['callback']);
+        $controller = array_merge($controller, $update_data);
+      }
+    }
+  }
+}
+
+/**
+ * Convert a resource to RPC-style methods.
+ *
+ * @param array $resource
+ *   A resource definition.
+ * @param string $resource_name
+ *   The resource name, ie: node.
+ *
+ * @return array
+ *   An array of RPC method definitions
+ */
+function services_resources_as_procedures($resource, $resource_name) {
+  $methods = array();
+  $class_info = services_operation_class_info();
+  foreach ($class_info as $class_name => $class) {
+    if (empty($resource[$class_name])) {
+      continue;
+    }
+    foreach ($resource[$class_name] as $op_name => $op) {
+      $method_name = "{$resource_name}.{$op_name}";
+      if (empty($methods[$method_name])) {
+        $methods[$method_name] = array(
+          'method' => $method_name,
+        ) + $op;
+      }
+      else {
+        watchdog('services', 'Naming collision when listing controllers as methods. The %class %operation wont be available for RPC-style servers.', array(
+          '%class' => $class['name'],
+          '%operation' => $op_name,
+        ), WATCHDOG_WARNING);
+      }
+    }
+  }
+  return $methods;
+}
+
+/**
+ * Helper function to build index queries.
+ *
+ * @param $query
+ *   Object database query object.
+ * @param $page
+ *   Integer page number we are requesting.
+ * @param $fields
+ *   Array fields to return.
+ * @param $parameter
+ *   Array parameters to add to the index query.
+ * @param $page_size
+ *   Integer number of items to be returned.
+ * @param $resource
+ *   String name of the resource building the index query
+ */
+function services_resource_build_index_query($query, $page, $fields, $parameters, $page_size, $resource) {
+  $default_limit = variable_get("services_{$resource}_index_page_size", 20);
+  if (!user_access('perform unlimited index queries') && $page_size > $default_limit) {
+    $page_size = $default_limit;
+  }
+  $query->range($page * $page_size, $page_size);
+  if ($fields == '*') {
+    $query->fields('t');
+  }
+  else {
+    $query->fields('t', explode(',', $fields));
+  }
+  if (isset($parameters) && is_array($parameters)) {
+    foreach ($parameters as $parameter => $parameter_value) {
+      $query->condition($parameter, services_str_getcsv($parameter_value), 'IN');
+    }
+  }
+}
+
+
+/**
+ * Emulate str_getcsv on systems where it is not available.
+ *
+ * @ingroup php_wrappers
+ */
+function services_str_getcsv($input, $delimiter = ',', $enclosure = '"', $escape = '\\') {
+  $ret = array();
+
+  if (!function_exists('str_getcsv')) {
+    $temp = fopen("php://memory", "rw");
+    fwrite($temp, $input);
+    fseek($temp, 0);
+    $ret = fgetcsv($temp, 0, $delimiter, $enclosure);
+    fclose($temp);
+  }
+  else {
+    $ret = str_getcsv($input, $delimiter, $enclosure, $escape);
+  }
+  return $ret;
+}
+
+
+/**
+ * Helper function to build a list of items satisfying the index query.
+ *
+ * @param $results
+ *   Object database query results object.
+ * @param $type
+ *   String type of index that is being processed.
+ * @param $field
+ *   String field to use for looking up uri.
+ */
+function services_resource_build_index_list($results, $type, $field) {
+  // Put together array of matching items to return.
+  $items = array();
+  foreach ($results as $result) {
+    if ($uri = services_resource_uri(array($type, $result->{$field}))) {
+      $result->uri = $uri;
+      if ($type == 'user') {
+        services_remove_user_data($result);
+      }
+    }
+    $items[] = $result;
+  }
+
+  return $items;
+}
+
+/**
+ *  Helper function to remove data from the user object.
+ *
+ *  @param $account
+ *    Object user object.
+ */
+function services_remove_user_data(&$account) {
+  global $user;
+
+  // Remove the user password from the account object.
+  unset($account->pass);
+
+  // Remove the user mail, if current user don't have "administer users"
+  // permission, and the requested account not match the current user.
+  if (!user_access('administer users') && $account->uid !== $user->uid) {
+    unset($account->mail);
+  }
+
+  // Remove the user init, if current user don't have "administer users"
+  // permission.
+  if (!user_access('administer users')) {
+    unset($account->init);
+  }
+
+  drupal_alter('services_account_object', $account);
+
+  // Add the full URL to the user picture, if one is present.
+  if (variable_get('user_pictures', FALSE) && isset($account->picture->uri)) {
+    $account->picture->url = file_create_url($account->picture->uri);
+  }
+}
+
+/**
+ * Helper function to execute a index query.
+ *
+ * @param $query
+ *   Object dbtng query object.
+ */
+function services_resource_execute_index_query($query) {
+  try {
+    return $query->execute();
+  }
+  catch (PDOException $e) {
+    return services_error(t('Invalid query provided, double check that the fields and parameters you defined are correct and exist. ' . $e->getMessage()), 406);
+  }
+}
+
+/**
+ * If we are running nginx we need to implement getallheaders our self.
+ *
+ * Code is taken from http://php.net/manual/en/function.getallheaders.php
+ */
+if (!function_exists('getallheaders')) {
+  function getallheaders() {
+    foreach ($_SERVER as $name => $value) {
+      if (substr($name, 0, 5) == 'HTTP_') {
+        $headers[str_replace(' ', '-', ucwords(strtolower(str_replace('_', ' ', substr($name, 5)))))] = $value;
+      }
+    }
+
+    return $headers;
+  }
+}
+
+/**
+ * Page callback to generate token.
+ */
+function _services_session_token() {
+  drupal_add_http_header('Content-Type', 'text/plain');
+  print drupal_get_token('services');
+  drupal_exit();
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/NoAuthEndpointTestRunner.test drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/NoAuthEndpointTestRunner.test
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/NoAuthEndpointTestRunner.test	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/NoAuthEndpointTestRunner.test	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,30 @@
+<?php
+
+
+/**
+ * @file
+ * This subclass runs the tests with setUp set for services using no
+ * authentication. Tests are to be held in the parent class.
+ *
+ */
+
+/**
+ * Sets conditions for a no-authentication set of endpoint test runs.
+ */
+class NoAuthEndpointTestRunner extends ServicesEndpointTests {
+
+  // Class variables
+  protected $privilegedUser = NULL;
+
+  /**
+   * Implementation of getInfo().
+   */
+  public static function getInfo() {
+    return array(
+      'name'        => 'Services Endpoint tests, no auth',
+      'description' => 'Test the endpoint functionality when no authentication is turned on',
+      'group'       => 'Services',
+    );
+  }
+
+}
\ Brak znaku nowej linii na końcu pliku
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesAliasTests.test drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesAliasTests.test
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesAliasTests.test	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesAliasTests.test	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,104 @@
+<?php
+
+/**
+ * @file
+ * Test to confirm Aliases functionality.
+ */
+
+/**
+ * Test case class for Alias tests.
+ */
+class ServicesAliasTests extends ServicesWebTestCase {
+  // Endpoint details.
+  protected $endpoint = NULL;
+
+  /**
+   * Implementation of setUp().
+   */
+  public function setUp() {
+    parent::setUp(
+      'ctools',
+      'services',
+      'rest_server'
+    );
+    $edit = $this->populateEndpointFAPI() ;
+    $endpoint = new stdClass;
+    $endpoint->disabled = FALSE;
+    $endpoint->api_version = 3;
+    $endpoint->name = $edit['name'];
+    $endpoint->server = $edit['server'];
+    $endpoint->path = $edit['path'];
+    $endpoint->authentication = array(
+      'services' => 'services',
+    );
+    $endpoint->server_settings = array(
+      'formatters' => array(
+        'json' => TRUE,
+        'bencode' => TRUE,
+        'rss' => TRUE,
+        'plist' => TRUE,
+        'xmlplist' => TRUE,
+        'php' => TRUE,
+        'yaml' => TRUE,
+        'jsonp' => FALSE,
+        'xml' => FALSE,
+      ),
+      'parsers' => array(
+        'application/x-yaml' => TRUE,
+        'application/json' => TRUE,
+        'application/vnd.php.serialized' => TRUE,
+        'application/plist' => TRUE,
+        'application/plist+xml' => TRUE,
+        'application/x-www-form-urlencoded' => TRUE,
+        'multipart/form-data' => TRUE,
+      ),
+    );
+    $endpoint->resources = array(
+      'user' => array(
+        'alias' => 'user-alias',
+        'actions' => array(
+          'login' => array(
+            'enabled' => 1,
+          ),
+        ),
+      ),
+    );
+    $endpoint->debug = 1;
+    $endpoint->export_type = FALSE;
+    services_endpoint_save($endpoint);
+    $endpoint = services_endpoint_load($endpoint->name);
+    $this->assertTrue($endpoint->name == $edit['name'], 'Endpoint successfully created');
+    $this->endpoint = $endpoint;
+  }
+
+  /**
+   * Implementation of getInfo().
+   */
+  public static function getInfo() {
+    return array(
+      'name' => 'Alias',
+      'description' => 'Test the Aliases functionality.',
+      'group' => 'Services',
+    );
+  }
+
+  /**
+   * Testing parser functionality.
+   */
+  public function testAlias() {
+    $account = $this->drupalCreateUser();
+
+    // Logout first.
+    $this->drupalLogout();
+
+    // Try to login using alias.
+    $response = $this->servicesPost($this->endpoint->path . '/user-alias/login', array('username' => $account->name, 'password' => $account->pass_raw));
+
+    $response_data = $response['body'];
+
+    $proper_answer = isset($response_data->sessid)
+                  && isset($response_data->user)
+                  && $response_data->user->name == $account->name;
+    $this->assertTrue($proper_answer, 'User successfully logged in.', 'Alias: User login');
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesArgumentsTests.test drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesArgumentsTests.test
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesArgumentsTests.test	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesArgumentsTests.test	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,153 @@
+<?php
+
+class ServicesArgumentsTestCase extends ServicesWebtestCase {
+  // Endpoint details.
+  protected $endpoint = NULL;
+  // Session ID.
+  protected $sessid = NULL;
+  // Session name.
+  protected $session_name = NULL;
+
+  /**
+   * Implements getInfo().
+   */
+  public static function getInfo() {
+   return array(
+     'name'        => 'Arguments handling',
+     'description' => 'Test of arguments handling.',
+     'group'       => 'Services',
+   );
+  }
+
+  public function setUp() {
+    parent::setUp('ctools', 'services', 'services_test_resource');
+    // Set up endpoint.
+    $this->endpoint =  $this->saveNewEndpoint();
+  }
+
+  /**
+   * Test two path arguments of
+   */
+  function testPathArguments() {
+    $arg1 = $this->randomName();
+    $arg2 = $this->randomName();
+    $arg3 = $this->randomName();
+    $result = $this->servicesGet($this->endpoint->path . '/services_arguments_test/' . $arg1 . '/' . $arg2 . '/' . $arg3);
+    $this->assertEqual($result['body'],
+      format_string('Services arguments test @arg1 @arg2 @arg3', array('@arg1' => $arg1, '@arg2' => $arg2, '@arg3' => $arg3)),
+      'Path arguments work properly.', 'Arguments');
+    $result = $this->servicesGet($this->endpoint->path . '/services_arguments_test/' . $arg1 . '/' . $arg2);
+    $this->assertEqual($result['body'],
+      format_string('Services arguments test @arg1 @arg2 0', array('@arg1' => $arg1, '@arg2' => $arg2)),
+      'Path arguments with default value work properly.', 'Arguments');
+    $result = $this->servicesGet($this->endpoint->path . '/services_arguments_test/' . $arg1);
+    $this->assertEqual($result['status'], 'HTTP/1.1 404 Not found: Could not find the controller.', 'Error triggered when required argument is missing.', 'Arguments');
+  }
+
+  public function saveNewEndpoint() {
+    $edit = $this->populateEndpointFAPI() ;
+    $endpoint = new stdClass;
+    $endpoint->disabled = FALSE; /* Edit this to true to make a default endpoint disabled initially */
+    $endpoint->api_version = 3;
+    $endpoint->name = $edit['name'];
+    $endpoint->title = $edit['title'];
+    $endpoint->server = $edit['server'];
+    $endpoint->path = $edit['path'];
+    $endpoint->authentication = array(
+      'services' => 'services',
+    );
+    $endpoint->server_settings = array(
+      'formatters' => array(
+        'json' => TRUE,
+        'bencode' => TRUE,
+        'rss' => TRUE,
+        'plist' => TRUE,
+        'xmlplist' => TRUE,
+        'php' => TRUE,
+        'yaml' => TRUE,
+        'jsonp' => FALSE,
+        'xml' => FALSE,
+      ),
+      'parsers' => array(
+        'application/x-yaml' => TRUE,
+        'application/json' => TRUE,
+        'application/vnd.php.serialized' => TRUE,
+        'application/plist' => TRUE,
+        'application/plist+xml' => TRUE,
+        'application/x-www-form-urlencoded' => TRUE,
+      ),
+    );
+    $endpoint->resources = array(
+      'system' => array(
+        'alias' => '',
+        'actions' => array(
+          'connect' => array(
+            'enabled' => 1,
+          ),
+          'get_variable' => array(
+            'enabled' => 1,
+          ),
+          'set_variable' => array(
+            'enabled' => 1,
+          ),
+        ),
+      ),
+      'user' => array(
+        'alias' => '',
+        'operations' => array(
+          'create' => array(
+            'enabled' => 1,
+          ),
+          'retrieve' => array(
+            'enabled' => 1,
+          ),
+          'update' => array(
+            'enabled' => 1,
+          ),
+          'delete' => array(
+            'enabled' => 1,
+          ),
+          'index' => array(
+            'enabled' => 1,
+          ),
+        ),
+        'actions' => array(
+          'login' => array(
+            'enabled' => 1,
+          ),
+          'logout' => array(
+            'enabled' => 1,
+          ),
+        ),
+      ),
+      'services_arguments_test' => array(
+        'alias' => '',
+        'operations' => array(
+          'retrieve' => array(
+            'enabled' => 1,
+          ),
+        ),
+        'actions' => array(
+          'retrieve' => array(
+            'enabled' => 1,
+          ),
+        ),
+      ),
+    );
+    $endpoint->debug = 1;
+    $endpoint->export_type = FALSE;
+    services_endpoint_save($endpoint);
+    $endpoint = services_endpoint_load($endpoint->name);
+    $this->assertTrue($endpoint->name == $edit['name'], 'Endpoint successfully created');
+    return $endpoint;
+  }
+
+  public function populateEndpointFAPI() {
+    return array(
+      'name'   => 'machinename',
+      'title'  => $this->randomName(20),
+      'path'   => $this->randomName(10),
+      'server' => 'rest_server',
+    );
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesEndpointTests.test drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesEndpointTests.test
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesEndpointTests.test	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesEndpointTests.test	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,86 @@
+<?php
+
+
+/**
+ * @file
+ * Call the endpoint tests when no authentication is being used.
+ *
+ */
+
+/**
+ * Run test cases for the endpoint with no authentication turned on.
+ *
+ */
+class ServicesEndpointTests extends ServicesWebTestCase {
+  /**
+   * Test adding an endpoint succeeds.
+   */
+  public function testEndpointForm() {
+    $edit = $this->populateEndpointFAPI();
+// Create and log in our privileged user.
+    $this->privilegedUser = $this->drupalCreateUser(array(
+      'administer services',
+      'administer site configuration',
+    ));
+    $this->drupalLogin($this->privilegedUser);
+    $this->drupalPost('admin/structure/services/add', $edit, 'Save');
+    $this->drupalGet($edit['path']);
+  }
+
+  /**
+   * Test adding an endpoint succeeds.
+   */
+  public function testSuccessfulAddEndpoint() {
+    $edit = $this->populateEndpointFAPI();
+    $this->privilegedUser = $this->drupalCreateUser(array(
+      'administer services',
+      'administer content types',
+      'administer site configuration',
+    ));
+    $this->drupalLogin($this->privilegedUser);
+    $this->drupalPost('admin/structure/services/add', $edit, 'Save');
+    $this->assertResponse('200', 'expected 200');
+    $this->drupalGet('admin/structure/services');
+    $this->assertResponse('200', 'expected 200');
+
+    $this->assertText($edit['name'], 'Endpoint path appears');
+    $this->assertText('Normal', 'Storage is in database');
+  }
+
+  /**
+   * Test missing path to endpoint causes an error.
+   */
+  public function testMissingPath() {
+    $edit = $this->populateEndpointFAPI();
+    unset($edit['path']);
+    $this->privilegedUser = $this->drupalCreateUser(array(
+      'administer services',
+      'administer content types',
+      'administer site configuration',
+    ));
+    $this->drupalLogin($this->privilegedUser);
+    $this->drupalPost('admin/structure/services/add', $edit, 'Save');
+    $this->assertResponse('200', 'expected 200');
+
+    $this->assertText('Path to endpoint field is required.', 'Endpoint path missing error message.');
+    $this->assertFieldByName('server', 'rest_server', 'Server is rest server');
+  }
+  /**
+   * Test missing server for endpoint causes an error.
+   */
+  public function testMissingServer() {
+    $edit = $this->populateEndpointFAPI();
+    unset($edit['server']);
+    $this->privilegedUser = $this->drupalCreateUser(array(
+      'administer services',
+      'administer content types',
+      'administer site configuration',
+    ));
+    $this->drupalLogin($this->privilegedUser);
+    $this->drupalPost('admin/structure/services/add', $edit, 'Save');
+    $this->assertResponse('200', 'expected 200');
+
+    $this->assertText('Server field is required.', 'Server missing error message.');
+    $this->assertFieldByName('name', $edit['name'], 'Name field remains.');
+  }
+}
\ Brak znaku nowej linii na końcu pliku
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesParserTests.test drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesParserTests.test
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesParserTests.test	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesParserTests.test	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,119 @@
+<?php
+
+/**
+ * @file
+ * Call the endpoint tests when no authentication is being used.
+ *
+ */
+
+/**
+ * Run test cases for the endpoint with no authentication turned on.
+ *
+ */
+class ServicesParserTests extends ServicesWebTestCase {
+  // Class variables
+  protected $privilegedUser = NULL ;
+  // Endpoint details.
+  protected $endpoint = NULL;
+
+  /**
+   * Implementation of setUp().
+   */
+  public function setUp() {
+    parent::setUp(
+      'ctools',
+      'services',
+      'rest_server'
+    );
+    // Set up endpoint with disabled 'application/x-www-form-urlencoded' parser.
+    $edit = $this->populateEndpointFAPI() ;
+    $endpoint = new stdClass;
+    $endpoint->disabled = FALSE;
+    $endpoint->api_version = 3;
+    $endpoint->name = $edit['name'];
+    $endpoint->server = $edit['server'];
+    $endpoint->path = $edit['path'];
+    $endpoint->authentication = array(
+      'services' => 'services',
+    );
+    $endpoint->server_settings = array(
+      'formatters' => array(
+        'php' => TRUE,
+      ),
+      'parsers' => array(
+        'application/x-yaml' => TRUE,
+        'application/json' => TRUE,
+        'application/vnd.php.serialized' => TRUE,
+        'application/plist' => TRUE,
+        'application/plist+xml' => TRUE,
+        'application/x-www-form-urlencoded' => FALSE,
+      ),
+    );
+    $endpoint->resources = array(
+      'user' => array(
+        'actions' => array(
+          'login' => array(
+            'enabled' => 1,
+          ),
+          'logout' => array(
+            'enabled' => 1,
+          ),
+        ),
+      ),
+    );
+    $endpoint->debug = 1;
+    $endpoint->export_type = FALSE;
+    services_endpoint_save($endpoint);
+    $endpoint = services_endpoint_load($endpoint->name);
+    $this->assertTrue($endpoint->name == $edit['name'], 'Endpoint successfully created');
+    $this->endpoint = $endpoint;
+  }
+
+  /**
+   * Implementation of getInfo().
+   */
+  public static function getInfo() {
+    return array(
+      'name' => 'Parser',
+      'description' => 'Test the Parser functionality.',
+      'group' => 'Services',
+    );
+  }
+
+  /**
+   * Testing parser functionality.
+   */
+  public function testParser() {
+    $account = $this->drupalCreateUser();
+
+    // Logout first.
+    $this->drupalLogout();
+
+    // Try to login. By default servicesPost uses
+    // 'application/x-www-form-urlencoded' type. So it should be refused.
+    $response = $this->servicesPost($this->endpoint->path . '/user/login', array('username' => $account->name, 'password' => $account->pass_raw));
+
+    $this->assertTrue(strpos($response['header'], '406 Not Acceptable: Unsupported request content type application/x-www-form-urlencoded') !== FALSE,
+      'Do not accept application/x-www-form-urlencoded if disabled.', 'Parser');
+  }
+
+  /**
+   * Do JSON call. Ensure it is parsed properly.
+   */
+  public function testJSONCall() {
+    $account = $this->drupalCreateUser();
+
+    // Logout first.
+    $this->drupalLogout();
+
+    // Do JSON call to login.
+    $response = $this->servicesPost($this->endpoint->path . '/user/login', array('username' => $account->name, 'password' => $account->pass_raw), array(), 'json');
+
+    $body = $response['body'];
+
+    $proper_answer = isset($body->sessid)
+                  && isset($body->user)
+                  && $body->user->name == $account->name;
+    $this->assertTrue($proper_answer, 'User successfully logged in via JSON call.', 'JSON Call: Login');
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesResourceCommentTests.test drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesResourceCommentTests.test
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesResourceCommentTests.test	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesResourceCommentTests.test	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,364 @@
+<?php
+
+/**
+ * @file
+ * Call the endpoint tests when no authentication is being used.
+ *
+ */
+
+/**
+ * Run test cases for the endpoint with no authentication turned on.
+ *
+ */
+class ServicesResourceCommentTests extends ServicesWebTestCase {
+  // Class variables
+  protected $privileged_user = NULL ;
+  // Endpoint details.
+  protected $endpoint = NULL;
+
+  /**
+   * Implementation of setUp().
+   */
+  public function setUp() {
+    parent::setUp(
+      'ctools',
+      'services',
+      'rest_server'
+    );
+    // Set up endpoint.
+    $this->endpoint =  $this->saveNewEndpoint();
+
+    // Create and log in our privileged user.
+    $this->privileged_user = $this->drupalCreateUser();
+    $this->drupalLogin($this->privileged_user);
+  }
+
+  /**
+   * Implementation of getInfo().
+   */
+  public static function getInfo() {
+   return array(
+     'name'        => 'Resource Comment',
+     'description' => 'Test the resource Comment methods and actions.',
+     'group'       => 'Services',
+   );
+  }
+  public function testCommentIndex() {
+    // Create and log in our privileged user.
+    $this->privilegedUser = $this->drupalCreateUser(array(
+      'administer services',
+      'administer comments',
+    ));
+    $this->drupalLogin($this->privilegedUser);
+
+
+    // Create a set of comments. The comment resource returns 20 comments at a time,
+    // so we create two pages and a half worth.
+    $comments = array();
+    $count = 50;
+    $node = $this->drupalCreateNode();
+    $nid = $node->nid;
+    for ($i = 0; $i < $count; $i++) {
+      $comment = (object)$this->getCommentValues($nid);
+      $comment->created = REQUEST_TIME + $i;
+      comment_save($comment);
+      $comments[$comment->cid] = $comment;
+    }
+
+    // Get the content.
+    $page_count = ceil(count($comments) / 20);
+    $retrieved_comments = array();
+    for ($page = 0; $page < $page_count; $page++) {
+      $responseArray = $this->servicesGet($this->endpoint->path . '/comment', array('page' => $page, 'fields' => 'cid,subject'));
+      $this->assertTrue(count($responseArray['body']) <= 20, 'Correct number of items returned');
+
+      // Store the returned comment IDs.
+      foreach ($responseArray['body'] as $comment) {
+        if (isset($retrieved_comments[$comment->cid])) {
+          $this->fail(format_string('Duplicate comment @cid returned.', array('@cid' => $comment->cid)));
+        }
+        $retrieved_comments[$comment->cid] = TRUE;
+
+        $this->assertTrue($comments[$comment->cid]->subject == $comment->subject, 'Successfully received Comment info', 'CommentResource: Index');
+      }
+    }
+    // We should have got all the comments.
+    $expected_cids = array_keys($comments);
+    sort($expected_cids);
+    $retrieved_cids = array_keys($retrieved_comments);
+    sort($retrieved_cids);
+    
+    $this->assertEqual($expected_cids, $retrieved_cids, 'Retrieved all comments');
+
+    // The n+1 page should be empty.
+    $responseArray = $this->servicesGet($this->endpoint->path . '/comment', array('page' => $page_count + 1));
+    $this->assertEqual(count($responseArray['body']), 0, 'The n+1 page is empty');
+  }
+
+  /**
+   * Test create comment.
+   */
+  public function testCommentCreate() {
+    $node = $this->drupalCreateNode();
+
+    // Create comment.
+    $comment = $this->getCommentValues($node->nid);
+
+    $response_array = $this->servicesPost($this->endpoint->path . '/comment', $comment);
+    $commentResourceCreateReturn = $response_array['body'];
+    $this->assertTrue(isset($commentResourceCreateReturn['cid']),
+      'Comment was successfully created', 'CommentResource: Create');
+
+    // Assert subject and body of comment are the same as we created.
+    $newComment = comment_load($commentResourceCreateReturn['cid']);
+    $this->assertTrue($newComment->subject == $comment['subject'], 'Subject was the same', 'CommentResource: Create');
+    $this->assertTrue($newComment->comment_body[LANGUAGE_NONE][0]['value'] == $comment['comment_body'][LANGUAGE_NONE][0]['value'],
+      'Body was the same', 'CommentResource: Create');
+
+    // Try to create comment with full_html filter that is disabled by default.
+    $comment = array(
+      'subject' => $this->randomString(),
+      'comment_body' => array(
+        LANGUAGE_NONE => array(
+          array(
+            'value' => $this->randomString(),
+            'format' => 'full_html',
+          )
+        )
+      ),
+      'name' => $this->privileged_user->name,
+      'language' => LANGUAGE_NONE,
+      'nid' => $node->nid,
+      'uid' => $this->privileged_user->uid,
+      'cid' => NULL,
+      'pid' => 0,
+    );
+    $response_array = $this->servicesPost($this->endpoint->path . '/comment', $comment);
+
+    $this->assertTrue(strpos($response_array['status'], 'An illegal choice has been detected.'),
+      'User cannot post comment with full_html filter chosen.', 'CommentResource: Create');
+  }
+
+  /**
+   * Test create comment (Legacy).
+   *
+   * TODO: To be removed in future version.
+   * @see http://drupal.org/node/1083242
+   */
+  public function testCommentCreateLegacy() {
+    $node = $this->drupalCreateNode();
+
+    // Create comment.
+    $comment = $this->getCommentValues($node->nid);
+
+    $response_array = $this->servicesPost($this->endpoint->path . '/comment', array('comment' => $comment));
+    $commentResourceCreateReturn = $response_array['body'];
+    $this->assertTrue(isset($commentResourceCreateReturn['cid']),
+      'Comment was successfully created', 'CommentResource: Create (Legacy)');
+
+    // Assert subject and body of comment are the same as we created.
+    $newComment = comment_load($commentResourceCreateReturn['cid']);
+    $this->assertTrue($newComment->subject == $comment['subject'],
+      'Subject was the same', 'CommentResource: Create (Legacy)');
+    $this->assertTrue($newComment->comment_body[LANGUAGE_NONE][0]['value'] == $comment['comment_body'][LANGUAGE_NONE][0]['value'],
+      'Body was the same', 'CommentResource: Create (Legacy)');
+
+    // Try to create comment with full_html filter that is disabled by default.
+    $comment = array(
+      'subject' => $this->randomString(),
+      'comment_body' => array(
+        LANGUAGE_NONE => array(
+          array(
+            'value' => $this->randomString(),
+            'format' => 'full_html',
+          )
+        )
+      ),
+      'name' => $this->privileged_user->name,
+      'language' => LANGUAGE_NONE,
+      'nid' => $node->nid,
+      'uid' => $this->privileged_user->uid,
+      'cid' => NULL,
+      'pid' => 0,
+    );
+    $response_array = $this->servicesPost($this->endpoint->path . '/comment', array('comment' => $comment));
+
+    $this->assertTrue(strpos($response_array['status'], 'An illegal choice has been detected.'),
+      'User cannot post comment with full_html filter chosen.', 'CommentResource: Create (Legacy)');
+  }
+
+  /**
+   * Test retrieve method.
+   */
+  function testCommentRetrieve() {
+    $path = $this->endpoint->path;
+
+    // Create node.
+    $node = $this->drupalCreateNode();
+
+    $comment_args = $this->getCommentValues($node->nid);
+
+    $comment = (object)$comment_args;
+
+    comment_save($comment);
+    $comment_args['cid'] = $comment->cid;
+
+    $response = $this->servicesGet($path . '/comment/' . $comment->cid);
+
+    $comment_retrieve = (array)$response['body'];
+
+    $comment_intersect = array_intersect_assoc($comment_retrieve, $comment_args);
+
+    // Unset save_value as we don't have this key in arguments.
+    unset($comment_intersect['comment_body'][LANGUAGE_NONE][0]['safe_value']);
+
+    $this->assertEqual($comment_args, $comment_intersect, 'Comment retrieved properly.', 'CommentResource: Retrieve');
+  }
+
+  /**
+   * Test update method.
+   */
+  function testCommentUpdate() {
+    $path = $this->endpoint->path;
+    $this->privilegedUser = $this->drupalCreateUser(array(
+      'administer services',
+      'administer comments',
+    ));
+    $this->drupalLogin($this->privilegedUser);
+    // Create node.
+    $node = $this->drupalCreateNode();
+
+    $comment_args = $this->getCommentValues($node->nid);
+
+    $comment = (object)$comment_args;
+
+    comment_save($comment);
+    $cid = $comment->cid;
+    $comment_args['cid'] = $cid;
+
+    $comment_update = $comment_args;
+    $comment_update['subject'] = $this->randomString();
+    $comment_update['comment_body'][LANGUAGE_NONE][0]['value'] = $this->randomString();
+
+    $response = $this->servicesPut($path . '/comment/' . $cid, $comment_update);
+
+    $comment_load = (array)comment_load($cid);
+
+    $comment_intersect = array_intersect_assoc($comment_load, $comment_update);
+
+    // Unset save_value as we don't have this key in arguments.
+    unset($comment_intersect['comment_body'][LANGUAGE_NONE][0]['safe_value']);
+
+    $this->assertEqual($comment_update, $comment_intersect, 'Comment updated properly.', 'CommentResource: Update');
+  }
+
+  /**
+   * Test update method.
+   *
+   * TODO: To be removed in future version.
+   * @see http://drupal.org/node/1083242
+   */
+  function testCommentUpdateLegacy() {
+    $path = $this->endpoint->path;
+    $this->privilegedUser = $this->drupalCreateUser(array(
+      'administer services',
+      'administer comments',
+    ));
+    $this->drupalLogin($this->privilegedUser);
+    // Create node.
+    $node = $this->drupalCreateNode();
+
+    $comment_args = $this->getCommentValues($node->nid);
+
+    $comment = (object)$comment_args;
+
+    comment_save($comment);
+    $cid = $comment->cid;
+    $comment_args['cid'] = $cid;
+
+    $comment_update = $comment_args;
+    $comment_update['subject'] = $this->randomString();
+    $comment_update['comment_body'][LANGUAGE_NONE][0]['value'] = $this->randomString();
+
+    $response = $this->servicesPut($path . '/comment/' . $cid, array('data' => $comment_update));
+
+    $comment_load = (array)comment_load($cid);
+
+    $comment_intersect = array_intersect_assoc($comment_load, $comment_update);
+
+    // Unset save_value as we don't have this key in arguments.
+    unset($comment_intersect['comment_body'][LANGUAGE_NONE][0]['safe_value']);
+
+    $this->assertEqual($comment_update, $comment_intersect, 'Comment updated properly.', 'CommentResource: Update');
+  }
+
+  /**
+   * Test delete method.
+   */
+  function testCommentDelete() {
+    $path = $this->endpoint->path;
+    $this->privilegedUser = $this->drupalCreateUser(array(
+      'administer services',
+      'administer comments',
+    ));
+    $this->drupalLogin($this->privilegedUser);
+    // Create node with commenting.
+    $node = $this->drupalCreateNode();
+
+    $comment_args = $this->getCommentValues($node->nid);
+
+    $comment = (object)$comment_args;
+
+    comment_save($comment);
+    $cid = $comment->cid;
+    $comment_args['cid'] = $cid;
+
+    $response = $this->servicesDelete($path . '/comment/' . $cid);
+
+    $comment_load = comment_load($cid);
+
+    $this->assertTrue(empty($comment_load), 'Comment deleted properly.', 'CommentResource: Delete');
+  }
+
+
+  /**
+   * Test countAll method.
+   */
+  function testCommentCountAll() {
+    $path = $this->endpoint->path;
+    // Generate comments.
+    $settings = array('comment' => 1);
+    $node = $this->drupalCreateNode($settings);
+    for ($i = 0; $i < 5; $i++) {
+      $comment = (object)$this->getCommentValues($node->nid);
+      comment_save($comment);
+    }
+
+    $response = $this->servicesPost($path . '/comment/countAll', array('nid' => $node->nid));
+    $this->assertEqual($response['body'], 5, 'Counted number of comments properly.', 'CommentResource: countAll');
+  }
+
+  /**
+   * Test countNew method.
+   */
+  function testCommentCountNew() {
+    $path = $this->endpoint->path;
+    // Generate comments.
+    $node = $this->drupalCreateNode();
+    $nid = $node->nid;
+    for ($i = 0; $i < 5; $i++) {
+      $comment = (object)$this->getCommentValues($nid);
+      $comment->created = REQUEST_TIME + $i;
+      comment_save($comment);
+      $comments[] = comment_load($comment->cid);
+    }
+
+    $response = $this->servicesPost($path . '/comment/countNew', array('nid' => $node->nid));
+    $this->assertEqual($response['body'], 5, 'Received number of all new comments.', 'CommentResource: countNew');
+
+    $since = $comments[2]->created;
+
+    $response = $this->servicesPost($path . '/comment/countNew', array('nid' => $node->nid, 'since' => $since));
+    $this->assertEqual($response['body'], 2, 'Received number of new comments.', 'CommentResource: countNew');
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesResourceDisabledTests.test drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesResourceDisabledTests.test
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesResourceDisabledTests.test	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesResourceDisabledTests.test	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,97 @@
+<?php
+
+
+
+/**
+ * @file
+ * Contains tests when a resource is disabled.
+ */
+
+/**
+ * Try to make a request to a disabled resource.
+ */
+class ServicesResourceDisabledTest extends ServicesWebTestCase {
+
+  /**
+   * Implementation of getInfo().
+   */
+  public static function getInfo() {
+    return array(
+      'name' => 'Services Disabled Resource Test',
+      'description' => 'Assert that a resource is disabled when a request is made to it.',
+      'group' => 'Services',
+    );
+  }
+
+  /**
+   * Implementation of setUp().
+   */
+  public function setUp() {
+    parent::setUp(
+      'ctools',
+      'services',
+      'rest_server'
+    );
+    // Set up endpoint.
+    $this->endpoint =  $this->saveNewEndpoint();
+    // Set up privileged user and login.
+    $this->privileged_user = $this->drupalCreateUser(array('get a system variable', 'set a system variable'));
+    $this->drupalLogin($this->privileged_user);
+  }
+
+  /**
+   * Save a new endpoint without any resources enabled. This is a method from
+   * ServicesWebTestCase that has been modified.
+   */
+  public function saveNewEndpoint() {
+    $edit = $this->populateEndpointFAPI() ;
+    $endpoint = new stdClass;
+    $endpoint->disabled = FALSE; /* Edit this to true to make a default endpoint disabled initially */
+    $endpoint->api_version = 3;
+    $endpoint->name = $edit['name'];
+    $endpoint->server = $edit['server'];
+    $endpoint->path = $edit['path'];
+    $endpoint->authentication = array(
+      'services' => 'services',
+    );
+    $endpoint->server_settings = array(
+      'formatters' => array(
+        'json' => TRUE,
+        'bencode' => TRUE,
+        'rss' => TRUE,
+        'plist' => TRUE,
+        'xmlplist' => TRUE,
+        'php' => TRUE,
+        'yaml' => TRUE,
+        'jsonp' => FALSE,
+        'xml' => FALSE,
+      ),
+      'parsers' => array(
+        'application/x-yaml' => TRUE,
+        'application/json' => TRUE,
+        'application/vnd.php.serialized' => TRUE,
+        'application/plist' => TRUE,
+        'application/plist+xml' => TRUE,
+        'application/x-www-form-urlencoded' => TRUE,
+        'multipart/form-data' => TRUE,
+      ),
+    );
+    $endpoint->debug = 1;
+    $endpoint->export_type = FALSE;
+    services_endpoint_save($endpoint);
+    $endpoint = services_endpoint_load($endpoint->name);
+    $this->assertTrue($endpoint->name == $edit['name'], 'Endpoint successfully created');
+    return $endpoint;
+  }
+
+  /**
+   * Assert resource is disabled.
+   */
+  function testResourceDisabled() {
+    $path = $this->endpoint->path;
+    // Call as authenticated user.
+    $response = $this->servicesPost($path . '/system/connect');
+    $this->assertEqual($response['code'], 404, format_string('Services returned not found response code for disabled resource: %code.', array('%code' => $response['code'])));
+    $this->drupalLogout();
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesResourceFileTests.test drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesResourceFileTests.test
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesResourceFileTests.test	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesResourceFileTests.test	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,263 @@
+<?php
+
+/**
+ * @file
+ * Test for file resource.
+ *
+ */
+
+/**
+ * Test class.
+ */
+class ServicesResourceFileTests extends ServicesWebTestCase {
+  // Class variables
+  protected $privileged_user = NULL ;
+  // Endpoint details.
+  protected $endpoint = NULL;
+  // Test file.
+  protected $testfile;
+
+  /**
+   * Implements setUp().
+   */
+  public function setUp() {
+    parent::setUp(
+      'ctools',
+      'services',
+      'rest_server'
+    );
+    // Set up endpoint.
+    $this->endpoint =  $this->saveNewEndpoint();
+    // Create and log in our privileged user.
+    $this->privileged_user = $this->drupalCreateUser(array(
+      'get any binary files',
+      'save file information',
+      'administer services',
+      'administer site configuration',
+      'bypass node access',
+    ));
+    $this->drupalLogin($this->privileged_user);
+    // Get a test file.
+    $this->testfiles = $this->drupalGetTestFiles('image');
+    $this->testfile = current($this->testfiles);
+  }
+
+  /**
+   * Implements getInfo().
+   */
+  public static function getInfo() {
+    return array(
+      'name' => 'Resource File',
+      'description' => 'Test the resource File methods.',
+      'group' => 'Services',
+    );
+  }
+
+
+  public function testIndexFiles() {
+    // Create a set of files to test with
+    $files = array();
+    foreach($this->testfiles as $file) {
+      file_save($file);
+      $files[$file->fid] = $file;
+    }
+    // Get the content.
+    $page_count = ceil(count($files) / 20);
+    $retrieved_files = array();
+    for ($page = 0; $page < $page_count; $page++) {
+      $responseArray = $this->servicesGet($this->endpoint->path . '/file', array('page' => $page, 'fields' => 'fid,filename'));
+      $this->assertTrue(count($responseArray['body']) <= 20, 'Correct number of items returned');
+
+      // Store the returned file IDs.
+      foreach ($responseArray['body'] as $file) {
+        if (isset($retrieved_files[$file->fid])) {
+          $this->fail(format_string('Duplicate files @fid returned.', array('@fid' => $file->fid)));
+        }
+        $retrieved_files[$file->fid] = TRUE;
+
+        $this->assertTrue($files[$file->fid]->filename == $file->filename,
+          'Successfully received File info', 'FileResource: Index');
+      }
+    }
+    // We should have got all the files.
+    $expected_fids = array_keys($files);
+    sort($expected_fids);
+    $retrieved_fids = array_keys($retrieved_files);
+    sort($retrieved_fids);
+
+    $this->assertEqual($expected_fids, $retrieved_fids, 'Retrieved all files');
+
+    // The n+1 page should be empty.
+    $responseArray = $this->servicesGet($this->endpoint->path . '/file', array('page' => $page_count + 1));
+    $this->assertEqual(count($responseArray['body']), 0, 'The n+1 page is empty');
+  }
+
+  /**
+   * Test create method.
+   */
+  public function testResourceFileCreate() {
+    // Create file argument with data.
+    $filepath = file_default_scheme() . '://' . rand() . '/' . rand() . '/' . $this->testfile->filename;
+    $file = array(
+      'filesize' => filesize($this->testfile->uri),
+      'filename' => $this->testfile->filename,
+      'filepath' => $filepath,
+      'file' => base64_encode(file_get_contents($this->testfile->uri)),
+      'uid' => $this->privileged_user->uid,
+    );
+
+    // Create file with call.
+    $result = $this->servicesPost($this->endpoint->path . '/file', $file);
+    $this->assertEqual($result['code'], 200, 'File created.', 'FileResource: Create');
+
+    // Load file and assert that it exists.
+    $file_load = file_load($result['body']['fid']);
+    $this->assertTrue(is_file($file_load->uri), 'New file saved to disk.', 'FileResource: Create');
+    $this->assertEqual($file_load->uri, $filepath,
+      'The path of newly created file placed into directory with random name.', 'FileResource: Create');
+  }
+  /**
+   * Test create_raw method.
+   */
+  public function testResourceFileCreateRaw() {
+    // Create file with call.
+    $result = $this->servicesPostFile($this->endpoint->path . '/file/create_raw', $this->testfile->uri);
+    $this->assertEqual($result['code'], 200, 'File created.', 'FileResource: Create');
+
+    // Load file and assert that it exists.
+    $file_load = file_load($result['body'][0]['fid']);
+    $this->assertTrue(is_file($file_load->uri), 'New file saved to disk.', 'FileResource: Create');
+  }
+  /**
+   * Test create method (Legacy).
+   *
+   * TODO: To be removed in future version.
+   * @see http://drupal.org/node/1083242
+   */
+  public function testResourceFileCreateLegacy() {
+    // Create file argument with data.
+    $file = array(
+      'filesize' => filesize($this->testfile->uri),
+      'filename' => $this->testfile->filename,
+      'file' => base64_encode(file_get_contents($this->testfile->uri)),
+      'uid' => $this->privileged_user->uid,
+    );
+
+    // Create file with call.
+    $result = $this->servicesPost($this->endpoint->path . '/file', array('file' => $file));
+    $this->assertEqual($result['code'], 200, 'File created.', 'FileResource: Create (Legacy)');
+
+    // Load file and assert that it exists.
+    $file_load = file_load($result['body']['fid']);
+    $this->assertTrue(is_file($file_load->uri), 'New file saved to disk.', 'FileResource: Create (Legacy)');
+  }
+
+  /**
+   * Test retrieve method.
+   */
+  public function testResourceFileRetrieve() {
+    $testfile = $this->testfile;
+
+    $testfile->fid = NULL;
+    $testfile->uid = $this->privileged_user->uid;
+    file_save($testfile);
+
+    // Retrieve file.
+    $result = $this->servicesGet($this->endpoint->path . '/file/' . $testfile->fid);
+    $file = $result['body'];
+
+    // Assert that fid, filesize and uri are the same.
+    $this->assertTrue($file->fid == $testfile->fid
+                   && $file->filesize == $testfile->filesize
+                   && $file->uri == $testfile->uri,
+      'File retrieved.', 'FileResource: Retrieve');
+  }
+
+  /**
+   * Test delete method.
+   */
+  public function testResourceFileDelete() {
+    $testfile = $this->testfile;
+
+    $testfile->fid = NULL;
+    $testfile->uid = $this->privileged_user->uid;
+    file_save($testfile);
+
+    // Delete file via call.
+    $result = $this->servicesDelete($this->endpoint->path . '/file/' . $testfile->fid);
+
+    // Try to load file.
+    $file_load = file_load($testfile->fid);
+    $this->assertTrue(empty($file_load), 'File deleted.', 'FileResource: Delete');
+  }
+
+  /**
+   * Attach file to the node.
+   */
+  public function testCreateNodeWithFile() {
+    $filepath = file_default_scheme() . '://' . rand() . '/' . rand() . '/' . $this->testfile->filename;
+
+    // Create file that managed by services.
+    $file = array(
+      'filesize' => filesize($this->testfile->uri),
+      'filename' => $this->testfile->filename,
+      'filepath' => $filepath,
+      'file' => base64_encode(file_get_contents($this->testfile->uri)),
+      'uid' => $this->privileged_user->uid,
+    );
+
+    // Create file with call.
+    $result = $this->servicesPost($this->endpoint->path . '/file', $file);
+
+    $fid = $result['body']['fid'];
+    $file_load = file_load($fid);
+
+    // Try to delete the file and ensure that it is not possible.
+    $file_delete_result = file_delete($file_load);
+    $this->assertTrue($file_delete_result !== TRUE, 'It is not possible to delete file managed by services using file_delete().');
+
+
+    // Create file that is not managed by services.
+    $file = array(
+      'filesize' => filesize($this->testfile->uri),
+      'filename' => $this->testfile->filename,
+      'filepath' => $filepath,
+      'file' => base64_encode(file_get_contents($this->testfile->uri)),
+      'uid' => $this->privileged_user->uid,
+      'status' => 0,
+    );
+
+    // Create file with call.
+    $result = $this->servicesPost($this->endpoint->path . '/file', $file);
+
+    $fid = $result['body']['fid'];
+    $file_load = file_load($fid);
+
+    // Create a node with this file attached.
+    $node = array(
+      'title' => $this->randomString(),
+      'body' => array(LANGUAGE_NONE => array(array('value' => $this->randomString()))),
+      'type' => 'article',
+      'name' => $this->privileged_user->name,
+      'language' => LANGUAGE_NONE,
+      'field_image' => array(LANGUAGE_NONE => array(array('fid' => $fid, 'display' => '1'))),
+    );
+    $response_array = $this->servicesPost($this->endpoint->path . '/node', $node);
+    $nid = $response_array['body']['nid'];
+
+    $node_load = node_load($nid, NULL, TRUE);
+
+    $this->assertEqual($fid, $node_load->field_image[LANGUAGE_NONE][0]['fid'], 'File added to the node successfully.');
+
+    // Now file should be managed by node. Lets try to delete it and ensure
+    // that it is not possible.
+    $file_delete_result = file_delete($file_load);
+    $this->assertTrue($file_delete_result !== TRUE, 'It is not possible to delete file managed by node using file_delete().');
+
+    // Delete the node and assert that file can be deleted.
+    node_delete($nid);
+
+    $file_delete_result = file_delete($file_load);
+    $this->assertTrue($file_delete_result === TRUE, 'File can be deleted after node has been removed.');
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesResourceNodeTests.test drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesResourceNodeTests.test
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesResourceNodeTests.test	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesResourceNodeTests.test	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,615 @@
+<?php
+
+/**
+ * @file
+ * Call the endpoint tests when no authentication is being used.
+ *
+ */
+
+define("SERVICES_NODE_TYPE_INCLUDE", 1);
+define("SERVICES_NODE_TYPE_EMPTY", 2);
+define("SERVICES_NODE_TYPE_REMOVED", 3);
+
+/**
+ * Run test cases for the endpoint with no authentication turned on.
+ *
+ */
+class ServicesResourceNodetests extends ServicesWebTestCase {
+  // Class variables
+  protected $privilegedUser = NULL ;
+  // Endpoint details.
+  protected $endpoint = NULL;
+
+  /**
+   * Implementation of setUp().
+   */
+  public function setUp() {
+    parent::setUp(
+      'ctools',
+      'services',
+      'rest_server',
+      'comment'
+    );
+    // Set up endpoint.
+    $this->endpoint =  $this->saveNewEndpoint();
+  }
+
+  /**
+   * Implementation of getInfo().
+   */
+  public static function getInfo() {
+    return array(
+      'name' => 'Resource Node',
+      'description' => 'Test the resource Node methods and actions.',
+      'group' => 'Services',
+    );
+  }
+
+  /**
+   * testing node_resource Index
+   */
+  public function testNewEndpointResourceNodeIndex() {
+    // Create and log in our privileged user.
+    $this->privilegedUser = $this->drupalCreateUser(array(
+      'administer services',
+      'perform unlimited index queries',
+    ));
+    $this->drupalLogin($this->privilegedUser);
+
+    // Create a set of nodes. The node resource returns 20 returns at a time,
+    // so we create two pages and a half worth.
+    $nodes = array();
+    $count = 50;
+    for ($i = 0; $i < $count; $i++) {
+      $node = $this->drupalCreateNode();
+      $nodes[$node->nid] = $node;
+    }
+
+    // Get the content.
+    $page_count = ceil(count($nodes) / 20);
+    $retrieved_nodes = array();
+    for ($page = 0; $page < $page_count; $page++) {
+      $responseArray = $this->servicesGet($this->endpoint->path . '/node', array('page' => $page, 'fields' => 'nid,title'));
+      $this->assertTrue(count($responseArray['body']) <= 20, 'Correct number of items returned');
+
+      // Store the returned node IDs.
+      foreach ($responseArray['body'] as $node) {
+        if (isset($retrieved_nodes[$node->nid])) {
+          $this->fail(format_string('Duplicate node @nid returned.', array('@nid' => $node->nid)));
+        }
+        $retrieved_nodes[$node->nid] = TRUE;
+
+        $this->assertTrue($nodes[$node->nid]->title == $node->title, 'Successfully received Node info', 'NodeResource: Index');
+      }
+    }
+
+    // We should have got all the nodes.
+    $expected_nids = array_keys($nodes);
+    sort($expected_nids);
+    $retrieved_nids = array_keys($retrieved_nodes);
+    sort($retrieved_nids);
+    $this->assertEqual($expected_nids, $retrieved_nids, 'Retrieved all nodes');
+
+    // The n+1 page should be empty.
+    $responseArray = $this->servicesGet($this->endpoint->path . '/node', array('page' => $page_count + 1));
+    $this->assertEqual(count($responseArray['body']), 0, 'The n+1 page is empty');
+
+    // Adjust the pager size.
+    $responseArray = $this->servicesGet($this->endpoint->path . '/node', array('fields' => 'nid,title', 'pagesize' => 40));
+    $this->assertTrue(count($responseArray['body']) == 40, 'Correct number of items returned');
+
+    // Swap to user that can only use the default pager size.
+    $this->lessPrivilegedUser = $this->drupalCreateUser(array(
+      'administer services',
+    ));
+    $this->drupalLogin($this->lessPrivilegedUser);
+    $responseArray = $this->servicesGet($this->endpoint->path . '/node', array('fields' => 'nid,title', 'pagesize' => 40));
+    $this->assertTrue(count($responseArray['body']) == 20, 'Correct number of items returned');
+  }
+
+  /**
+   * testing node_resource Get
+   */
+  public function testNewEndpointResourceNodeGet() {
+    // Create and log in our privileged user.
+    $this->privilegedUser = $this->drupalCreateUser(array(
+      'administer services',
+    ));
+    $this->drupalLogin($this->privilegedUser);
+    $node = $this->drupalCreateNode();
+    $responseArray = $this->servicesGet($this->endpoint->path . '/node/' . $node->nid);
+    $this->assertTrue($node->title == $responseArray['body']->title,
+      'Successfully received Node info', 'NodeResource: Retrieve');
+    //Verify node not found.
+    unset($node);
+    $responseArray = $this->servicesGet($this->endpoint->path . '/node/99');
+    $this->assertTrue($responseArray['code'] == '404', 'Successfully was rejected to non existent node', 'NodeResource: Retrieve');
+  }
+
+  /**
+   * Test loadNodeComments method.
+   */
+  function testCommentLoadNodeComments() {
+    $path = $this->endpoint->path;
+    $this->privileged_user = $this->drupalCreateUser();
+    $this->drupalLogin($this->privileged_user);
+
+    // Create node with commenting.
+    $node = $this->drupalCreateNode();
+    $nid = $node->nid;
+
+    // Generate 15 comments for node.
+    $comments = array();
+    for ($i = 1; $i <= 15; $i++) {
+      $comment = (object)$this->getCommentValues($nid);
+      comment_save($comment);
+      $comments[$i] = comment_load($comment->cid);
+    }
+
+    // Generate some comments for another node.
+    $node2 = $this->drupalCreateNode();
+    for ($i = 1; $i <= 5; $i++) {
+      $comment = (object)$this->getCommentValues($node2->nid);
+      comment_save($comment);
+    }
+
+    // Load all comments of the first node.
+    $response = $this->servicesGet($path . '/node/'. $nid .'/comments');
+    $this->assertEqual($comments, $response['body'], 'Received all 15 comments.', 'NodeResource: comments');
+
+    // Load only 5 comments of the first node.
+    $response = $this->servicesGet($path . '/node/'. $nid .'/comments', array('count' => 5));
+    $this->assertEqual(array_slice($comments, 0, 5), array_slice($response['body'], 0, 5), 'Received last 5 comments.', 'NodeResource: comments');
+    // Load only 5 comments of the first node starting from fifth comment.
+    $response = $this->servicesGet($path . '/node/'. $nid .'/comments', array('count' => 5, 'offset' => 5));
+    $this->assertEqual(array_slice($comments, 5, 5), array_merge(array(),$response['body']),
+      'Received 5 comments starting from fifth comment.', 'NodeResource: comments');
+  }
+
+  /**
+   * Testing node_resource Create.
+   */
+  public function testEndpointResourceNodeCreate() {
+    // Create and log in our privileged user.
+    $this->privilegedUser = $this->drupalCreateUser(array(
+      'administer services',
+      'bypass node access',
+    ));
+    $this->drupalLogin($this->privilegedUser);
+    $node = array(
+      'title' => 'testing',
+      'body' => array(LANGUAGE_NONE => array(array('value' => $this->randomString()))),
+      'type' => 'page',
+      'name' => $this->privilegedUser->name,
+      'language' => LANGUAGE_NONE,
+    );
+
+    $responseArray = $this->servicesPost($this->endpoint->path . '/node', $node);
+    $nodeResourceCreateReturn = $responseArray['body'];
+
+    $this->assertTrue(isset($nodeResourceCreateReturn['nid']), 'Node was successfully created', 'NodeResource: Create');
+    $newNode = node_load($nodeResourceCreateReturn['nid']);
+    $this->assertTrue($newNode->title = $node['title'], 'Title was the same', 'NodeResource: Create');
+    $this->assertTrue($newNode->body = $node['body'], 'Body was the same', 'NodeResource: Create');
+  }
+
+  /**
+   * Testing node_resource Create (Legacy).
+   *
+   * TODO: To be removed in future version.
+   * @see http://drupal.org/node/1083242
+   */
+  public function testEndpointResourceNodeCreateLegacy() {
+    // Create and log in our privileged user.
+    $this->privilegedUser = $this->drupalCreateUser(array(
+      'administer services',
+      'bypass node access',
+    ));
+    $this->drupalLogin($this->privilegedUser);
+    $node = array(
+      'title' => 'testing',
+      'body' => array(LANGUAGE_NONE => array(array('value' => $this->randomString()))),
+      'type' => 'page',
+      'name' => $this->privilegedUser->name,
+      'language' => LANGUAGE_NONE,
+    );
+
+    $responseArray = $this->servicesPost($this->endpoint->path . '/node', array('node' => $node));
+    $nodeResourceCreateReturn = $responseArray['body'];
+
+    $this->assertTrue(isset($nodeResourceCreateReturn['nid']), 'Node was successfully created', 'NodeResource: Create (Legacy)');
+    $newNode = node_load($nodeResourceCreateReturn['nid']);
+    $this->assertTrue($newNode->title = $node['title'], 'Title was the same', 'NodeResource: Create (Legacy)');
+    $this->assertTrue($newNode->body = $node['body'], 'Body was the same', 'NodeResource: Create (Legacy)');
+  }
+
+  /**
+   * testing node_resource Created make ure it fails with no perms
+   */
+  public function testEndpointResourceNodeCreateFail() {
+    // Create and log in our privileged user.
+    $this->privilegedUser = $this->drupalCreateUser(array(
+      'administer services',
+    ));
+    $this->drupalLogin($this->privilegedUser);
+    $node = array(
+      'title' => 'testing',
+      'body' => array(LANGUAGE_NONE => array(array('value' => $this->randomString()))),
+      'type' => 'page',
+      'name' => $this->privilegedUser->name,
+      'language' => LANGUAGE_NONE,
+    );
+
+    $responseArray = $this->servicesPost($this->endpoint->path . '/node', array('node' => $node));
+
+    $this->assertTrue($responseArray['code'] == 403, 'User with not sufficient permissions cannot create node', 'NodeResource: Create');
+  }
+
+  /**
+   * testing node_resource Validate missing Title
+   */
+  public function testEndpointResourceNodeCreateMissingTitle() {
+    // Create and log in our privileged user.
+    $this->privilegedUser = $this->drupalCreateUser(array(
+      'administer services',
+      'bypass node access',
+    ));
+    $this->drupalLogin($this->privilegedUser);
+
+    $node = array(
+      'title' => '',
+      'body' => array(LANGUAGE_NONE => array(array('value' => $this->randomString()))),
+      'type' => 'page',
+      'name' => $this->privilegedUser->name,
+      'language' => LANGUAGE_NONE,
+    );
+
+    $responseArray = $this->servicesPost($this->endpoint->path . '/node', array('node' => $node));
+
+    $nodeResourceUpdateReturn = $responseArray['body'];
+    $this->assertTrue(strpos($responseArray['status'], 'Title field is required.'),
+      'Node was not created without title.', 'NodeResource: Create');
+  }
+
+  /**
+   * Testing targeted_action attach_file.
+   */
+  public function testAttachFileTargetedAction() {
+    // We will do test on the article node type.
+    // Create and log in our privileged user.
+    $account = $this->drupalCreateUser(array(
+      'bypass node access',
+    ));
+    $this->drupalLogin($account);
+
+    // Create article node.
+    $settings = array('type' => 'article');
+    $node = $this->drupalCreateNode($settings);
+
+    // Get a test file.
+    $testfiles = $this->drupalGetTestFiles('image');
+    $testfile1 = array_pop($testfiles);
+    $testfile2 = array_pop($testfiles);
+
+    // Attach one file.
+    $result = $this->servicesPostFile($this->endpoint->path . '/node/' . $node->nid . '/attach_file',
+      array($testfile1->uri), array(), array('field_name' => 'field_image'));
+    $node = node_load($node->nid, TRUE);
+    $this->assertEqual($testfile1->filename, $node->field_image[LANGUAGE_NONE][0]['filename'], 'One file has been attached.');
+
+    // Replace the file on the article node.
+    $result = $this->servicesPostFile($this->endpoint->path . '/node/' . $node->nid . '/attach_file',
+      array($testfile2->uri), array(), array('field_name' => 'field_image', 'attach' => FALSE));
+    $node = node_load($node->nid, TRUE);
+    $this->assertEqual($testfile2->filename, $node->field_image[LANGUAGE_NONE][0]['filename'], 'File has been replaced.');
+
+    // Add another file to the article node. Get validation error.
+    $result = $this->servicesPostFile($this->endpoint->path . '/node/' . $node->nid . '/attach_file',
+      array($testfile1->uri), array(), array('field_name' => 'field_image'));
+    $this->assertEqual($result['body'], 'You cannot upload so many files.', 'Validation on cardinality works.');
+
+    // Update field info. Set cardinality 2.
+    $field_info = field_read_field('field_image');
+    $field_info['cardinality'] = 2;
+    field_update_field($field_info);
+
+    // Upload multiple files.
+    $result = $this->servicesPostFile($this->endpoint->path . '/node/' . $node->nid . '/attach_file',
+      array($testfile1->uri, $testfile2->uri), array(), array('field_name' => 'field_image', 'attach' => FALSE));
+    $node = node_load($node->nid, TRUE);
+    $this->assertTrue(($testfile1->filename == $node->field_image[LANGUAGE_NONE][0]['filename']) &&
+                      ($testfile2->filename == $node->field_image[LANGUAGE_NONE][1]['filename']), 'Multiple files uploaded.');
+
+    // Verify total file count == 2 and also proper delta sequence in db.
+    $query = db_select('field_data_field_image', 'fd');
+    $deltas = $query->condition('entity_type', 'node')
+      ->condition('bundle', $node->type)
+      ->condition('entity_id', $node->nid)
+      ->fields('fd', array('delta'))
+      ->execute()
+      ->fetchCol(0);
+    $this->assertTrue($deltas == array(0,1), 'Attached file deltas are sequential.');
+  }
+
+  /**
+   *  Helper function to perform node updates.
+   *
+   *  @parm $exclude_type
+   *    Integer how should the type value be treated.
+   */
+  function update_node($exclude_type) {
+    $node = $this->drupalCreateNode();
+    $node_update = (array) $node;
+    $node_update['title'] = $this->randomName();
+    $node_update['body'][LANGUAGE_NONE][0]['value'] = $this->randomName();
+
+    if ($exclude_type == SERVICES_NODE_TYPE_EMPTY) {
+      $node_update['type'] = '';
+    }
+    elseif($exclude_type == SERVICES_NODE_TYPE_REMOVED) {
+      unset($node_update['type']);
+    }
+
+    $responseArray = $this->servicesPut($this->endpoint->path . '/node/' . $node->nid, $node_update);
+    // Load node not from cache.
+    $nodeAfterUpdate = node_load($responseArray['body']['nid'], NULL, TRUE);
+    $this->assertTrue(isset($nodeAfterUpdate->nid), 'Node was successfully updated', 'NodeResource: Updated');
+    $this->assertEqual($nodeAfterUpdate->title, $node_update['title'], 'Title is the same', 'NodeResource: Update');
+    $this->assertEqual($nodeAfterUpdate->body[LANGUAGE_NONE][0]['value'], $node_update['body'][LANGUAGE_NONE][0]['value'],
+      'Body is the same', 'NodeResource: Update');
+  }
+
+  /**
+   * Testing node_resource Update.
+   */
+  public function testEndpointResourceNodeUpdate() {
+    // Create and log in our privileged user.
+    $this->privilegedUser = $this->drupalCreateUser(array(
+      'administer services',
+      'bypass node access',
+    ));
+    $this->drupalLogin($this->privilegedUser);
+
+    $this->update_node(SERVICES_NODE_TYPE_INCLUDE);
+    $this->update_node(SERVICES_NODE_TYPE_EMPTY);
+    $this->update_node(SERVICES_NODE_TYPE_REMOVED);
+  }
+
+  /**
+   * Testing node_resource Update (Legacy).
+   *
+   * TODO: To be removed in future version.
+   * @see http://drupal.org/node/1083242
+   */
+  public function testEndpointResourceNodeUpdateLegacy() {
+    // Create and log in our privileged user.
+    $this->privilegedUser = $this->drupalCreateUser(array(
+      'administer services',
+      'bypass node access',
+    ));
+    $this->drupalLogin($this->privilegedUser);
+    $node = $this->drupalCreateNode();
+
+    $node_update = (array) $node;
+    $node_update['title'] = $this->randomName();
+    $node_update['body'][LANGUAGE_NONE][0]['value'] = $this->randomName();
+
+    $responseArray = $this->servicesPut($this->endpoint->path . '/node/' . $node->nid, array('node' => $node_update));
+    // Load node not from cache.
+    $nodeAfterUpdate = node_load($responseArray['body']['nid'], NULL, TRUE);
+    $this->assertTrue(isset($nodeAfterUpdate->nid), 'Node was successfully updated', 'NodeResource: Updated (legacy)');
+    $this->assertEqual($nodeAfterUpdate->title, $node_update['title'], 'Title is the same', 'NodeResource: Update (legacy)');
+    $this->assertEqual($nodeAfterUpdate->body[LANGUAGE_NONE][0]['value'], $node_update['body'][LANGUAGE_NONE][0]['value'],
+      'Body is the same', 'NodeResource: Update (legacy)');
+  }
+
+  /**
+  * testing node_resource Update fail with no permissions
+  */
+  public function testEndpointResourceNodeUpdatePermFail() {
+    // Create and log in our privileged user.
+    $this->privilegedUser = $this->drupalCreateUser(array(
+      'administer services',
+      'create page content',
+      'edit own page content',
+    ));
+    $this->drupalLogin($this->privilegedUser);
+
+    // Create node from user no 1.
+    $node = $this->drupalCreateNode(array('uid' => 1));
+
+    // Try to update this node with different user not
+    // having permission to edit any story content.
+    $node_update = (array) $node;
+    $node_update['title'] = $this->randomName();
+    $node_update['body'][LANGUAGE_NONE][0]['value'] = $this->randomName();
+
+    $responseArray = $this->servicesPut($this->endpoint->path . '/node/' . $node->nid, array('node' => $node_update));
+
+    $this->assertTrue(strpos($responseArray['status'], 'Access denied for user'),
+      'Updating the node failed without needed permissions. This is good!', 'NodeResource: Update');
+  }
+
+  /**
+   * testing node_resource Update verify missing title
+   */
+  public function testEndpointResourceNodeUpdateMissingTitle() {
+    // Create and log in our privileged user.
+    $this->privilegedUser = $this->drupalCreateUser(array(
+      'administer services',
+      'bypass node access',
+    ));
+    $this->drupalLogin($this->privilegedUser);
+    $node = $this->drupalCreateNode();
+    $node_update = array(
+      'title' => '',
+      'body' => array(LANGUAGE_NONE => array(array('value' => $this->randomString()))),
+      'name' => $this->privilegedUser->name,
+      'type' => 'page',
+    );
+
+    $responseArray = $this->servicesPut($this->endpoint->path . '/node/' . $node->nid, array('node' => $node_update));
+    $this->assertTrue(strpos($responseArray['status'], 'Title field is required.'),
+      'Node was not updated without title.', 'NodeResource: Update');
+  }
+
+  /**
+   * testing node_resource Delete
+   */
+  public function testEndpointResourceNodeDelete() {
+    // Create and log in our privileged user.
+    $this->privilegedUser = $this->drupalCreateUser(array(
+      'administer services',
+      'bypass node access',
+    ));
+    $this->drupalLogin($this->privilegedUser);
+    $node = $this->drupalCreateNode();
+    $data = '';
+
+    $responseArray = $this->servicesDelete($this->endpoint->path . '/node/' . $node->nid, $data);
+    $deleted_node = node_load($node->nid, NULL, TRUE);
+    $this->assertTrue(empty($deleted_node), 'Node was deleted.', 'NodeResource: Deleted');
+
+    $responseArray = $this->servicesDelete($this->endpoint->path . '/node/' . $node->nid, $data);
+
+    $this->assertFalse($responseArray['code'] == 200,
+      'Node was deleted. It shoudlnt have been because it doesnt exist', 'NodeResource: Deleted');
+  }
+}
+
+/**
+ * Test create node with taxonomy terms attached.
+ */
+class ServicesResourceNodeTaxonomytests extends ServicesWebTestCase {
+  // Class variables
+  protected $admin_user = NULL ;
+  // Endpoint details.
+  protected $endpoint = NULL;
+  // Field instance.
+  protected $instance = NULL;
+
+  /**
+   * Implementation of getInfo().
+   */
+  public static function getInfo() {
+    return array(
+      'name' => 'Resource Node - taxonomy',
+      'description' => 'Test the resource Node taxonomy methods and actions.',
+      'group' => 'Services',
+    );
+  }
+
+  /**
+   * Implementation of setUp().
+   */
+  public function setUp() {
+    parent::setUp(
+      'ctools',
+      'services',
+      'rest_server',
+      'taxonomy'
+    );
+
+    $this->admin_user = $this->drupalCreateUser(array('administer taxonomy', 'bypass node access', 'administer services'));
+    $this->drupalLogin($this->admin_user);
+    $this->vocabulary = $this->createVocabulary();
+
+    $field = array(
+      'field_name' => 'taxonomy_' . $this->vocabulary->machine_name,
+      'type' => 'taxonomy_term_reference',
+      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
+      'settings' => array(
+        'allowed_values' => array(
+          array(
+            'vocabulary' => $this->vocabulary->machine_name,
+            'parent' => 0,
+          ),
+        ),
+      ),
+    );
+    field_create_field($field);
+
+    $this->instance = array(
+      'field_name' => 'taxonomy_' . $this->vocabulary->machine_name,
+      'bundle' => 'article',
+      'entity_type' => 'node',
+      'widget' => array(
+        'type' => 'options_select',
+      ),
+      'display' => array(
+        'default' => array(
+          'type' => 'taxonomy_term_reference_link',
+        ),
+      ),
+    );
+    field_create_instance($this->instance);
+
+    $this->endpoint =  $this->saveNewEndpoint();
+  }
+
+  /**
+   * Test that hook_node_$op implementations work correctly.
+   *
+   * Save & edit a node and assert that taxonomy terms are saved/loaded properly.
+   */
+  function testServicesTaxonomyNode() {
+    // Create two taxonomy terms.
+    $term1 = $this->createTerm($this->vocabulary);
+    $term2 = $this->createTerm($this->vocabulary);
+    $field_name = $this->instance['field_name'];
+
+    // Post an article.
+    $edit = array();
+    $langcode = LANGUAGE_NONE;
+    $edit['title'] = $this->randomName();
+    $edit["body[$langcode][0][value]"] = $this->randomName();
+    $edit[$field_name][$langcode][0] = $term1->tid;
+    $edit['type'] = 'page';
+    $edit['name'] = $this->admin_user->name;
+    $edit['language'] = LANGUAGE_NONE;
+    $responseArray = $this->servicesPost($this->endpoint->path . '/node', array('node' => $edit));
+
+    $nodeResourceCreateReturn = $responseArray['body'];
+    $this->assertTrue(isset($nodeResourceCreateReturn['nid']), 'Node was successfully created', 'NodeResource: Create');
+    $newNode = node_load($nodeResourceCreateReturn['nid']);
+    $this->assertTrue($newNode->{$field_name}[$langcode][0]['tid'] =  $term1->tid, 'Term was the same', 'Taxonomy: Create');
+
+    // Edit the node with a different term.
+    $edit[$field_name][$langcode][0] = $term2->tid;
+    $responseArray = $this->servicesPost($this->endpoint->path . '/node', array('node' => $edit));
+    $nodeResourceCreateReturn = $responseArray['body'];
+    $this->assertTrue(isset($nodeResourceCreateReturn['nid']), 'Node was successfully created', 'NodeResource: Create');
+    $newNode = node_load($nodeResourceCreateReturn['nid']);
+    $this->assertTrue($newNode->{$field_name}[$langcode][0]['tid'] =  $term2->tid, 'Term was the same', 'Taxonomy: updated');
+  }
+
+  /**
+   * Returns a new vocabulary with random properties.
+   */
+  function createVocabulary() {
+    // Create a vocabulary.
+    $vocabulary = new stdClass();
+    $vocabulary->name = $this->randomName();
+    $vocabulary->description = $this->randomName();
+    $vocabulary->machine_name = drupal_strtolower($this->randomName());
+    $vocabulary->help = '';
+    $vocabulary->nodes = array('article' => 'article');
+    $vocabulary->weight = mt_rand(0, 10);
+    taxonomy_vocabulary_save($vocabulary);
+    return $vocabulary;
+  }
+
+  /**
+   * Returns a new term with random properties in vocabulary $vid.
+   */
+  function createTerm($vocabulary) {
+    $term = new stdClass();
+    $term->name = $this->randomName();
+    $term->description = $this->randomName();
+    // Use the first available text format.
+    $term->format = db_query_range('SELECT format FROM {filter_format}', 0, 1)->fetchField();
+    $term->vid = $vocabulary->vid;
+    taxonomy_term_save($term);
+    return $term;
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesResourceSystemTests.test drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesResourceSystemTests.test
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesResourceSystemTests.test	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesResourceSystemTests.test	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,122 @@
+<?php
+// $Id: ServicesResourceSystemTests.test,v 1.1.2.1 2011/01/19 00:34:49 ocyrus Exp $
+
+/**
+ * @file
+ * Call the endpoint tests when no authentication is being used.
+ *
+ */
+
+/**
+ * Run test cases for the endpoint with no authentication turned on.
+ *
+ */
+class ServicesResourceSystemTests extends ServicesWebtestCase {
+  // Class variables
+  protected $privileged_user = NULL ;
+  // Endpoint details.
+  protected $endpoint = NULL;
+
+  /**
+   * Implementation of setUp().
+   */
+  public function setUp() {
+    parent::setUp(
+      'ctools',
+      'services',
+      'rest_server'
+    );
+    // Set up endpoint.
+    $this->endpoint =  $this->saveNewEndpoint();
+    // Set up privileged user and login.
+    $this->privileged_user = $this->drupalCreateUser(array('get a system variable', 'set a system variable'));
+    $this->drupalLogin($this->privileged_user);
+  }
+
+  /**
+   * Implementation of getInfo().
+   */
+  public static function getInfo() {
+    return array(
+      'name'        => 'Resource System',
+      'description' => 'Test the resource System methods.',
+      'group'       => 'Services',
+    );
+  }
+
+  /**
+   * Test connect method.
+   */
+  function testSystemConnect() {
+    $path = $this->endpoint->path;
+    // Call as authenticated user.
+    $response = $this->servicesPost($path . '/system/connect');
+    $response_user = $response['body']->user;
+    $this->assertEqual($response_user->uid, $this->privileged_user->uid, 'User account received for authenticated user.', 'SystemResource: Connect');
+
+    $this->drupalLogout();
+    // Call as anonymous user.
+    $response = $this->servicesPost($path . '/system/connect');
+    $response_user = $response['body']->user;
+    $this->assertEqual($response_user->uid, 0, 'User account received for anonymous user.', 'SystemResource: Connect');
+  }
+
+  /**
+   * Test get_variable method.
+   */
+  function testSystemGetVariable() {
+    $path = $this->endpoint->path;
+
+    $name = $this->randomName();
+    $value = $this->randomString();
+    variable_set($name, $value);
+
+    // Get already set variable.
+    $response = $this->servicesPost($path . '/system/get_variable', array('name' => $name, 'default' => $this->randomString()));
+    $this->assertEqual($value, $response['body'], 'Variable get value.', 'SystemResource: get_variable');
+
+    $name = $this->randomName();
+    $default = $this->randomString();
+
+    // Get not defined variable. Ensure we get back default value.
+    $response = $this->servicesPost($path . '/system/get_variable', array('name' => $name, 'default' => $default));
+    $this->assertEqual($default, $response['body'], 'Variable get value default.', 'SystemResource: get_variable');
+  }
+
+  /**
+   * Test set_variable method.
+   */
+  function testSystemSetVariable() {
+    $path = $this->endpoint->path;
+
+    $name = $this->randomName();
+    $value = $this->randomString();
+
+    $response = $this->servicesPost($path . '/system/set_variable', array('name' => $name, 'value' => $value));
+
+    // We can't use variable_get as variables get cached to global variable.
+    $variable = unserialize(db_query('SELECT value FROM {variable} WHERE name = :name', array(':name' => $name))->fetchField());
+
+    $this->assertEqual($value, $variable, 'Variable set value.', 'SystemResource: set_variable');
+  }
+
+  /**
+   * Test set_variable method.
+   */
+  function testSystemDelVariable() {
+    $path = $this->endpoint->path;
+
+    // Set a random variable.
+    $name = $this->randomName();
+    $value = $this->randomString();
+    variable_set($name, $value);
+
+    // Delete the variable via del_variable.
+    $response = $this->servicesPost($path . '/system/del_variable', array('name' => $name));
+
+    // We can't use variable_get as variables get cached to global variable.
+    $newvalue = $this->randomString();
+    $response = $this->servicesPost($path . '/system/get_variable', array('name' => $name, 'default' => $newvalue));
+    $this->assertEqual($newvalue, $response['body'], 'Variable deleted.', 'SystemResource: get_variable');
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesResourceTaxonomyTests.test drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesResourceTaxonomyTests.test
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesResourceTaxonomyTests.test	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesResourceTaxonomyTests.test	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,672 @@
+<?php
+/**
+ * @file
+ * Call the endpoint tests when no authentication is being used.
+ */
+
+/**
+ * Taxonomy resource test class.
+ */
+class ServicesResourceTaxonomyTests extends ServicesWebtestCase {
+  // Class variables
+  protected $privileged_user = NULL ;
+  // Endpoint details.
+  protected $endpoint = NULL;
+
+  /**
+   * Implementation of setUp().
+   */
+  public function setUp() {
+    parent::setUp(
+      'ctools',
+      'services',
+      'rest_server'
+    );
+    // Set up endpoint.
+    $this->endpoint =  $this->saveNewEndpoint();
+    // Set up privileged user and login.
+    $this->privileged_user = $this->drupalCreateUser(array('administer taxonomy', 'access content'));
+    $this->drupalLogin($this->privileged_user);
+  }
+
+  /**
+   * Implementation of getInfo().
+   */
+  public static function getInfo() {
+   return array(
+     'name'        => 'Resource Taxonomy',
+     'description' => 'Test the resource Taxonomy methods and actions.',
+     'group'       => 'Services',
+   );
+  }
+    public function testTaxonomyVocabularyIndex() {
+    // Create and log in our privileged user.
+    $this->privilegedUser = $this->drupalCreateUser(array(
+      'administer services',
+    ));
+    $this->drupalLogin($this->privilegedUser);
+
+
+    // Create a set of taxonomy vocabularys. The taxonomy resource returns 20 vocabularys at a time,
+    // so we create two pages and a half worth.
+    $vocabularys = array();
+    $count = 50;
+    for ($i = 0; $i < $count; $i++) {
+      $vocabulary = $this->createVocabulary();
+      $vocabularys[$vocabulary['vid']] = $vocabulary;
+    }
+    $vocabulary = taxonomy_vocabulary_load(1);
+    $vocabularys[1] = (array) $vocabulary;
+    // Get the content.
+    $page_count = ceil(count($vocabularys) / 20);
+    $retrieved_terms = array();
+    for ($page = 0; $page < $page_count; $page++) {
+      $responseArray = $this->servicesGet($this->endpoint->path . '/taxonomy_vocabulary', array('page' => $page, 'fields' => 'vid,name'));
+      $this->assertTrue(count($responseArray['body']) <= 20, 'Correct number of items returned');
+
+      // Store the returned comment IDs.
+      foreach ($responseArray['body'] as $vocabulary) {
+        if (isset($retrieved_vocabularys[$vocabulary->vid])) {
+          $this->fail(format_string('Duplicate vocabulary @vid returned.', array('@vid' => $vocabulary->vid)));
+        }
+        $retrieved_vocabularys[$vocabulary->vid] = TRUE;
+
+        $this->assertTrue($vocabularys[$vocabulary->vid]['name'] == $vocabulary->name,
+          'Successfully received vocabulary Name info', 'TaxonomyVocabularyResource: Index');
+      }
+    }
+    // We should have got all the comments.
+    $expected_vids = array_keys($vocabularys);
+    sort($expected_vids);
+    $retrieved_vids = array_keys($retrieved_vocabularys);
+    sort($retrieved_vids);
+    $this->assertEqual($expected_vids, $retrieved_vids, 'Retrieved all vocabularys');
+
+    // The n+1 page should be empty.
+    $responseArray = $this->servicesGet($this->endpoint->path . '/taxonomy_vocabulary', array('page' => $page_count + 1));
+    $this->assertEqual(count($responseArray['body']), 0, 'The n+1 page is empty');
+  }
+  public function testTaxonomyTermIndex() {
+    // Create and log in our privileged user.
+    $this->privilegedUser = $this->drupalCreateUser(array(
+      'administer services',
+    ));
+    $this->drupalLogin($this->privilegedUser);
+
+
+    // Create a set of taxonomy terms. The taxonomy resource returns 20 terms at a time,
+    // so we create two pages and a half worth.
+    $terms = array();
+    $count = 50;
+    $vocabulary = $this->createVocabulary();
+    for ($i = 0; $i < $count; $i++) {
+      $term = $this->createTerm($vocabulary['vid']);
+      $terms[$term['tid']] = $term;
+    }
+    
+    // Get the content.
+    $page_count = ceil(count($terms) / 20);
+    $retrieved_terms = array();
+    for ($page = 0; $page < $page_count; $page++) {
+      $responseArray = $this->servicesGet($this->endpoint->path . '/taxonomy_term', array('page' => $page, 'fields' => 'tid,name'));
+      $this->assertTrue(count($responseArray['body']) <= 20, 'Correct number of items returned');
+
+      // Store the returned comment IDs.
+      foreach ($responseArray['body'] as $term) {
+        if (isset($retrieved_terms[$term->tid])) {
+          $this->fail(format_string('Duplicate term @tid returned.', array('@tid' => $term->tid)));
+        }
+        $retrieved_terms[$term->tid] = TRUE;
+
+        $this->assertTrue($terms[$term->tid]['name'] == $term->name, 'Successfully received Term Name info', 'TaxonomyTermResource: Index');
+      }
+    }
+    // We should have got all the comments.
+    $expected_tids = array_keys($terms);
+    sort($expected_tids);
+    $retrieved_tids = array_keys($retrieved_terms);
+    sort($retrieved_tids);
+    $this->assertEqual($expected_tids, $retrieved_tids, 'Retrieved all terms');
+
+    // The n+1 page should be empty.
+    $responseArray = $this->servicesGet($this->endpoint->path . '/taxonomy_term', array('page' => $page_count + 1));
+    $this->assertEqual(count($responseArray['body']), 0, 'The n+1 page is empty');
+    taxonomy_vocabulary_delete($vocabulary['vid']);
+  }
+
+  /**
+   * Test taxonomy vocabulary create method.
+   */
+  function testVocabularyCreate() {
+    $path = $this->endpoint->path;
+
+    $vocabulary = array(
+      'name'        => $this->randomName(),
+      'machine_name'=> $this->randomName(),
+      'description' => $this->randomString(),
+      'hierarchy'   => 1,
+      'module'      => 'services',
+      'weight'      => 0,
+    );
+
+    $response = $this->servicesPost($path . '/taxonomy_vocabulary', $vocabulary);
+
+    $query = db_select('taxonomy_vocabulary', 'v')
+      ->fields('v', array('vid'))
+      ->condition('v.name', $vocabulary['name']);
+    $vid = $query->execute()->fetchField();
+
+    $vocabulary_load = (array)taxonomy_vocabulary_load($vid);
+    $vocabulary_intersect = array_intersect_assoc($vocabulary, $vocabulary_load);
+
+    $this->assertEqual($vocabulary, $vocabulary_intersect, 'Taxonomy vocabulary created properly.', 'TaxonomyVocabularyResource: Create');
+  }
+
+  /**
+   * Test taxonomy vocabulary create method (Legacy).
+   *
+   * TODO: To be removed in future version.
+   * @see http://drupal.org/node/1083242
+   */
+  function testVocabularyCreateLegacy() {
+    $path = $this->endpoint->path;
+
+    $vocabulary = array(
+      'name'        => $this->randomName(),
+      'machine_name'=> $this->randomName(),
+      'description' => $this->randomString(),
+      'hierarchy'   => 1,
+      'module'      => 'services',
+      'weight'      => 0,
+    );
+
+    $response = $this->servicesPost($path . '/taxonomy_vocabulary', array('vocabulary' => $vocabulary));
+
+    $query = db_select('taxonomy_vocabulary', 'v')
+      ->fields('v', array('vid'))
+      ->condition('v.name', $vocabulary['name']);
+    $vid = $query->execute()->fetchField();
+
+    $vocabulary_load = (array)taxonomy_vocabulary_load($vid);
+    $vocabulary_intersect = array_intersect_assoc($vocabulary, $vocabulary_load);
+
+    $this->assertEqual($vocabulary, $vocabulary_intersect, 'Taxonomy vocabulary created properly.', 'TaxonomyVocabularyResource: Create (Legacy)');
+  }
+
+  /**
+   * Test taxonomy vocabulry retrieve method.
+   */
+  function testVocabularyRetrieve() {
+    $path = $this->endpoint->path;
+
+    $vocabulary = $this->createVocabulary();
+    $vid = $vocabulary['vid'];
+
+    $response = $this->servicesGet($path . '/taxonomy_vocabulary/' . $vid);
+    $vocabulary_retrieve = (array)$response['body'];
+
+    $vocabulary_intersect = array_intersect_assoc($vocabulary, $vocabulary_retrieve);
+
+    $this->assertEqual($vocabulary, $vocabulary_intersect, 'Taxonomy vocabulary retrieved properly.', 'TaxonomyVocabularyResource: Retrieve');
+  }
+
+  /**
+   * Test taxonomy vocabulary update.
+   */
+  function testVocabularyUpdate() {
+    $path = $this->endpoint->path;
+
+    $vocabulary = $this->createVocabulary();
+    $vid = $vocabulary['vid'];
+
+    $vocabulary['name'] = $this->randomName();
+    $vocabulary['description'] = $this->randomString();
+
+    $response = $this->servicesPUT($path . '/taxonomy_vocabulary/' . $vid, $vocabulary);
+
+    // Load vocabulary from database. We use entity_load to reset static cache.
+    $vocabularies_load = entity_load('taxonomy_vocabulary', array($vid), array(), TRUE);
+    $vocabulary_load = (array)array_pop($vocabularies_load);
+
+    $vocabulary_intersect = array_intersect_assoc($vocabulary, $vocabulary_load);
+    $this->assertEqual($vocabulary, $vocabulary_intersect, 'Taxonomy vocabulary updated properly.', 'TaxonomyVocabularyResource: Update');
+  }
+
+  /**
+   * Test taxonomy vocabulary update (Legacy).
+   *
+   * TODO: To be removed in future version.
+   * @see http://drupal.org/node/1083242
+   */
+  function testVocabularyUpdateLegacy() {
+    $path = $this->endpoint->path;
+
+    $vocabulary = $this->createVocabulary();
+    $vid = $vocabulary['vid'];
+
+    $vocabulary['name'] = $this->randomName();
+    $vocabulary['description'] = $this->randomString();
+
+    $response = $this->servicesPUT($path . '/taxonomy_vocabulary/' . $vid, array('vocabulary' => $vocabulary));
+
+    // Load vocabulary from database. We use entity_load to reset static cache.
+    $vocabularies_load = entity_load('taxonomy_vocabulary', array($vid), array(), TRUE);
+    $vocabulary_load = (array)array_pop($vocabularies_load);
+
+    $vocabulary_intersect = array_intersect_assoc($vocabulary, $vocabulary_load);
+    $this->assertEqual($vocabulary, $vocabulary_intersect,
+      'Taxonomy vocabulary updated properly.', 'TaxonomyVocabularyResource: Update (Legacy)');
+  }
+
+  /**
+   * Test taxonomy vocabulary delete method.
+   */
+  function testVocabularyDelete() {
+    $path = $this->endpoint->path;
+    $vocabulary = $this->createVocabulary();
+    $vid = $vocabulary['vid'];
+
+    $this->servicesDelete($path . '/taxonomy_vocabulary/' . $vid);
+
+    // Load vocabulary from database. We use entity_load to reset static cache.
+    $vocabularies_load = entity_load('taxonomy_vocabulary', array($vid), array(), TRUE);
+    $vocabulary_load = (array)array_pop($vocabularies_load);
+
+    $this->assertTrue(empty($vocabulary_load), 'Taxonomy vocabulary deleted properly.', 'TaxonomyVocabularyResource: Delete');
+  }
+
+  /**
+   * Test taxonomy vocabulary getTree method.
+   */
+  function testVocabularyGetTree() {
+    $path = $this->endpoint->path;
+    $vocabulary = $this->createVocabulary();
+    $vid = $vocabulary['vid'];
+
+    $part_tree_parent = 0;
+
+    // Generate taxonomy tree.
+    for ($i = 0; $i < 10; $i++) {
+      $query = db_select('taxonomy_term_data', 'td')
+        ->fields('td', array('tid'))
+        ->condition('td.vid', $vid)
+        ->orderRandom()
+        ->range(0,1);
+      $tid = $query->execute()->fetchField();
+      $parent = rand(0, 1) * $tid;
+      $edit = (object)array(
+        'name'    => $this->randomName(),
+        'parent'  => $parent,
+        'vid'     => $vid,
+      );
+      taxonomy_term_save($edit);
+
+      if (!empty($parent)) {
+        $part_tree_parent = $parent;
+      }
+    }
+    // Add term as grandchild to test maxdepth.
+    $children = taxonomy_get_children($part_tree_parent);
+    $edit = (object)array(
+      'name'    => $this->randomName(),
+      'parent'  => key($children),
+      'vid'     => $vid,
+    );
+    taxonomy_term_save($edit);
+
+    // Compare full tree.
+    $vocabulary_tree = taxonomy_get_tree($vid);
+    $response = $this->servicesPost($path . '/taxonomy_vocabulary/getTree', array('vid' => $vid));
+    $vocabulary_tree_response = $response['body'];
+    $this->assertEqual($vocabulary_tree, $vocabulary_tree_response,
+      'Vocabulary full tree received properly.', 'TaxonomyVocabularyResource: getTree');
+
+    // Compare full tree with loading of full entities.
+    $vocabulary_tree = taxonomy_get_tree($vid, 0, NULL, TRUE);
+    $response = $this->servicesPost($path . '/taxonomy_vocabulary/getTree', array('vid' => $vid, 'load_entities' => 1));
+    $vocabulary_tree_response = $response['body'];
+    $this->assertEqual($vocabulary_tree, $vocabulary_tree_response,
+      'Vocabulary full tree with loaded entities received properly.', 'TaxonomyVocabularyResource: getTree');
+
+    // Compare part tree.
+    $vocabulary_tree = taxonomy_get_tree($vid, $part_tree_parent);
+    $response = $this->servicesPost($path . '/taxonomy_vocabulary/getTree',
+      array('vid' => $vid, 'parent' => $part_tree_parent));
+    $vocabulary_tree_response = $response['body'];
+    $this->assertEqual($vocabulary_tree, $vocabulary_tree_response,
+      'Vocabulary part tree received properly.', 'TaxonomyVocabularyResource: getTree');
+
+    // Compare part tree with maxdepth = 1.
+    $vocabulary_tree = taxonomy_get_tree($vid, $part_tree_parent, 1);
+    $response = $this->servicesPost($path . '/taxonomy_vocabulary/getTree',
+      array('vid' => $vid, 'parent' => $part_tree_parent, 'maxdepth' => 1));
+    $vocabulary_tree_response = $response['body'];
+    $this->assertEqual($vocabulary_tree, $vocabulary_tree_response,
+      'Vocabulary part tree with depth received properly.', 'TaxonomyVocabularyResource: getTree');
+
+    // Compare part tree with maxdepth = 1 and loading of full entities.
+    $vocabulary_tree = taxonomy_get_tree($vid, $part_tree_parent, 1, TRUE);
+    $response = $this->servicesPost($path . '/taxonomy_vocabulary/getTree',
+      array('vid' => $vid, 'parent' => $part_tree_parent, 'maxdepth' => 1, 'load_entities' => 1));
+    $vocabulary_tree_response = $response['body'];
+    $this->assertEqual($vocabulary_tree, $vocabulary_tree_response,
+      'Vocabulary part tree with depth and loaded entities received properly.', 'TaxonomyVocabularyResource: getTree');
+  }
+
+  /**
+   * Test taxonomy term create method.
+   */
+  function testTermCreate() {
+    $path = $this->endpoint->path;
+
+    $vocabulary = $this->createVocabulary();
+
+    $term = array(
+      'vid' => $vocabulary['vid'],
+      'name' => $this->randomName(),
+      'description' => $this->randomString(),
+      'weight' => rand(0, 100),
+      'parent' => NULL,
+    );
+
+    $response = $this->servicesPost($path . '/taxonomy_term', $term);
+
+    // Load term by name.
+    $term_by_name = (array)current(taxonomy_get_term_by_name($term['name']));
+    $term_intersect = array_intersect_assoc($term, $term_by_name);
+
+    // As term_intersect will not have parent, we unset this property.
+    $term_data = $term;
+    unset($term_data['parent']);
+
+    $this->assertEqual($term_data, $term_intersect, 'Taxonomy term created properly.', 'TaxonomyTermResource: Create');
+  }
+
+  /**
+   * Test taxonomy term create method (Legacy).
+   *
+   * TODO: To be removed in future version.
+   * @see http://drupal.org/node/1083242
+   */
+  function testTermCreateLegacy() {
+    $path = $this->endpoint->path;
+
+    $vocabulary = $this->createVocabulary();
+
+    $term = array(
+      'vid' => $vocabulary['vid'],
+      'name' => $this->randomName(),
+      'description' => $this->randomString(),
+      'weight' => rand(0, 100),
+      'parent' => NULL,
+    );
+
+    $response = $this->servicesPost($path . '/taxonomy_term', array('term' => $term));
+
+    // Load term by name.
+    $term_by_name = (array)current(taxonomy_get_term_by_name($term['name']));
+    $term_intersect = array_intersect_assoc($term, $term_by_name);
+
+    // As term_intersect will not have parent, we unset this property.
+    $term_data = $term;
+    unset($term_data['parent']);
+
+    $this->assertEqual($term_data, $term_intersect,
+      'Taxonomy term created properly.', 'TaxonomyTermResource: Create (Legacy)');
+  }
+
+  /**
+   * Test taxonomy term retrieve method.
+   */
+  function testTermRetrieve() {
+    $path = $this->endpoint->path;
+
+    $vocabulary = $this->createVocabulary();
+    $term = $this->createTerm($vocabulary['vid']);
+
+    $response = $this->servicesGet($path . '/taxonomy_term/' . $term['tid']);
+    $term_retrieve = (array)$response['body'];
+
+    $this->assertEqual($term_retrieve, $term, 'Taxonomy term retrieved properly.', 'TaxonomyTermResource: Retrieve');
+  }
+
+  /**
+   * Test taxonomy term update method.
+   */
+  function testTermUpdate() {
+    $path = $this->endpoint->path;
+
+    $vocabulary = $this->createVocabulary();
+    $term = $this->createTerm($vocabulary['vid']);
+
+    $term_update_data = array(
+      'name' => $this->randomName(),
+      'vid'  => $term['vid'],
+    );
+
+    $this->servicesPut($path . '/taxonomy_term/' . $term['tid'], $term_update_data);
+
+    $term_update = (array)current(entity_load('taxonomy_term', array($term['tid']), array(), TRUE));
+
+    // Ensure that terms have different names but same tid.
+    $this->assertTrue(($term['tid'] == $term_update['tid']) && ($term['name'] != $term_update['name']),
+      'Taxonomy term updated properly.', 'TaxonomyTermResource: Update');
+  }
+
+  /**
+   * Test taxonomy term update method (Legacy).
+   *
+   * TODO: To be removed in future version.
+   * @see http://drupal.org/node/1083242
+   */
+  function testTermUpdateLegacy() {
+    $path = $this->endpoint->path;
+
+    $vocabulary = $this->createVocabulary();
+    $term = $this->createTerm($vocabulary['vid']);
+
+    $term_update_data = array(
+      'name' => $this->randomName(),
+      'vid'  => $term['vid'],
+    );
+
+    $this->servicesPut($path . '/taxonomy_term/' . $term['tid'], array('term' => $term_update_data));
+
+    $term_update = (array)current(entity_load('taxonomy_term', array($term['tid']), array(), TRUE));
+
+    // Ensure that terms have different names but same tid.
+    $this->assertTrue(($term['tid'] == $term_update['tid']) && ($term['name'] != $term_update['name']),
+      'Taxonomy term updated properly.', 'TaxonomyTermResource: Update (Legacy)');
+  }
+
+  /**
+   * Test taxonomy term delete method.
+   */
+  function testTermDelete() {
+    $path = $this->endpoint->path;
+
+    $vocabulary = $this->createVocabulary();
+    $term = $this->createTerm($vocabulary['vid']);
+
+    $this->servicesDelete($path . '/taxonomy_term/' . $term['tid']);
+
+    $term_load = entity_load('taxonomy_term', array($term['tid']), array(), TRUE);
+    $this->assertTrue(empty($term_load), 'Taxonomy term deleted properly.', 'TaxonomyTermResource: Delete');
+  }
+
+  /**
+   * Test taxonomy term selectNodes method.
+   */
+  function testTermSelectNodes() {
+    $path = $this->endpoint->path;
+
+    $vocabulary = (object)array(
+      'name'        => $this->randomName(),
+      'machine_name'=> 'text_vocabulary',
+      'description' => $this->randomString(),
+      'help'        => $this->randomString(),
+      'relations'   => 1,
+      'hierarchy'   => 1,
+      'multiple'    => 1,
+      'required'    => 0,
+      'module'      => 'services',
+      'weight'      => 0,
+      'nodes'       => array('page' => 'page'),
+    );
+    taxonomy_vocabulary_save($vocabulary);
+
+    $query = db_select('taxonomy_vocabulary', 'v')
+      ->fields('v', array('vid'))
+      ->condition('v.name', $vocabulary->name);
+    $vid = $query->execute()->fetchField();
+
+    $term1 = $this->createTerm($vid);
+    $term2 = $this->createTerm($vid);
+
+    $nodes = array();
+    $nodes_term1  = array();
+    $nodes_term2 = array();
+    $nodes_term1_term2 = array();
+    $nodes_noterm = array();
+
+    $field_name = 'taxonomy_' . $vocabulary->machine_name;
+
+    // Create field for term.
+    $field = array(
+      'field_name' => $field_name,
+      'type' => 'taxonomy_term_reference',
+      'settings' => array(
+        'allowed_values' => array(
+          array(
+            'vocabulary' => $vocabulary->machine_name,
+            'parent' => 0,
+          ),
+        ),
+      ),
+    );
+    field_create_field($field);
+
+    $instance = array(
+      'field_name' => $field_name,
+      'entity_type' => 'node',
+      'label' => $vocabulary->name,
+      'bundle' => 'page',
+      'required' => TRUE,
+      'widget' => array(
+        'type' => 'options_select',
+      ),
+      'display' => array(
+        'default' => array(
+          'type' => 'taxonomy_term_reference_link',
+         'weight' => 10,
+        ),
+        'teaser' => array(
+          'type' => 'taxonomy_term_reference_link',
+         'weight' => 10,
+        ),
+      ),
+    );
+    field_create_instance($instance);
+
+    node_types_rebuild();
+
+    // Create 7 page nodes with term1 attached.
+    for ($i = 0; $i < 7; $i++) {
+      $node = $this->drupalCreateNode(array($field_name => array(LANGUAGE_NONE => array(array('tid' => $term1['tid'])))));
+      $nodes[$node->nid] = $node;
+      $nodes_term1[] = $node->nid;
+    }
+
+    // Create 7 page nodes with term2 attached.
+    for ($i = 0; $i < 7; $i++) {
+      $node = $this->drupalCreateNode(array($field_name => array(LANGUAGE_NONE => array(array('tid' => $term2['tid'])))));
+      $nodes[$node->nid] = $node;
+      $nodes_term2[] = $node->nid;
+    }
+
+    // Create 7 page nodes with both term1 and term2 attached.
+    for ($i = 0; $i < 7; $i++) {
+      $node = $this->drupalCreateNode(array($field_name => array(LANGUAGE_NONE => array(array('tid' => $term1['tid']), array('tid' => $term2['tid'])))));
+      $nodes[$node->nid] = $node;
+      $nodes_term1_term2[] = $node->nid;
+    }
+
+    // Create 7 page nodes without any terms.
+    for ($i = 0; $i < 7; $i++) {
+      $node = $this->drupalCreateNode();
+      $nodes[$node->nid] = $node;
+      $nodes_noterm[] = $node->nid;
+    }
+
+    // If pager is FALSE query is limited by 'feed_default_items' variable.
+    variable_set('feed_default_items', 100);
+
+    // Select 14 nodes with term1 attached.
+    $response = $this->servicesPost($path . '/taxonomy_term/selectNodes', array('tid' => $term1['tid'], 'pager' => FALSE));
+    $response_nodes = $this->getNodeNids($response['body']);
+    sort($response_nodes);
+
+    $term1_nodes = array_merge($nodes_term1, $nodes_term1_term2);
+    sort($term1_nodes);
+
+    $this->assertEqual($response_nodes, $term1_nodes, 'selectNodes selected proper nodes by one term.', 'TaxonomyTermResource: selectNodes');
+
+    // Ensure pager works.
+    $response = $this->servicesPost($path . '/taxonomy_term/selectNodes', array('tid' => $term1['tid'], 'pager' => TRUE));
+    $this->assertEqual(count($response['body']), 10, 'selectNodes pager works.', 'TaxonomyTermResource: selectNodes');
+
+    // AND or OR tests are not applicable as taxonomy_select_nodes() does not accept operators.
+  }
+
+  /**
+   * Helper. Create taxonomy vocabulary.
+   */
+  function createVocabulary() {
+    $vocabulary = (object)array(
+      'name'        => $this->randomName(),
+      'machine_name'=> $this->randomName(),
+      'description' => $this->randomString(),
+      'hierarchy'   => 1,
+      'module'      => 'services',
+      'weight'      => 0,
+    );
+    taxonomy_vocabulary_save($vocabulary);
+    $query = db_select('taxonomy_vocabulary', 'v')
+      ->fields('v', array('vid'))
+      ->condition('v.name', $vocabulary->name);
+    $vid = $query->execute()->fetchField();
+
+    return (array)taxonomy_vocabulary_load($vid);
+  }
+
+  /**
+   * Helper. Create taxonomy term.
+   */
+  function createTerm($vid) {
+    $term = (object)array(
+      'vid' => $vid,
+      'name' => $this->randomName(),
+      'description' => $this->randomString(),
+      'weight' => rand(0, 100),
+      'parent' => NULL,
+    );
+    taxonomy_term_save($term);
+
+    // Load term by name.
+    return (array)current(taxonomy_get_term_by_name($term->name));
+  }
+
+  /**
+   * Helper. Get array of nids from nodes array.
+   */
+  function getNodeNids($nodes) {
+    $nodes = (array)$nodes;
+    $return = array();
+    foreach ($nodes as $node) {
+      if (isset($node->nid)) {
+        $return[] = $node->nid;
+      }
+    }
+    return $return;
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesResourceUserTests.test drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesResourceUserTests.test
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesResourceUserTests.test	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesResourceUserTests.test	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,620 @@
+<?php
+// $Id: ServicesResourceUserTests.test,v 1.1.2.1 2011/01/19 00:34:49 ocyrus Exp $
+
+/**
+ * @file
+ * Call the endpoint tests when no authentication is being used.
+ *
+ */
+
+/**
+ * Run test cases for the endpoint with no authentication turned on.
+ *
+ */
+class ServicesResourceUsertests extends ServicesWebtestCase {
+  // Class variables
+  protected $privileged_user = NULL ;
+  // Endpoint details.
+  protected $endpoint = NULL;
+
+  /**
+   * Implementation of setUp().
+   */
+  public function setUp() {
+    parent::setUp(
+      'ctools',
+      'services',
+      'rest_server'
+    );
+    // Set up endpoint.
+    $this->endpoint =  $this->saveNewEndpoint();
+    // Set up privileged user and login.
+    $this->privileged_user = $this->drupalCreateUser(array('administer users', 'access user profiles'));
+    $this->regular_user = $this->drupalCreateUser(array('access user profiles'));
+    $this->drupalLogin($this->privileged_user);
+  }
+
+  /**
+   * Implementation of getInfo().
+   */
+  public static function getInfo() {
+   return array(
+     'name'        => 'Resource User',
+     'description' => 'Test the resource User methods and actions.',
+     'group'       => 'Services',
+   );
+  }
+
+  /**
+   * Test create method.
+   *
+   * Create user, load user, try ti create user without email.
+   */
+  function testCreateUser() {
+    // Create user.
+    $user = array();
+    $user['name']   = $this->randomName();
+    $user['mail']   = $user['name'] . '@example.com';
+    $user['pass']   = user_password();
+    $user['status'] = 1;
+
+    $response = $this->servicesPost($this->endpoint->path . '/user', $user);
+    $account = $response['body'];
+    $this->assertTrue(!empty($account['uid']), 'User has been create successfully.', 'UserResource: Create');
+
+    // Load user.
+    $user_load = user_load($account['uid']);
+    $this->assertTrue(!empty($user_load), 'Newly created user has been loaded successfully.', 'UserResource: Create');
+
+    // Try to create user without email.
+    $user = array();
+    $user['name']   = $this->randomName();
+    $user['pass']   = user_password();
+    $user['status'] = 1;
+    $response = $this->servicesPost($this->endpoint->path . '/user', $user);
+    $this->assertTrue(strpos($response['status'], 'E-mail address field is required') !== FALSE,
+      'It is not possible to create user without email.', 'UserResource: Create');
+  }
+
+  /**
+   * Test create method (Legacy).
+   *
+   * TODO: To be removed in future version.
+   * @see http://drupal.org/node/1083242
+   */
+  function testCreateUserLegacy() {
+    // Create user.
+    $user = array();
+    $user['name']   = $this->randomName();
+    $user['mail']   = $user['name'] . '@example.com';
+    $user['pass']   = user_password();
+    $user['status'] = 1;
+
+    $response = $this->servicesPost($this->endpoint->path . '/user', array('account' => $user));
+    $account = $response['body'];
+    $this->assertTrue(!empty($account['uid']), 'User has been create successfully.', 'UserResource: Create (Legacy)');
+
+    // Load user.
+    $user_load = user_load($account['uid']);
+    $this->assertTrue(!empty($user_load), 'Newly created user has been loaded successfully.', 'UserResource: Create (Legacy)');
+
+    // Try to create user without email.
+    $user = array();
+    $user['name']   = $this->randomName();
+    $user['pass']   = user_password();
+    $user['status'] = 1;
+    $response = $this->servicesPost($this->endpoint->path . '/user', array('account' => $user));
+    $this->assertTrue(strpos($response['status'], 'E-mail address field is required') !== FALSE,
+      'It is not possible to create user without email.', 'UserResource: Create (Legacy)');
+  }
+
+  /**
+   * Test register method.
+   *
+   * Register user, load user.
+   */
+  function testRegisterUser() {
+    // Verify logged out state can create users
+    $this->drupalLogout();
+
+    $user = array();
+    $user['name']   = $this->randomName();
+    $user['mail']   = $user['name'] . '@example.com';
+
+    $response = $this->servicesPost($this->endpoint->path . '/user/register', $user);
+    $account = $response['body'];
+
+    $this->assertTrue(!empty($account['uid']), 'User has been create successfully.', 'UserResource: Create');
+
+    // Load user.
+    $user_load = user_load($account['uid']);
+    $this->assertTrue(!empty($user_load), 'Newly created user has been loaded successfully.', 'UserResource: Create');
+  }
+
+  /**
+   * Test register method (Legacy).
+   *
+   * TODO: To be removed in future version.
+   * @see http://drupal.org/node/1083242
+   */
+  function testRegisterUserLegacy() {
+    //Verify logged out state can create users
+    $this->drupalLogout();
+
+    $user = array();
+    $user['name']   = $this->randomName();
+    $user['mail']   = $user['name'] . '@example.com';
+
+    $response = $this->servicesPost($this->endpoint->path . '/user/register', array('account' => $user));
+    $account = $response['body'];
+
+    $this->assertTrue(!empty($account['uid']), 'User has been create successfully.', 'UserResource: Create (Legacy)');
+
+    // Load user.
+    $user_load = user_load($account['uid']);
+    $this->assertTrue(!empty($user_load), 'Newly created user has been loaded successfully.', 'UserResource: Create (Legacy)');
+  }
+
+  /**
+   * Test retrieve method.
+   */
+  function testRetrieveUser() {
+    $response = $this->servicesGET($this->endpoint->path . '/user/' . $this->privileged_user->uid);
+    $account = $response['body'];
+
+    $users_are_the_same =  ($account->name == $this->privileged_user->name)
+                        && ($account->mail = $this->privileged_user->mail)
+                        && ($account->roles = $this->privileged_user->roles);
+    $this->assertTrue($users_are_the_same, 'Retrieved user is the same as created.', 'UserResource: Retrieve');
+  }
+  /**
+   * Test updateing a username with administer users permission #1853592.
+   *
+   * Create user, update email.
+   */
+  function testUpdateUserName() {
+    // Create user.
+    $account = $this->drupalCreateUser();
+	$name = $this->randomName();
+    // Update mail of the user.
+    $updated_account = array(
+      'name' => $name,
+    );
+    $response = $this->servicesPut($this->endpoint->path . '/user/' . $account->uid, $updated_account);
+
+    $user_load = user_load($account->uid);
+    $this->assertEqual($name, $user_load->name,
+      'You are allowed to change a username as administer users perm.',
+      'User Resource : Test to check for drupal.org issue #1853592');
+  }
+
+  /**
+   * Test update method.
+   *
+   * Check to see if a regular user can change another user's role.
+   */
+  function testUpdateUserRolesWithRegularAccount() {
+    // Create user.
+    $account = $this->drupalCreateUser();
+    $this->drupalLogout();
+    $this->drupalLogin($this->regular_user);
+    // Update the roles of the user.
+    $updated_account = array(
+      'mail' => $this->randomName() . '@example.com',
+      'pass' => $this->randomString(),
+      'roles' => array( 3 => 'adminstrator'),
+    );
+    $response = $this->servicesPut($this->endpoint->path . '/user/' . $account->uid, $updated_account);
+
+    $user_load = user_load($account->uid);
+    //verify they are not allowed.
+    $this->assertEqual($response['body'], 'Access denied for user ' . $this->regular_user->name,
+      'Regular user CANNOT update roles', 'UserResource: Update');
+  }
+
+  /**
+   * Test update own roles method.
+   *
+   * Check to see if a regular user can change their own role.
+   */
+  function testUpdateUserOwnUserRoles() {
+    // Create user with minimal permission
+    $account = $this->drupalCreateUser();
+    $this->drupalLogout();
+    // Login
+    $this->drupalLogin($account);
+
+    // Not strictly necessary but illustrates the problem
+    $role_name = $this->randomName();
+    $role_rid = $this->drupalCreateRole(array('administer users'), $role_name);
+
+    $user_load_before = user_load($account->uid);
+
+    // Update the roles of the user.
+    $updated_account = array(
+      'roles' => array($role_rid => $role_name),
+    );
+
+    $response = $this->servicesPut($this->endpoint->path . '/user/' . $account->uid, $updated_account);
+
+    $user_load_after = user_load($account->uid, TRUE);
+
+    $this->assertEqual($response['code'], 200, 'Update will should appear to succeed as the roles will be ignored', 'UserResource');
+
+    // The roles must remain unchanged
+    $this->assertEqual($response['body']['roles'], $user_load_before->roles, 'Response shows roles unchanged', 'UserResource');
+    $this->assertEqual($user_load_before->roles, $user_load_after->roles, 'User roles have not been changed', 'UserResource');
+  }
+
+  /**
+   * Test update method.
+   *
+   * Create user, update email.
+   */
+  function testUpdateUser() {
+    // Create user.
+    $account = $this->drupalCreateUser();
+
+    // Update mail of the user.
+    $updated_account = array(
+      'mail' => $this->randomName() . '@example.com',
+      'pass' => $this->randomString(),
+    );
+    $response = $this->servicesPut($this->endpoint->path . '/user/' . $account->uid, $updated_account);
+
+    $user_load = user_load($account->uid);
+    $this->assertEqual($updated_account['mail'], $user_load->mail,
+      'User details have been updated successfully', 'UserResource: Update');
+    $this->assertTrue(user_check_password($updated_account['pass'], $user_load),
+      'Password check succeeds.', 'UserResource: Update');
+  }
+
+  /**
+   * Test update method (Legacy).
+   *
+   * TODO: To be removed in future version.
+   * @see http://drupal.org/node/1083242
+   */
+  function testUpdateUserLegacy() {
+    // Create user.
+    $account = $this->drupalCreateUser();
+
+    // Update mail of the user.
+    $updated_account = array(
+      'mail' => $this->randomName() . '@example.com',
+      'pass' => $this->randomString(),
+    );
+    $response = $this->servicesPut($this->endpoint->path . '/user/' . $account->uid, array('data' => $updated_account));
+
+    $user_load = user_load($account->uid);
+    $this->assertEqual($updated_account['mail'], $user_load->mail,
+      'User details have been updated successfully', 'UserResource: Update (Legacy)');
+    $this->assertTrue(user_check_password($updated_account['pass'], $user_load),
+      'Password check succeeds.', 'UserResource: Update (Legacy)');
+  }
+
+  /**
+   * Test delete method.
+   */
+  function testDeleteUser() {
+    // Create user.
+    $account = $this->drupalCreateUser();
+
+    // Delete user.
+    $response = $this->servicesDelete($this->endpoint->path . '/user/' . $account->uid);
+
+    $user_load = user_load($account->uid);
+    $this->assertTrue(empty($user_load), 'User has been deleted successfully.', 'UserResource: Delete');
+  }
+
+  /**
+   * Test cancel method.
+   */
+  function testCancelUser() {
+    // Create our privileged user.
+    $account = $this->drupalCreateUser(array('administer services'));
+
+    // Cancel user.
+    $response = $this->servicesPost($this->endpoint->path . '/user/' . $account->uid . '/cancel');
+    $this->assertTrue($response['body'],
+      'Resource has to cancel user has been called successfully.',
+      'UserResource: Cancel');
+
+    $user_load = user_load($account->uid);
+    $this->assertFalse($user_load->status, 'User has been canceled successfully.', 'UserResource: Cancel');
+  }
+
+  /**
+   * Test cant cancel user 1.
+   */
+  function testCancelAdmin() {
+    // Cancel user.
+    $response = $this->servicesPost($this->endpoint->path . '/user/1/cancel');
+    $this->assertEqual($response['code'], 403,
+      'Services successfully blocked cancel of user 1', 'UserResource: Cancel');
+
+    $user_load = user_load(1);
+    $this->assertTrue(!empty($user_load), 'User 1 still exits and has not deleted, as this is not allowed.', 'UserResource: Cancel');
+  }
+
+  /**
+   * Test password_reset method.
+   */
+  function testPasswordReset() {
+    // Create user.
+    $account = $this->drupalCreateUser(array('administer services'));
+
+    // Password Reset user.
+    $response = $this->servicesPost($this->endpoint->path . '/user/' . $account->uid . '/password_reset');
+    $this->assertTrue($response['body'],
+      'Resource has to reset a users password has been called successfully.',
+      'UserResource: password_reset');
+
+    $user_load = user_load($account->uid);
+    $this->assertFalse(user_check_password($account->pass, $user_load),
+        'Password successfully changed.', 'UserResource: password_reset');
+  }
+
+  /**
+   * Test password_reset method.
+   */
+  function testResendWelcomeEmail() {
+    // Create user.
+    $account = $this->drupalCreateUser(array('administer services'));
+
+    // Password Reset user.
+    $response = $this->servicesPost($this->endpoint->path . '/user/' . $account->uid . '/resend_welcome_email');
+    $this->assertTrue($response['body'],
+      'Resource has to resent a users welcome email has been called successfully.',
+      'UserResource: resend_welcome_email');
+    // Not sure how to test mail actually sent.
+  }
+
+  /**
+   * Test delete system user method.
+   */
+  function testDeleteSystemUser() {
+    // Delete user 0.
+    $response = $this->servicesDelete($this->endpoint->path . '/user/0');
+
+    $this->assertTrue(strpos($response['code'], '404') !== FALSE,
+      'Anonymous user was not deleted.', 'UserResource: Delete');
+
+    // Delete user 1.
+    $response = $this->servicesDelete($this->endpoint->path . '/user/1');
+
+    $this->assertTrue(strpos($response['status'], 'The admin user cannot be deleted.') !== FALSE,
+      'Admin user was not deleted.', 'UserResource: Delete');
+  }
+
+  /**
+   * Test index method.
+   *
+   * Create several users list them. List one user by name.
+   */
+  function testUserIndex() {
+    // Create several users.
+    $accounts = array();
+    for ($i = 0; $i < 5; $i++) {
+      $account = $this->drupalCreateUser();
+      $accounts[$account->uid] = $account;
+    }
+
+    $accounts_copy = $accounts;
+
+    $response = $this->servicesGet($this->endpoint->path . '/user', array('fields' => 'uid,name,mail'));
+    $response_accounts = $response['body'];
+
+    foreach ($response_accounts as $response_account) {
+      // We do not check anonymous and admin users.
+      if ($response_account->uid < 2) {
+        continue;
+      }
+      // If name and email are the same we believe that accounts are the same.
+      if (isset($accounts[$response_account->uid])) {
+        $saved_account = $accounts[$response_account->uid];
+        if ($response_account->name == $saved_account->name && $response_account->mail == $saved_account->mail) {
+          unset($accounts_copy[$response_account->uid]);
+        }
+      }
+    }
+
+    $this->assertTrue(empty($accounts_copy), 'Users were listed properly.', 'UserResource: Index');
+
+    // Retrieve all the users using a list of uids.
+    $response = $this->servicesGet($this->endpoint->path . '/user',
+      array('parameters' => array('uid' => implode(',', array_keys($accounts)))));
+
+    $response_accounts = $response['body'];
+
+    $accounts_copy = $accounts;
+
+    foreach ($response_accounts as $response_account) {
+      // If name and email are the same we believe that accounts are the same.
+      if (isset($accounts[$response_account->uid])) {
+        $saved_account = $accounts[$response_account->uid];
+        if ($response_account->name == $saved_account->name && $response_account->mail == $saved_account->mail) {
+          unset($accounts_copy[$response_account->uid]);
+        }
+      }
+    }
+
+    $this->assertTrue(empty($accounts_copy), 'Users were listed properly.', 'UserResource: Index');
+
+    $accounts_copy = $accounts;
+    $account = array_pop($accounts_copy);
+
+    // Get user with specific name.
+    $response = $this->servicesGet($this->endpoint->path . '/user', array('parameters' => array('name' => $account->name)));
+    $response_accounts = $response['body'];
+    $response_account = current($response['body']);
+
+    $proper_answer = count($response_accounts) == 1
+                  && $response_account->name == $account->name;
+    $this->assertTrue($proper_answer, 'User was listed by name properly.', 'UserResource: Index');
+  }
+
+  /**
+   * Test login method.
+   *
+   * Create user. Login. Try to login with another user (to get error).
+   * Login with wrong credentials (to get error).
+   */
+  function testUserLogin() {
+    $account = $this->drupalCreateUser();
+
+    // Logout first.
+    $this->drupalLogout();
+
+    $response = $this->servicesPost($this->endpoint->path . '/user/login', array('username' => $account->name, 'password' => $account->pass_raw));
+
+    $response_data = $response['body'];
+
+    $proper_answer = isset($response_data->sessid)
+                  && isset($response_data->user)
+                  && $response_data->user->name == $account->name;
+    $this->assertTrue($proper_answer, 'User successfully logged in.', 'UserResource: Login');
+
+    // Make sure the session exists in the database.
+    $result = db_query("SELECT * FROM {sessions} WHERE :uid=uid", array(':uid' => $account->uid))->fetchObject();
+    $this->assertTrue(!empty($result), 'Session found', 'UserResource: Login');
+
+    // Save session details.
+    $this->session_id = $response_data->sessid;
+    $this->session_name = $response_data->session_name;
+    $this->loggedInUser = $response_data->user;
+
+    // Try to login with another user to get error.
+    $account2 = $this->drupalCreateUser();
+    $response = $this->servicesPost($this->endpoint->path . '/user/login', array('username' => $account2->name, 'password' => $account2->pass_raw));
+    $this->assertTrue(strpos($response['status'], 'Already logged in as ' . $account->name) !== FALSE,
+      'Session is properly opened for logged in user.', 'UserResource: Login');
+
+    // Logout.
+    $this->drupalLogout();
+
+    // Try to login with wrong credentials.
+    $response = $this->servicesPost($this->endpoint->path . '/user/login',
+      array('username' => $account->name, 'password' => $this->randomString()));
+    $this->assertTrue(strpos($response['status'], 'Wrong username or password') !== FALSE,
+      'User cannot login with wrong username / password.', 'UserResource: Login');
+  }
+  /**
+   * Test login method. API VERsion 1.1
+   *
+   * Create user. Login. Try to login with another user (to get error).
+   * Login with wrong credentials (to get error).
+   */
+  function testUserLoginMethodAPI_1_1() {
+    $this->endpoint = $this->saveNewVersionEndpoint('1.1');
+    $path = $this->endpoint->path;
+    $account = $this->drupalCreateUser();
+
+    // Logout first.
+    $this->drupalLogout();
+
+    $response = $this->servicesPost($this->endpoint->path . '/user/login', array('username' => $account->name, 'password' => $account->pass_raw));
+
+    $response_data = $response['body'];
+    $this->assertTrue(strpos($response['status'], 'Missing required argument name') !== FALSE,
+      'User Resource is rejecting old parameter names.', 'UserResource: Login');
+
+    $responseArray = $this->servicesPost($this->endpoint->path . '/user/login', array('username' => $account->name, 'password' => $account->pass_raw),
+      array('services_user_login_version: 1.0'));
+    $this->assertTrue($responseArray['code'] == '200', 'Arguments should be old arguments and we should be logged in.',
+      'Services Version System');
+    $response_data = $responseArray['body'];
+    $proper_answer = isset($response_data->sessid)
+                  && isset($response_data->user)
+                  && $response_data->user->name == $account->name;
+    $this->assertTrue($proper_answer, 'User successfully logged in.', 'UserResource: Login');
+    $this->drupalLogout();
+    $responseArray = $this->servicesPost($this->endpoint->path . '/user/login', array('name' => $account->name, 'pass' => $account->pass_raw),
+      array('services_user_login_version: 1.1'));
+    $this->assertTrue($responseArray['code'] == '200', 'Arguments should be old arguments and we should be logged in.',
+      'Services Version System');
+    $response_data = $responseArray['body'];
+    $proper_answer = isset($response_data->sessid)
+                  && isset($response_data->user)
+                  && $response_data->user->name == $account->name;
+    $this->assertTrue($proper_answer, 'User successfully logged in.', 'UserResource: Login');
+  }
+  /**
+   * Test flood control during user login
+   *
+   * Account blocking: Create user. Try to login with wrong credentials (get default error).
+   *  Try to login fifth time and get account blocking error.
+   *
+   * IP blocking: Create set of users to provide 50 failed attempts to login (less then 5 to prevent account blocking)
+   *  and get IP blocking error
+   */
+  function testUserLoginFloodControl() {
+    $account = $this->drupalCreateUser();
+
+    // Logout first
+    $this->drupalLogout();
+
+    // First failed login (wrong password)
+    $response = $this->servicesPost($this->endpoint->path . '/user/login', array('username' => $account->name, 'password' => $this->randomString()));
+
+    // Get default wrong credentials error
+    $this->assertTrue(strpos($response['status'], 'Wrong username or password') !== FALSE,
+      'User cannot login with wrong username / password.', 'UserResource: Login');
+
+    $account_blocking_limit = variable_get('user_failed_login_user_limit', 5);
+
+    // Go through set of default error while we're having attempts
+    if ($account_blocking_limit > 2) {
+      for ($i = 0; $i < $account_blocking_limit - 2; $i++) {
+        // Just trigger login operation to write fails to flood table
+        $this->servicesPost($this->endpoint->path . '/user/login', array('username' => $account->name, 'password' => $this->randomString()));
+      }
+    }
+
+    // Now account will be locked after 5 failed attempts
+    $response = $this->servicesPost($this->endpoint->path . '/user/login', array('username' => $account->name, 'password' => $this->randomString()));
+
+    $this->assertTrue(strpos($response['status'], 'Account is temporarily blocked.') !== FALSE,
+      'After ' . $account_blocking_limit . '-th failed login account is temporary blocked.', 'UserResource: Login Flood Control');
+
+    // Test IP blocking
+    $ip_blocking_limit = variable_get('user_failed_login_ip_limit', 50);
+    $account2 = $this->drupalCreateUser();
+
+    // Provide necessary count of test users to get 50 failed attempts without account blocking
+    for ($i = 0; $i < $ip_blocking_limit - $account_blocking_limit - 1; $i++) {
+      if ($i % $account_blocking_limit === 0) {
+        $account2 = $this->drupalCreateUser();
+      }
+
+      $this->servicesPost($this->endpoint->path . '/user/login', array('username' => $account2->name, 'password' => $this->randomString()));
+    }
+
+    $account2 = $this->drupalCreateUser();
+
+    // Now ip will be locked after 50 failed attempts
+    $response = $this->servicesPost($this->endpoint->path . '/user/login', array('username' => $account2->name, 'password' => $this->randomString()));
+
+    $this->assertTrue(strpos($response['status'], 'This IP address is temporarily blocked.') !== FALSE,
+      'After ' . $ip_blocking_limit . '-th failed login ip is temporary blocked.', 'UserResource: Login Flood Control');
+  }
+
+  /**
+   * Test logout method.
+   */
+  function testUserLogout() {
+    // Logout via REST call.
+    $response = $this->servicesPost($this->endpoint->path . '/user/logout');
+    // Try logout second time.
+    $this->drupalGet('user/logout');
+    $this->assertText('You are not authorized to access this page', 'User logout successfully.', 'UserResource: Logout');
+    // Login again.
+    $this->drupalLogin($this->privileged_user);
+    // Logout via REST call.
+    $response = $this->servicesPost($this->endpoint->path . '/user/logout');
+    // Try to logout second time via REST call.
+    $response = $this->servicesPost($this->endpoint->path . '/user/logout');
+    $this->assertTrue(strpos($response['status'], 'User is not logged in'),
+      'User cannot logout when is anonymous', 'UserResource: Logout');
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesSecurityTests.test drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesSecurityTests.test
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesSecurityTests.test	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesSecurityTests.test	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,100 @@
+<?php
+
+class ServicesSecurityTests extends ServicesWebTestCase {
+  // Class variables
+  protected $privileged_user = NULL ;
+  // Endpoint details.
+  protected $endpoint = NULL;
+
+  /**
+   * Implementation of setUp().
+   */
+  public function setUp() {
+    parent::setUp(
+      'ctools',
+      'services',
+      'rest_server'
+    );
+    // Set up endpoint.
+    $this->endpoint = $this->saveNewEndpoint();
+
+    // Create and log in our privileged user.
+    $this->privileged_user = $this->drupalCreateUser(array('get a system variable', 'set a system variable'));
+    $this->drupalLogin($this->privileged_user);
+  }
+
+  /**
+   * Implementation of getInfo().
+   */
+  public static function getInfo() {
+   return array(
+     'name'        => t('Security'),
+     'description' => t('Security tests.'),
+     'group'       => t('Services'),
+   );
+  }
+
+  public function testSessionCSRF() {
+    $variable_name = $this->randomName();
+    $variable_value = $this->randomString();
+    $default_variable_value = $this->randomString();
+    $this->servicesPost($this->endpoint->path . '/system/set_variable', array('name' => $variable_name, 'value' => $variable_value));
+
+    $get_variable_args = array('name' => $variable_name, 'default' => $default_variable_value);
+    $response = $this->servicesPostNoCSRFHeader($this->endpoint->path . '/system/get_variable', $get_variable_args);
+    $this->assertEqual($response['status'], 'HTTP/1.1 401 Unauthorized: CSRF validation failed');
+
+    $bad_csrf_token_headers = array('X-CSRF-Token: ' . $this->randomString());
+    $response = $this->servicesPostNoCSRFHeader($this->endpoint->path . '/system/get_variable', $get_variable_args, $bad_csrf_token_headers);
+    $this->assertEqual($response['status'], 'HTTP/1.1 401 Unauthorized: CSRF validation failed');
+
+    $csrf_token = $this->drupalGet('services/session/token');
+    $good_csrf_token_headers = array('X-CSRF-Token: ' . $csrf_token);
+    $response = $this->servicesPostNoCSRFHeader($this->endpoint->path . '/system/get_variable', $get_variable_args, $good_csrf_token_headers);
+    $this->assertEqual($response['body'], $variable_value, 'Value of variable retrieved.');
+  }
+
+  /**
+   * Copy of servicesPost method but without CSRF header.
+   */
+  protected function servicesPostNoCSRFHeader($url, $data = array(), $headers = array(), $call_type = 'php') {
+    switch ($call_type) {
+      case 'php':
+        // Add .php to get serialized response.
+        $url = $this->getAbsoluteUrl($url) . '.php';
+        // Otherwise Services will reject arguments.
+        $headers[] = "Content-type: application/x-www-form-urlencoded";
+        // Prepare arguments.
+        $post = drupal_http_build_query($data, '', '&');
+        break;
+      case 'json':
+        // Add .json to get json encoded response.
+        $url = $this->getAbsoluteUrl($url) . '.json';
+        // Set proper headers.
+        $headers[] = "Content-type: application/json";
+        // Prepare arguments.
+        $post = json_encode($data);
+        break;
+    }
+
+    $content = $this->curlExec(array(
+      CURLOPT_URL => $url,
+      CURLOPT_POST => TRUE,
+      CURLOPT_POSTFIELDS => $post,
+      CURLOPT_HTTPHEADER => $headers,
+      CURLOPT_HEADER => TRUE,
+      CURLOPT_RETURNTRANSFER => TRUE
+    ));
+
+    // Parse response.
+    list($info, $header, $status, $code, $body) = $this->parseHeader($content, $call_type);
+
+    $this->verbose('POST request to: ' . $url .
+      '<hr />Arguments: ' . highlight_string('<?php ' . var_export($data, TRUE), TRUE) .
+      '<hr />Raw POST body: ' . $post .
+      '<hr />Response: ' . highlight_string('<?php ' . var_export($body, TRUE), TRUE) .
+      '<hr />Curl info: ' . highlight_string('<?php ' . var_export($info, TRUE), TRUE) .
+      '<hr />Raw response: ' . $content);
+    return array('header' => $header, 'status' => $status, 'code' => $code, 'body' => $body);
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesVersionTests.test drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesVersionTests.test
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesVersionTests.test	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesVersionTests.test	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,109 @@
+<?php
+// $Id: ServicesResourceSystemTests.test,v 1.1.2.1 2011/01/19 00:34:49 ocyrus Exp $
+
+/**
+ * @file
+ * Call the endpoint tests when no authentication is being used.
+ *
+ */
+
+/**
+ * Run test cases for the endpoint with no authentication turned on.
+ *
+ */
+class ServicesVersionTests extends ServicesWebtestCase {
+  // Class variables
+  protected $privileged_user = NULL ;
+  // Endpoint details.
+  protected $endpoint = NULL;
+
+  /**
+   * Implementation of setUp().
+   */
+  public function setUp() {
+    parent::setUp('services_test_resource');
+    // Set up privileged user and login.
+    $this->privileged_user = $this->drupalCreateUser(array('administer services',));
+    $this->drupalLogin($this->privileged_user);
+  }
+
+  /**
+   * Implementation of getInfo().
+   */
+  public static function getInfo() {
+    return array(
+      'name'        => 'Version System',
+      'description' => 'Test the Version system',
+      'group'       => 'Services',
+    );
+  }
+
+  /**
+   * Test connect method.
+   */
+  function testVersion() {
+    // Set up endpoint.
+    $this->endpoint = $this->saveNewVersionEndpoint('1.0');
+    $path = $this->endpoint->path;
+    $updates = services_get_updates();
+    if (is_array($updates)) {
+      foreach ($updates as $key => $update) {
+        foreach ($update as $resource_key => $updates) {
+          $versions = services_get_update_versions($key, $resource_key);
+          if(count($versions)) {
+            $this->pass('Detected multiple versions for a resource', 'Services Version System');
+          } else {
+            $this->fail('Failed to detect any versions for our test resource.', 'Services Version System');
+          }
+
+        }
+      }
+    } else {
+      $this->fail('Failed to get services updates', 'Services Version System');
+    }
+
+    $responseArray = $this->servicesGet($this->endpoint->path . '/services_test/AjSHa');
+    //In version 1.0 of services_test resource theres only 1 argument
+    $this->assertTrue('CRUD Retrieve AjSHa' == $responseArray['body'], 'Successfully received sent param on version 1.0 api');
+    $this->endpoint = $this->saveNewVersionEndpoint('1.0');
+    //Test the ability to say I want 1.1 api by passing in the header.
+    $responseArray = $this->servicesGet($this->endpoint->path . '/services_test/AjSHa', NULL,
+      array('services_services_test_retrieve_version: 1.1'));
+    $this->assertTrue($responseArray['code'] == '401', 'Successfully was rejected hopefully more missing parameters',
+      'Services Version System');
+    $this->assertTrue(strpos($responseArray['status'], 'Missing required argument arg2'),
+      'Yay, looks like were missing a required argument', 'Services Version System');
+
+    $responseArray = $this->servicesGet($this->endpoint->path . '/services_test/AjSHa', NULL,
+      array('services_services_test_retrieve_version: 1.2'));
+    $this->assertTrue($responseArray['code'] == '200', 'Argument two should be optional now. Looks like it was.',
+      'Services Version System');
+    $this->assertTrue($responseArray['body'] == 'AjSHa:0', 'Our response looks good, and its a default argument',
+      'Services Version System');
+    $responseArray = $this->servicesGet($this->endpoint->path . '/services_test/AjSHa', array('arg2' => 'test'),
+      array('services_services_test_retrieve_version: 1.2'));
+    $this->assertTrue($responseArray['code'] == '200',
+      'Argument two should be optional now. Looks like it was.', 'Services Version System');
+    $this->assertTrue($responseArray['body'] == 'AjSHa:test',
+      'Our response looks good, and its our passed arguments', 'Services Version System');
+
+    $this->endpoint = $this->saveNewVersionEndpoint('1.1');
+    //Test the ability to say I want 1.1 api by passing in the header.
+    $responseArray = $this->servicesGet($this->endpoint->path . '/services_test/AjSHa');
+    $this->assertTrue($responseArray['code'] == '401',
+      'Successfully was rejected hopefully more missing parameters', 'Services Version System');
+    $this->assertTrue(strpos($responseArray['status'], 'Missing required argument arg2'),
+      'Yay, looks like were missing a required argument', 'Services Version System');
+    $this->endpoint = $this->saveNewVersionEndpoint('1.2');
+    $responseArray = $this->servicesGet($this->endpoint->path . '/services_test/AjSHa');
+    $this->assertTrue($responseArray['code'] == '200',
+      'Argument two should be optional now. Looks like it was.', 'Services Version System');
+    $this->assertTrue($responseArray['body'] == 'AjSHa:0', 'Our response looks good, and its a default argument',
+      'Services Version System');
+    $responseArray = $this->servicesGet($this->endpoint->path . '/services_test/AjSHa', array('arg2' => 'test'));
+    $this->assertTrue($responseArray['code'] == '200',
+      'Argument two should be optional now. Looks like it was.', 'Services Version System');
+    $this->assertTrue($responseArray['body'] == 'AjSHa:test',
+      'Our response looks good, and its our passed arguments', 'Services Version System');
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesXMLRPCTests.test drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesXMLRPCTests.test
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesXMLRPCTests.test	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/functional/ServicesXMLRPCTests.test	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,235 @@
+<?php
+
+class ServicesXMLRPCTestCase extends DrupalWebTestCase {
+  // Endpoint details.
+  protected $endpoint = NULL;
+  // Session ID.
+  protected $sessid = NULL;
+  // Session name.
+  protected $session_name = NULL;
+
+  /**
+   * Implements getInfo().
+   */
+  public static function getInfo() {
+   return array(
+     'name'        => 'XMLRPC Server',
+     'description' => 'Test XMLRPC server.',
+     'group'       => 'Services',
+   );
+  }
+
+  public function setUp() {
+    parent::setUp('ctools', 'services', 'xmlrpc_server', 'services_test_resource');
+    // Set up endpoint.
+    $this->endpoint =  $this->saveNewEndpoint();
+  }
+
+  /**
+   * Test list.Methods call.
+   *
+   * Regression http://drupal.org/node/1072844.
+   */
+  function testlistMethods() {
+    $result = $this->servicesXMLRPC('system.listMethods', array());
+    $this->assertTrue(in_array('node.index', $result['body']), 'node.index method found.', 'XMLRPC: listMethods');
+  }
+
+  /**
+   * Test user login.
+   */
+  function testUserLogin() {
+    // Create user.
+    $user = $this->drupalCreateUser(array('access user profiles'));
+    $args = array(
+      'username' => $user->name,
+      'password' => $user->pass_raw,
+    );
+    $result = $this->servicesXMLRPC('user.login', $args);
+    $this->assertEqual($result['body']['user']['uid'], $user->uid,
+      format_string('User %user logged in successfully.', array('%user' => $user->name)), 'XMLRPC: UserLogin');
+
+    $this->sessid = $result['body']['sessid'];
+    $this->session_name = $result['body']['session_name'];
+
+    // Call index method as logged in user.
+    $args = array(
+      'page' => 0,
+      'fields' => '*',
+      'parameters' => array(),
+    );
+    $result = $this->servicesXMLRPC('user.index', $args);
+    // There should be three users available: anonymous, admin and newly created.
+    $this->assertTrue(count($result['body']) == 3, 'Users listed properly.', 'XMLRPC: UserLogin');
+  }
+
+  /**
+   * Precedence CRUD methods > Actions > Relations > Targeted Actions
+   *
+   * @see http://drupal.org/node/1016350
+   */
+  function testPrecedence() {
+    $args = array('arg1' => $this->randomName());
+    $result = $this->servicesXMLRPC('services_test.retrieve', $args);
+    $this->assertEqual($result['body'], 'CRUD Retrieve ' . $args['arg1'],
+      'XMLRPC precedence works properly (CRUD higher priority than action).', 'XMLRPC: Precedence');
+  }
+
+  public function saveNewEndpoint() {
+    $edit = $this->populateEndpointFAPI() ;
+    $endpoint = new stdClass;
+    $endpoint->disabled = FALSE; /* Edit this to true to make a default endpoint disabled initially */
+    $endpoint->api_version = 3;
+    $endpoint->name = $edit['name'];
+    $endpoint->title = $edit['title'];
+    $endpoint->server = $edit['server'];
+    $endpoint->path = $edit['path'];
+    $endpoint->authentication = array(
+      'services' => 'services',
+    );
+    $endpoint->server_settings = array(
+      'formatters' => array(
+        'json' => TRUE,
+        'bencode' => TRUE,
+        'rss' => TRUE,
+        'plist' => TRUE,
+        'xmlplist' => TRUE,
+        'php' => TRUE,
+        'yaml' => TRUE,
+        'jsonp' => FALSE,
+        'xml' => FALSE,
+      ),
+      'parsers' => array(
+        'application/x-yaml' => TRUE,
+        'application/json' => TRUE,
+        'application/vnd.php.serialized' => TRUE,
+        'application/plist' => TRUE,
+        'application/plist+xml' => TRUE,
+        'application/x-www-form-urlencoded' => TRUE,
+      ),
+    );
+    $endpoint->resources = array(
+      'system' => array(
+        'alias' => '',
+        'actions' => array(
+          'connect' => array(
+            'enabled' => 1,
+          ),
+          'get_variable' => array(
+            'enabled' => 1,
+          ),
+          'set_variable' => array(
+            'enabled' => 1,
+          ),
+        ),
+      ),
+      'user' => array(
+        'alias' => '',
+        'operations' => array(
+          'create' => array(
+            'enabled' => 1,
+          ),
+          'retrieve' => array(
+            'enabled' => 1,
+          ),
+          'update' => array(
+            'enabled' => 1,
+          ),
+          'delete' => array(
+            'enabled' => 1,
+          ),
+          'index' => array(
+            'enabled' => 1,
+          ),
+        ),
+        'actions' => array(
+          'login' => array(
+            'enabled' => 1,
+          ),
+          'logout' => array(
+            'enabled' => 1,
+          ),
+        ),
+      ),
+      'services_test' => array(
+        'alias' => '',
+        'operations' => array(
+          'retrieve' => array(
+            'enabled' => 1,
+          ),
+        ),
+        'actions' => array(
+          'retrieve' => array(
+            'enabled' => 1,
+          ),
+        ),
+      ),
+    );
+    $endpoint->debug = 1;
+    $endpoint->export_type = FALSE;
+    services_endpoint_save($endpoint);
+    $endpoint = services_endpoint_load($endpoint->name);
+    $this->assertTrue($endpoint->name == $edit['name'], 'Endpoint successfully created');
+    return $endpoint;
+  }
+
+  public function populateEndpointFAPI() {
+    return array(
+      'name'   => 'machinename',
+      'title'  => $this->randomName(20),
+      'path'   => $this->randomName(10),
+      'server' => 'xmlrpc_server',
+    );
+  }
+
+  /**
+   * Do XMLRPC call.
+   *
+   * @param string $method
+   *   Name of method to call.
+   * @param array $args
+   *   Arguments to pass to call.
+   * @param bool $sessid
+   *   Add cookies in order to log in.
+   * @param bool $assert_no_error
+   *   Whether assert that no error returned.
+   * @return array
+   *   array(
+   *     'body' -- answer of call
+   *     'error_message' -- error message if any
+   *   )
+   */
+  public function servicesXMLRPC($method, $args = array(), $sessid = TRUE, $assert_no_error = TRUE) {
+    if (!is_array($args)) {
+      $args = array($args);
+    }
+
+    $options = array('headers' => array());
+
+    // Set up cookies.
+    if ($sessid && !empty($this->sessid)) {
+      $options['headers']['Cookie'] = $this->session_name . '=' . $this->sessid;
+    }
+
+    $csrf_token_response = xmlrpc(url($this->endpoint->path, array('absolute' => TRUE)), array('user.token' => array()), $options);
+    $options['headers']['X-CSRF-Token'] = $csrf_token_response['token'];
+
+    $output = xmlrpc(url($this->endpoint->path, array('absolute' => TRUE)), array($method => $args), $options);
+
+    $error_message = xmlrpc_error_msg();
+
+    if ($assert_no_error) {
+      $this->assertTrue(empty($error_message), format_string('XMLRPC call %method run without errors.', array('%method' => $method)), 'XMLRPC call');
+    }
+    $this->verbose('XMLRPC request to: ' . $method .
+                   '<hr />Arguments: ' . highlight_string('<?php ' . var_export($args, TRUE), TRUE) .
+                   '<hr />Response: ' . highlight_string('<?php ' . var_export($output, TRUE), TRUE) .
+                   '<hr />Error: ' . $error_message);
+
+    if (!empty($error_message)) {
+      return array('error_message' => $error_message, 'body' => '');
+    }
+
+    return array('error_message' => '', 'body' => $output);
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/services.test drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/services.test
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/services.test	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/services.test	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,886 @@
+<?php
+
+class ServicesWebTestCase extends DrupalWebTestCase {
+
+  public function setUp() {
+    $modules = func_get_args();
+    if (isset($modules[0]) && is_array($modules[0])) {
+      $modules = $modules[0];
+    }
+
+    // Add the required module dependencies.
+    array_unshift($modules, 'ctools', 'services', 'rest_server');
+
+    parent::setUp($modules);
+    // Use a cookie file, so login sessions will survive, even if we
+    // reinitialize Curl.
+    $this->cookieFile = drupal_tempnam(variable_get('file_temporary_path'), 'services_cookiejar');
+    // Load the cookie file when initializing Curl.
+    $this->additionalCurlOptions[CURLOPT_COOKIEFILE] = $this->cookieFile;
+  }
+
+  /**
+   * Perform GET request.
+   */
+  protected function servicesGet($url, $data = NULL, $headers = array()) {
+    $options = array('query' => $data);
+    $url = url($this->getAbsoluteUrl($url) . '.php', $options);
+    $content = $this->curlExec(array(
+      CURLOPT_HTTPGET => TRUE,
+      CURLOPT_URL => $url,
+      CURLOPT_NOBODY => FALSE,
+      CURLOPT_RETURNTRANSFER => TRUE,
+      CURLOPT_HEADER => TRUE,
+      CURLOPT_HTTPHEADER => $headers
+    ));
+
+    // Parse response.
+    list($info, $header, $status, $code, $body) = $this->parseHeader($content);
+
+    $this->verbose('GET request to: ' . $url .
+                    '<hr />headers: ' . highlight_string('<?php ' . var_export($headers, TRUE), TRUE) .
+                   '<hr />Arguments: ' . highlight_string('<?php ' . var_export($data, TRUE), TRUE) .
+                   '<hr />Response: ' . highlight_string('<?php ' . var_export($body, TRUE), TRUE) .
+                   '<hr />Raw response: ' . $content);
+    return array('header' => $header, 'status' => $status, 'code' => $code, 'body' => $body);
+  }
+
+  /**
+   * Post file as multipart/form-data.
+   */
+  protected function servicesPostFile($url, $filepath, $headers = array(), $additional_arguments = array()) {
+    $this->addCSRFHeader($headers);
+    if (!is_array($filepath)) {
+      $filepath = array($filepath);
+    }
+    // Add .php to get serialized response.
+    $url = $this->getAbsoluteUrl($url) . '.php';
+
+    // Otherwise Services will reject arguments.
+    $headers[] = "Content-type: multipart/form-data";
+    // Prepare arguments.
+    $post = $additional_arguments;
+    $i = 0;
+    foreach ($filepath as $path) {
+      $post['files[file_contents' . $i . ']'] = '@' . variable_get('file_public_path', '') . '/' . file_uri_target($path);
+      $i++;
+    }
+
+    $content = $this->curlExec(array(
+      CURLOPT_URL => $url,
+      CURLOPT_POST => TRUE,
+      CURLOPT_POSTFIELDS => $post,
+      CURLOPT_HTTPHEADER => $headers,
+      CURLOPT_HEADER => TRUE,
+      CURLOPT_RETURNTRANSFER => TRUE,
+      CURLOPT_FOLLOWLOCATION => TRUE,
+      CURLOPT_VERBOSE => TRUE,
+    ));
+
+    // Parse response.
+    list($info, $header, $status, $code, $body) = $this->parseHeader($content);
+
+    $this->verbose('POST request to: ' . $url .
+                   '<hr />File Name(s): ' . highlight_string('<?php . ' . var_export($filepath, TRUE), TRUE) .
+                   '<hr />Response: ' . highlight_string('<?php ' . var_export($body, TRUE), TRUE) .
+                   '<hr />Curl info: ' . highlight_string('<?php ' . var_export($info, TRUE), TRUE) .
+                   '<hr />Raw response: ' . $content);
+    return array('header' => $header, 'status' => $status, 'code' => $code, 'body' => $body);
+  }
+
+  /**
+   * Perform POST request.
+   */
+  protected function servicesPost($url, $data = array(), $headers = array(), $call_type = 'php') {
+    $this->addCSRFHeader($headers);
+
+    switch ($call_type) {
+      case 'php':
+        // Add .php to get serialized response.
+        $url = $this->getAbsoluteUrl($url) . '.php';
+        // Otherwise Services will reject arguments.
+        $headers[] = "Content-type: application/x-www-form-urlencoded";
+        // Prepare arguments.
+        $post = drupal_http_build_query($data, '', '&');
+        break;
+      case 'json':
+        // Add .json to get json encoded response.
+        $url = $this->getAbsoluteUrl($url) . '.json';
+        // Set proper headers.
+        $headers[] = "Content-type: application/json";
+        // Prepare arguments.
+        $post = json_encode($data);
+        break;
+    }
+
+    $content = $this->curlExec(array(
+      CURLOPT_URL => $url,
+      CURLOPT_POST => TRUE,
+      CURLOPT_POSTFIELDS => $post,
+      CURLOPT_HTTPHEADER => $headers,
+      CURLOPT_HEADER => TRUE,
+      CURLOPT_RETURNTRANSFER => TRUE
+    ));
+
+    // Parse response.
+    list($info, $header, $status, $code, $body) = $this->parseHeader($content, $call_type);
+
+    $this->verbose('POST request to: ' . $url .
+                   '<hr />Arguments: ' . highlight_string('<?php ' . var_export($data, TRUE), TRUE) .
+                   '<hr />Raw POST body: ' . $post .
+                   '<hr />Response: ' . highlight_string('<?php ' . var_export($body, TRUE), TRUE) .
+                   '<hr />Curl info: ' . highlight_string('<?php ' . var_export($info, TRUE), TRUE) .
+                   '<hr />Raw response: ' . $content);
+    return array('header' => $header, 'status' => $status, 'code' => $code, 'body' => $body);
+  }
+
+  /**
+   * Perform PUT request.
+   */
+  protected function servicesPut($url, $data = NULL, $headers = array(), $call_type = 'php') {
+    $this->addCSRFHeader($headers);
+    switch ($call_type) {
+      case 'php':
+        // Add .php to get serialized response.
+        $url = $this->getAbsoluteUrl($url) . '.php';
+        // Otherwise Services will reject arguments.
+        $headers[] = "Content-type: application/x-www-form-urlencoded";
+        // Prepare arguments.
+        $post = drupal_http_build_query($data, '', '&');
+        break;
+      case 'json':
+        // Add .json to get json encoded response.
+        $url = $this->getAbsoluteUrl($url) . '.json';
+        // Set proper headers.
+        $headers[] = "Content-type: application/json";
+        // Prepare arguments.
+        $post = json_encode($data);
+        break;
+    }
+
+    // Emulate file.
+    $putData = fopen('php://temp', 'rw+');
+    fwrite($putData, $post);
+    fseek($putData, 0);
+
+    $content = $this->curlExec(array(
+      CURLOPT_URL => $url,
+      CURLOPT_RETURNTRANSFER => TRUE,
+      CURLOPT_PUT => TRUE,
+      CURLOPT_HEADER => TRUE,
+      CURLOPT_HTTPHEADER => $headers,
+      CURLOPT_INFILE => $putData,
+      CURLOPT_INFILESIZE => drupal_strlen($post)
+    ));
+    fclose($putData);
+
+    // Parse response.
+    list($info, $header, $status, $code, $body) = $this->parseHeader($content, $call_type);
+
+    $this->verbose('PUT request to: ' . $url .
+                   '<hr />Arguments: ' . highlight_string('<?php ' . var_export($data, TRUE), TRUE) .
+                   '<hr />Raw POST body: ' . $post .
+                   '<hr />Response: ' . highlight_string('<?php ' . var_export($body, TRUE), TRUE) .
+                   '<hr />Curl info: ' . highlight_string('<?php ' . var_export($info, TRUE), TRUE) .
+                   '<hr />Raw response: ' . $content);
+    return array('header' => $header, 'status' => $status, 'code' => $code, 'body' => $body);
+  }
+
+  /**
+   * Perform DELETE request.
+   */
+  protected function servicesDelete($url, $data = NULL, $headers = array()) {
+    $this->addCSRFHeader($headers);
+    $options = array('query' => $data);
+    $url = url($this->getAbsoluteUrl($url) . '.php', $options);
+
+    $content = $this->curlExec(array(
+      CURLOPT_URL => $url,
+      CURLOPT_CUSTOMREQUEST => "DELETE",
+      CURLOPT_HEADER => TRUE,
+      CURLOPT_HTTPHEADER => $headers,
+      CURLOPT_RETURNTRANSFER => TRUE
+    ));
+
+    // Parse response.
+    list($info, $header, $status, $code, $body) = $this->parseHeader($content);
+
+    $this->verbose('DELETE request to: ' . $url .
+                   '<hr />Arguments: ' . highlight_string('<?php ' . var_export($data, TRUE), TRUE) .
+                   '<hr />Response: ' . highlight_string('<?php ' . var_export($body, TRUE), TRUE) .
+                   '<hr />Curl info: ' . highlight_string('<?php ' . var_export($info, TRUE), TRUE) .
+                   '<hr />Raw response: ' . $content);
+    return array('header' => $header, 'status' => $status, 'code' => $code, 'body' => $body);
+  }
+
+  /**
+   * Perform HEAD request.
+   */
+  protected function servicesHead($url) {
+    $url = url($this->getAbsoluteUrl($url) . '.php');
+
+    $content = $this->curlExec(array(
+      CURLOPT_URL => $url,
+      CURLOPT_CUSTOMREQUEST => 'HEAD',
+      CURLOPT_HEADER => TRUE,
+      CURLOPT_RETURNTRANSFER => TRUE
+    ));
+
+    // Parse response.
+    list($info, $header, $status, $code, $body) = $this->parseHeader($content);
+
+    $this->verbose('HEAD request to: ' . $url .
+      '<hr />Curl info: ' . highlight_string('<?php ' . var_export($info, TRUE), TRUE) .
+      '<hr />Raw response: ' . $content);
+    return array('header' => $header, 'status' => $status, 'code' => $code, 'body' => $body);
+  }
+
+  /*
+  ------------------------------------
+  HELPER METHODS
+  ------------------------------------
+  */
+
+  /**
+   * Parse header.
+   *
+   * @param type $content
+   * @return type
+   */
+  function parseHeader($content, $call_type = 'php') {
+    $info = curl_getinfo($this->curlHandle);
+    $header = drupal_substr($content, 0, $info['header_size']);
+    $header = str_replace("HTTP/1.1 100 Continue\r\n\r\n", '', $header);
+    $status = strtok($header, "\r\n");
+    $code = $info['http_code'];
+
+    $raw_body = drupal_substr($content, $info['header_size'], drupal_strlen($content) - $info['header_size']);
+    switch ($call_type) {
+      case 'php':
+        $body = unserialize($raw_body);
+        break;
+      case 'json':
+        $body = json_decode($raw_body);
+        break;
+    }
+    return array($info, $header, $status, $code, $body);
+  }
+
+  /**
+   * Retrieve and set CSFR token header.
+   *
+   * @param array $headers
+   */
+  function addCSRFHeader(&$headers) {
+    $csrf_token = $this->drupalGet('services/session/token');
+    $headers[] = 'X-CSRF-Token: ' . $csrf_token;
+  }
+
+  /**
+   * Creates a data array for populating an endpoint creation form.
+   *
+   * @return
+   * An array of fields for fully populating an endpoint creation form.
+   */
+  public function populateEndpointFAPI() {
+    return array(
+      'name'   => strtolower($this->randomName(10)),
+      'path'   => $this->randomName(10),
+      'server' => 'rest_server',
+    );
+  }
+
+  public function saveNewEndpoint() {
+    $edit = $this->populateEndpointFAPI() ;
+    $endpoint = new stdClass;
+    $endpoint->disabled = FALSE; /* Edit this to true to make a default endpoint disabled initially */
+    $endpoint->api_version = 3;
+    $endpoint->name = $edit['name'];
+    $endpoint->server = $edit['server'];
+    $endpoint->path = $edit['path'];
+    $endpoint->authentication = array(
+      'services' => 'services',
+    );
+    $endpoint->server_settings = array(
+      'formatters' => array(
+        'json' => TRUE,
+        'bencode' => TRUE,
+        'rss' => TRUE,
+        'plist' => TRUE,
+        'xmlplist' => TRUE,
+        'php' => TRUE,
+        'yaml' => TRUE,
+        'jsonp' => FALSE,
+        'xml' => FALSE,
+      ),
+      'parsers' => array(
+        'application/x-yaml' => TRUE,
+        'application/json' => TRUE,
+        'application/vnd.php.serialized' => TRUE,
+        'application/plist' => TRUE,
+        'application/plist+xml' => TRUE,
+        'application/x-www-form-urlencoded' => TRUE,
+        'multipart/form-data' => TRUE,
+      ),
+    );
+    $endpoint->resources = array(
+      'comment' => array(
+        'operations' => array(
+          'create' => array(
+            'enabled' => 1,
+          ),
+          'retrieve' => array(
+            'enabled' => 1,
+          ),
+          'update' => array(
+            'enabled' => 1,
+          ),
+          'delete' => array(
+            'enabled' => 1,
+          ),
+          'index' => array(
+            'enabled' => 1,
+          ),
+        ),
+        'actions' => array(
+          'countAll' => array(
+            'enabled' => 1,
+          ),
+          'countNew' => array(
+            'enabled' => 1,
+          ),
+        ),
+      ),
+      'file' => array(
+        'operations' => array(
+          'create' => array(
+            'enabled' => 1,
+          ),
+          'retrieve' => array(
+            'enabled' => 1,
+          ),
+          'delete' => array(
+            'enabled' => 1,
+          ),
+          'index' => array(
+            'enabled' => 1,
+          ),
+        ),
+        'actions' => array(
+          'create_raw' => array(
+            'enabled' => 1,
+          ),
+        ),
+      ),
+      'node' => array(
+        'operations' => array(
+          'retrieve' => array(
+            'enabled' => 1,
+          ),
+          'create' => array(
+            'enabled' => 1,
+          ),
+          'update' => array(
+            'enabled' => 1,
+          ),
+          'delete' => array(
+            'enabled' => 1,
+          ),
+          'index' => array(
+            'enabled' => 1,
+          ),
+        ),
+        'relationships' => array(
+          'files' => array(
+            'enabled' => 1,
+          ),
+          'comments' => array(
+            'enabled' => 1,
+          ),
+        ),
+        'targeted_actions' => array(
+          'attach_file' => array(
+            'enabled' => 1,
+          ),
+        ),
+      ),
+      'system' => array(
+        'actions' => array(
+          'connect' => array(
+            'enabled' => 1,
+          ),
+          'get_variable' => array(
+            'enabled' => 1,
+          ),
+          'set_variable' => array(
+            'enabled' => 1,
+          ),
+          'del_variable' => array(
+            'enabled' => 1,
+          ),
+        ),
+      ),
+      'taxonomy_term' => array(
+        'operations' => array(
+          'retrieve' => array(
+            'enabled' => 1,
+          ),
+          'create' => array(
+            'enabled' => 1,
+          ),
+          'update' => array(
+            'enabled' => 1,
+          ),
+          'delete' => array(
+            'enabled' => 1,
+          ),
+          'index' => array(
+            'enabled' => 1,
+          ),
+        ),
+        'actions' => array(
+          'selectNodes' => array(
+            'enabled' => 1,
+          ),
+        ),
+      ),
+      'taxonomy_vocabulary' => array(
+        'operations' => array(
+          'retrieve' => array(
+            'enabled' => 1,
+          ),
+          'create' => array(
+            'enabled' => 1,
+          ),
+          'update' => array(
+            'enabled' => 1,
+          ),
+          'delete' => array(
+            'enabled' => 1,
+          ),
+          'index' => array(
+            'enabled' => 1,
+          ),
+        ),
+        'actions' => array(
+          'getTree' => array(
+            'enabled' => 1,
+          ),
+        ),
+      ),
+      'user' => array(
+        'operations' => array(
+          'retrieve' => array(
+            'enabled' => 1,
+          ),
+          'create' => array(
+            'enabled' => 1,
+          ),
+          'update' => array(
+            'enabled' => 1,
+          ),
+          'delete' => array(
+            'enabled' => 1,
+          ),
+          'index' => array(
+            'enabled' => 1,
+          ),
+        ),
+        'actions' => array(
+          'login' => array(
+            'enabled' => 1,
+          ),
+          'logout' => array(
+            'enabled' => '1',
+            'settings' => array(
+              'services' => array(
+                'resource_api_version' => '1.1',
+              ),
+            ),
+          ),
+          'register' => array(
+            'enabled' => 1,
+          ),
+        ),
+        'targeted_actions' => array(
+          'cancel' => array(
+            'enabled' => 1,
+          ),
+          'password_reset' => array(
+            'enabled' => 1,
+          ),
+          'resend_welcome_email' => array(
+            'enabled' => 1,
+          ),
+        ),
+      ),
+    );
+    $endpoint->debug = 1;
+    $endpoint->export_type = FALSE;
+    services_endpoint_save($endpoint);
+    $endpoint = services_endpoint_load($endpoint->name);
+    $this->assertTrue($endpoint->name == $edit['name'], 'Endpoint successfully created');
+    return $endpoint;
+  }
+
+  public function saveNewVersionEndpoint($version = '1.0') {
+    $edit = $this->populateEndpointFAPI() ;
+    $endpoint = new stdClass();
+    $endpoint->disabled = FALSE; /* Edit this to true to make a default endpoint disabled initially */
+    $endpoint->api_version = 3;
+    $endpoint->name = $edit['name'];
+    $endpoint->server = $edit['server'];
+    $endpoint->path = $edit['path'];
+    $endpoint->authentication = array(
+      'services' => array(),
+    );
+    $endpoint->server_settings = array(
+      'formatters' => array(
+        'bencode' => TRUE,
+        'json' => TRUE,
+        'php' => TRUE,
+        'plist' => TRUE,
+        'rss' => TRUE,
+        'xml' => TRUE,
+        'xmlplist' => TRUE,
+        'jsonp' => FALSE,
+      ),
+      'parsers' => array(
+        'application/json' => TRUE,
+        'application/plist' => TRUE,
+        'application/plist+xml' => TRUE,
+        'application/vnd.php.serialized' => TRUE,
+        'multipart/form-data' => TRUE,
+        'application/x-www-form-urlencoded' => TRUE,
+      ),
+    );
+    $endpoint->resources = array(
+      'comment' => array(
+        'operations' => array(
+          'create' => array(
+            'enabled' => '1',
+          ),
+          'retrieve' => array(
+            'enabled' => '1',
+          ),
+          'update' => array(
+            'enabled' => '1',
+          ),
+          'delete' => array(
+            'enabled' => '1',
+          ),
+          'index' => array(
+            'enabled' => '1',
+          ),
+        ),
+        'actions' => array(
+          'countAll' => array(
+            'enabled' => '1',
+          ),
+          'countNew' => array(
+            'enabled' => '1',
+          ),
+        ),
+      ),
+      'file' => array(
+        'operations' => array(
+          'create' => array(
+            'enabled' => '1',
+          ),
+          'retrieve' => array(
+            'enabled' => '1',
+          ),
+          'delete' => array(
+            'enabled' => '1',
+          ),
+          'index' => array(
+            'enabled' => '1',
+          ),
+        ),
+        'actions' => array(
+          'create_raw' => array(
+            'enabled' => '1',
+          ),
+        ),
+      ),
+      'node' => array(
+        'operations' => array(
+          'retrieve' => array(
+            'enabled' => '1',
+          ),
+          'create' => array(
+            'enabled' => '1',
+          ),
+          'update' => array(
+            'enabled' => '1',
+          ),
+          'delete' => array(
+            'enabled' => '1',
+          ),
+          'index' => array(
+            'enabled' => '1',
+          ),
+        ),
+        'relationships' => array(
+          'files' => array(
+            'enabled' => '1',
+          ),
+          'comments' => array(
+            'enabled' => '1',
+          ),
+        ),
+      ),
+      'system' => array(
+        'actions' => array(
+          'connect' => array(
+            'enabled' => '1',
+          ),
+          'get_variable' => array(
+            'enabled' => '1',
+          ),
+          'set_variable' => array(
+            'enabled' => '1',
+          ),
+          'del_variable' => array(
+            'enabled' => '1',
+          ),
+        ),
+      ),
+      'taxonomy_term' => array(
+        'operations' => array(
+          'retrieve' => array(
+            'enabled' => '1',
+          ),
+          'create' => array(
+            'enabled' => '1',
+          ),
+          'update' => array(
+            'enabled' => '1',
+          ),
+          'delete' => array(
+            'enabled' => '1',
+          ),
+          'index' => array(
+            'enabled' => '1',
+          ),
+        ),
+        'actions' => array(
+          'selectNodes' => array(
+            'enabled' => '1',
+          ),
+        ),
+      ),
+      'taxonomy_vocabulary' => array(
+        'operations' => array(
+          'retrieve' => array(
+            'enabled' => '1',
+          ),
+          'create' => array(
+            'enabled' => '1',
+          ),
+          'update' => array(
+            'enabled' => '1',
+          ),
+          'delete' => array(
+            'enabled' => '1',
+          ),
+          'index' => array(
+            'enabled' => '1',
+          ),
+        ),
+        'actions' => array(
+          'getTree' => array(
+            'enabled' => '1',
+          ),
+        ),
+      ),
+      'user' => array(
+        'operations' => array(
+          'retrieve' => array(
+            'enabled' => '1',
+          ),
+          'create' => array(
+            'enabled' => '1',
+          ),
+          'update' => array(
+            'enabled' => '1',
+          ),
+          'delete' => array(
+            'enabled' => '1',
+          ),
+          'index' => array(
+            'enabled' => '1',
+          ),
+        ),
+        'actions' => array(
+          'login' => array(
+            'enabled' => '1',
+            'settings' => array(
+              'services' => array(
+                'resource_api_version' => $version,
+              ),
+            ),
+          ),
+          'logout' => array(
+            'enabled' => '1',
+          ),
+          'register' => array(
+            'enabled' => '1',
+          ),
+        ),
+        'targeted_actions' => array(
+          'cancel' => array(
+            'enabled' => 1,
+          ),
+          'password_reset' => array(
+            'enabled' => 1,
+          ),
+          'resend_welcome_email' => array(
+            'enabled' => 1,
+          ),
+        ),
+      ),
+      'services_test' => array(
+        'operations' => array(
+          'retrieve' => array(
+            'enabled' => '1',
+            'settings' => array(
+              'services' => array(
+                'resource_api_version' => $version,
+              ),
+            ),
+          ),
+        ),
+      ),
+      'views' => array(
+        'operations' => array(
+          'retrieve' => array(
+            'enabled' => '1',
+          ),
+        ),
+      ),
+    );
+    $endpoint->debug = 0;
+    $endpoint->export_type = FALSE;
+    services_endpoint_save($endpoint);
+    $endpoint = services_endpoint_load($endpoint->name);
+    $this->assertTrue($endpoint->name == $edit['name'], 'Endpoint successfully created');
+    return $endpoint;
+  }
+
+  /**
+   * Performs a cURL exec with the specified options after calling curlConnect().
+   *
+   * @param $curl_options
+   *   Custom cURL options.
+   * @return
+   *   Content returned from the exec.
+   */
+  protected function curlExec($curl_options, $redirect = FALSE) {
+    // Some Curl options might leave the handle in a state where subsequent
+    // request can cause warnings or even weird failures, so to be on the safe
+    // side we reinitialize Curl for each request.
+    $this->curlClose();
+
+    $this->curlInitialize();
+
+    // cURL incorrectly handles URLs with a fragment by including the
+    // fragment in the request to the server, causing some web servers
+    // to reject the request citing "400 - Bad Request". To prevent
+    // this, we strip the fragment from the request.
+    // TODO: Remove this for Drupal 8, since fixed in curl 7.20.0.
+    if (!empty($curl_options[CURLOPT_URL]) && strpos($curl_options[CURLOPT_URL], '#')) {
+      $original_url = $curl_options[CURLOPT_URL];
+      $curl_options[CURLOPT_URL] = strtok($curl_options[CURLOPT_URL], '#');
+    }
+
+    $url = empty($curl_options[CURLOPT_URL]) ? curl_getinfo($this->curlHandle, CURLINFO_EFFECTIVE_URL) : $curl_options[CURLOPT_URL];
+
+    if (!empty($curl_options[CURLOPT_POST])) {
+      // This is a fix for the Curl library to prevent Expect: 100-continue
+      // headers in POST requests, that may cause unexpected HTTP response
+      // codes from some webservers (like lighttpd that returns a 417 error
+      // code). It is done by setting an empty "Expect" header field that is
+      // not overwritten by Curl.
+      $curl_options[CURLOPT_HTTPHEADER][] = 'Expect:';
+    }
+
+    curl_setopt_array($this->curlHandle, $this->additionalCurlOptions + $curl_options);
+
+    if (!$redirect) {
+      // Reset headers, the session ID and the redirect counter.
+      $this->session_id = NULL;
+      $this->headers = array();
+      $this->redirect_count = 0;
+    }
+
+    $content = curl_exec($this->curlHandle);
+    $status = curl_getinfo($this->curlHandle, CURLINFO_HTTP_CODE);
+
+    // cURL incorrectly handles URLs with fragments, so instead of
+    // letting cURL handle redirects we take of them ourselves to
+    // to prevent fragments being sent to the web server as part
+    // of the request.
+    // TODO: Remove this for Drupal 8, since fixed in curl 7.20.0.
+    if (in_array($status, array(300, 301, 302, 303, 305, 307)) && $this->redirect_count < variable_get('simpletest_maximum_redirects', 5)) {
+      if ($this->drupalGetHeader('location')) {
+        $this->redirect_count++;
+        $curl_options = array();
+        $curl_options[CURLOPT_URL] = $this->drupalGetHeader('location');
+        $curl_options[CURLOPT_HTTPGET] = TRUE;
+        return $this->curlExec($curl_options, TRUE);
+      }
+    }
+
+    $this->drupalSetContent($content, isset($original_url) ? $original_url : curl_getinfo($this->curlHandle, CURLINFO_EFFECTIVE_URL));
+
+    // Analyze the method for log message.
+    $method = '';
+    if (!empty($curl_options[CURLOPT_NOBODY])) {
+      $method = 'HEAD';
+    }
+
+    if (empty($method) && !empty($curl_options[CURLOPT_PUT])) {
+      $method = 'PUT';
+    }
+
+    if (empty($method) && !empty($curl_options[CURLOPT_CUSTOMREQUEST])) {
+      $method = $curl_options[CURLOPT_CUSTOMREQUEST];
+    }
+
+    if (empty($method)) {
+      $method = empty($curl_options[CURLOPT_POSTFIELDS]) ? 'GET' : 'POST';
+    }
+    $message_vars = array(
+      '!method' => $method,
+      '@url' => isset($original_url) ? $original_url : $url,
+      '@status' => $status,
+      '!length' => format_size(drupal_strlen($this->drupalGetContent()))
+    );
+    $message = format_string('!method @url returned @status (!length).', $message_vars);
+    $this->assertTrue($this->drupalGetContent() !== FALSE, $message, 'Browser');
+    return $this->drupalGetContent();
+  }
+    /**
+   * Default values of comment for creating.
+   */
+  public function getCommentValues($nid) {
+    return array(
+      'subject' => $this->randomString(),
+      'comment_body' => array(
+        LANGUAGE_NONE => array(
+          array(
+            'value' => $this->randomString(),
+            'format' => filter_default_format(),
+          )
+        )
+      ),
+      'name' => $this->privileged_user->name,
+      'language' => LANGUAGE_NONE,
+      'nid' => $nid,
+      'uid' => $this->privileged_user->uid,
+      'cid' => NULL,
+      'pid' => 0,
+    );
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/services_test_resource/services_test_resource.info drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/services_test_resource/services_test_resource.info
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/services_test_resource/services_test_resource.info	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/services_test_resource/services_test_resource.info	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,17 @@
+name = Services Test Resource
+description = Provide test methods to check different situations.
+package = Services
+core = 7.x
+php = 5.x
+
+; This module for tests only.
+hidden = TRUE
+
+dependencies[] = services
+
+; Information added by Drupal.org packaging script on 2014-01-31
+version = "7.x-3.7"
+core = "7.x"
+project = "services"
+datestamp = "1391207946"
+
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/services_test_resource/services_test_resource.module drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/services_test_resource/services_test_resource.module
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/services_test_resource/services_test_resource.module	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/services_test_resource/services_test_resource.module	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,181 @@
+<?php
+
+/**
+ * Implements hook_services_resources().
+ */
+function services_test_resource_services_resources() {
+  return array(
+    'services_test' => array(
+      'retrieve' => array(
+        'callback' => '_services_test_resource_retrieve',
+        'args' => array(
+          array(
+            'name' => 'arg1',
+            'optional' => FALSE,
+            'source' => array('path' => 0),
+            'type' => 'int',
+            'description' => 'Test argument 1.',
+          ),
+        ),
+        'access callback' => '_services_test_resource_access',
+        'access arguments' => array('view'),
+        'access arguments append' => TRUE,
+      ),
+      'actions' => array(
+        'action_retrieve' => array(
+          'access callback' => '_services_test_resource_access',
+          'access arguments' => array('view'),
+          'access arguments append' => TRUE,
+          'callback' => '_services_test_resource_action_retrieve',
+          'args' => array(
+            array(
+              'name' => 'arg1',
+              'optional' => FALSE,
+              'source' => array('path' => 0),
+              'type' => 'int',
+              'description' => 'Test argument 1.',
+            ),
+          ),
+        ),
+      ),
+      'targeted_actions' => array(
+        'test' => array(
+          'access callback' => '_services_test_resource_access',
+          'access arguments' => array('view'),
+          'access arguments append' => TRUE,
+          'callback' => '_services_test_resource_targeted_action_test',
+          'args' => array(
+            array(
+              'name' => 'arg1',
+              'optional' => FALSE,
+              'source' => array('path' => 0),
+              'type' => 'int',
+              'description' => 'Test argument 1.',
+            ),
+          ),
+        ),
+      ),
+    ),
+    'services_arguments_test' => array(
+      'retrieve' => array(
+        'callback' => '_services_arguments_test_resource_retrieve',
+        'args' => array(
+          array(
+            'name' => 'arg1',
+            'optional' => FALSE,
+            'source' => array('path' => 0),
+            'type' => 'string',
+            'description' => 'Test argument 1.',
+          ),
+          array(
+            'name' => 'string',
+            'optional' => FALSE,
+            'source' => array('path' => 1),
+            'type' => 'int',
+            'description' => 'Test argument 2.',
+          ),
+          array(
+            'name' => 'string',
+            'optional' => TRUE,
+            'source' => array('path' => 2),
+            'type' => 'int',
+            'default value' => '0',
+            'description' => 'Test argument 3.',
+          ),
+        ),
+        'access callback' => '_services_test_resource_access',
+        'access arguments' => array('view'),
+        'access arguments append' => TRUE,
+      ),
+    ),
+  );
+}
+
+/**
+ * CRUD retrieve callback.
+ */
+function _services_test_resource_retrieve($arg1) {
+  return 'CRUD Retrieve ' . $arg1;
+}
+
+//Change type to string.
+//Add an additional argument
+function _services_test_resource_retrieve_update_1_1() {
+  $new_set = array(
+    'help' => 'retrieve an item for yourself',
+    'args' => array(
+      array(
+        'name' => 'arg1',
+        'optional' => FALSE,
+        'source' => array('path' => 0),
+        'type' => 'string',
+        'description' => 'Test argument 1.',
+      ),
+      array(
+        'name' => 'arg2',
+        'optional' => FALSE,
+        'source' => array('param' => 'arg2'),
+        'type' => 'string',
+        'description' => 'Test argument 2.',
+      ),
+    ),
+  );
+  return $new_set;
+}
+//Make arg 2 optional.
+//Update callback so the argument can be returned/used in some fashion.
+function _services_test_resource_retrieve_update_1_2() {
+  $new_set = array(
+    'callback' => '_services_test_resource_retrieve_callback_1_2',
+    'help' => 'retrieve an item for yourself',
+    'args' => array(
+      array(
+        'name' => 'arg1',
+        'optional' => FALSE,
+        'source' => array('path' => 0),
+        'type' => 'string',
+        'description' => 'Test argument 1.',
+      ),
+      array(
+        'name' => 'arg2',
+        'optional' => TRUE,
+        'source' => array('param' => 'arg2'),
+        'type' => 'string',
+        'description' => 'Test argument 2.',
+        'default value' => 0,
+      ),
+    ),
+  );
+  return $new_set;
+}
+//Update to retrieve callback
+function _services_test_resource_retrieve_callback_1_2($arg1, $arg2) {
+  return $arg1 .':'. $arg2;
+}
+/**
+ * Action retrieve callback.
+ */
+function _services_test_resource_action_retrieve($arg1) {
+  return 'Action retrieve' . $arg1;
+}
+
+
+/**
+ * Targeted Action test callback.
+ */
+function _services_test_resource_targeted_action_test($arg1) {
+  return 'Targeted Action test' . $arg1;
+}
+/**
+ * Access callback.
+ */
+function _services_test_resource_access($op) {
+  return TRUE;
+}
+
+/**
+ * Retrieve method of services_arguments_test resource.
+ */
+function _services_arguments_test_resource_retrieve($arg1, $arg2, $arg3) {
+  return format_string('Services arguments test @arg1 @arg2 @arg3', array('@arg1' => $arg1, '@arg2' => $arg2, '@arg3' => $arg3));
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/ui/ServicesUITests.test drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/ui/ServicesUITests.test
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/ui/ServicesUITests.test	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/ui/ServicesUITests.test	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,109 @@
+<?php
+
+/**
+ * @file
+ * Tests for UI of Services.
+ */
+
+class ServicesUITest extends DrupalWebTestCase {
+  protected $privilegedUser;
+
+  public static function getInfo() {
+    return array(
+      'name' => 'UI tests',
+      'description' => 'Test of Services UI.',
+      'group' => 'Services',
+    );
+  }
+
+  function setUp() {
+    parent::setUp(array('ctools', 'services', 'rest_server'));
+    $this->privilegedUser = $this->drupalCreateUser(array('administer services', 'administer site configuration'));
+    $this->drupalLogin($this->privilegedUser);
+  }
+
+  function testEndpointMachineName() {
+    // Try to create endpoint with bad machine name.
+    $edit = array(
+      'name' => 're st',
+      'server' => 'rest_server',
+      'path' => 'rest',
+    );
+    $this->drupalPost('admin/structure/services/add', $edit, 'Save');
+    $this->assertText('The endpoint name can only consist of lowercase letters, underscores, and numbers.',
+      'It is not possible to create endpoint with bad machine name.');
+
+    // Create endpoint properly.
+    $edit = array(
+      'name' => 'rest',
+      'server' => 'rest_server',
+      'path' => 'rest',
+    );
+    $this->drupalPost('admin/structure/services/add', $edit, 'Save');
+    $this->assertText('rest', 'Endpoint create successfully.');
+
+    // Try to create endpoint with same machine name.
+    $edit = array(
+      'name' => 'rest',
+      'server' => 'rest_server',
+      'path' => 'rest1',
+    );
+    $this->drupalPost('admin/structure/services/add', $edit, 'Save');
+    $this->assertText('The machine-readable name is already in use. It must be unique.',
+      'It is not possible to create endpoint with existing machine name.');
+
+    // Try to create endpoint with same path.
+    $edit = array(
+      'name' => 'rest1',
+      'server' => 'rest_server',
+      'path' => 'rest',
+    );
+    $this->drupalPost('admin/structure/services/add', $edit, 'Save');
+    $this->assertText('Endpoint path must be unique.', 'It is not possible to create endpoint with existing path.');
+  }
+
+  /**
+   * Test that adding a menu endpoint creates an menu path for that item.
+   */
+  public function testEndpointMenu() {
+    // Create the endpoint.
+    $endpoint_settings = array(
+      'name'   => 'machine_name',
+      'path'   => $this->randomName(10),
+      'server' => 'rest_server',
+    );
+
+    $this->drupalPost('admin/structure/services/add', $endpoint_settings, 'Save');
+    $this->assertResponse('200', 'Create Endpoint.');
+
+    // Enable node resource index method.
+    $resource_settings = array(
+      'resources[node][operations][index][enabled]' => '1',
+    );
+    $this->drupalPost('admin/structure/services/list/' . $endpoint_settings['name'] . '/resources',
+      $resource_settings, 'Save');
+    $this->assertResponse('200', 'Node resource index method enabled successfully.');
+
+    // Check path.
+    $this->drupalGet($endpoint_settings['path'] . '/node');
+    $this->assertResponse('200', 'Accessed endpoint menu path node index method.');
+
+    // After accessing node resource we got logged out. So we login again.
+    $this->drupalLogin($this->privilegedUser);
+
+    // Check edit.
+    $this->drupalGet('admin/structure/services/list/' . $endpoint_settings['name']
+      . '/edit');
+    $this->assertResponse('200', 'Access endpoint edit path.') ;
+
+    // Check export.
+    $this->drupalGet('admin/structure/services/list/' . $endpoint_settings['name']
+      . '/export');
+    $this->assertResponse('200', 'Access endpoint export path.') ;
+
+    // Check delete.
+    $this->drupalGet('admin/structure/services/list/' . $endpoint_settings['name']
+      . '/delete');
+    $this->assertResponse('200', 'Access endpoint delete path.') ;
+  }
+}
\ Brak znaku nowej linii na końcu pliku
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/unit/ServicesSpycLibraryTests.test drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/unit/ServicesSpycLibraryTests.test
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/unit/ServicesSpycLibraryTests.test	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services/tests/unit/ServicesSpycLibraryTests.test	2014-05-21 21:42:50.000000000 +0200
@@ -0,0 +1,40 @@
+<?php
+
+
+/**
+ * Run test cases to check whether Spyc library can be downloaded.
+ *
+ */
+class ServicesSpycLibraryTests extends DrupalUnitTestCase {
+
+  /**
+   * Implementation of getInfo().
+   */
+  public static function getInfo() {
+    return array(
+      'name' => 'Spyc Library',
+      'description' => 'Test if we can download Spyc library.',
+      'group' => 'Services',
+    );
+  }
+
+  /**
+   * Testing whether link in make file is valid.
+   */
+  public function testMakeFileLinkValid() {
+    $makefile_path = drupal_get_path('module', 'services') . '/services.make';
+    $makefile_content = file_get_contents($makefile_path);
+    // libraries[spyc][download][url] = "https://raw.github.com/mustangostang/spyc/79f61969f63ee77e0d9460bc254a27a671b445f3/spyc.php"
+    $matches = array();
+    preg_match('/libraries\[spyc\]\[download\]\[url\] = (.*)/', $makefile_content, $matches);
+    $spyc_library_url = $matches[1];
+    $spyc_library_content = file_get_contents($spyc_library_url);
+
+    $search_keywords = array('<?php', 'Spyc', 'YAML');
+    $spyc_library_valid = TRUE;
+    foreach ($search_keywords as $keyword) {
+      $spyc_library_valid = $spyc_library_valid && strpos($spyc_library_content, $keyword) !== FALSE;
+    }
+    $this->assertTrue($spyc_library_valid, 'Spyc library can be downloaded from make file.');
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/LICENSE.txt drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/LICENSE.txt
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/LICENSE.txt	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/LICENSE.txt	2014-05-21 21:44:21.000000000 +0200
@@ -0,0 +1,339 @@
+                    GNU GENERAL PUBLIC LICENSE
+                       Version 2, June 1991
+
+ Copyright (C) 1989, 1991 Free Software Foundation, Inc.,
+ 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+                            Preamble
+
+  The licenses for most software are designed to take away your
+freedom to share and change it.  By contrast, the GNU General Public
+License is intended to guarantee your freedom to share and change free
+software--to make sure the software is free for all its users.  This
+General Public License applies to most of the Free Software
+Foundation's software and to any other program whose authors commit to
+using it.  (Some other Free Software Foundation software is covered by
+the GNU Lesser General Public License instead.)  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+this service if you wish), that you receive source code or can get it
+if you want it, that you can change the software or use pieces of it
+in new free programs; and that you know you can do these things.
+
+  To protect your rights, we need to make restrictions that forbid
+anyone to deny you these rights or to ask you to surrender the rights.
+These restrictions translate to certain responsibilities for you if you
+distribute copies of the software, or if you modify it.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must give the recipients all the rights that
+you have.  You must make sure that they, too, receive or can get the
+source code.  And you must show them these terms so they know their
+rights.
+
+  We protect your rights with two steps: (1) copyright the software, and
+(2) offer you this license which gives you legal permission to copy,
+distribute and/or modify the software.
+
+  Also, for each author's protection and ours, we want to make certain
+that everyone understands that there is no warranty for this free
+software.  If the software is modified by someone else and passed on, we
+want its recipients to know that what they have is not the original, so
+that any problems introduced by others will not reflect on the original
+authors' reputations.
+
+  Finally, any free program is threatened constantly by software
+patents.  We wish to avoid the danger that redistributors of a free
+program will individually obtain patent licenses, in effect making the
+program proprietary.  To prevent this, we have made it clear that any
+patent must be licensed for everyone's free use or not licensed at all.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+                    GNU GENERAL PUBLIC LICENSE
+   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
+
+  0. This License applies to any program or other work which contains
+a notice placed by the copyright holder saying it may be distributed
+under the terms of this General Public License.  The "Program", below,
+refers to any such program or work, and a "work based on the Program"
+means either the Program or any derivative work under copyright law:
+that is to say, a work containing the Program or a portion of it,
+either verbatim or with modifications and/or translated into another
+language.  (Hereinafter, translation is included without limitation in
+the term "modification".)  Each licensee is addressed as "you".
+
+Activities other than copying, distribution and modification are not
+covered by this License; they are outside its scope.  The act of
+running the Program is not restricted, and the output from the Program
+is covered only if its contents constitute a work based on the
+Program (independent of having been made by running the Program).
+Whether that is true depends on what the Program does.
+
+  1. You may copy and distribute verbatim copies of the Program's
+source code as you receive it, in any medium, provided that you
+conspicuously and appropriately publish on each copy an appropriate
+copyright notice and disclaimer of warranty; keep intact all the
+notices that refer to this License and to the absence of any warranty;
+and give any other recipients of the Program a copy of this License
+along with the Program.
+
+You may charge a fee for the physical act of transferring a copy, and
+you may at your option offer warranty protection in exchange for a fee.
+
+  2. You may modify your copy or copies of the Program or any portion
+of it, thus forming a work based on the Program, and copy and
+distribute such modifications or work under the terms of Section 1
+above, provided that you also meet all of these conditions:
+
+    a) You must cause the modified files to carry prominent notices
+    stating that you changed the files and the date of any change.
+
+    b) You must cause any work that you distribute or publish, that in
+    whole or in part contains or is derived from the Program or any
+    part thereof, to be licensed as a whole at no charge to all third
+    parties under the terms of this License.
+
+    c) If the modified program normally reads commands interactively
+    when run, you must cause it, when started running for such
+    interactive use in the most ordinary way, to print or display an
+    announcement including an appropriate copyright notice and a
+    notice that there is no warranty (or else, saying that you provide
+    a warranty) and that users may redistribute the program under
+    these conditions, and telling the user how to view a copy of this
+    License.  (Exception: if the Program itself is interactive but
+    does not normally print such an announcement, your work based on
+    the Program is not required to print an announcement.)
+
+These requirements apply to the modified work as a whole.  If
+identifiable sections of that work are not derived from the Program,
+and can be reasonably considered independent and separate works in
+themselves, then this License, and its terms, do not apply to those
+sections when you distribute them as separate works.  But when you
+distribute the same sections as part of a whole which is a work based
+on the Program, the distribution of the whole must be on the terms of
+this License, whose permissions for other licensees extend to the
+entire whole, and thus to each and every part regardless of who wrote it.
+
+Thus, it is not the intent of this section to claim rights or contest
+your rights to work written entirely by you; rather, the intent is to
+exercise the right to control the distribution of derivative or
+collective works based on the Program.
+
+In addition, mere aggregation of another work not based on the Program
+with the Program (or with a work based on the Program) on a volume of
+a storage or distribution medium does not bring the other work under
+the scope of this License.
+
+  3. You may copy and distribute the Program (or a work based on it,
+under Section 2) in object code or executable form under the terms of
+Sections 1 and 2 above provided that you also do one of the following:
+
+    a) Accompany it with the complete corresponding machine-readable
+    source code, which must be distributed under the terms of Sections
+    1 and 2 above on a medium customarily used for software interchange; or,
+
+    b) Accompany it with a written offer, valid for at least three
+    years, to give any third party, for a charge no more than your
+    cost of physically performing source distribution, a complete
+    machine-readable copy of the corresponding source code, to be
+    distributed under the terms of Sections 1 and 2 above on a medium
+    customarily used for software interchange; or,
+
+    c) Accompany it with the information you received as to the offer
+    to distribute corresponding source code.  (This alternative is
+    allowed only for noncommercial distribution and only if you
+    received the program in object code or executable form with such
+    an offer, in accord with Subsection b above.)
+
+The source code for a work means the preferred form of the work for
+making modifications to it.  For an executable work, complete source
+code means all the source code for all modules it contains, plus any
+associated interface definition files, plus the scripts used to
+control compilation and installation of the executable.  However, as a
+special exception, the source code distributed need not include
+anything that is normally distributed (in either source or binary
+form) with the major components (compiler, kernel, and so on) of the
+operating system on which the executable runs, unless that component
+itself accompanies the executable.
+
+If distribution of executable or object code is made by offering
+access to copy from a designated place, then offering equivalent
+access to copy the source code from the same place counts as
+distribution of the source code, even though third parties are not
+compelled to copy the source along with the object code.
+
+  4. You may not copy, modify, sublicense, or distribute the Program
+except as expressly provided under this License.  Any attempt
+otherwise to copy, modify, sublicense or distribute the Program is
+void, and will automatically terminate your rights under this License.
+However, parties who have received copies, or rights, from you under
+this License will not have their licenses terminated so long as such
+parties remain in full compliance.
+
+  5. You are not required to accept this License, since you have not
+signed it.  However, nothing else grants you permission to modify or
+distribute the Program or its derivative works.  These actions are
+prohibited by law if you do not accept this License.  Therefore, by
+modifying or distributing the Program (or any work based on the
+Program), you indicate your acceptance of this License to do so, and
+all its terms and conditions for copying, distributing or modifying
+the Program or works based on it.
+
+  6. Each time you redistribute the Program (or any work based on the
+Program), the recipient automatically receives a license from the
+original licensor to copy, distribute or modify the Program subject to
+these terms and conditions.  You may not impose any further
+restrictions on the recipients' exercise of the rights granted herein.
+You are not responsible for enforcing compliance by third parties to
+this License.
+
+  7. If, as a consequence of a court judgment or allegation of patent
+infringement or for any other reason (not limited to patent issues),
+conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot
+distribute so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you
+may not distribute the Program at all.  For example, if a patent
+license would not permit royalty-free redistribution of the Program by
+all those who receive copies directly or indirectly through you, then
+the only way you could satisfy both it and this License would be to
+refrain entirely from distribution of the Program.
+
+If any portion of this section is held invalid or unenforceable under
+any particular circumstance, the balance of the section is intended to
+apply and the section as a whole is intended to apply in other
+circumstances.
+
+It is not the purpose of this section to induce you to infringe any
+patents or other property right claims or to contest validity of any
+such claims; this section has the sole purpose of protecting the
+integrity of the free software distribution system, which is
+implemented by public license practices.  Many people have made
+generous contributions to the wide range of software distributed
+through that system in reliance on consistent application of that
+system; it is up to the author/donor to decide if he or she is willing
+to distribute software through any other system and a licensee cannot
+impose that choice.
+
+This section is intended to make thoroughly clear what is believed to
+be a consequence of the rest of this License.
+
+  8. If the distribution and/or use of the Program is restricted in
+certain countries either by patents or by copyrighted interfaces, the
+original copyright holder who places the Program under this License
+may add an explicit geographical distribution limitation excluding
+those countries, so that distribution is permitted only in or among
+countries not thus excluded.  In such case, this License incorporates
+the limitation as if written in the body of this License.
+
+  9. The Free Software Foundation may publish revised and/or new versions
+of the General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+Each version is given a distinguishing version number.  If the Program
+specifies a version number of this License which applies to it and "any
+later version", you have the option of following the terms and conditions
+either of that version or of any later version published by the Free
+Software Foundation.  If the Program does not specify a version number of
+this License, you may choose any version ever published by the Free Software
+Foundation.
+
+  10. If you wish to incorporate parts of the Program into other free
+programs whose distribution conditions are different, write to the author
+to ask for permission.  For software which is copyrighted by the Free
+Software Foundation, write to the Free Software Foundation; we sometimes
+make exceptions for this.  Our decision will be guided by the two goals
+of preserving the free status of all derivatives of our free software and
+of promoting the sharing and reuse of software generally.
+
+                            NO WARRANTY
+
+  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
+FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
+OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
+PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
+OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
+TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
+PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
+REPAIR OR CORRECTION.
+
+  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
+REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
+INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
+OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
+TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
+YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
+PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
+POSSIBILITY OF SUCH DAMAGES.
+
+                     END OF TERMS AND CONDITIONS
+
+            How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+convey the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    <one line to give the program's name and a brief idea of what it does.>
+    Copyright (C) <year>  <name of author>
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License along
+    with this program; if not, write to the Free Software Foundation, Inc.,
+    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+
+Also add information on how to contact you by electronic and paper mail.
+
+If the program is interactive, make it output a short notice like this
+when it starts in an interactive mode:
+
+    Gnomovision version 69, Copyright (C) year name of author
+    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, the commands you use may
+be called something other than `show w' and `show c'; they could even be
+mouse-clicks or menu items--whatever suits your program.
+
+You should also get your employer (if you work as a programmer) or your
+school, if any, to sign a "copyright disclaimer" for the program, if
+necessary.  Here is a sample; alter the names:
+
+  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
+  `Gnomovision' (which makes passes at compilers) written by James Hacker.
+
+  <signature of Ty Coon>, 1 April 1989
+  Ty Coon, President of Vice
+
+This General Public License does not permit incorporating your program into
+proprietary programs.  If your program is a subroutine library, you may
+consider it more useful to permit linking proprietary applications with the
+library.  If this is what you want to do, use the GNU Lesser General
+Public License instead of this License.
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/modules/services_entityreference/services_entityreference.info drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/modules/services_entityreference/services_entityreference.info
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/modules/services_entityreference/services_entityreference.info	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/modules/services_entityreference/services_entityreference.info	2014-05-21 21:44:21.000000000 +0200
@@ -0,0 +1,12 @@
+name = Services Entity Reference
+description = Automatically create relationships based on entity reference fields.
+package = Services
+core = 7.x
+dependencies[] = services_entity
+
+; Information added by Drupal.org packaging script on 2013-12-22
+version = "7.x-2.0-alpha7"
+core = "7.x"
+project = "services_entity"
+datestamp = "1387704808"
+
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/modules/services_entityreference/services_entityreference.module drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/modules/services_entityreference/services_entityreference.module
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/modules/services_entityreference/services_entityreference.module	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/modules/services_entityreference/services_entityreference.module	2014-05-21 21:44:21.000000000 +0200
@@ -0,0 +1,241 @@
+<?php
+
+/**
+ * Implements hook_services_resources_alter()
+ *
+ * @param type $resources
+ */
+function services_entityreference_services_resources() {
+  $resources = array();
+
+  $instances = field_info_instances();
+  $field_types = field_info_field_types();
+  $bundles = field_info_bundles();
+  foreach ($instances as $entity_type => $type_bundles) {
+    foreach ($type_bundles as $bundle => $bundle_instances) {
+      foreach ($bundle_instances as $field_name => $instance) {
+        $field = field_info_field($field_name);
+        if ($field['type'] == 'entityreference') {
+          $target_entity = $field['settings']['target_type'];
+
+          // Provide a reverse relationship for entityrefence fields: on the
+          // target entity type, list the entities that point here via the given
+          // field.
+          if (in_array($field['settings']['handler'], array('base', 'og'))) {
+            $name = services_entityreference_format_plural($entity_type);
+            $resources["entity_$target_entity"]['relationships'][$name . '_' . $field_name] = array(
+              'help' => t("Display an index of @referencing entities that have a reference to a @target via field @fieldname.", array(
+                '@referencing'  => $entity_type,
+                '@target'       => $target_entity,
+                '@fieldname'    => $field_name,
+              )),
+              'access callback' => '_services_entity_resource_access',
+              'access callback file' => array('type' => 'inc', 'module' => 'services_entity', 'name' => 'services_entity.resources'),
+              'access arguments' => array('index'),
+              'access arguments append' => TRUE,
+              'callback'                => '_services_entityreference_relationship_query',
+              'args'                    => array(
+                array(
+                  'name' => 'entity_type',
+                  'optional' => TRUE,  // Otherwise throws an error
+                  'default value' => $entity_type,
+                  'type' => 'string',
+                  'description' => 'The type of the entity to get',
+                ),
+                array(
+                  'name' => 'field_name',
+                  'optional' => TRUE,  // Otherwise throws an error
+                  'default value' => $field_name,
+                  'type' => 'string',
+                  'description' => 'The type of the entity to get',
+                ),
+                array(
+                  'name' => $target_entity . '_id',
+                  'optional' => FALSE,
+                  'source' => array('path' => 0),
+                  'type' => 'int',
+                  'description' => 'The ID of the entity to get',
+                ),
+                /**
+                 * Fields to return
+                 *
+                 * these should be specified in a comma separated list like ?fields=title,created,uid
+                 */
+                array(
+                  'name' => 'fields',
+                  'optional' => TRUE,
+                  'type' => 'string',
+                  'description' => 'A comma separated list of fields to get.',
+                  'default value' => '*',
+                  'source' => array('param' => 'fields'),
+                ),
+                /**
+                 * Filter parameters
+                 *
+                 * these should be specified by ?parameters[title]=My Title&param[created]=4403305
+                 */
+                array(
+                  'name' => 'parameters',
+                  'optional' => TRUE,
+                  'type' => 'array',
+                  'description' => 'Filter parameters array such as parameters[title]="test"',
+                  'default value' => array(),
+                  'source' => array('param' => 'parameters'),
+                ),
+                /**
+                 * Page number
+                 *
+                 * A zero based page number like ?page=3 (returns the fourth page)
+                 */
+                array(
+                  'name' => 'page',
+                  'optional' => TRUE,
+                  'type' => 'int',
+                  'description' => 'The zero-based index of the page to get, defaults to 0.',
+                  'default value' => 0,
+                  'source' => array('param' => 'page'),
+                ),
+                /**
+                 * Page Size
+                 *
+                 * How many records per page to return. ?pagesize=20
+                 */
+                array(
+                  'name' => 'pagesize',
+                  'optional' => TRUE,
+                  'type' => 'int',
+                  'description' => 'Number of records to get per page.',
+                  'default value' => variable_get('services_entity_' . $entity_type . '_index_page_size', 20),
+                  'source' => array('param' => 'pagesize'),
+                ),
+                /**
+                 * Sort field
+                 *
+                 * Which field to sort on. ?sort=created
+                 */
+                array(
+                  'name' => 'sort',
+                  'optional' => TRUE,
+                  'type' => 'string',
+                  'description' => 'Field to sort by.',
+                  'default value' => '',
+                  'source' => array('param' => 'sort'),
+                ),
+                /**
+                 * Sort Direction
+                 *
+                 * Which direction to sort. Possible Values = "ASC|DESC" ?direction=DESC
+                 */
+                array(
+                  'name' => 'direction',
+                  'optional' => TRUE,
+                  'type' => 'string',
+                  'description' => 'Direction of the sort. ASC or DESC.',
+                  'default value' => 'ASC',
+                  'source' => array('param' => 'direction'),
+                ),
+              ),
+            );
+          } // settings handler
+
+          // Provide a forward relationship for entityrefence fields: on the host
+          // entity type, list the entities that are pointed to in the given field.
+          $resources["entity_$entity_type"]['relationships']['entityreference_' . $field_name] = array(
+            'help' => t("Display an index of @referenced entities referenced via field @fieldname.", array(
+              '@referenced'   => $target_entity,
+              '@fieldname'    => $field_name,
+            )),
+            'access callback' => '_services_entity_resource_access',
+            'access callback file' => array('type' => 'inc', 'module' => 'services_entity', 'name' => 'services_entity.resources'),
+            'access arguments' => array('index'),
+            'access arguments append' => TRUE,
+            'callback'                => '_services_entityreference_relationship_query_forward',
+            'args'                    => array(
+              array(
+                'name' => 'entity_type',
+                'optional' => TRUE,  // Otherwise throws an error
+                'default value' => $entity_type,
+                'type' => 'string',
+                'description' => 'The type of the entity to get',
+              ),
+              array(
+                'name' => $target_entity . '_id',
+                'optional' => FALSE,
+                'source' => array('path' => 0),
+                'type' => 'int',
+                'description' => 'The ID of the entity to get',
+              ),
+              array(
+                'name' => 'field_name',
+                'optional' => TRUE,  // Otherwise throws an error
+                'default value' => $field_name,
+                'type' => 'string',
+                'description' => 'The type of the entity to get',
+              ),
+              /**
+               * Fields to return
+               *
+               * these should be specified in a comma separated list like ?fields=title,created,uid
+               */
+              array(
+                'name' => 'fields',
+                'optional' => TRUE,
+                'type' => 'string',
+                'description' => 'A comma separated list of fields to get.',
+                'default value' => '*',
+                'source' => array('param' => 'fields'),
+              ),
+            ),
+          );
+        }
+      }
+    }
+  }
+
+  return $resources;
+}
+
+/**
+ * Perform a relationship query
+ */
+function _services_entityreference_relationship_query($entity_type, $field_name, $target_id, $fields, $parameters, $page, $pagesize, $sort, $direction) {
+  $parameters[$field_name] = $target_id;
+  $resourceclass = variable_get('services_entity_resource_class', 'ServicesEntityResourceController');
+  $resource = new $resourceclass;
+  return $resource->index($entity_type, $fields, $parameters, $page, $pagesize, $sort, $direction);
+}
+
+/**
+ * Retrieve entities in an entityreference field.
+ *
+ * @param $entity_type
+ *  The entity type.
+ * @param $entity_id
+ *  The id of the entity on which the field values are present.
+ * @param $field_name
+ *  The name of the entityreference field.
+ * @param $fields
+ *  A comma-separated list of the fields to return on the returned entities, or
+ *  '*' to return all fields.
+ *
+ * @return
+ *  An array of entity data.
+ */
+function _services_entityreference_relationship_query_forward($entity_type, $entity_id, $field_name, $fields) {
+  $resourceclass = variable_get('services_entity_resource_class', 'ServicesEntityResourceController');
+  $resource = new $resourceclass;
+  return $resource->field($entity_type, $entity_id, $field_name, $fields);
+}
+
+/**
+ * Format an entity type as plural
+ */
+function services_entityreference_format_plural($name) {
+  // For most cases adding an 's' will suffice
+  $name = $name . 's';
+
+  // Allow other modules to change the name if they want to.
+  drupal_alter('services_entityreference_format_plural', $name);
+
+  return $name;
+}
\ Brak znaku nowej linii na końcu pliku
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/plugins/services_entity_interface.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/plugins/services_entity_interface.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/plugins/services_entity_interface.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/plugins/services_entity_interface.inc	2014-05-21 21:44:21.000000000 +0200
@@ -0,0 +1,112 @@
+<?php
+
+/**
+ * @file
+ * Services Entity module integration for entities.
+ */
+
+/**
+ * Specifies CRUD and access methods for resources.
+ */
+interface ServicesResourceControllerInterface {
+
+  /**
+   * Determines access for a given operation and resource.
+   *
+   * @param string $op
+   *   Either 'create', 'view' (= read), 'update' or 'delete'.
+   * @param $args
+   *   The arguments passed to the operation.
+   *
+   * @see entity_access()
+   */
+  public function access($op, $args);
+
+  /**
+   * Create a new resource.
+   *
+   * @param string $entity_type
+   *   The type of the resource that should be created.
+   * @param array $values
+   *   Array of values for properties of the resource, keyed by property
+   *   name. At least for all required properties values have to be given.
+   *
+   * @return int|string
+   *   The id of the newly created resource.
+   */
+  public function create($entity_type, array $values);
+
+  /**
+   * Returns an existing resource.
+   *
+   * @param string $entity_type
+   *   The type of the resource that should be returned.
+   * @param int|string $entity_id
+   *   The id of the resource that should be returned.
+   * @param array $fields (optional)
+   *   The fields for the resource that should be returned.
+   *
+   * @return
+   *   The internal representation of the resource.
+   */
+  public function retrieve($entity_type, $entity_id, $fields);
+
+  /**
+   * Update an existing resource.
+   *
+   * @param string $entity_type
+   *   The type of the resource that should be updated.
+   * @param int|string $entity_id
+   *   The id of the resource that should be updated.
+   * @param array $values
+   *   An array of values for the properties to be updated, keyed by property
+   *   name.
+   */
+  public function update($entity_type, $entity_id, array $values);
+
+  /**
+   * Delete an existing resource.
+   *
+   * @param string $entity_type
+   *   The type of the resource that should be deleted.
+   * @param int|string $entity_id
+   *   The id of the resource that should be deleted.
+   */
+  public function delete($entity_type, $entity_id);
+
+  /**
+   *
+   * @param string $entity_type
+   *   The type of the resource that should be deleted.
+   * @param array $filters
+   *   field comparison operators to filter the results.
+   * @param int $page
+   *   The page of resources to be returned
+   * @param int $limit
+   *   The number of items on that pages to be returned.
+   */
+  public function index($entity_type, $fields, $parameters, $page, $pagesize, $sort, $direction);
+
+  /**
+   * Get the value of a single field.
+   *
+   * @param $entity_type
+   *  The entity type.
+   * @param $entity_id
+   *  The id of the entity on which the field values are present.
+   * @param $field_name
+   *  The name of the field to retrieve the value of.
+   * @param $fields
+   *  A comma-separated list of the fields to return on the returned entities, or
+   *  '*' to return all fields.
+   * @param $raw
+   *  (optional) Whether to return the raw value of the field, or the processed
+   *  value. Defaults to FALSE.
+   *
+   * @return
+   *  Entity data for the field.
+   */
+  public function field($entity_type, $entity_id, $field_name, $fields = '*', $raw = FALSE);
+
+}
+
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/plugins/services_entity_resource_clean.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/plugins/services_entity_resource_clean.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/plugins/services_entity_resource_clean.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/plugins/services_entity_resource_clean.inc	2014-05-21 21:44:21.000000000 +0200
@@ -0,0 +1,391 @@
+<?php
+/**
+ * This class is designed to create a very clean API that integrates with
+ * the services and entity modules. We want to strip all "drupalisms" out
+ * of the API. For example, there should be no [LANGUAGE_NONE][0][value] or
+ * field_ in the API.
+ *
+ * It should be possible to create an API that is easily replicated on another
+ * system.
+ *
+ * Much of this code is borrowed from restws module.
+ */
+class ServicesEntityResourceControllerClean extends ServicesEntityResourceController {
+  /**
+   * @see ServicesEntityResourceController::access()
+   */
+  public function access($op, $args) {
+    if ($op == 'create') {
+      list($entity_type, $data) = $args;
+      // Workaround for bug in Entity API node access.
+      // @todo remove once https://drupal.org/node/1780646 lands.
+      if ($entity_type == 'node') {
+        return isset($data['type']) ? node_access('create', $data['type']) : FALSE;
+      }
+      // Create a wrapper from the entity so we can call its access() method.
+      $wrapper = $this->createWrapperFromValues($entity_type, $data);
+      return $wrapper->entityAccess('create');
+    }
+    else {
+      return parent::access($op, $args);
+    }
+  }
+
+  public function create($entity_type, array $values) {
+    $wrapper = $this->createWrapperFromValues($entity_type, $values);
+
+    // Check write access on each property.
+    foreach (array_keys($values) as $name) {
+      if (!$this->propertyAccess($wrapper, $name, 'create')) {
+        services_error(t("Not authorized to set property '@p'", array('@p' => $name)), 403);
+      }
+    }
+
+    // Make sure that bundle information is present on entities that have
+    // bundles. We have to do this after creating the wrapper, because the
+    // name of the bundle key may differ from that of the corresponding
+    // metadata property (e.g. for taxonomy terms, the bundle key is
+    // 'vocabulary_machine_name', while the property is 'vocabulary').
+    if ($bundle_key = $wrapper->entityKey('bundle')) {
+      $entity = $wrapper->value();
+      if (empty($entity->{$bundle_key})) {
+        $entity_info = $wrapper->entityInfo();
+        if (isset($entity_info['bundles']) && count($entity_info['bundles']) === 1) {
+          // If the entity supports only a single bundle, then use that as a
+          // default. This allows creation of such entities if (as with ECK)
+          // they still use a bundle key.
+          $entity->{$bundle_key} = reset($entity_info['bundles']);
+        }
+        else {
+          services_error('Missing bundle: ' . $bundle_key, 406);
+        }
+      }
+    }
+
+    $properties = $wrapper->getPropertyInfo();
+    $diff = array_diff_key($values, $properties);
+    if (!empty($diff)) {
+      services_error('Unknown data properties: ' . implode(' ', array_keys($diff)) . '.', 406);
+    }
+    $wrapper->save();
+    return $this->get_data($wrapper, '*');
+  }
+
+  public function retrieve($entity_type, $entity_id, $fields) {
+    $entity = parent::retrieve($entity_type, $entity_id, '*');
+    return $this->get_data(entity_metadata_wrapper($entity_type, $entity), $fields);
+  }
+
+  public function update($entity_type, $entity_id, array $values) {
+    $property_info = entity_get_all_property_info($entity_type);
+    $values = $this->transform_values($entity_type, $property_info, $values);
+    try {
+      $wrapper = entity_metadata_wrapper($entity_type, $entity_id);
+      foreach ($values as $name => $value) {
+        // Only attempt to set properties when the new value differs from that
+        // on the existing entity; otherwise, requests will fail for read-only
+        // and unauthorized properties, even if they are not being changed. This
+        // allows us to UPDATE a previously retrieved entity without removing
+        // such properties from the payload, as long as they are unchanged.
+        if (!$this->propertyHasValue($wrapper, $name, $value)) {
+          // We set the property before checking access so the new value
+          // will be passed to the access callback. This is necesssary in
+          // some cases (e.g. text-format fields) where access permissions
+          // depend on the value that is being set.
+          $wrapper->{$name}->set($value);
+          if (!$this->propertyAccess($wrapper, $name, 'update')) {
+            services_error(t("Not authorized to set property '@property-name'.", array('@property-name' => $name)), 403);
+          }
+        }
+      }
+    }
+    catch (EntityMetadataWrapperException $e) {
+      services_error($e->getMessage(), 406);
+    }
+    $wrapper->save();
+    return $this->get_data($wrapper, '*');
+  }
+
+  public function index($entity_type, $fields, $parameters, $page, $pagesize, $sort, $direction) {
+    $property_info = entity_get_all_property_info($entity_type);
+    $parameters = $this->transform_values($entity_type, $property_info, $parameters);
+    $sort = (isset($property_info['field_' . $sort]))?'field_' . $sort:$sort;
+
+    // Call the parent method, which takes care of access control.
+    $entities = parent::index($entity_type, '*', $parameters, $page, $pagesize, $sort, $direction);
+    foreach($entities as $entity) {
+      $return[] = $this->get_data(entity_metadata_wrapper($entity_type, $entity), $fields);
+    }
+    return $return;
+  }
+
+  /**
+   * Implements ServicesResourceControllerInterface::field().
+   */
+  public function field($entity_type, $entity_id, $field_name, $fields = '*', $raw = FALSE) {
+    $entity = entity_load_single($entity_type, $entity_id);
+    if (!$entity) {
+      services_error('Entity not found', 404);
+    }
+
+    $field_name = preg_replace('/^field_/', '', $field_name);
+
+    // The metadata wrapper checks entity_access() on each entity in the field.
+    $return = $this->get_data(entity_metadata_wrapper($entity_type, $entity), $field_name);
+    return $return;
+  }
+
+  /**
+   * Return the data structure for an entity stripped of all "drupalisms" such as
+   * field_ and complex data arrays.
+   *
+   * @param type $wrapper
+   * @return type
+   */
+  protected function get_data($wrapper, $fields = '*') {
+    if ($fields != '*') {
+      $fields_array = explode(',', $fields);
+    }
+    $data = array();
+    $filtered = $this->property_access_filter($wrapper);
+    foreach ($filtered as $name => $property) {
+      // We don't want 'field_' at the beginning of fields. This is a drupalism and shouldn't be in the api.
+      $name = preg_replace('/^field_/', '', $name);
+      // If fields is set and it isn't one of them, go to the next.
+      if ($fields != '*' && !in_array($name, $fields_array)) {
+        continue;
+      }
+      try {
+        if ($property instanceof EntityDrupalWrapper) {
+          // For referenced entities only return the URI.
+          if ($id = $property->getIdentifier()) {
+            $data[$name] = $this->get_resource_reference($property->type(), $id);
+          }
+        }
+        elseif ($property instanceof EntityValueWrapper) {
+          $data[$name] = $property->value();
+        }
+        elseif ($property instanceof EntityListWrapper || $property instanceof EntityStructureWrapper) {
+          $data[$name] = $this->get_data($property);
+        }
+      }
+      catch (EntityMetadataWrapperException $e) {
+        // A property causes problems - ignore that.
+      }
+    }
+    // If bundle = entity_type, don't send it.
+    if (method_exists($wrapper, 'entityInfo')) {
+      $entity_info = $wrapper->entityInfo();
+      if (isset($entity_info['bundle keys'])) {
+        foreach ($entity_info['bundle keys'] as $bundle_key) {
+          if (array_key_exists($bundle_key, $data) && $data[$bundle_key] == $wrapper->type()) {
+            unset($data[$bundle_key]);
+          }
+        }
+      }
+    }
+    return $data;
+  }
+
+  /**
+   * Return a resource reference array.
+   *
+   * @param type $resource
+   * @param type $id
+   * @return type
+   */
+  protected function get_resource_reference($resource, $id) {
+    $return = array(
+      'uri' => services_resource_uri(array('entity_' . $resource, $id)),
+      'id' => $id,
+      'resource' => $resource,
+    );
+    if (module_exists('uuid') && entity_get_info($resource)) {
+      $ids = entity_get_uuid_by_id($resource, array($id));
+      if ($id = reset($ids)) {
+        $return['uuid'] = $id;
+      }
+    }
+    return $return;
+  }
+
+  /**
+   * Filters out properties where view access is not allowed for the current user.
+   *
+   * @param EntityMetadataWrapper $wrapper
+   *   EntityMetadataWrapper that should be checked.
+   *
+   * @return
+   *   An array of properties where access is allowed, keyed by their property
+   *   name.
+   */
+  protected function property_access_filter($wrapper) {
+    $filtered = array();
+    foreach ($wrapper as $name => $property) {
+      try {
+        if ($property->access('view')) {
+          $filtered[$name] = $property;
+        }
+      }
+      catch (EntityMetaDataWrapperException $e) {
+        // Log the exception and ignore the property. This is known to happen
+        // when attempting to access the 'book' property of a non-book node.
+        // In such cases Entity API erroneously throws an exception.
+        // @see https://drupal.org/node/2051087 and linked issues.
+        watchdog('services_entity', 'Exception testing access to property @p: @e', array('@p' => $name, '@e' => $e->getMessage()), WATCHDOG_WARNING);
+      }
+    }
+    return $filtered;
+  }
+
+  /**
+   * Checks for field_ prefix for each field and adds it if necessary.
+   *
+   * @param type $values
+   * @return type
+   */
+  protected function transform_values($entity_type, $property_info, $values) {
+    foreach($values as $key => $value) {
+      // Handle Resource references so we can pass pack the object.
+      if (is_array($value) && isset($value['id'])) {
+        $values[$key] = $value['id'];
+      }
+      // Check if this is actually a field_ value
+      if (isset($property_info['field_' . $key])) {
+        $values['field_' . $key] = $values[$key];
+        unset($values[$key]);
+      }
+    }
+    return $values;
+  }
+
+  /**
+   * Overridden to translate metadata property name to schema field.
+   *
+   * @see ServicesEntityResourceController::propertyQueryOperation()
+   */
+  protected function propertyQueryOperation($entity_type, EntityFieldQuery $query, $operation, $property, $value) {
+    $info = entity_get_all_property_info($entity_type);
+    $field = isset($info[$property]['schema field']) ? $info[$property]['schema field'] : $property;
+    try {
+      parent::propertyQueryOperation($entity_type, $query, $operation, $field, $value);
+    }
+    catch (ServicesException $e) {
+      // Intercept a services exception and correct the property name.
+      services_error(t('Parameter @prop does not exist', array('@p' => $property)), 406);
+    }
+  }
+
+  /**
+   * Helper function to create a wrapped entity from provided data values.
+   *
+   * @param $entity_type
+   *   The type of entity to be created.
+   * @param $values
+   *   Array of data property values.
+   * @return EntityDrupalWrapper
+   *   The wrapped entity.
+   * @todo the created wrapper should probably be statically cached, so we
+   * don't have to build it twice (first on access() and again on create()).
+   */
+  protected function createWrapperFromValues($entity_type, array &$values) {
+    $property_info = entity_get_all_property_info($entity_type);
+    $values = $this->transform_values($entity_type, $property_info, $values);
+    try {
+      $wrapper = entity_property_values_create_entity($entity_type, $values);
+    }
+    catch (EntityMetadataWrapperException $e) {
+      services_error($e->getMessage(), 406);
+    }
+    return $wrapper;
+  }
+
+  /**
+   * Determine whether a wrapper property has a specified value.
+   *
+   * @param \EntityMetadataWrapper $wrapper
+   *   The wrapper whose property is to be checked.
+   * @param $name
+   *   The name of the property to check.
+   * @param mixed $value
+   *   The value to compare it to. May be a wrapper, identifier or raw value.
+   *
+   * @return boolean
+   *   TRUE if the property's current value is equal to the given value. FALSE
+   *   if they are different.
+   */
+  protected function propertyHasValue(EntityMetadataWrapper $wrapper, $name, $value) {
+    $property = $wrapper->{$name};
+    if ($property instanceof EntityDrupalWrapper) {
+      if ($value instanceof EntityDrupalWrapper) {
+        return $value->getIdentifier() == $property->getIdentifier();
+      }
+      elseif (is_numeric($value)) {
+        return $value == $property->getIdentifier();
+      }
+    }
+    return $value == $property->value();
+  }
+  
+  /**
+   * Check access on an entity metadata property.
+   *
+   * This is a wrapper around EntityMetadataWrapper::access() because that
+   * makes no distinction between 'create' and 'update' operations.
+   *
+   * @param EntityDrupalWrapper $wrapper
+   *   The wrapped entity for which the property access is to be checked.
+   * @param string $name
+   *   The wrapper name of the property whose access is to be checked.
+   * @param string $op
+   *   One of 'create', 'update' or 'view'.
+   *
+   * @return bool
+   *   TRUE if the current user has access to set the property, FALSE otherwise.
+   */
+  protected function propertyAccess($wrapper, $name, $op) {
+    $property = $wrapper->{$name};
+    $info = $property->info();
+    switch ($op) {
+      case 'create':
+        // Don't check access on bundle for new entities. Otherwise,
+        // property access checks will fail for, e.g., node type, which
+        // requires the 'administer nodes' permission to set.
+        // @see entity_metadata_node_entity_property_info().
+        if (isset($info['schema field']) && $info['schema field'] == $wrapper->entityKey('bundle')) {
+          return TRUE;
+        }
+  
+        // Don't check access on node author if set to the current user.
+        if ($wrapper->type() == 'node' && $name == 'author' && $wrapper->value()->uid == $GLOBALS['user']->uid) {
+          return TRUE;
+        }
+  
+        // No break: no special cases apply, so contine as for 'update'.
+  
+      case 'update':
+        // This is a hack to check format access for text fields.
+        // @todo remove once this is handled properly by core or Entity API.
+        // @see https://drupal.org/node/2065021
+        if ($property->type() == 'text_formatted' && $property->format->value()) {
+          $format = (object) array('format' => $property->format->value());
+          if (!filter_access($format)) {
+            return FALSE;
+          }
+        }
+  
+        // Entity API create access is currently broken for nodes.
+        // @todo remove this check once https://drupal.org/node/1780646 is fixed.
+        // @see also https://drupal.org/node/1865102
+        if ($op == 'create' && $wrapper->type() == 'node') {
+          return TRUE;
+        }
+  
+        // Finally, use the property access.
+        return $property->access('edit');
+  
+      case 'view':
+        return $property->access('view');
+    }
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/plugins/services_entity_resource.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/plugins/services_entity_resource.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/plugins/services_entity_resource.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/plugins/services_entity_resource.inc	2014-05-21 21:44:21.000000000 +0200
@@ -0,0 +1,307 @@
+<?php
+
+/**
+ * Generic controller for entity-bases resources.
+ */
+class ServicesEntityResourceController implements ServicesResourceControllerInterface {
+
+  /**
+   * Implements ServicesResourceControllerInterface::access().
+   */
+  public function access($op, $args) {
+    if ($op == 'index') {
+      // Access is handled per-entity by index().
+      return TRUE;
+    }
+    // For create operations, we need to pass a new entity to entity_access()
+    // in order to check per-bundle creation rights. For all other operations
+    // we load the existing entity instead.
+    if ($op == 'create') {
+      list($entity_type, $data) = $args;
+      // Workaround for bug in Entity API node access.
+      // @todo remove once https://drupal.org/node/1780646 lands.
+      if ($entity_type === 'node') {
+        return isset($data['type']) ? node_access('create', $data['type']) : FALSE;
+      }
+      // Create an entity from the data and pass this to entity_access(). This
+      // allows us to check per-bundle creation rights.
+      $entity = entity_create($entity_type, $data);
+      return entity_access($op, $entity_type, $entity);
+    }
+    else {
+      // Retrieve, Delete, Update.
+      list($entity_type, $entity_id) = $args;
+
+      $entity = entity_load_single($entity_type, $entity_id);
+
+      // Pass the entity to the access control.
+      return entity_access($op, $entity_type, $entity ? $entity : NULL);
+    }
+  }
+
+  /**
+   * Implements ServicesResourceControllerInterface::create().
+   */
+  public function create($entity_type, array $values) {
+    $this->checkTextFormatAccess($values);
+    $entity = entity_create($entity_type, $values);
+    entity_save($entity_type, $entity);
+    list($id, ) = entity_extract_ids($entity_type, $entity);
+
+    // Check we got an ID back for the new entity.
+    if (!isset($id)) {
+      services_error('Error saving entity.', 406);
+    }
+
+    return $entity;
+  }
+
+  /**
+   * Implements ServicesResourceControllerInterface::retrieve().
+   */
+  public function retrieve($entity_type, $entity_id, $fields) {
+    $entity = entity_load_single($entity_type, $entity_id);
+    if (!$entity) {
+      services_error('Entity not found', 404);
+    }
+    // Users get special treatment to remove sensitive data.
+    if ($entity_type == 'user') {
+      // Use the helper that Services module already has.
+      services_remove_user_data($entity);
+    }
+    services_remove_user_data($entity);
+    return $this->limit_fields($entity, $fields);
+  }
+
+  /**
+   * Implements ServicesResourceControllerInterface::update().
+   */
+  public function update($entity_type, $entity_id, array $values) {
+    $this->checkTextFormatAccess($values);
+    $wrapper = entity_metadata_wrapper($entity_type, (object) $values);
+    if ($entity_id == $wrapper->getIdentifier()) {
+      $wrapper->save();
+      return $wrapper->value();
+    }
+    else {
+      services_error('Invalid Entity Identifier. You can only update the entity referenced in the URL.', 406);
+    }
+  }
+
+  /**
+   * Implements ServicesResourceControllerInterface::delete().
+   */
+  public function delete($entity_type, $entity_id) {
+    entity_delete($entity_type, $entity_id);
+  }
+
+  /**
+   * Implements ServicesResourceControllerInterface::index().
+   */
+  public function index($entity_type, $fields, $parameters, $page, $pagesize, $sort, $direction) {
+    // Make sure the pagesize is not too large.
+    $max_pagesize = variable_get('services_entity_max_pagesize', 100);
+    $pagesize = ($max_pagesize < $pagesize) ? $max_pagesize : $pagesize;
+
+    // Build an EFQ based on the arguments.
+    $query = new EntityFieldQuery();
+    $query
+        ->entityCondition('entity_type', $entity_type)
+        ->range($page * $pagesize, $pagesize);
+
+    if (!empty($parameters)) {
+      foreach ($parameters as $field => $value) {
+        $this->propertyQueryOperation($entity_type, $query, 'Condition', $field, $value);
+      }
+    }
+    if ($sort != '') {
+      $direction = ($direction == 'DESC') ? 'DESC' : 'ASC'; // Ensure a valid direction
+      $this->propertyQueryOperation($entity_type, $query, 'OrderBy', $sort, $direction);
+    }
+
+    $result = $query->execute();
+
+    if (empty($result)) {
+      return services_error(t('No entities found.'), 404);
+    }
+    // Convert to actual entities.
+    $entities = entity_load($entity_type, array_keys($result[$entity_type]));
+
+    foreach ($entities as $id => $entity) {
+      if (entity_access('view', $entity_type, $entity)) {
+        // Users get special treatment to remove sensitive data.
+        if ($entity_type == 'user') {
+          // Use the helper that Services module already has.
+          services_remove_user_data($entity);
+        }
+
+        $return[] = $this->limit_fields($entity, $fields);
+      }
+    }
+
+    // The access check may have resulted in there being no entities left.
+    if (empty($return)) {
+      return services_error(t('No entities found.'), 404);
+    }
+
+    return $return;
+  }
+
+  /**
+   * Implements ServicesResourceControllerInterface::field().
+   */
+  public function field($entity_type, $entity_id, $field_name, $fields = '*', $raw = FALSE) {
+    $entity = entity_load_single($entity_type, $entity_id);
+    if (!$entity) {
+      services_error('Entity not found', 404);
+    }
+
+    $wrapper = entity_metadata_wrapper($entity_type, $entity_id);
+    if ($raw) {
+      $return = $wrapper->{$field_name}->raw();
+    }
+    else {
+      $return = $wrapper->{$field_name}->value();
+    }
+
+    $field = field_info_field($field_name);
+
+    // Special handling for entityreference fields: run the new entities through
+    // limit fields.
+    if ($field['type'] == 'entityreference' && !$raw) {
+      $entities = $return;
+      $return = array();
+
+      foreach ($entities as $id => $entity) {
+        // The entity type here is the target type of the entityreference field.
+        if (entity_access('view', $field['settings']['target_type'], $entity)) {
+          $return[] = $this->limit_fields($entity, $fields);
+        }
+      }
+    }
+
+    return $return;
+  }
+
+  /**
+   * Limit the fields in an entity to the list provided.
+   *
+   * @param $entity
+   *  The entity to limit the fields of.
+   * @param $fields
+   *  A list of field names. '*' is a wildcard, and leaves the entity unchanged.
+   *
+   * @return
+   *  The entity with any property not specified in $fields removed from it.
+   */
+  protected function limit_fields($entity, $fields) {
+    if ($fields == '*') {
+      return $entity;
+    }
+    $field_array = explode(',', $fields);
+    foreach ($entity as $field => $value) {
+      if (!in_array($field, $field_array)) {
+        unset($entity->{$field});
+      }
+    }
+    return $entity;
+  }
+
+  /**
+   * Helper function for adding a property to an EntityFieldQuery.
+   *
+   * This takes care of distinguishing between fields and entity properties when
+   * adding a condition or ordering to an EntityFieldQuery. It executes the
+   * right EntityFieldQuery method to add the property to the query.
+   *
+   * @param string $entity_type
+   *   The entity type for the query.
+   * @param EntityFieldQuery $query
+   *   The EntityFieldQuery object.
+   * @param string $operation
+   *   The general method name, without the words 'property' or 'field'. E.g.,
+   *   one of 'Condition' or 'OrderBy'.
+   * @param string $property
+   *   The name of the raw property or field which is to be added to the query.
+   * @param string|array $value
+   *   The value for the function.
+   */
+  protected function propertyQueryOperation($entity_type, EntityFieldQuery $query, $operation, $property, $value) {
+    // First pass: check the entity's table schema.
+    // Get the database schema for the entity's table.
+    $entity_info = entity_get_info($entity_type);
+    $schema = drupal_get_schema($entity_info['base table']);
+    if (isset($schema['fields'][$property])) {
+      // If the property is defined in the schema, use the schema property.
+      // The EFQ method is either 'propertyCondition' or 'OrderByCondition'.
+      $operation = 'property' . $operation;
+      $query->$operation($property, $value);
+      return;
+    }
+
+    // Second pass: check fields.
+    // Get the metadata property info for the entity type, including properties
+    // for all bundles.
+    $properties = entity_get_all_property_info($entity_type);
+    if (isset($properties[$property]) && !empty($properties[$property]['field'])) {
+      // For fields we need the field info to get the right column for the
+      // query.
+      $field_info = field_info_field($property);
+      $operation = 'field' . $operation;
+      if (is_array($value)) {
+        // Specific column filters are given, so add a query condition for each
+        // one of them.
+        foreach ($value as $column => $val) {
+          $query->$operation($field_info, $column, $val);
+        }
+      }
+      else {
+        // Just pick the first field column for the operation.
+        $columns = array_keys($field_info['columns']);
+        $column = $columns[0];
+        $query->$operation($field_info, $column, $value);
+      }
+
+      return;
+    }
+
+    // Still here if no matching property was found.
+    services_error(t('Parameter @prop does not exist', array('@prop' => $property)), 406);
+  }
+
+  /**
+   * This is a hack to check format access for text fields.
+   *
+   * @todo revisit if/when this is handled properly by core.
+   * @see https://drupal.org/node/2060237
+   *
+   * @param array $values
+   *   The raw values passed into the service, keyed by property name.
+   *
+   * @throws ServicesException
+   *   If user is not authorized to use a provided format.
+   */
+  public function checkTextFormatAccess($values) {
+    // Loop through all values looking for text fields.
+    foreach ($values as $name => $value) {
+      $field = field_info_field($name);
+      if ($field && in_array($field['type'], array_keys(text_field_info()))) {
+        foreach ($value as $langcode) {
+          foreach ($langcode as $item) {
+            if (isset($item['format'])) {
+              $format = (object) array('format' => $item['format']);
+              if (!filter_access($format)) {
+                // Fully load the format so we get its label.
+                $format = filter_format_load($format->format);
+                services_error(t("Not authorized to use format '@format-name' for property '@property-name'.", array(
+                  '@format-name' => $format->name,
+                  '@property-name' => $name,
+                )), 403);
+              }
+            }
+          }
+        }
+      }
+    }
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/plugins/services_entity_resource_recurse.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/plugins/services_entity_resource_recurse.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/plugins/services_entity_resource_recurse.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/plugins/services_entity_resource_recurse.inc	2014-05-21 21:44:21.000000000 +0200
@@ -0,0 +1,219 @@
+<?php
+/**
+ * Class that allows following field entities recursively.
+ */
+class ServicesEntityResourceControllerRecurse extends ServicesEntityResourceController {
+
+  public function retrieve($entity_type, $entity_id, $fields) {
+    $fields = explode(',', $fields);
+    // Build an EFQ to retrieve the entity. This also satisfies access control.
+    $query = new EntityFieldQuery();
+    $query
+        ->entityCondition('entity_type', $entity_type)
+        ->addTag('service_entity_resource')
+        ->addMetaData('entity_type', $entity_type);
+
+    // If there's no : in the entity key, we're looking for the id.
+    if (strpos($entity_key, ':') == 0) {
+      $query->entityCondition('entity_id', $entity_id);
+  }
+    else {
+      // First split the property key and the value.
+      list($key, $value) = explode(':', $entity_id);
+      // We need to be sure that is a unique property to avoid multiple results
+      // index option should be used instead.
+      $info = entity_get_info($entity_type);
+      $schema = drupal_get_schema($info['base table']);
+      if (!empty($schema['unique keys'][$key])) {
+        $query->propertyCondition($key, $value);
+      }
+      else {
+        // If this is not a unique property, avoid doing the query.
+        return services_error(t('Loading an entity using a non unique property is not allowed.'), 404);
+      }
+    }
+
+    $entities = $query->execute();
+
+    if (!empty($query->ordered_results)) {
+      $result = $this->postprocess_entities($entities, $query->ordered_results, $fields);
+      return reset($result);
+    }
+    else {
+      return services_error(t('No entities retrieved.'), 404);
+    }
+  }
+
+  public function index($entity_type, $fields, $parameters, $page, $pagesize, $sort, $direction) {
+    $fields = explode(',', $fields);
+    // Build an EFQ based on the arguments.
+    $query = new EntityFieldQuery();
+    $query
+            ->entityCondition('entity_type', $entity_type)
+            ->range($page * $pagesize, $pagesize);
+
+    if (!empty($bundle)) {
+      $query->entityCondition('bundle', $bundle, '=');
+    }
+
+    $entities = $query->execute();
+
+    if (empty($entities)) {
+      return services_error(t('No entities found.'), 404);
+    }
+
+    return $this->postprocess_entities($entities, $query->ordered_results, $fields);
+  }
+
+  protected function postprocess_entities($entities, $ordered_results, $fields) {
+    // Prepare the fields.
+    $fields = $this->transform_fields($fields);
+
+    // Load the full entities.
+    foreach ($entities as $entity_type => &$entities_of_type) {
+      $entities_of_type = entity_load($entity_type, array_keys($entities_of_type));
+
+      // Allow other modules to modify the returned entities.
+      drupal_alter('services_entity_postprocess', $entities_of_type, $entity_type);
+    }
+
+    // Now return the entities in the correct order.
+    $result = array();
+    foreach ($ordered_results as $partial_entity) {
+      if (isset($entities[$partial_entity->entity_type][$partial_entity->entity_id])) {
+        $entity = $entities[$partial_entity->entity_type][$partial_entity->entity_id];
+
+        if (!entity_access('view', $entity_type, $entity)) {
+          continue;
+        }
+
+        $wrapper = entity_metadata_wrapper($partial_entity->entity_type, $entity);
+        $entity_result = (object) $this->prepare_structure($wrapper, $fields);
+        if (!empty($entity_result)) {
+          $entity_result->uri = services_resource_uri(array('entity_' . $partial_entity->entity_type, $partial_entity->entity_id));
+        }
+
+        $result[] = $entity_result;
+      }
+    }
+
+    // Allow other modules to alter the returned result.
+    drupal_alter('services_entity_postprocess_result', $result, $partial_entity->entity_type);
+
+    return $result;
+  }
+
+  /**
+   * Recursive function to get all fields and the children of those fields
+   * noted by field_name:child_name.
+   */
+  protected function transform_fields(array $fields) {
+    $transformed_fields = array();
+    foreach ($fields as $field) {
+      if (!strpos($field, ':') == 0) {
+        list($parent, $child) = explode(':', $field, 2);
+        $value = $this->transform_fields(array($child));
+        $transformed_fields[$parent] = isset($transformed_fields[$parent]) ? array_merge_recursive($transformed_fields[$parent], $value) : $value;
+      }
+      else {
+        $transformed_fields[$field] = $field;
+      }
+    }
+
+    return $transformed_fields;
+  }
+  /**
+   * Prepare data structrure recursively and using metadata wrapper to retrieve
+   * the hierarchical properties.
+   */
+  protected function prepare_structure(EntityStructureWrapper $wrapper, array $properties = array()) {
+    if (empty($properties)) {
+      // By default, expand all the non-computed properties.
+      $properties = array();
+      foreach ($wrapper->getPropertyInfo() as $property_name => $property_info) {
+        if (empty($property_info['computed'])) {
+          $properties[$property_name] = $property_name;
+        }
+      }
+    }
+
+    return $this->_prepare_structure($wrapper, $properties);
+  }
+
+  private function _prepare_structure(EntityMetadataWrapper $wrapper, array $fields) {
+    $result = array();
+
+    foreach ($fields as $property_name => $sub_properties) {
+      $property_wrapper = $wrapper->$property_name;
+      $type = $property_wrapper->type();
+      $info = $property_wrapper->info();
+
+      if (!empty($info['field'])) {
+        $field_info = field_info_field($property_name);
+        $translatable = !empty($field_info['translatable']) ? 1 : 0;
+        $cardinality = $field_info['cardinality'];
+
+        // Fetch the list of actual languages for this field in the underlying entity.
+        $underlying_entity = $wrapper->value();
+        $languages = isset($underlying_entity->$property_name) ? array_keys($underlying_entity->$property_name) : array();
+      }
+      else {
+        $translatable = 0;
+        $cardinality = $type == 'list' || entity_property_list_extract_type($type) ? -1 : 1;
+        $languages = array(LANGUAGE_NONE);
+      }
+
+      // Remove the inner list layer.
+      if ($sub_type = entity_property_list_extract_type($type)) {
+        $type = $sub_type;
+        $is_list = TRUE;
+      }
+      else {
+        $is_list = FALSE;
+      }
+
+      // Now iterate on the list of languages to fetch the values.
+      $property_result = array();
+      foreach ($languages as $language) {
+        $wrapper->language($language);
+        $property_wrapper = $wrapper->$property_name;
+
+        foreach ($is_list ? $property_wrapper : array($property_wrapper) as $index => $sub_wrapper) {
+          if ($sub_wrapper instanceof EntityStructureWrapper) {
+            // Required because Entity API doesn't propagate the language for us.
+            $sub_wrapper->language($language);
+          }
+
+          if (is_array($sub_properties)) {
+            $property_result[$language][$index] = $this->prepare_structure($sub_wrapper, $sub_properties);
+          }
+          else {
+            $value = $sub_wrapper->raw();
+            if (is_array($value)) {
+              $property_result[$language][$index] = $value;
+            }
+            else {
+              $property_result[$language][$index] = array(
+                'value' => $type == 'boolean' && !$value ? '0' : $value,
+              );
+            }
+          }
+        }
+      }
+
+      if (count($property_result)) {
+        $result[$property_name] = $property_result + array(
+          'type' => $type,
+          'cardinality' => $cardinality,
+          'translatable' => $translatable,
+        );
+      }
+      else {
+        $result[$property_name] = NULL;
+      }
+
+    }
+
+    return $result;
+  }
+}
\ Brak znaku nowej linii na końcu pliku
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/README.txt drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/README.txt
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/README.txt	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/README.txt	2014-05-21 21:44:21.000000000 +0200
@@ -0,0 +1,48 @@
+Services Entity
+===============
+
+Services Entity allows you to use any entity type with Services, going beyond the core entity types that Services supports.
+
+Each entity type is defined as a new resource, with the usual services: create, retrieve, update, delete, and index.
+
+Entity types must declare an access callback (see entity_crud_hook_entity_info() in Entity API's hook documentation, and also entity_access()).
+
+Entity Processors
+-----------------
+
+Services Entity comes with two entity processors. These determine the way in
+which the provided resources handle parameters:
+
+* The Generic Entity Processor returns and expects an entity structure exactly as Drupal uses internally.
+* The Clean Entity Processor uses a simplified version of the entity structure,
+with 'Drupalisms' such as deep field arrays removed. It also uses Entity API
+metadata property names instead of entity schema property names.
+
+Resources
+---------
+
+An entity type 'foo' has a resource 'entity_foo' defined for it. On this the following services are defined:
+
+- create:
+  - Send the object data in the body.
+  - Returns newly created entity.
+
+- update:
+  - Send the object data in the body.
+  - Returns 200 if successful.
+
+- retrieve
+  Has the following query string parameters:
+  - 'fields': specify which fields to return. For example: endpoint/entity_node/1?fields=title,nid
+
+- delete
+  - Returns 200 if successful.
+
+- index
+  Has the following query string parameters:
+  - 'fields': A comma separated list of fields to get.
+  -  'parameters': Filter parameters array of entity properties, such as parameters[title]="test"
+  - 'page': The zero-based index of the page to get, defaults to 0.
+  - 'pagesize': Number of records to get per page. This has a maximum imposed on it to prevent excessive load to the server. By default this is 100, but this may be changed in the admin settings.
+  - 'sort': Field or property to sort by.
+  - 'direction': Direction of the sort. ASC or DESC.
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/services_entity.api.php drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/services_entity.api.php
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/services_entity.api.php	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/services_entity.api.php	2014-05-21 21:44:21.000000000 +0200
@@ -0,0 +1,44 @@
+<?php
+
+/**
+ * @file
+ * Hooks provided by Services Entity for the definition of Resource Controllers.
+ */
+
+/**
+ * @addtogroup hooks
+ * @{
+ */
+
+/**
+ * Defines Services Entity resource plugins.
+ *
+ * @return
+ *   An associative array with the following keys:
+ *   - 'title': The display name of the controller.
+ *	 - 'description': A short description of the controller.
+ *   - 'class': The class name of the controller. This should be in a separate
+ *     file included in the module .info file.
+ *
+ * @see hook_services_entity_resource_info_alter()
+ */
+function hook_services_entity_resource_info() {
+  $result = array();
+
+  $result['generic'] = array(
+    'title' => 'Generic Entity Processor',
+    'description' => 'Acts as a generic wrapper for entities. Data structures are exactly what they are in Drupal.',
+    'class' => 'ServicesEntityResourceController',
+  );
+
+  return $result;
+}
+
+/**
+ * Allow modules to alter definitions of Services Entity resource plugins.
+ *
+ * @param $info
+ *  The info array from hook_services_entity_resource_info().
+ */
+function hook_services_entity_resource_info_alter(&$info) {
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/services_entity.info drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/services_entity.info
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/services_entity.info	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/services_entity.info	2014-05-21 21:44:21.000000000 +0200
@@ -0,0 +1,21 @@
+name = Services Entity
+description = Exposes entities to the Service API.
+package = Services
+core = 7.x
+dependencies[] = services
+dependencies[] = entity
+
+files[] = tests/services_entity.test
+files[] = plugins/services_entity_interface.inc
+files[] = plugins/services_entity_resource.inc
+files[] = plugins/services_entity_resource_clean.inc
+files[] = plugins/services_entity_resource_recurse.inc
+
+configure = admin/structure/services/entity
+
+; Information added by Drupal.org packaging script on 2013-12-22
+version = "7.x-2.0-alpha7"
+core = "7.x"
+project = "services_entity"
+datestamp = "1387704808"
+
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/services_entity.module drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/services_entity.module
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/services_entity.module	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/services_entity.module	2014-05-21 21:44:21.000000000 +0200
@@ -0,0 +1,143 @@
+<?php
+
+/**
+ * Implements hook_menu()
+ */
+function services_entity_menu() {
+  $items = array();
+
+  $items['admin/structure/services/entity'] = array(
+    'title' => 'Services Entity Settings',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('services_entity_settings_form'),
+    'access arguments' => array('administer services'),
+  );
+
+  return $items;
+}
+
+/**
+ * Admin settings form for picking the class for entity resources.
+ */
+function services_entity_settings_form($form, $form_state) {
+  $resources = services_entity_get_resource_info();
+  foreach ($resources as $id => $resource) {
+    $options[$resource['class']] = '<strong>' . $resource['title'] . '</strong><div>' . $resource['description'] . '</div>';
+  }
+
+  $form['services_entity_resource_class'] = array(
+    '#title' => 'Entity Resource Class',
+    '#description' => 'Select which Resource Controller to use to process the entities.',
+    '#type' => 'radios',
+    '#options' => $options,
+    '#default_value' => variable_get('services_entity_resource_class', 'ServicesEntityResourceController'),
+  );
+
+  $form['services_entity_max_pagesize'] = array(
+    '#title' => 'Maximum Page Size',
+    '#description' => 'Enter the maximum number of items that can be returned per page of an index.',
+    '#type' => 'textfield',
+    '#default_value' => variable_get('services_entity_max_pagesize', 100),
+  );
+  return system_settings_form($form);
+}
+
+/**
+ * Returns info about all defined resources.
+ *
+ * @param string $resource
+ *   By default null, else the info for the given resource will be returned.
+ */
+function services_entity_get_resource_info($resource = NULL) {
+  $info = &drupal_static(__FUNCTION__);
+  if (!isset($info)) {
+    $info = module_invoke_all('services_entity_resource_info');
+    drupal_alter('services_entity_resource_info', $info);
+  }
+  if (!empty($resource)) {
+    return $info[$resource];
+  }
+  return $info;
+}
+
+/**
+ * Implements hook_entity_resource_info().
+ *
+ * Provides resources for all entity types.
+ */
+function services_entity_services_entity_resource_info() {
+  $result = array();
+
+  $result['generic'] = array(
+    'title' => 'Generic Entity Processor',
+    'description' => 'Acts as a generic wrapper for entities. Data structures are exactly what they are in Drupal.',
+    'class' => 'ServicesEntityResourceController',
+  );
+  $result['clean'] = array(
+    'title' => 'Clean Entity Processor',
+    'description' => 'An entity wrapper that strips out "drupalisms" such as the array structure and field_ prefixes.',
+    'class' => 'ServicesEntityResourceControllerClean',
+  );
+  // Once this processor works better it will be readded. Either that or removed.
+/*  $result['recurse'] = array(
+    'title' => 'Recursive Entity Processor',
+    'description' => 'Allows recursively accessing sub resources such as a taxonomy item on a node.',
+    'class' => 'ServicesEntityResourceControllerRecurse',
+  );*/
+  return $result;
+}
+
+/**
+ * Implements hook_services_resources_alter().
+ */
+function services_entity_services_resources_alter(&$resources) {
+  // For entities that the services module already implements, borrow any operations, actions and relationships.
+  foreach ($resources as $name => $resource) {
+    if (preg_match('/^entity_/', $name)) {
+      $orig_name = preg_replace('/^entity_/', '', $name);
+      if (isset($resources[$orig_name])) {
+        foreach ($resources[$orig_name] as $type => $info) {
+          foreach ($info as $id => $op) {
+            if (!isset($resources[$name][$type][$id])) {
+              $resources[$name][$type][$id] = $op;
+            }
+          }
+        }
+      }
+    }
+  }
+}
+
+/**
+ * Implements hook_entity_query_alter().
+ *
+ * Convert EntityFieldQuerys on taxonomy terms that have an entity condition
+ * on term bundles (vocabulary machine names). Since the vocabulary machine
+ * name is not present in the {taxonomy_term_data} table itself, we have to
+ * convert the bundle condition into a proprety condition of vocabulary IDs to
+ * match against {taxonomy_term_data}.vid.
+ *
+ * @TODO Remove when http://drupal.org/node/1054162 gets fixed.
+ */
+function services_entity_entity_query_alter($query) {
+  $conditions = &$query->entityConditions;
+
+  // Alter only taxonomy term queries with bundle conditions.
+  if (isset($conditions['entity_type']) && $conditions['entity_type']['value'] == 'taxonomy_term' && isset($conditions['bundle'])) {
+    // Convert vocabulary machine names to vocabulary IDs.
+    $vids = array();
+    if (is_array($conditions['bundle']['value'])) {
+      foreach ($conditions['bundle']['value'] as $vocabulary_machine_name) {
+        $vocabulary = taxonomy_vocabulary_machine_name_load($vocabulary_machine_name);
+        $vids[] = $vocabulary->vid;
+      }
+    }
+    else {
+      $vocabulary = taxonomy_vocabulary_machine_name_load($conditions['bundle']['value']);
+      $vids = $vocabulary->vid;
+    }
+
+    $query->propertyCondition('vid', $vids, $conditions['bundle']['operator']);
+    unset($conditions['bundle']);
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/services_entity.resources.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/services_entity.resources.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/services_entity.resources.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/services_entity.resources.inc	2014-05-21 21:44:21.000000000 +0200
@@ -0,0 +1,55 @@
+<?php
+
+/**
+ * Services resource access callback.
+ */
+function _services_entity_resource_access($op, $args) {
+  $resourceclass = variable_get('services_entity_resource_class', 'ServicesEntityResourceController');
+  $resource = new $resourceclass;
+  return $resource->access($op, $args);
+}
+
+/**
+ * Services resource callback.
+ */
+function _services_entity_resource_create($entity_type, $values) {
+  $resourceclass = variable_get('services_entity_resource_class', 'ServicesEntityResourceController');
+  $resource = new $resourceclass;
+  return $resource->create($entity_type, $values);
+}
+
+/**
+ * Services resource callback.
+ */
+function _services_entity_resource_retrieve($entity_type, $entity_key, $fields) {
+  $resourceclass = variable_get('services_entity_resource_class', 'ServicesEntityResourceController');
+  $resource = new $resourceclass;
+  return $resource->retrieve($entity_type, $entity_key, $fields);
+}
+
+/**
+ * Services resource callback.
+ */
+function _services_entity_resource_update($entity_type, $entity_id, $values) {
+  $resourceclass = variable_get('services_entity_resource_class', 'ServicesEntityResourceController');
+  $resource = new $resourceclass;
+  return $resource->update($entity_type, $entity_id, $values);
+}
+
+/**
+ * Services resource callback.
+ */
+function _services_entity_resource_delete($entity_type, $entity_id) {
+  $resourceclass = variable_get('services_entity_resource_class', 'ServicesEntityResourceController');
+  $resource = new $resourceclass;
+  return $resource->delete($entity_type, $entity_id);
+}
+
+/**
+ * Services resource callback.
+ */
+function _services_entity_resource_index($entity_type, $fields, $parameters, $page, $pagesize, $sort, $direction) {
+  $resourceclass = variable_get('services_entity_resource_class', 'ServicesEntityResourceController');
+  $resource = new $resourceclass;
+  return $resource->index($entity_type, $fields, $parameters, $page, $pagesize, $sort, $direction);
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/services_entity.services.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/services_entity.services.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/services_entity.services.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/services_entity.services.inc	2014-05-21 21:44:21.000000000 +0200
@@ -0,0 +1,229 @@
+<?php
+
+/**
+ * Implementation of hook_services_resources().
+ */
+function services_entity_services_resources() {
+  $resources = array();
+
+  foreach (entity_get_info() as $entity_type => $info) {
+    if (entity_type_supports($entity_type, 'create')) {
+      $resources["entity_$entity_type"]['create'] = array(
+        'file' => array('type' => 'inc', 'module' => 'services_entity', 'name' => 'services_entity.resources'),
+        'callback' => '_services_entity_resource_create',
+        'description' => "Creates a $entity_type",
+        'args' => array(
+          array(
+            'name' => 'entity_type',
+            'optional' => TRUE,  // Otherwise throws an error
+            'default value' => $entity_type,
+            'type' => 'string',
+            'description' => 'The type of the entity to create',
+          ),
+          array(
+            'name' => 'values',
+            'optional' => FALSE,
+            'source' => 'data',
+            'description' => 'The values used to create the entity',
+            'type' => 'struct',
+          ),
+        ),
+        'access callback' => '_services_entity_resource_access',
+        'access arguments' => array('create'),
+        'access arguments append' => TRUE,
+      );
+    }
+
+    $resources["entity_$entity_type"]['retrieve'] = array(
+      'file' => array('type' => 'inc', 'module' => 'services_entity', 'name' => 'services_entity.resources'),
+      'callback' => '_services_entity_resource_retrieve',
+      'description' => "Retrieves a $entity_type",
+      'args' => array(
+        array(
+          'name' => 'entity_type',
+          'optional' => TRUE,  // Otherwise throws an error
+          'default value' => $entity_type,
+          'type' => 'string',
+          'description' => 'The type of the entity to get',
+        ),
+        array(
+          'name' => $entity_type . '_id',
+          'optional' => FALSE,
+          'source' => array('path' => 0),
+          'type' => 'int',
+          'description' => 'The ID of the ' . $entity_type . ' to retrieve.',
+        ),
+        array(
+          'name' => 'fields',
+          'optional' => TRUE,
+          'type' => 'string',
+          'description' => 'A comma separated list of fields to get.',
+          'default value' => '*',
+          'source' => array('param' => 'fields'),
+        ),
+      ),
+      'access callback' => '_services_entity_resource_access',
+      'access arguments' => array('view'),
+      'access arguments append' => TRUE,
+    );
+
+    if (entity_type_supports($entity_type, 'save')) {
+      $resources["entity_$entity_type"]['update'] = array(
+        'file' => array('type' => 'inc', 'module' => 'services_entity', 'name' => 'services_entity.resources'),
+        'callback' => '_services_entity_resource_update',
+        'description' => "Updates a $entity_type",
+        'args' => array(
+          array(
+            'name' => 'entity_type',
+            'optional' => TRUE,  // Otherwise throws an error
+            'default value' => $entity_type,
+            'type' => 'string',
+            'description' => 'The type of the entity to update',
+          ),
+          array(
+            'name' => $entity_type . '_id',
+            'optional' => FALSE,
+            'source' => array('path' => 0),
+            'type' => 'int',
+          'description' => 'The ID of the ' . $entity_type . ' to update.',
+          ),
+          array(
+            'name' => 'values',
+            'optional' => FALSE,
+            'source' => 'data',
+            'description' => 'The entity data to update',
+            'type' => 'struct',
+          ),
+        ),
+        'access callback' => '_services_entity_resource_access',
+        'access arguments' => array('update'),
+        'access arguments append' => TRUE,
+      );
+    }
+
+    if (entity_type_supports($entity_type, 'delete')) {
+      $resources["entity_$entity_type"]['delete'] = array(
+        'file' => array('type' => 'inc', 'module' => 'services_entity', 'name' => 'services_entity.resources'),
+        'callback' => '_services_entity_resource_delete',
+        'description' => "Deletes a $entity_type",
+        'args' => array(
+          array(
+            'name' => 'entity_type',
+            'optional' => TRUE,  // Otherwise throws an error
+            'default value' => $entity_type,
+            'type' => 'string',
+            'description' => 'The type of the entity to delete',
+          ),
+          array(
+            'name' => $entity_type . '_id',
+            'optional' => FALSE,
+            'source' => array('path' => 0),
+            'type' => 'int',
+            'description' => 'The ID of the ' . $entity_type . ' to delete.',
+          ),
+        ),
+        'access callback' => '_services_entity_resource_access',
+        'access arguments' => array('delete'),
+        'access arguments append' => TRUE,
+      );
+    }
+
+    $resources["entity_$entity_type"]['index'] = array(
+      'file' => array('type' => 'inc', 'module' => 'services_entity', 'name' => 'services_entity.resources'),
+      'callback' => '_services_entity_resource_index',
+      'description' => "Returns a list of $entity_type",
+      'args' => array(
+        array(
+          'name' => 'entity_type',
+          'optional' => TRUE,  // Otherwise throws an error
+          'default value' => $entity_type,
+          'type' => 'string',
+          'description' => 'The type of the entity to get',
+        ),
+        /**
+         * Fields to return
+         *
+         * these should be specified in a comma separated list like ?fields=title,created,uid
+         */
+        array(
+          'name' => 'fields',
+          'optional' => TRUE,
+          'type' => 'string',
+          'description' => 'A comma separated list of fields to get.',
+          'default value' => '*',
+          'source' => array('param' => 'fields'),
+        ),
+        /**
+         * Filter parameters
+         *
+         * these should be specified by ?parameters[title]=My Title&param[created]=4403305
+         */
+        array(
+          'name' => 'parameters',
+          'optional' => TRUE,
+          'type' => 'array',
+          'description' => 'Filter parameters array such as parameters[title]="test"',
+          'default value' => array(),
+          'source' => array('param' => 'parameters'),
+        ),
+        /**
+         * Page number
+         *
+         * A zero based page number like ?page=3 (returns the fourth page)
+         */
+        array(
+          'name' => 'page',
+          'optional' => TRUE,
+          'type' => 'int',
+          'description' => 'The zero-based index of the page to get, defaults to 0.',
+          'default value' => 0,
+          'source' => array('param' => 'page'),
+        ),
+        /**
+         * Page Size
+         *
+         * How many records per page to return. ?pagesize=20
+         */
+        array(
+          'name' => 'pagesize',
+          'optional' => TRUE,
+          'type' => 'int',
+          'description' => 'Number of records to get per page.',
+          'default value' => variable_get('services_entity_' . $entity_type . '_index_page_size', 20),
+          'source' => array('param' => 'pagesize'),
+        ),
+        /**
+         * Sort field
+         *
+         * Which field to sort on. ?sort=created
+         */
+        array(
+          'name' => 'sort',
+          'optional' => TRUE,
+          'type' => 'string',
+          'description' => 'Field to sort by.',
+          'default value' => '',
+          'source' => array('param' => 'sort'),
+        ),
+        /**
+         * Sort Direction
+         *
+         * Which direction to sort. Possible Values = "ASC|DESC" ?direction=DESC
+         */
+        array(
+          'name' => 'direction',
+          'optional' => TRUE,
+          'type' => 'string',
+          'description' => 'Direction of the sort. ASC or DESC.',
+          'default value' => 'ASC',
+          'source' => array('param' => 'direction'),
+        ),
+      ),
+      'access callback' => '_services_entity_resource_access',
+      'access arguments' => array('index'),
+      'access arguments append' => TRUE,
+    );
+  }
+
+  return $resources;
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/tests/services_entity_test/services_entity_test.info drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/tests/services_entity_test/services_entity_test.info
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/tests/services_entity_test/services_entity_test.info	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/tests/services_entity_test/services_entity_test.info	2014-05-21 21:44:21.000000000 +0200
@@ -0,0 +1,16 @@
+name = Services Entity Test
+description = Provides a test entity for Services Entity tests.
+core = 7.x
+files[] = services_entity_test.module
+files[] = services_entity_test.install
+dependencies[] = services_entity
+dependencies[] = rest_server
+dependencies[] = libraries (>=2.x)
+hidden = TRUE
+
+; Information added by Drupal.org packaging script on 2013-12-22
+version = "7.x-2.0-alpha7"
+core = "7.x"
+project = "services_entity"
+datestamp = "1387704808"
+
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/tests/services_entity_test/services_entity_test.install drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/tests/services_entity_test/services_entity_test.install
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/tests/services_entity_test/services_entity_test.install	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/tests/services_entity_test/services_entity_test.install	2014-05-21 21:44:21.000000000 +0200
@@ -0,0 +1,84 @@
+<?php
+
+/**
+ * @file services_entity_test.install
+ * Contains install hooks.
+ */
+
+/**
+ * Implements hook_schema().
+ */
+function services_entity_test_schema() {
+  $schema['services_entity_test'] = array(
+    'description' => 'Stores services_entity_test items.',
+    'fields' => array(
+      'eid' => array(
+        'type' => 'serial',
+        'not null' => TRUE,
+        'description' => 'Primary Key: Unique services_entity_test entity ID.',
+      ),
+      'name' => array(
+        'description' => 'The name of the services_entity_test entity.',
+        'type' => 'varchar',
+        'length' => 32,
+        'not null' => TRUE,
+        'default' => '',
+      ),
+      'type' => array(
+        'description' => 'The type of the services_entity_test entity.',
+        'type' => 'varchar',
+        'length' => 32,
+        'not null' => TRUE,
+        'default' => '',
+      ),
+      'uid' => array(
+        'type' => 'int',
+        'unsigned' => TRUE,
+        'not null' => FALSE,
+        'default' => NULL,
+        'description' => "The {users}.uid of the associated user.",
+      ),
+    ),
+    'indexes' => array(
+      'uid' => array('uid'),
+    ),
+    'foreign keys' => array(
+      'uid' => array('users' => 'uid'),
+    ),
+    'primary key' => array('eid'),
+  );
+  return $schema;
+}
+
+/**
+ * Implements hook_install().
+ */
+function services_entity_test_install() {
+  // Add FieldAPI fields to our test entity type.
+  $field = array(
+    'field_name'  => 'field_test_text_alpha',
+    'cardinality' => 1,
+    'type'        => 'text',
+    'settings'    => array(
+      'max_length' => 60,
+    ),
+  );
+  field_create_field($field);
+
+  $instance = array(
+    'field_name'  => 'field_test_text_alpha',
+    'entity_type' => 'services_entity_test',
+    'bundle'      => 'alpha',
+    'label'       => 'Label',
+    'widget'      => array(
+      'type'      => 'text_textfield',
+    ),
+    'display' => array(
+      'default' => array(
+        'label' => 'hidden',
+        'type' => 'text_default',
+      ),
+    ),
+  );
+  field_create_instance($instance);
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/tests/services_entity_test/services_entity_test.module drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/tests/services_entity_test/services_entity_test.module
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/tests/services_entity_test/services_entity_test.module	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/tests/services_entity_test/services_entity_test.module	2014-05-21 21:44:21.000000000 +0200
@@ -0,0 +1,77 @@
+<?php
+
+/**
+ * @file services_entity_test.module
+ * Provides a test entity type for the services entity tests.
+ */
+
+/**
+ * Implements hook_entity_info().
+ */
+function services_entity_test_entity_info() {
+  $return = array(
+    'services_entity_test' => array(
+      'label' => t('Services Test Entity'),
+      'plural label' => t('Services Test Entities'),
+      'description' => t('An entity type used by the Services Entity tests.'),
+      'entity class' => 'ServicesEntityClass',
+      'controller class' => 'EntityAPIController',
+      'base table' => 'services_entity_test',
+      'fieldable' => TRUE,
+      'entity keys' => array(
+        'id' => 'eid',
+        'bundle' => 'type',
+      ),
+      // Make use the class' label() and uri() implementation by default.
+      'label callback' => 'entity_class_label',
+      'uri callback' => 'entity_class_uri',
+      'access callback' => 'services_entity_test_access',
+      'bundles' => array(
+        // Provide two bundles so we can test bundle-related things.
+        'alpha' => array(
+          'label' => t('Alpha'),
+        ),
+        'beta' => array(
+          'label' => t('Beta'),
+        ),
+      ),
+      'module' => 'services_entity_test',
+    ),
+  );
+
+  return $return;
+}
+
+/**
+ * Implements callback_entity_info_access().
+ */
+function services_entity_test_access() {
+  // For now, just always return TRUE.
+  // We can figure out testing access later.
+  return TRUE;
+}
+
+/**
+ * Main class for test entities.
+ */
+class ServicesEntityClass extends Entity {
+
+  public function __construct(array $values = array(), $entityType = NULL) {
+    parent::__construct($values, 'services_entity_test');
+  }
+
+  /**
+   * Specifies the default label, which is picked up by label() by default.
+   */
+  protected function defaultLabel() {
+    return $this->name;
+  }
+
+  /**
+   * Specifies the default uri, which is picked up by uri() by default.
+   */
+  protected function defaultURI() {
+    return array('path' => 'services_entity_test/' . $this->identifier());
+  }
+
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/tests/services_entity.test drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/tests/services_entity.test
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/tests/services_entity.test	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity/tests/services_entity.test	2014-05-21 21:44:21.000000000 +0200
@@ -0,0 +1,929 @@
+<?php
+/**
+ * @file Services Entity Tests
+ */
+
+/**
+ * Services Entity Test Helper class.
+ */
+class ServicesEntityTestHelper extends ServicesWebTestCase {
+  /**
+   * Need to override this :(
+   *
+   * @param array $resources
+   *   A list of the resources which should be added.
+   *
+   * @todo: Remove when https://drupal.org/node/2089445 is fixed.
+   */
+  public function saveNewEndpoint(array $resources) {
+    $edit = $this->populateEndpointFAPI() ;
+
+    $edit['path'] = 'endpoint';
+    $edit['title'] = 'WT??';
+
+    $endpoint = new stdClass;
+    $endpoint->disabled = FALSE; /* Edit this to true to make a default endpoint disabled initially */
+    $endpoint->api_version = 3;
+    $endpoint->name = $edit['name'];
+    $endpoint->title = $edit['title'];
+    $endpoint->server = $edit['server'];
+    $endpoint->path = $edit['path'];
+    $endpoint->authentication = array(
+      'services' => 'services',
+    );
+    $endpoint->server_settings = array(
+      'formatters' => array(
+        'json' => TRUE,
+        'bencode' => TRUE,
+        'rss' => TRUE,
+        'plist' => TRUE,
+        'xmlplist' => TRUE,
+        'php' => TRUE,
+        'yaml' => TRUE,
+        'jsonp' => FALSE,
+        'xml' => FALSE,
+      ),
+      'parsers' => array(
+        'application/x-yaml' => TRUE,
+        'application/json' => TRUE,
+        'application/vnd.php.serialized' => TRUE,
+        'application/plist' => TRUE,
+        'application/plist+xml' => TRUE,
+        'application/x-www-form-urlencoded' => TRUE,
+      ),
+    );
+    $endpoint->resources = array(
+      'system' => array(
+        'alias' => '',
+        'actions' => array(
+          'connect' => array(
+            'enabled' => 1,
+          ),
+          'get_variable' => array(
+            'enabled' => 1,
+          ),
+          'set_variable' => array(
+            'enabled' => 1,
+          ),
+        ),
+      ),
+      'user' => array(
+        'alias' => '',
+        'operations' => array(
+          'create' => array(
+            'enabled' => 1,
+          ),
+          'retrieve' => array(
+            'enabled' => 1,
+          ),
+          'update' => array(
+            'enabled' => 1,
+          ),
+          'delete' => array(
+            'enabled' => 1,
+          ),
+          'index' => array(
+            'enabled' => 1,
+          ),
+        ),
+        'actions' => array(
+          'login' => array(
+            'enabled' => 1,
+          ),
+          'logout' => array(
+            'enabled' => 1,
+          ),
+        ),
+      ),
+    );
+    foreach ($resources as $resource) {
+      // @todo Add other operations besides CRUD.
+      $endpoint->resources += array(
+        $resource => array(
+          'operations' => array(
+            'retrieve' => array(
+              'enabled' => 1,
+            ),
+            'create' => array(
+              'enabled' => 1,
+            ),
+            'update' => array(
+              'enabled' => 1,
+            ),
+            'delete' => array(
+              'enabled' => 1,
+            ),
+            'index' => array(
+              'enabled' => 1,
+            ),
+          ),
+        ),
+      );
+
+    }
+    $endpoint->debug = 1;
+    $endpoint->export_type = FALSE;
+    services_endpoint_save($endpoint);
+    $endpoint = services_endpoint_load($endpoint->name);
+
+    $this->assertTrue($endpoint->name == $edit['name'], 'Endpoint successfully created');
+    return $endpoint;
+  }
+
+  /**
+   * Log a user in via services.
+   *
+   * @param String $name
+   *   The name of the user to log in.
+   * @param String $pass
+   *   The password of the user to log in.
+   *
+   * @return Object
+   *   The newly logged in user object.
+   */
+  public function serviceLogin($name, $pass) {
+    $response = $this->servicesPost($this->endpoint->path . '/user/login', array('username' => $name, 'password' => $pass));
+    $response_data = $response['body'];
+    $proper_answer = isset($response_data->sessid)
+      && isset($response_data->user)
+      && $response_data->user->name == $name;
+    $this->assertTrue($proper_answer, 'User successfully logged in.');
+    // Save session details.
+    $this->session_id = $response_data->sessid;
+    $this->session_name = $response_data->session_name;
+    $this->loggedInUser = $response_data->user;
+    return $this->loggedInUser;
+  }
+
+  /**
+   * Log out via services.
+   */
+  public function serviceLogout() {
+    $response = $this->servicesPost($this->endpoint->path . '/user/logout');
+    $this->assertEqual($response['code'], 200, 'Received 200 response code from LOGOUT');
+  }
+
+  /**
+   * Utility function to recursively turn an object into an array.
+   *
+   * @param array/object $object
+   *   The object, array or element to process
+   *
+   * @return array
+   *   An array corresponding to $object, with any objects converted to arrays.
+   *
+   * @author ChrisO
+   */
+  protected function unObject($object) {
+    if (is_object($object)) {
+      $object = (array) $object;
+    }
+    if (is_array($object)) {
+      foreach ($object as $key => $element) {
+        $object[$key] = $this->unObject($element);
+      }
+    }
+    return $object;
+  }
+
+  /**
+   * Helper to perform a RESTful update of a resource.
+   *
+   * @param String $resource
+   *   The resource type to operate on.
+   * @param int $name
+   *   The name of the resource to update
+   * @param array $data
+   *   The update data to put.
+   * @param int $code
+   *   The expected response code (defaults to 200).
+   */
+  public function update($resource, $name, $data = array(), $code = 200) {
+    $r = $this->servicesPut($this->endpoint->path . '/' . $resource . '/' . $name, $data);
+    $this->assertEqual($r['code'], $code, "Received $code response code from UPDATE $resource/$name (actual response=" . $r['code'] . ")");
+    return $this->unObject($r['body']);
+  }
+
+  /**
+   * Helper to perform a RESTful action of a resource.
+   *
+   * @param String $resource
+   *   The resource type to operate on.
+   * @param int $name
+   *   The name of the resource to update
+   * @param array $data
+   *   The update data to put.
+   * @param int $code
+   *   The expected response code (defaults to 200).
+   */
+  public function action($resource, $name, $action, $data, $code) {
+    if (!is_array($data)) {
+      $data = (array) $data;
+    }
+
+    $destination = '';
+    if (isset($name) && strlen($name) > 0) {
+      $path = "$resource/$name/$action";
+    }
+    else {
+      $path = "$resource/$action";
+    }
+    $r = $this->servicesPost($this->endpoint_path . '/' . $path, $data);
+    $this->assertEqual($r['code'], $code, "Received $code response code from ACTION $path (actual response=" . $r['code'] . ")");
+    return $this->unObject($r['body']);
+  }
+
+  /**
+   * Helper to perform a RESTful create of a resource.
+   *
+   * @param String $resource
+   *   The resource type to operate on.
+   * @param array $data
+   *   The update data to post.
+   * @param int $code
+   *   The expected response code (defaults to 200).
+   */
+  public function create($resource, $data = array(), $code = 200) {
+    $r = $this->servicesPost($this->endpoint->path . '/' . $resource, $data);
+    $this->assertEqual($r['code'], $code, "Received $code response code from CREATE $resource (actual response=" . $r['code'] . ")");
+    return $this->unObject($r['body']);
+  }
+
+  /**
+   * Helper function to perform a RESTful delete of a resource.
+   *
+   * @param String $resource
+   *   The resource type to operate on.
+   * @param int $name
+   *   The name of the resource to update. (i.e. the ID).
+   * @param int $code
+   *   The expected response code (defaults to 200).
+   */
+  public function delete($resource, $name, $code = 200) {
+    // Call to parent::servicesDelete
+    $r = $this->servicesDelete($this->endpoint->path . '/' . $resource . '/' . $name, NULL);
+    $this->assertEqual($r['code'], $code, "Received $code response code from DELETE $resource/$name (actual response=" . $r['code'] . ")");
+    return $this->unObject($r['body']);
+  }
+
+  /**
+   * Helper to performa a RESTful retrieve of a resource.
+   *
+   * @param string $resource
+   *   The resource type to operate on.
+   * @param string $name
+   *   The name of the resource to update
+   * @param array $args
+   *   Any additional args for the querystring.
+   * @param integer $code
+   *   The expected response code (defaults to 200).
+   */
+  public function retrieve($resource, $name, $args = array(), $code = 200) {
+    $r = $this->servicesGet($this->endpoint->path . '/' . $resource . '/' . $name, $args);
+    $this->assertEqual($r['code'], $code, "Received $code response code from RETRIEVE $resource/$name (actual response=" . $r['code'] . ")");
+    return $this->unObject($r['body']);
+  }
+
+  /**
+   * Helper to performa a RESTful index of a resource.
+   *
+   * @param string $resource
+   *   The resource type to operate on.
+   * @param array $args
+   *   Any additional args for the querystring.
+   * @param integer $code
+   *   The expected response code (defaults to 200).
+   */
+  public function index($resource, $args = array(), $code = 200) {
+    $r = $this->servicesGet($this->endpoint->path . '/' . $resource, $args);
+    $this->assertEqual($r['code'], $code, "Received $code response code from INDEX $resource (actual response=" . $r['code'] . ")");
+    return $this->unObject($r['body']);
+  }
+}
+
+/**
+ * Test resources on the Generic controller, using a test entity type.
+ */
+class ServicesEntityGenericEntityResource extends ServicesEntityTestHelper {
+
+  /**
+   * The user for the test.
+   */
+  protected $privilegedUser;
+
+  /**
+   * The Services endpoint config object.
+   */
+  protected $endpoint = NULL;
+
+  /**
+   * The resource controller class to use.
+   *
+   * This is assigned to the system variable by setUp().
+   */
+  protected $services_entity_resource_class = 'ServicesEntityResourceController';
+
+  /**
+   * Implements getInfo().
+   */
+  public static function getInfo() {
+    return array(
+      'name' => 'Test Entity Generic Resource',
+      'description' => "Test resources using the generic resource controller, with a test entity type.",
+      'group' => 'Services Entity',
+    );
+  }
+
+  /**
+   * Implements setUp().
+   */
+  public function setUp() {
+    parent::setUp(
+      'libraries',
+      'entity',
+      'services_entity',
+      // Our test module which provides our test entity type.
+      'services_entity_test'
+    );
+    // Set up endpoint.
+    $this->endpoint = $this->saveNewEndpoint(array('entity_services_entity_test'));
+
+    $this->resource_path = $this->endpoint->path . '/entity_services_entity_test';
+
+    // Create and log in our privileged user.
+    $this->privilegedUser = $this->drupalCreateUser(array(
+      // Let this user access all services.
+      'administer services',
+    ));
+
+    // Set the resource class to use.
+    variable_set('services_entity_resource_class', $this->services_entity_resource_class);
+  }
+
+  /**
+   * Test 'Retrieve' service.
+   */
+  public function testEntityRetrieve() {
+    $this->drupalLogin($this->privilegedUser);
+
+    // Try getting an entity that doesn't exist.
+    $responseArray = $this->servicesGet($this->resource_path . '/42');
+    $this->assertTrue($responseArray['code'] == '404', 'Retrieval of a non-existent entity returns a 404.');
+
+    // Create an entity to retrieve.
+    $entity = entity_create('services_entity_test', array(
+      'type' => 'alpha',
+      'name' => $this->randomString(),
+      'uid' => $this->privilegedUser->uid,
+    ));
+    $wrapper = entity_metadata_wrapper('services_entity_test', $entity);
+
+    // Set a field value.
+    $test_text_value = $this->randomString();
+    $wrapper->field_test_text_alpha->set($test_text_value);
+
+    $entity->save();
+
+    $this->drupalGet($this->resource_path . '/' . $entity->eid);
+
+    $response = $this->servicesGet($this->endpoint->path . '/entity_services_entity_test/' . $entity->eid);
+    $retrieved_entity_data = $response['body'];
+
+    // Check values on the retrieved entity data.
+    $this->assertEqual($entity->name, $retrieved_entity_data->name, 'Retrieved entity has the name property correctly set.');
+    $this->assertEqual($test_text_value, $retrieved_entity_data->field_test_text_alpha['und'][0]['value'], 'Retrieved entity has the field value correctly set.');
+  }
+
+  /**
+   * Test 'Create' service.
+   */
+  public function testEntityCreate() {
+    $this->drupalLogin($this->privilegedUser);
+
+    // An array of entity data to pass to the service to create an entity.
+    $entity_data = array(
+      'type' => 'alpha',
+      'name' => $this->randomString(),
+      'uid' => $this->privilegedUser->uid,
+    );
+    $test_text_value = $this->randomString();
+    $entity_data['field_test_text_alpha']['und'][0]['value'] = $test_text_value;
+
+    // Create the entity using the service.
+    $response = $this->servicesPost($this->resource_path, $entity_data);
+
+    // We get the new entity returned to us.
+    $returned_entity = $response['body'];
+    $new_entity_id = $returned_entity->eid;
+
+    // Load the entity from the DB, using the entity ID from the response we
+    // got back from the service.
+    $entity = entity_load_single('services_entity_test', $new_entity_id);
+    $wrapper = entity_metadata_wrapper('services_entity_test', $entity);
+
+    $this->assertEqual($entity->name, $entity_data['name'], 'Created entity has the name property correctly set.');
+    $this->assertEqual($wrapper->field_test_text_alpha->raw(), $test_text_value, 'Created entity has the text field value correctly set.');
+  }
+
+  /**
+   * Test 'Update' service.
+   */
+  public function testEntityUpdate() {
+    // Create an entity to update.
+    $original_entity_data = array(
+      'type' => 'alpha',
+      'name' => $this->randomString(),
+      'uid' => $this->privilegedUser->uid,
+    );
+    $original_entity = entity_create('services_entity_test', $original_entity_data);
+    $original_entity_wrapper = entity_metadata_wrapper('services_entity_test', $original_entity);
+
+    // Set a field value.
+    $original_entity_wrapper->field_test_text_alpha->set( $this->randomString());
+
+    $original_entity->save();
+
+    $this->drupalLogin($this->privilegedUser);
+
+    // Build an array of data to update to the entity.
+    $update_entity_data = $original_entity_data;
+    // We have to add the entity id.
+    $update_entity_data['eid'] = $original_entity->eid;
+    // Change the name.
+    $update_entity_data['name'] = $this->randomString();
+    // Change the field value.
+    $test_text_value = $this->randomString();
+    $update_entity_data['field_test_text_alpha']['und'][0]['value'] = $test_text_value;
+
+    // Update the entity using the service.
+    $response = $this->servicesPut($this->resource_path . '/' . $original_entity->eid, $update_entity_data);
+
+    // We get the updated entity returned to us.
+    $returned_entity = $response['body'];
+
+    // Load the entity from the DB, using the entity ID from the response we
+    // got back from the service.
+    // Clear the cache first.
+    entity_get_controller('services_entity_test')->resetCache();
+    $updated_entity = entity_load_single('services_entity_test', $original_entity->eid);
+    $updated_entity_wrapper = entity_metadata_wrapper('services_entity_test', $updated_entity);
+
+    $this->assertEqual($update_entity_data['name'], $updated_entity->name, 'Name property was changed on the updated entity.');
+    $this->assertEqual($test_text_value, $updated_entity_wrapper->field_test_text_alpha->raw(), 'Field value was changed on the updated entity.');
+  }
+
+  /**
+   * Test 'Delete' service.
+   */
+  public function testEntityDelete() {
+    // Create an entity to delete.
+    $entity_data = array(
+      'type' => 'alpha',
+      'name' => $this->randomString(),
+      'uid' => $this->privilegedUser->uid,
+      // TODO: FieldAPI field values.
+    );
+    $entity = entity_create('services_entity_test', $entity_data);
+    $entity->save();
+
+    $response = $this->servicesDelete($this->resource_path . '/' . $entity->eid);
+
+    // Load the entity from the DB to check it's been deleted.
+    // Clear the cache first.
+    entity_get_controller('services_entity_test')->resetCache();
+    $deleted_entity = entity_load_single('services_entity_test', $entity->eid);
+
+    $this->assertFalse($deleted_entity, 'The entity has been deleted.');
+  }
+
+  /**
+   * Test 'Index' service.
+   */
+  public function testEntityIndex() {
+    // Create some entities to index.
+    $entity_data = array(
+      'type' => 'alpha',
+      'name' => 'one',
+      'uid' => $this->privilegedUser->uid,
+    );
+    $entity = entity_create('services_entity_test', $entity_data);
+    $wrapper = entity_metadata_wrapper('services_entity_test', $entity);
+    $wrapper->field_test_text_alpha->set('field-value-1');
+    $entity->save();
+
+    $entity_data = array(
+      'type' => 'alpha',
+      'name' => 'two',
+      'uid' => $this->privilegedUser->uid,
+    );
+    $entity = entity_create('services_entity_test', $entity_data);
+    $wrapper = entity_metadata_wrapper('services_entity_test', $entity);
+    $wrapper->field_test_text_alpha->set('field-value-1');
+    $entity->save();
+
+    $entity_data = array(
+      'type' => 'alpha',
+      'name' => 'three',
+      'uid' => 0,
+    );
+    $entity = entity_create('services_entity_test', $entity_data);
+    $wrapper = entity_metadata_wrapper('services_entity_test', $entity);
+    $wrapper->field_test_text_alpha->set('field-value-2');
+    $entity->save();
+
+    $entity_data = array(
+      'type' => 'beta',
+      'name' => 'one',
+      'uid' => 0,
+    );
+    $entity = entity_create('services_entity_test', $entity_data);
+    $entity->save();
+
+    // Get the index of all entities.
+    $response = $this->servicesGet($this->resource_path);
+    $retrieved_data = $response['body'];
+
+    $this->assertEqual(count($retrieved_data), 4, 'All entities were listed by the index service.');
+
+    // Get the index of only the 'alpha' bundle entities.
+    $response = $this->servicesGet($this->resource_path, array('parameters[type]' => 'alpha'));
+    $retrieved_data = $response['body'];
+
+    $this->assertEqual(count($retrieved_data), 3, 'The correct number of entities was returned by the index when filtered by entity type.');
+    $all_correct = TRUE;
+    foreach ($retrieved_data as $retrieved_entity) {
+      $all_correct &= ($retrieved_entity->type == 'alpha');
+    }
+    $this->assertTrue($all_correct, 'All the retrieved entities were of the requested entity type.');
+
+    // Get the index of entities by name.
+    $response = $this->servicesGet($this->resource_path, array('parameters[name]' => 'one'));
+    $retrieved_data = $response['body'];
+
+    $this->assertEqual(count($retrieved_data), 2, "The correct number of entities was returned by the index when filtered by entity 'name' property.");
+    $all_correct = TRUE;
+    foreach ($retrieved_data as $retrieved_entity) {
+      $all_correct &= ($retrieved_entity->name == 'one');
+    }
+    $this->assertTrue($all_correct, 'All the retrieved entities had the requested entity property.');
+
+    // Get the index of entities by uid.
+    $response = $this->servicesGet($this->resource_path, array('parameters[uid]' => '0'));
+    $retrieved_data = $response['body'];
+    debug($retrieved_data);
+
+    $this->assertEqual(count($retrieved_data), 2, "The correct number of entities was returned by the index when filtered by entity 'uid' property.");
+    $all_correct = TRUE;
+    foreach ($retrieved_data as $retrieved_entity) {
+      $all_correct &= ($retrieved_entity->uid == 0);
+    }
+    $this->assertTrue($all_correct, 'All the retrieved entities had the requested entity property.');
+
+    // Get the index of entities by multiple properties.
+    $response = $this->servicesGet($this->resource_path, array('parameters[type]' => 'alpha', 'parameters[uid]' => '0'));
+    $retrieved_data = $response['body'];
+
+    $this->assertEqual(count($retrieved_data), 1, "The correct number of entities was returned by the index when filtered by entity type and 'uid' property.");
+
+    // Get the index of entities by a field value.
+    $response = $this->servicesGet($this->resource_path, array('parameters[field_test_text_alpha]' => 'field-value-1'));
+    $retrieved_data = $response['body'];
+
+    $this->assertEqual(count($retrieved_data), 2, "The correct number of entities was returned by the index when filtered by a field value.");
+  }
+}
+
+/**
+ * Tests entity_node services for both the generic and clean controller.
+ */
+class ServicesEntityNodeResourceTest extends ServicesEntityTestHelper {
+  /**
+   * Returns information about this test case.
+   *
+   * @return
+   *   An array of information about this test case
+   */
+  public static function getInfo() {
+    return array(
+      'name' => 'Entity Node Resource',
+      'description' => 'Ensure that the entity_node resource functions correctly.',
+      'group' => 'Services Entity',
+    );
+  }
+
+  /**
+   * @see ServicesWebTestCase::setUp()
+   */
+  ///* Restore this commenting-out to test using local db (a bit faster that way).
+  public function setUp() {
+    parent::setUp('libraries', 'entity', 'services_entity');
+    $this->endpoint = $this->saveNewEndpoint(array('entity_node'));
+  }
+  // */ public function setUp() { $this->setup = TRUE; $this->endpoint = services_endpoint_load('services'); $this->cookieFile = drupal_tempnam(variable_get('file_temporary_path'), 'services_cookiejar'); $this->additionalCurlOptions[CURLOPT_COOKIEFILE] = $this->cookieFile;} public function tearDown()  {}
+
+  /**
+   * Test index functionality with the clean controller.
+   */
+  public function testIndexClean() {
+    $this->testIndex(TRUE);
+  }
+
+  /**
+   * Test index functionality.
+   *
+   * @param boolean $clean
+   *   TRUE to use the clean controller, FALSE to use the generic.
+   */
+  public function testIndex($clean = FALSE) {
+    // Choose the controller.
+    if ($clean) {
+      variable_set('services_entity_resource_class', 'ServicesEntityResourceControllerClean');
+    }
+    else {
+      variable_set('services_entity_resource_class', 'ServicesEntityResourceController');
+    }
+
+    // Create some users so we can have multiple authors.
+    $account1 = $this->drupalCreateUser(array('bypass node access'));
+    $account2 = $this->drupalCreateUser(array('bypass node access'));
+
+    // Create some nodes
+    for ($i = 0; $i < 6; $i++) {
+      $values = array(
+        'type' => $i < 4 ? 'page' : 'article',
+        'uid' => $i % 2 == 0 ? $account1->uid : $account2->uid,
+        'title' => $this->randomName(8),
+        'body' => array(
+          LANGUAGE_NONE => array(
+            '0' => array(
+              'value' => $this->randomName(30),
+              'format' => filter_default_format(),
+              'summary' => '',
+            ),
+          ),
+        ),
+      );
+      $nodes[] = $this->drupalCreateNode($values);
+    }
+
+    // Fetch the index and verify that it returns the correct number of nodes.
+    $resource = 'entity_node';
+    $r = $this->index($resource);
+    $this->assertEqual(count($r), count($nodes), 'Index returned the correct number of nodes.');
+
+    // Try the same for each type.
+    $r = $this->index($resource, array('parameters[type]' => 'page'));
+    $this->assertEqual(count($r), 4, 'Index returned the correct number of pages.');
+    $r = $this->index($resource, array('parameters[type]' => 'article'));
+    $this->assertEqual(count($r), 2, 'Index returned the correct number of articles.');
+
+    // Try filtering by uid/author
+    // We need a user with view profiles permission to see the author property.
+    $admin_user = $this->drupalCreateUser(array('access user profiles'));
+    $this->serviceLogin($admin_user->name, $admin_user->pass_raw);
+    foreach (array($account1, $account2) as $account) {
+      $author_field = $clean ? 'author' : 'uid';
+      //$this->use_xdebug = 1;
+      $r = $this->index($resource, array("parameters[$author_field]" => $account->uid));
+      $this->assertEqual(count($r), 3, 'Index returned the correct number of nodes by author ' . $account->uid);
+      foreach ($r as $node) {
+        if ($clean) {
+          $this->assertEqual($node['author']['id'], $account->uid, 'All returned nodes have the correct author ' . $account->uid);
+        }
+        else {
+          $this->assertEqual($node['uid'], $account->uid, 'All returned nodes have the correct author ' . $account->uid);
+        }
+      }
+    }
+
+    // Try filtering by an invalid property and verify that we get an error.
+    $result = $this->index($resource, array("parameters[foo]" => 3), 406);
+  }
+
+  /**
+   * Tests node services using the 'clean' resource controller.
+   */
+  public function testCRUDClean() {
+    $this->testCRUD(TRUE);
+  }
+
+  /**
+   * Tests basic CRUD and index actions of a node via the entity_node service.
+   */
+  public function testCRUD($clean = FALSE) {
+    $resource = 'entity_node';
+    // Certain things are different depending on whether or not we are using
+    // the 'clean' resource controller.
+    if ($clean) {
+      variable_set('services_entity_resource_class', 'ServicesEntityResourceControllerClean');
+      $node = array(
+        'type' => 'page',
+        'title' => $this->randomName(10),
+        'body' => array(
+          'value' => $this->randomName(50),
+          'format' => 'full_html',
+          'summary' => '',
+        ),
+      );
+    }
+    else {
+      variable_set('services_entity_resource_class', 'ServicesEntityResourceController');
+      $node = array(
+        'type' => 'page',
+        'title' => $this->randomName(10),
+        'body' => array(
+          'und' => array(
+            '0' => array(
+              'value' => $this->randomName(50),
+              'format' => 'full_html',
+              'summary' => '',
+            ),
+          )
+        ),
+      );
+    }
+
+    // Test retrieving a specific revision.
+    // @todo complete these tests if/when https://drupal.org/node/1981890 lands.
+    // $nodes = $this->createNodeRevisions();
+    // foreach ($nodes as $node) {
+    // $retrieved = $this->retrieve($resource, $node->nid,
+    // array(
+    // 'revision' => $node->vid,
+    // 'XDEBUG_SESSION_START' => 'ECLIPSE_DBGP'
+    // ), 200);
+    // $this->assertEqual($retrieved->title, $node->title);
+    // }
+
+    // We are only going to test properties that we set explicitly.
+    $test_properties = array_keys($node);
+
+    // Test node access
+    $account = $this->drupalCreateUser(array());
+    $this->serviceLogin($account->name, $account->pass_raw);
+    $this->create($resource, $node, 401);
+    $this->serviceLogout();
+
+    // Test format access.
+    $unpriv_account = $this->drupalCreateUser(array('create page content', 'edit any page content', 'delete any page content'));
+    $this->serviceLogin($unpriv_account->name, $unpriv_account->pass_raw);
+    $this->create($resource, $node, 403);
+    $this->serviceLogout();
+
+    // User with format access should be able to create the node.
+    $account = $this->drupalCreateUser(array('bypass node access', 'use text format full_html'));
+    $this->serviceLogin($account->name, $account->pass_raw);
+
+    // Set the 'author' or 'uid' property, depending on which controller we're using.
+    if ($clean) {
+      $node['author'] = $account->uid;
+    }
+    else {
+      $node['uid'] = $account->uid;
+    }
+
+    // We cannot create a node with the clean controller because of [issue link]
+    // @todo remove this conditional once that lands.
+    $created_node = $this->create($resource, $node);
+    $this->assertTrue($created_node['nid'], t('node create response has a node id'));
+    $nid = $created_node['nid'];
+
+    // Verify that the actual node was created.
+    $drupal_node = $this->nodeLoad($nid, $clean);
+    $this->assertNodeProperties($created_node, $drupal_node, $test_properties, 'Node CREATE response');
+    $this->assertNodeProperties($node, $drupal_node, $test_properties, 'Created node');
+
+    // Test an update of the created node.
+    // Change our title and body.
+    $created_node['title'] = $this->randomName(10);
+    if ($clean) {
+      $created_node['body']['value'] = $this->randomname(50);
+    }
+    else {
+      $created_node['body']['und'][0]['value'] = $this->randomname(50);
+    }
+    $update_result = $this->update($resource, $nid, $created_node, 200);
+    $drupal_node = $this->nodeLoad($nid, $clean);
+    // @todo restore this once [insert issue -- generic-update-entity] lands
+    if (!$clean) {
+      $this->assertNodeProperties($update_result, $drupal_node, $test_properties, 'Created node UPDATE response');
+    }
+    $this->assertNodeProperties($created_node, $drupal_node, $test_properties, 'Updated created node');
+
+    // Test retrieving the new node via services.
+    $fetched_node = $this->retrieve($resource, $nid);
+    $this->assertNodeProperties($fetched_node, $drupal_node, $test_properties, 'Node RETRIEVE response');
+
+    // Test an update of the fetched node.
+    // Change our title and body.
+    $fetched_node['title'] = $this->randomName(10);
+    if ($clean) {
+      $fetched_node['body']['value'] = $this->randomname(50);
+    }
+    else {
+      $fetched_node['body']['und'][0]['value'] = $this->randomname(50);
+    }
+    $update_result = $this->update($resource, $nid, $fetched_node, 200);
+    $drupal_node = $this->nodeLoad($nid, $clean);
+    $this->assertNodeProperties($update_result, $drupal_node, $test_properties, 'Fetched node UPDATE response');
+    $this->assertNodeProperties($fetched_node, $drupal_node, $test_properties, 'Updated fetched node');
+
+    // Test updating with a disallowed text format in the body.
+    $drupal_node = node_load($nid, NULL, TRUE);
+    $drupal_node->body['und'][0]['format'] = filter_default_format();
+    node_save($drupal_node);
+    $this->serviceLogout();
+    $this->serviceLogin($unpriv_account->name, $unpriv_account->pass_raw);
+    $fetched_node['body']['format'] = 'full_html';
+    $this->update($resource, $nid, $fetched_node, 403);
+    $drupal_node = node_load($nid, NULL, TRUE);
+    $this->assertEqual($drupal_node->body['und'][0]['format'], filter_default_format(), 'Unprivileged user was unable to update with disallowed text format.');
+
+    // Test a delete of a node.
+    $delete_result = $this->delete($resource, $nid);
+
+    // Confirm the node was deleted.
+    $deleted_node = $this->retrieve($resource, $nid, array(), 404);
+    $drupal_node = node_load($nid, NULL, TRUE);
+    $this->assertFalse($drupal_node, 'The deleted node was removed from the db.');
+
+    // Test creating a node without a body field.
+    $node_sans_body = array(
+      'type' => 'page',
+      'title' => $this->randomName(10),
+    );
+    // We need an author to create a node via clean controller
+    // See https://drupal.org/node/1237014
+    if ($clean) {
+      $node_sans_body['author'] = $account->uid;
+    }
+    $created_node_sans_body = $this->create($resource, $node_sans_body);
+    $this->assertTrue($created_node_sans_body['nid'], 'Created Node without body has a response with a node id');
+
+    $drupal_node = $this->nodeLoad($created_node_sans_body['nid'], $clean);
+    $this->assertNodeProperties($node_sans_body, $drupal_node, array_keys($node_sans_body), 'Created node without body');
+  }
+
+  /**
+   * Asserts that all properties in the list are the same in both versions
+   * of the node.
+   *
+   * @param array $a
+   *   One version of the node, converted to an array of values.
+   * @param array $b
+   *   The other version of the node, similarly converted.
+   * @param $keys
+   *   The list of properties to compare.
+   * @param $msg
+   *   An assertion message prefix.
+   */
+  protected function assertNodeProperties($a, $b, $keys, $msg) {
+    // List of drupal fields which require text_format processing.
+    $special_fields = array('body');
+
+    foreach ($keys as $name) {
+      if (in_array($name, $special_fields)) {
+        // Clean controller.
+        if (isset($aprop['format']) && isset($bprop['format'])) {
+          // Compare the formatted values.
+          $aprop = check_markup($aprop['value'], $aprop['format']);
+          $bprop = check_markup($bprop['value'], $bprop['format']);
+        }
+        // Generic controller.
+        elseif (isset($aprop['und'][0]['format']) && isset($bprop['und'][0]['format'])) {
+          // Compare the formatted values.
+          $aprop = check_markup($aprop['und'][0]['value'], $aprop['und'][0]['format']);
+          $bprop = check_markup($bprop['und'][0]['value'], $bprop['und'][0]['format']);
+        }
+      }
+      else {
+        $aprop = $a[$name];
+        $bprop = $b[$name];
+      }
+      $this->assertEqual($aprop, $bprop, "$msg: Property $name matches");
+    }
+  }
+
+  /**
+   * Helper function to load a node and process it so it matches the format
+   * used by the service controller.
+   *
+   * @param $nid
+   *   The node to load.
+   * @param $clean
+   *   If TRUE, use the ServicesResourceControllerClean class.
+   * @return
+   *   The loaded, processed node.
+   */
+  public function nodeLoad($nid, $clean = FALSE) {
+    $node = $this->unObject(node_load($nid, NULL, TRUE));
+
+    if ($clean) {
+      $node['author'] = $node['uid'];
+      if (!empty($node['body'])) {
+        $node['body'] = reset($node['body'][$node['language']]);
+      }
+    }
+    return $node;
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity_translation/LICENSE.txt drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity_translation/LICENSE.txt
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity_translation/LICENSE.txt	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity_translation/LICENSE.txt	2014-04-16 14:25:46.000000000 +0200
@@ -0,0 +1,339 @@
+                    GNU GENERAL PUBLIC LICENSE
+                       Version 2, June 1991
+
+ Copyright (C) 1989, 1991 Free Software Foundation, Inc.,
+ 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+                            Preamble
+
+  The licenses for most software are designed to take away your
+freedom to share and change it.  By contrast, the GNU General Public
+License is intended to guarantee your freedom to share and change free
+software--to make sure the software is free for all its users.  This
+General Public License applies to most of the Free Software
+Foundation's software and to any other program whose authors commit to
+using it.  (Some other Free Software Foundation software is covered by
+the GNU Lesser General Public License instead.)  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+this service if you wish), that you receive source code or can get it
+if you want it, that you can change the software or use pieces of it
+in new free programs; and that you know you can do these things.
+
+  To protect your rights, we need to make restrictions that forbid
+anyone to deny you these rights or to ask you to surrender the rights.
+These restrictions translate to certain responsibilities for you if you
+distribute copies of the software, or if you modify it.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must give the recipients all the rights that
+you have.  You must make sure that they, too, receive or can get the
+source code.  And you must show them these terms so they know their
+rights.
+
+  We protect your rights with two steps: (1) copyright the software, and
+(2) offer you this license which gives you legal permission to copy,
+distribute and/or modify the software.
+
+  Also, for each author's protection and ours, we want to make certain
+that everyone understands that there is no warranty for this free
+software.  If the software is modified by someone else and passed on, we
+want its recipients to know that what they have is not the original, so
+that any problems introduced by others will not reflect on the original
+authors' reputations.
+
+  Finally, any free program is threatened constantly by software
+patents.  We wish to avoid the danger that redistributors of a free
+program will individually obtain patent licenses, in effect making the
+program proprietary.  To prevent this, we have made it clear that any
+patent must be licensed for everyone's free use or not licensed at all.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+                    GNU GENERAL PUBLIC LICENSE
+   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
+
+  0. This License applies to any program or other work which contains
+a notice placed by the copyright holder saying it may be distributed
+under the terms of this General Public License.  The "Program", below,
+refers to any such program or work, and a "work based on the Program"
+means either the Program or any derivative work under copyright law:
+that is to say, a work containing the Program or a portion of it,
+either verbatim or with modifications and/or translated into another
+language.  (Hereinafter, translation is included without limitation in
+the term "modification".)  Each licensee is addressed as "you".
+
+Activities other than copying, distribution and modification are not
+covered by this License; they are outside its scope.  The act of
+running the Program is not restricted, and the output from the Program
+is covered only if its contents constitute a work based on the
+Program (independent of having been made by running the Program).
+Whether that is true depends on what the Program does.
+
+  1. You may copy and distribute verbatim copies of the Program's
+source code as you receive it, in any medium, provided that you
+conspicuously and appropriately publish on each copy an appropriate
+copyright notice and disclaimer of warranty; keep intact all the
+notices that refer to this License and to the absence of any warranty;
+and give any other recipients of the Program a copy of this License
+along with the Program.
+
+You may charge a fee for the physical act of transferring a copy, and
+you may at your option offer warranty protection in exchange for a fee.
+
+  2. You may modify your copy or copies of the Program or any portion
+of it, thus forming a work based on the Program, and copy and
+distribute such modifications or work under the terms of Section 1
+above, provided that you also meet all of these conditions:
+
+    a) You must cause the modified files to carry prominent notices
+    stating that you changed the files and the date of any change.
+
+    b) You must cause any work that you distribute or publish, that in
+    whole or in part contains or is derived from the Program or any
+    part thereof, to be licensed as a whole at no charge to all third
+    parties under the terms of this License.
+
+    c) If the modified program normally reads commands interactively
+    when run, you must cause it, when started running for such
+    interactive use in the most ordinary way, to print or display an
+    announcement including an appropriate copyright notice and a
+    notice that there is no warranty (or else, saying that you provide
+    a warranty) and that users may redistribute the program under
+    these conditions, and telling the user how to view a copy of this
+    License.  (Exception: if the Program itself is interactive but
+    does not normally print such an announcement, your work based on
+    the Program is not required to print an announcement.)
+
+These requirements apply to the modified work as a whole.  If
+identifiable sections of that work are not derived from the Program,
+and can be reasonably considered independent and separate works in
+themselves, then this License, and its terms, do not apply to those
+sections when you distribute them as separate works.  But when you
+distribute the same sections as part of a whole which is a work based
+on the Program, the distribution of the whole must be on the terms of
+this License, whose permissions for other licensees extend to the
+entire whole, and thus to each and every part regardless of who wrote it.
+
+Thus, it is not the intent of this section to claim rights or contest
+your rights to work written entirely by you; rather, the intent is to
+exercise the right to control the distribution of derivative or
+collective works based on the Program.
+
+In addition, mere aggregation of another work not based on the Program
+with the Program (or with a work based on the Program) on a volume of
+a storage or distribution medium does not bring the other work under
+the scope of this License.
+
+  3. You may copy and distribute the Program (or a work based on it,
+under Section 2) in object code or executable form under the terms of
+Sections 1 and 2 above provided that you also do one of the following:
+
+    a) Accompany it with the complete corresponding machine-readable
+    source code, which must be distributed under the terms of Sections
+    1 and 2 above on a medium customarily used for software interchange; or,
+
+    b) Accompany it with a written offer, valid for at least three
+    years, to give any third party, for a charge no more than your
+    cost of physically performing source distribution, a complete
+    machine-readable copy of the corresponding source code, to be
+    distributed under the terms of Sections 1 and 2 above on a medium
+    customarily used for software interchange; or,
+
+    c) Accompany it with the information you received as to the offer
+    to distribute corresponding source code.  (This alternative is
+    allowed only for noncommercial distribution and only if you
+    received the program in object code or executable form with such
+    an offer, in accord with Subsection b above.)
+
+The source code for a work means the preferred form of the work for
+making modifications to it.  For an executable work, complete source
+code means all the source code for all modules it contains, plus any
+associated interface definition files, plus the scripts used to
+control compilation and installation of the executable.  However, as a
+special exception, the source code distributed need not include
+anything that is normally distributed (in either source or binary
+form) with the major components (compiler, kernel, and so on) of the
+operating system on which the executable runs, unless that component
+itself accompanies the executable.
+
+If distribution of executable or object code is made by offering
+access to copy from a designated place, then offering equivalent
+access to copy the source code from the same place counts as
+distribution of the source code, even though third parties are not
+compelled to copy the source along with the object code.
+
+  4. You may not copy, modify, sublicense, or distribute the Program
+except as expressly provided under this License.  Any attempt
+otherwise to copy, modify, sublicense or distribute the Program is
+void, and will automatically terminate your rights under this License.
+However, parties who have received copies, or rights, from you under
+this License will not have their licenses terminated so long as such
+parties remain in full compliance.
+
+  5. You are not required to accept this License, since you have not
+signed it.  However, nothing else grants you permission to modify or
+distribute the Program or its derivative works.  These actions are
+prohibited by law if you do not accept this License.  Therefore, by
+modifying or distributing the Program (or any work based on the
+Program), you indicate your acceptance of this License to do so, and
+all its terms and conditions for copying, distributing or modifying
+the Program or works based on it.
+
+  6. Each time you redistribute the Program (or any work based on the
+Program), the recipient automatically receives a license from the
+original licensor to copy, distribute or modify the Program subject to
+these terms and conditions.  You may not impose any further
+restrictions on the recipients' exercise of the rights granted herein.
+You are not responsible for enforcing compliance by third parties to
+this License.
+
+  7. If, as a consequence of a court judgment or allegation of patent
+infringement or for any other reason (not limited to patent issues),
+conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot
+distribute so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you
+may not distribute the Program at all.  For example, if a patent
+license would not permit royalty-free redistribution of the Program by
+all those who receive copies directly or indirectly through you, then
+the only way you could satisfy both it and this License would be to
+refrain entirely from distribution of the Program.
+
+If any portion of this section is held invalid or unenforceable under
+any particular circumstance, the balance of the section is intended to
+apply and the section as a whole is intended to apply in other
+circumstances.
+
+It is not the purpose of this section to induce you to infringe any
+patents or other property right claims or to contest validity of any
+such claims; this section has the sole purpose of protecting the
+integrity of the free software distribution system, which is
+implemented by public license practices.  Many people have made
+generous contributions to the wide range of software distributed
+through that system in reliance on consistent application of that
+system; it is up to the author/donor to decide if he or she is willing
+to distribute software through any other system and a licensee cannot
+impose that choice.
+
+This section is intended to make thoroughly clear what is believed to
+be a consequence of the rest of this License.
+
+  8. If the distribution and/or use of the Program is restricted in
+certain countries either by patents or by copyrighted interfaces, the
+original copyright holder who places the Program under this License
+may add an explicit geographical distribution limitation excluding
+those countries, so that distribution is permitted only in or among
+countries not thus excluded.  In such case, this License incorporates
+the limitation as if written in the body of this License.
+
+  9. The Free Software Foundation may publish revised and/or new versions
+of the General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+Each version is given a distinguishing version number.  If the Program
+specifies a version number of this License which applies to it and "any
+later version", you have the option of following the terms and conditions
+either of that version or of any later version published by the Free
+Software Foundation.  If the Program does not specify a version number of
+this License, you may choose any version ever published by the Free Software
+Foundation.
+
+  10. If you wish to incorporate parts of the Program into other free
+programs whose distribution conditions are different, write to the author
+to ask for permission.  For software which is copyrighted by the Free
+Software Foundation, write to the Free Software Foundation; we sometimes
+make exceptions for this.  Our decision will be guided by the two goals
+of preserving the free status of all derivatives of our free software and
+of promoting the sharing and reuse of software generally.
+
+                            NO WARRANTY
+
+  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
+FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
+OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
+PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
+OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
+TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
+PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
+REPAIR OR CORRECTION.
+
+  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
+REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
+INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
+OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
+TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
+YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
+PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
+POSSIBILITY OF SUCH DAMAGES.
+
+                     END OF TERMS AND CONDITIONS
+
+            How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+convey the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    <one line to give the program's name and a brief idea of what it does.>
+    Copyright (C) <year>  <name of author>
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License along
+    with this program; if not, write to the Free Software Foundation, Inc.,
+    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+
+Also add information on how to contact you by electronic and paper mail.
+
+If the program is interactive, make it output a short notice like this
+when it starts in an interactive mode:
+
+    Gnomovision version 69, Copyright (C) year name of author
+    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, the commands you use may
+be called something other than `show w' and `show c'; they could even be
+mouse-clicks or menu items--whatever suits your program.
+
+You should also get your employer (if you work as a programmer) or your
+school, if any, to sign a "copyright disclaimer" for the program, if
+necessary.  Here is a sample; alter the names:
+
+  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
+  `Gnomovision' (which makes passes at compilers) written by James Hacker.
+
+  <signature of Ty Coon>, 1 April 1989
+  Ty Coon, President of Vice
+
+This General Public License does not permit incorporating your program into
+proprietary programs.  If your program is a subroutine library, you may
+consider it more useful to permit linking proprietary applications with the
+library.  If this is what you want to do, use the GNU Lesser General
+Public License instead of this License.
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity_translation/services_entity_translation.info drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity_translation/services_entity_translation.info
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity_translation/services_entity_translation.info	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity_translation/services_entity_translation.info	2014-06-26 15:50:18.000000000 +0200
@@ -0,0 +1,15 @@
+name = Services Entity Translation
+description = Exposes entity translations to the Service API.
+package = Services
+core = 7.x
+dependencies[] = services
+dependencies[] = services_entity
+dependencies[] = entity_translation
+
+; Information added by drupal.org packaging script on 2013-08-07
+version = "7.x-2.0-alpha5"
+core = "7.x"
+project = "services_entity_translation"
+project status url = http://drupal.epe.si
+datestamp = "1375891029"
+
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity_translation/services_entity_translation.module drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity_translation/services_entity_translation.module
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity_translation/services_entity_translation.module	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity_translation/services_entity_translation.module	2014-04-16 14:25:46.000000000 +0200
@@ -0,0 +1,2 @@
+<?php
+
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity_translation/services_entity_translation.resources.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity_translation/services_entity_translation.resources.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity_translation/services_entity_translation.resources.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity_translation/services_entity_translation.resources.inc	2014-04-16 14:25:46.000000000 +0200
@@ -0,0 +1,10 @@
+<?php
+
+function _services_entity_translation_resource_translate($entity_type, $entity_id,$translation,$values) {
+  $entity = entity_load_single($entity_type, $entity_id);
+  $handler = entity_translation_get_handler($entity_type, $entity);
+  $handler->setTranslation($translation, $values);
+  entity_save($entity_type,$entity);
+}
+
+
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity_translation/services_entity_translation.services.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity_translation/services_entity_translation.services.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity_translation/services_entity_translation.services.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_entity_translation/services_entity_translation.services.inc	2014-04-16 14:25:46.000000000 +0200
@@ -0,0 +1,47 @@
+<?php
+
+/**
+ * Implementation of hook_services_resources().
+ */
+function services_entity_translation_services_resources() {
+  $resources = array();
+
+      $resources["entity_translation"]['actions']['translate'] = array(
+        'file' => array('type' => 'inc', 'module' => 'services_entity_translation', 'name' => 'services_entity_translation.resources'),
+        'callback' => '_services_entity_translation_resource_translate',
+        'description' => "Entity translation",
+        'args' => array(
+          array(
+            'name' => 'entity_type',
+            'optional' => FALSE,
+            'source' => array('data' => 'entity_type'),
+            'type' => 'string',
+            'description' => 'The type of the entity to create',
+          ),
+          array(
+            'name' => 'entity_id',
+            'optional' => FALSE,
+            'source' => array('data' => 'entity_id'),
+            'description' => 'entity',
+            'type' => 'integer',
+          ),
+          array(
+            'name' => 'translation',
+            'optional' => FALSE,
+            'source' => array('data' => 'translation'),
+            'description' => 'translation info',
+            'type' => 'struct',
+          ),
+          array(
+            'name' => 'values',
+            'optional' => FALSE,
+            'source' => array('data' => 'values'),
+            'description' => 'translation values',
+            'type' => 'struct',
+          ),
+        ),
+        'access arguments' => array('access content'),
+      );
+
+  return $resources;
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_views/CHANGELOG drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_views/CHANGELOG
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_views/CHANGELOG	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_views/CHANGELOG	2014-05-21 21:44:03.000000000 +0200
@@ -0,0 +1,3 @@
+Services Views 7.x-1.0, xxxx-xx-xx
+------------------------------
+#1135972 by kylebrowning, voxpelli: Port to Drupal 7
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_views/includes/views/views_plugin_display_services.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_views/includes/views/views_plugin_display_services.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_views/includes/views/views_plugin_display_services.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_views/includes/views/views_plugin_display_services.inc	2014-05-21 21:44:03.000000000 +0200
@@ -0,0 +1,148 @@
+<?php
+/**
+ * @file
+ * Contains the page display plugin.
+ */
+
+/**
+ * The plugin that handles a Services callback.
+ *
+ * @ingroup views_display_plugins
+ */
+class views_plugin_display_services extends views_plugin_display {
+
+  function has_path() {return TRUE; }
+
+  function option_definition() {
+    $options = parent::option_definition();
+
+    $options['path'] = array('default' => '');
+
+    return $options;
+  }
+
+  /**
+   * Execute implementation.
+   */
+  function execute() {
+
+    // Prior to this being called, the $view should already be set to this
+    // display, and arguments should be set on the view.
+    $this->view->build();
+
+    // Execute a view.
+    $this->view->execute();
+
+    // Map fields.
+    $result = array();
+    foreach ($this->view->result as $item) {
+      $new_item = new stdClass();
+      foreach ($this->view->field as $field) {
+        if (isset($item->{$field->field_alias})) {
+          // Make sure new keys are alphanumerical, underscore and dash.
+          if (!empty($field->options['label']) && preg_match('/^[0-9a-z_-]*$/', $field->options['label'])) {
+            $new_item->{$field->options['label']} = $item->{$field->field_alias};
+          }
+          else {
+            $new_item->{$field->field_alias} = $item->{$field->field_alias};
+          }
+        }
+      }
+      if (!empty($new_item)) {
+        $result[] = $new_item;
+      }
+    }
+
+    return $result;
+  }
+
+  function render() {
+    return $this->execute();
+  }
+
+  function preview() {
+    module_load_include('resource.inc', 'services_views');
+    return '<pre>' . var_export(services_views_execute_view(NULL, $this->view, $this->display->id), TRUE) . '</pre>';
+  }
+
+  /**
+   * Provide the summary for page options in the views UI.
+   *
+   * This output is returned as an array.
+   */
+  function options_summary(&$categories, &$options) {
+    // It is very important to call the parent function here:
+    parent::options_summary($categories, $options);
+
+    $categories['page'] = array(
+      'title' => t('Services settings'),
+      'column' => 'second',
+      'build' => array(
+        '#weight' => -10,
+      ),
+    );
+
+    $path = strip_tags('/' . $this->get_option('path'));
+    if (empty($path)) {
+      $path = t('None');
+    }
+
+    $options['path'] = array(
+      'category' => 'page',
+      'title' => t('Path'),
+      'value' => views_ui_truncate($path, 24),
+    );
+  }
+
+  /**
+   * Provide the default form for setting options.
+   */
+  function options_form(&$form, &$form_state) {
+    // It is very important to call the parent function here:
+    parent::options_form($form, $form_state);
+
+    switch ($form_state['section']) {
+      case 'path':
+        $form['#title'] .= t('Path of the Services resource');
+        $form['#help_topic'] = 'path';
+        $form['path'] = array(
+          '#type' => 'textfield',
+          '#description' => t('This is path element that comes after endpoint path.'),
+          '#default_value' => $this->get_option('path'),
+        );
+    }
+  }
+
+  function options_validate(&$form, &$form_state) {
+    // It is very important to call the parent function here.
+    parent::options_validate($form, $form_state);
+    if ($form_state['section'] == 'path') {
+
+      if (preg_match('/[^a-zA-Z0-9-_]+/', $form_state['values']['path'])) {
+        form_error($form['path'], t('Use only alphanumeric characters, "-" and "_" for resource name'));
+      }
+
+      // Get current path and see if it was changed.
+      $current_path = $this->get_option('path');
+      if ($current_path != $form_state['values']['path']) {
+        // We build resources from database to bypass cache.
+        module_load_include('inc', 'services', 'includes/services.resource_build');
+        $resources = _services_build_resources();
+
+        if (array_key_exists($form_state['values']['path'], $resources)) {
+          form_error($form['path'], t('Resource with this path already exists.'));
+        }
+      }
+    }
+  }
+
+  function options_submit(&$form, &$form_state) {
+    // It is very important to call the parent function here.
+    parent::options_submit($form, $form_state);
+    switch ($form_state['section']) {
+      case 'path':
+        $this->set_option('path', $form_state['values']['path']);
+        break;
+    }
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_views/LICENSE.txt drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_views/LICENSE.txt
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_views/LICENSE.txt	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_views/LICENSE.txt	2014-05-21 21:44:03.000000000 +0200
@@ -0,0 +1,339 @@
+                    GNU GENERAL PUBLIC LICENSE
+                       Version 2, June 1991
+
+ Copyright (C) 1989, 1991 Free Software Foundation, Inc.,
+ 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+                            Preamble
+
+  The licenses for most software are designed to take away your
+freedom to share and change it.  By contrast, the GNU General Public
+License is intended to guarantee your freedom to share and change free
+software--to make sure the software is free for all its users.  This
+General Public License applies to most of the Free Software
+Foundation's software and to any other program whose authors commit to
+using it.  (Some other Free Software Foundation software is covered by
+the GNU Lesser General Public License instead.)  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+this service if you wish), that you receive source code or can get it
+if you want it, that you can change the software or use pieces of it
+in new free programs; and that you know you can do these things.
+
+  To protect your rights, we need to make restrictions that forbid
+anyone to deny you these rights or to ask you to surrender the rights.
+These restrictions translate to certain responsibilities for you if you
+distribute copies of the software, or if you modify it.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must give the recipients all the rights that
+you have.  You must make sure that they, too, receive or can get the
+source code.  And you must show them these terms so they know their
+rights.
+
+  We protect your rights with two steps: (1) copyright the software, and
+(2) offer you this license which gives you legal permission to copy,
+distribute and/or modify the software.
+
+  Also, for each author's protection and ours, we want to make certain
+that everyone understands that there is no warranty for this free
+software.  If the software is modified by someone else and passed on, we
+want its recipients to know that what they have is not the original, so
+that any problems introduced by others will not reflect on the original
+authors' reputations.
+
+  Finally, any free program is threatened constantly by software
+patents.  We wish to avoid the danger that redistributors of a free
+program will individually obtain patent licenses, in effect making the
+program proprietary.  To prevent this, we have made it clear that any
+patent must be licensed for everyone's free use or not licensed at all.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+                    GNU GENERAL PUBLIC LICENSE
+   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
+
+  0. This License applies to any program or other work which contains
+a notice placed by the copyright holder saying it may be distributed
+under the terms of this General Public License.  The "Program", below,
+refers to any such program or work, and a "work based on the Program"
+means either the Program or any derivative work under copyright law:
+that is to say, a work containing the Program or a portion of it,
+either verbatim or with modifications and/or translated into another
+language.  (Hereinafter, translation is included without limitation in
+the term "modification".)  Each licensee is addressed as "you".
+
+Activities other than copying, distribution and modification are not
+covered by this License; they are outside its scope.  The act of
+running the Program is not restricted, and the output from the Program
+is covered only if its contents constitute a work based on the
+Program (independent of having been made by running the Program).
+Whether that is true depends on what the Program does.
+
+  1. You may copy and distribute verbatim copies of the Program's
+source code as you receive it, in any medium, provided that you
+conspicuously and appropriately publish on each copy an appropriate
+copyright notice and disclaimer of warranty; keep intact all the
+notices that refer to this License and to the absence of any warranty;
+and give any other recipients of the Program a copy of this License
+along with the Program.
+
+You may charge a fee for the physical act of transferring a copy, and
+you may at your option offer warranty protection in exchange for a fee.
+
+  2. You may modify your copy or copies of the Program or any portion
+of it, thus forming a work based on the Program, and copy and
+distribute such modifications or work under the terms of Section 1
+above, provided that you also meet all of these conditions:
+
+    a) You must cause the modified files to carry prominent notices
+    stating that you changed the files and the date of any change.
+
+    b) You must cause any work that you distribute or publish, that in
+    whole or in part contains or is derived from the Program or any
+    part thereof, to be licensed as a whole at no charge to all third
+    parties under the terms of this License.
+
+    c) If the modified program normally reads commands interactively
+    when run, you must cause it, when started running for such
+    interactive use in the most ordinary way, to print or display an
+    announcement including an appropriate copyright notice and a
+    notice that there is no warranty (or else, saying that you provide
+    a warranty) and that users may redistribute the program under
+    these conditions, and telling the user how to view a copy of this
+    License.  (Exception: if the Program itself is interactive but
+    does not normally print such an announcement, your work based on
+    the Program is not required to print an announcement.)
+
+These requirements apply to the modified work as a whole.  If
+identifiable sections of that work are not derived from the Program,
+and can be reasonably considered independent and separate works in
+themselves, then this License, and its terms, do not apply to those
+sections when you distribute them as separate works.  But when you
+distribute the same sections as part of a whole which is a work based
+on the Program, the distribution of the whole must be on the terms of
+this License, whose permissions for other licensees extend to the
+entire whole, and thus to each and every part regardless of who wrote it.
+
+Thus, it is not the intent of this section to claim rights or contest
+your rights to work written entirely by you; rather, the intent is to
+exercise the right to control the distribution of derivative or
+collective works based on the Program.
+
+In addition, mere aggregation of another work not based on the Program
+with the Program (or with a work based on the Program) on a volume of
+a storage or distribution medium does not bring the other work under
+the scope of this License.
+
+  3. You may copy and distribute the Program (or a work based on it,
+under Section 2) in object code or executable form under the terms of
+Sections 1 and 2 above provided that you also do one of the following:
+
+    a) Accompany it with the complete corresponding machine-readable
+    source code, which must be distributed under the terms of Sections
+    1 and 2 above on a medium customarily used for software interchange; or,
+
+    b) Accompany it with a written offer, valid for at least three
+    years, to give any third party, for a charge no more than your
+    cost of physically performing source distribution, a complete
+    machine-readable copy of the corresponding source code, to be
+    distributed under the terms of Sections 1 and 2 above on a medium
+    customarily used for software interchange; or,
+
+    c) Accompany it with the information you received as to the offer
+    to distribute corresponding source code.  (This alternative is
+    allowed only for noncommercial distribution and only if you
+    received the program in object code or executable form with such
+    an offer, in accord with Subsection b above.)
+
+The source code for a work means the preferred form of the work for
+making modifications to it.  For an executable work, complete source
+code means all the source code for all modules it contains, plus any
+associated interface definition files, plus the scripts used to
+control compilation and installation of the executable.  However, as a
+special exception, the source code distributed need not include
+anything that is normally distributed (in either source or binary
+form) with the major components (compiler, kernel, and so on) of the
+operating system on which the executable runs, unless that component
+itself accompanies the executable.
+
+If distribution of executable or object code is made by offering
+access to copy from a designated place, then offering equivalent
+access to copy the source code from the same place counts as
+distribution of the source code, even though third parties are not
+compelled to copy the source along with the object code.
+
+  4. You may not copy, modify, sublicense, or distribute the Program
+except as expressly provided under this License.  Any attempt
+otherwise to copy, modify, sublicense or distribute the Program is
+void, and will automatically terminate your rights under this License.
+However, parties who have received copies, or rights, from you under
+this License will not have their licenses terminated so long as such
+parties remain in full compliance.
+
+  5. You are not required to accept this License, since you have not
+signed it.  However, nothing else grants you permission to modify or
+distribute the Program or its derivative works.  These actions are
+prohibited by law if you do not accept this License.  Therefore, by
+modifying or distributing the Program (or any work based on the
+Program), you indicate your acceptance of this License to do so, and
+all its terms and conditions for copying, distributing or modifying
+the Program or works based on it.
+
+  6. Each time you redistribute the Program (or any work based on the
+Program), the recipient automatically receives a license from the
+original licensor to copy, distribute or modify the Program subject to
+these terms and conditions.  You may not impose any further
+restrictions on the recipients' exercise of the rights granted herein.
+You are not responsible for enforcing compliance by third parties to
+this License.
+
+  7. If, as a consequence of a court judgment or allegation of patent
+infringement or for any other reason (not limited to patent issues),
+conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot
+distribute so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you
+may not distribute the Program at all.  For example, if a patent
+license would not permit royalty-free redistribution of the Program by
+all those who receive copies directly or indirectly through you, then
+the only way you could satisfy both it and this License would be to
+refrain entirely from distribution of the Program.
+
+If any portion of this section is held invalid or unenforceable under
+any particular circumstance, the balance of the section is intended to
+apply and the section as a whole is intended to apply in other
+circumstances.
+
+It is not the purpose of this section to induce you to infringe any
+patents or other property right claims or to contest validity of any
+such claims; this section has the sole purpose of protecting the
+integrity of the free software distribution system, which is
+implemented by public license practices.  Many people have made
+generous contributions to the wide range of software distributed
+through that system in reliance on consistent application of that
+system; it is up to the author/donor to decide if he or she is willing
+to distribute software through any other system and a licensee cannot
+impose that choice.
+
+This section is intended to make thoroughly clear what is believed to
+be a consequence of the rest of this License.
+
+  8. If the distribution and/or use of the Program is restricted in
+certain countries either by patents or by copyrighted interfaces, the
+original copyright holder who places the Program under this License
+may add an explicit geographical distribution limitation excluding
+those countries, so that distribution is permitted only in or among
+countries not thus excluded.  In such case, this License incorporates
+the limitation as if written in the body of this License.
+
+  9. The Free Software Foundation may publish revised and/or new versions
+of the General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+Each version is given a distinguishing version number.  If the Program
+specifies a version number of this License which applies to it and "any
+later version", you have the option of following the terms and conditions
+either of that version or of any later version published by the Free
+Software Foundation.  If the Program does not specify a version number of
+this License, you may choose any version ever published by the Free Software
+Foundation.
+
+  10. If you wish to incorporate parts of the Program into other free
+programs whose distribution conditions are different, write to the author
+to ask for permission.  For software which is copyrighted by the Free
+Software Foundation, write to the Free Software Foundation; we sometimes
+make exceptions for this.  Our decision will be guided by the two goals
+of preserving the free status of all derivatives of our free software and
+of promoting the sharing and reuse of software generally.
+
+                            NO WARRANTY
+
+  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
+FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
+OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
+PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
+OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
+TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
+PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
+REPAIR OR CORRECTION.
+
+  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
+REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
+INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
+OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
+TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
+YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
+PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
+POSSIBILITY OF SUCH DAMAGES.
+
+                     END OF TERMS AND CONDITIONS
+
+            How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+convey the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    <one line to give the program's name and a brief idea of what it does.>
+    Copyright (C) <year>  <name of author>
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License along
+    with this program; if not, write to the Free Software Foundation, Inc.,
+    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+
+Also add information on how to contact you by electronic and paper mail.
+
+If the program is interactive, make it output a short notice like this
+when it starts in an interactive mode:
+
+    Gnomovision version 69, Copyright (C) year name of author
+    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, the commands you use may
+be called something other than `show w' and `show c'; they could even be
+mouse-clicks or menu items--whatever suits your program.
+
+You should also get your employer (if you work as a programmer) or your
+school, if any, to sign a "copyright disclaimer" for the program, if
+necessary.  Here is a sample; alter the names:
+
+  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
+  `Gnomovision' (which makes passes at compilers) written by James Hacker.
+
+  <signature of Ty Coon>, 1 April 1989
+  Ty Coon, President of Vice
+
+This General Public License does not permit incorporating your program into
+proprietary programs.  If your program is a subroutine library, you may
+consider it more useful to permit linking proprietary applications with the
+library.  If this is what you want to do, use the GNU Lesser General
+Public License instead of this License.
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_views/README drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_views/README
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_views/README	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_views/README	2014-05-21 21:44:03.000000000 +0200
@@ -0,0 +1,39 @@
+Views support for the Services module version 3.x and later.
+
+It has currently two features:
+- Execute any view of the system via views resource call
+- Create view based resource creating Services display in a view
+
+Executing view via views resource
+After enabling "views" resource in your services endpoint you can do
+GET request to:
+
+http://example.com/<endpoint path>/views/<view name>
+
+This will execute a view and pass results.
+
+Possible arguments:
+- display_id: views display
+- args: array of view arguments
+- filters: array of view filter values
+- offset: views offset
+- limit: limit views number of results
+- format_output: boolean whether we would like to get themed view or data
+
+Example of calls:
+
+http://example.com/rest/views/articles?limit=5&offset=2&filters[tags]=5
+http://example.com/rest/views/articles?filters[tags]=5&display_id=block_1&format_output=1
+
+Create view based resource creating Services display in a view
+In any view you can create "Services" display. It has only one option setting
+-- path. That will be the name of your resource. After enabling that resource
+you would be able to do call to
+
+http://example.com/<endpoint path>/<resource name>
+
+This will execute a view and output results. You can create exposed filters and
+pass them to your resource. For example if we created exposed filter "tags" call
+will be:
+
+http://example.com/<endpoint path>/<resource name>?tags=7
\ Brak znaku nowej linii na końcu pliku
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_views/services_views.api.php drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_views/services_views.api.php
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_views/services_views.api.php	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_views/services_views.api.php	2014-05-21 21:44:03.000000000 +0200
@@ -0,0 +1,26 @@
+<?php
+
+/**
+ * @file Documentation about hooks provided by services_views module.
+ */
+
+/**
+ * Implements hook_services_views_execute_view_alter().
+ *
+ * Alter results of the view execution. For example we can add total number of
+ * results as separate value in response.
+ *
+ * @param array $output
+ *   Results of the view execution. These will be sent to services for rendering.
+ * @param object $view
+ *   Views object.
+ */
+function hook_services_views_execute_view_alter(&$output, $view) {
+  if ($view->name == 'test') {
+    $paged_output = array(
+      'results' => $output,
+      'total_rows' => $view->total_rows,
+    );
+    $output = $paged_output;
+  }
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_views/services_views.info drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_views/services_views.info
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_views/services_views.info	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_views/services_views.info	2014-05-21 21:44:03.000000000 +0200
@@ -0,0 +1,16 @@
+name = Services Views
+description = Build service endpoints with Views.
+package = Services
+core = 7.x
+dependencies[] = services
+dependencies[] = views
+
+files[] = includes/views/views_plugin_display_services.inc
+
+
+; Information added by Drupal.org packaging script on 2014-01-02
+version = "7.x-1.0"
+core = "7.x"
+project = "services_views"
+datestamp = "1388679507"
+
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_views/services_views.module drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_views/services_views.module
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_views/services_views.module	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_views/services_views.module	2014-05-21 21:44:03.000000000 +0200
@@ -0,0 +1,266 @@
+<?php
+/**
+ * @file
+ *  Provides a generic but powerful API for web services.
+ */
+
+/**
+ * Implementation of hook_views_api().
+ */
+function services_views_views_api() {
+  return array(
+    'api' => 2.0,
+  );
+}
+
+/**
+ * Implementation of hook_services_resources().
+ */
+function services_views_services_resources() {
+  $resources['views'] = array();
+
+  $resources['views']['retrieve'] = array(
+    'help' => 'Retrieves a view.',
+    'file' => array(
+      'type' => 'inc',
+      'module' => 'services_views',
+      'name' => 'services_views.resource',
+    ),
+    'callback' => 'services_views_retrieve',
+    'access callback' => 'services_views_access',
+    'access arguments' => array('view'),
+    'access arguments append' => TRUE,
+    'args' => array(
+      'view_name' => array(
+        'name' => 'view_name',
+        'type' => 'string',
+        'description' => 'The name of the view to get.',
+        'source' => array('path' => '0'),
+        'optional' => FALSE,
+      ),
+      'display_id' => array(
+        'name' => 'display_id',
+        'type' => 'string',
+        'description' => 'The display ID of the view to get.',
+        'source' => array('param' => 'display_id'),
+        'optional' => TRUE,
+        'default value' => 'default',
+      ),
+      'args' => array(
+        'name' => 'args',
+        'type' => 'array',
+        'description' => 'A list of arguments to pass to the view.',
+        'source' => array('param' => 'args'),
+        'optional' => TRUE,
+        'default value' => array(),
+      ),
+      'offset' => array(
+        'name' => 'offset',
+        'type' => 'int',
+        'description' => 'The number of the entry for the page begin with.',
+        'source' => array('param' => 'offset'),
+        'optional' => TRUE,
+        'default value' => 0,
+      ),
+      'limit' => array(
+        'name' => 'limit',
+        'type' => 'int',
+        'description' => 'The total number of entries to list.',
+        'source' => array('param' => 'limit'),
+        'optional' => TRUE,
+        'default value' => -1,
+      ),
+      'format_output' => array(
+        'name' => 'format_output',
+        'type' => 'bool',
+        'description' => 'Whether to return the raw data results or style the results.',
+        'source' => array('param' => 'format_output'),
+        'optional' => TRUE,
+        'default value' => FALSE,
+      ),
+      'filters' => array(
+        'name' => 'filters',
+        'type' => 'array',
+        'description' => 'A list of filters to pass to the view.  These are defined by the exposed filters on your view.  Example call: <code>/views/your_view?filters[nid]=12345</code>',
+        'source' => array('param' => 'filters'),
+        'optional' => TRUE,
+        'default value' => array(),
+      ),
+    ),
+  );
+
+  // Retrieve all views that have "services" display.
+  $views = views_get_enabled_views();
+  foreach ($views as $view_name => $view) {
+    foreach ($view->display as $view_display => $display) {
+      if ($display->display_plugin !== 'services') {
+        continue;
+      }
+
+      $path = $display->display_options['path'];
+
+      $resources[$path] = array();
+      $resources[$path]['index'] = array(
+        'view info' => array('view_name' => $view_name, 'display_id' => $view_display),
+        'help' => filter_xss('View: ' . $view->human_name),
+        'file' => array(
+          'type' => 'inc',
+          'module' => 'services_views',
+          'name' => 'services_views.resource',
+        ),
+        'callback' => 'services_views_execute_view',
+          // Reuse services_views_access access callback.
+        'access callback' => 'services_views_access',
+        'access arguments' => array(
+          'view',
+          array(
+            'view_name' => $view_name,
+            'display_id' => $view_display,
+          ),
+        ),
+      );
+    }
+  }
+
+  return $resources;
+}
+
+
+/**
+ * Check the access permission to a given views.
+ *
+ * @param $op
+ *  String. The operation that's going to be performed.
+ * @param $args
+ *  Array. The arguments that will be passed to the callback.
+ * @return
+ *  Boolean. TRUE if the user is allowed to load the given view.
+ */
+function services_views_access($op = 'view', $args = array()) {
+  switch ($op) {
+    case 'view':
+      $view = views_get_view($args['view_name']);
+      if (empty($view)) {
+        return services_error(t('View @view could not be found', array('@view' => $args['view_name'])), 404);
+      }
+      if (!isset($view->display[$args['display_id']])) {
+        return services_error(t('Display @display on view @view could not be found', array(
+          '@display' => $args['display_id'],
+          '@view' => $args['view_name'],
+        )), 404);
+      }
+      return $view->access($args['display_id']);
+  }
+}
+
+/**
+ * Implements hook_views_plugins
+ */
+function services_views_views_plugins() {
+  $plugins = array(
+    'display' => array(
+      'services' => array(
+        'title' => t('Services'),
+        'help' => t('Export view to Services.'),
+        'handler' => 'views_plugin_display_services',
+        'theme' => 'views_view',
+        'use ajax' => FALSE,
+        'use pager' => TRUE,
+        'use more' => TRUE,
+        'admin' => t('Services'),
+      ),
+    ),
+  );
+  return $plugins;
+}
+
+/**
+ * Implements hook_services_request_preprocess_alter().
+ *
+ * Pass "view info" to arguments so view name and display_id can be accessed.
+ */
+function services_views_services_request_preprocess_alter($controller, &$args, $options) {
+  if (isset($controller['view info'])) {
+    array_unshift($args, $controller['view info']);
+  }
+}
+
+/**
+ * Alter form views_ui_config_item_form.
+ *
+ * Form of views field options.
+ */
+function services_views_form_views_ui_config_item_form_alter(&$form, $form_state) {
+  // Make sure this is field options form.
+  if ($form_state['type'] != 'field') {
+    return;
+  }
+
+  // Make sure current display is services display.
+  if (get_class($form_state['view']->display_handler) != 'views_plugin_display_services') {
+    return;
+  }
+
+  // Label checkbox and textfield labels.
+  $form['options']['custom_label']['#title'] = t('Set custom value key');
+  unset($form['options']['custom_label']['#description']);
+  $form['options']['label']['#title'] = t('Custom value key');
+}
+
+/**
+ * Implements hook_field_formatter_info().
+ */
+function services_views_field_formatter_info_alter(&$formatters) {
+  $field_types = array();
+  foreach ($formatters as $formatter) {
+    $field_types = array_merge($field_types, $formatter['field types']);
+  }
+  // Remove duplicates.
+  $field_types = array_unique($field_types);
+
+  $formatters['services'] = array(
+    'label' => t('Services Raw'),
+    'description' => t('Formatter for Services to provide value as it is in entity object.'),
+    'field types' => $field_types,
+    'module' => 'services_views',
+    'settings' => array(),
+  );
+}
+
+/**
+ * Implements hook_field_formatter_settings_form().
+ */
+function services_views_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
+  $display = $instance['display'][$view_mode];
+  $settings = $display['settings'];
+
+  if ($display['type'] == 'services') {
+    $element['skip_safe'] = array(
+      '#type' => 'checkbox',
+      '#title' => t('Skip safe values'),
+      '#default_value' => $settings['skip_safe'],
+    );
+    $element['skip_empty_values'] = array(
+      '#type' => 'checkbox',
+      '#title' => t('Skip empty values'),
+      '#default_value' => $settings['skip_empty_values'],
+    );
+  }
+
+  return $element;
+}
+
+
+/**
+ * Implements hook_field_formatter_view().
+ */
+function services_views_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
+  $element = array();
+  if ($display['type'] == 'services') {
+    foreach ($items as $delta => $item) {
+      $element[$delta] = $item;
+    }
+  }
+
+  return $element;
+}
diff -rupN commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_views/services_views.resource.inc drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_views/services_views.resource.inc
--- commerce_kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_views/services_views.resource.inc	1970-01-01 01:00:00.000000000 +0100
+++ drupal-epesi-kickstart-7.x-2.15/profiles/commerce_kickstart/modules/epesi/services_views/services_views.resource.inc	2014-05-21 21:44:03.000000000 +0200
@@ -0,0 +1,186 @@
+<?php
+/**
+ * @file
+ * Callbacks for services module resource hooks.
+ */
+
+/**
+ * Callback for retrieving views resources.
+ *
+ * @param $view_name
+ *   String. The views name.
+ * @param $display_id
+ *   String (optional). The views display name.
+ * @param $args
+ *   Array (optional). A list of arguments to pass to the view.
+ * @param $offset
+ *   Integer (optional). An offset integer for paging.
+ * @param $limit
+ *   Integer (optional). A limit integer for paging.
+ * @param $return_type
+ *   String (optional). Whether to return the raw data results (FALSE), the entire views object ('view') or themed results ('theme').
+ * @param $filters
+ *   Array (optional). A list of exposed filters to pass to the view.
+ *
+ * @return
+ *  Array. The views return.
+ */
+function services_views_retrieve($view_name, $display_id = 'default', $args = array(), $offset = 0, $limit = -1, $return_type = FALSE, $filters = array()) {
+  $result = array();
+  $view = views_get_view($view_name);
+
+  // Put all arguments and filters and then execute.
+  $view->set_arguments($args, FALSE);
+  $view->set_exposed_input($filters);
+  $view->set_offset($offset);
+
+  // Support for Views 2
+  if (method_exists($view, 'set_use_pager')) {
+    // If offset is set we can't have a user pager.
+    if (empty($offset)) {
+      $view->set_use_pager(TRUE);
+      if ($limit >= 0) {
+        $view->set_items_per_page($limit);
+      }
+    }
+    else {
+      // Disable the user pager.
+      $view->set_use_pager(FALSE);
+    }
+  }
+  elseif ($limit >= 0) {
+    $view->set_items_per_page($limit);
+  }
+
+  // If we display values and not themed view output.
+  if (empty($return_type)) {
+    $view->set_display($display_id);
+    $view->pre_execute();
+    $view->execute();
+    $result = $view->result;
+
+    $row_plugin = $view->display_handler->get_option('row_plugin');
+    // If row plugin is node, then we should load each node
+    if ($row_plugin == 'node') {
+      $nodes = array();
+      foreach ($view->result as $row) {
+        $nodes[] = node_load($row->nid);
+      }
+      $result = $nodes;
+    }
+    elseif ($row_plugin == 'fields') {
+      $items = array();
+      foreach ($view->result as $row) {
+        $item = new stdClass();
+        foreach ($view->field as $field_id => $field) {
+          if (!empty($field->options['label'])) {
+            $field_label = strtolower($field->options['label']);
+          }
+          elseif ($field->field_alias) {
+            $field_label = $field->field_alias;
+          }
+          else {
+            $field_label = $field_id;
+          }
+          $item->$field_label = $field->theme($row);
+        }
+        $items[] = $item;
+      }
+      if ($items) {
+        $result = $items;
+      }
+    }
+  }
+  elseif ($return_type == 'view') {
+    $view->set_display($display_id);
+    $view->execute();
+    return $view;
+  }
+  else {
+    // We want to keep the result an array.
+    $result[] = $view->preview($display_id);
+  }
+  return $result;
+}
+
+/**
+ * Execute a view and return results.
+ */
+function services_views_execute_view($view_info, $view = NULL, $display_id = NULL) {
+  if (!empty($view_info)) {
+    $view_name = $view_info['view_name'];
+    $display_id = $view_info['display_id'];
+
+    $args = array();
+
+    $view = views_get_view($view_name);
+    $view->set_arguments($args);
+  }
+
+  // Avoid translation of the field labels.
+  $view->localization_plugin = views_get_plugin('localization', 'none');
+
+  // Execute a view.
+  $output = $view->render($display_id);
+
+  // Add support for Services Raw formatter.
+  foreach ($view->result as $index => $row) {
+    foreach ($view->field as $field_key => $field) {
+      $f_key = 'field_' . $field_key;
+      if (isset($row->$f_key)) {
+
+        $target_key = $field_key;
+        $format = ($field->options['type'] == 'services') ? 'raw' : 'rendered';
+
+        // Skip this field?
+        if (isset($field->options['exclude']) && $field->options['exclude'] == TRUE) {
+          continue;
+        }
+
+        if (isset($field->options['label']) && !empty($field->options['label'])) {
+          $target_key = $field->options['label'];
+        }
+
+        $output[$index]->$target_key = array();
+        $obj = &$output[$index]->$target_key;
+
+        foreach ($row->$f_key as $idx => $res) {
+
+          if (isset($res[$format])) {
+            $data = $res[$format];
+
+            // If this is raw formatter.
+            if ($format == 'raw') {
+              foreach ($data as $key => $val) {
+                if ($field->options['settings']['skip_safe'] && strpos($key, 'safe_') === 0) {
+                  unset($data[$key]);
+                }
+                if ($field->options['settings']['skip_empty_values'] && empty($val)) {
+                  unset($data[$key]);
+                }
+              }
+              $obj[$idx] = $data;
+            }
+            // Rendered output.
+            elseif (isset($data['#access']) && $data['#access'] == TRUE) {
+              $obj[$idx] = render($data);
+            }
+            else {
+              $obj[$idx] = array('error' => t('Access denied or format unknown on field.'));
+            }
+          }
+        }
+
+        // Check cardinality of the field.
+        if ($field->field_info['cardinality'] == 1 && count($obj) == 1) {
+          $obj = $obj[$idx];
+        }
+      }
+    }
+  }
+
+  drupal_alter('services_views_execute_view', $output, $view);
+
+  $view->destroy();
+  return $output;
+}
