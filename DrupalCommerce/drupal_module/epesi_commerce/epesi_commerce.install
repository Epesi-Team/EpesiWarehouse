<?php

/**
 * Implements hook_enable().
 *
 * Rebuilds the feature immediately after it's enabled.
 */
function epesi_commerce_enable() {
  // Rebuild the features static caches.
  features_include(TRUE);

  $module = 'epesi_commerce';
  $feature = feature_load($module);
  $items[$module] = array_keys($feature->info['features']);
  _features_restore('enable', $items);
  _features_restore('rebuild', $items);

  //convert title and description to be translatable
  $name = 'epesi_category';
  $entity_type = 'taxonomy_term';
  foreach (title_field_replacement_info($entity_type) as $legacy_field => $info) {
    title_field_replacement_toggle($entity_type, $name, $legacy_field);
  }

  commerce_ss_admin_create_instance('commerce_stock', 'number_decimal', TRUE, 'commerce_product', 'epesi_products', t('Stock'));

}

/**
 * Implements of hook_install()
 */
function epesi_commerce_install() {
  db_update('system')
    ->fields(array('weight' => 10))
    ->condition('name', 'epesi_commerce')
    ->execute();
    
  $view = new view();
  $view->name = 'epesi_products_search_by_product_id';
  $view->description = '';
  $view->tag = 'default';
  $view->base_table = 'node';
  $view->human_name = 'Epesi Products - search by product_id';
  $view->core = 7;
  $view->api_version = '3.0';
  $view->disabled = FALSE; /* Edit this to true to make a default view disabled initially */
  
  /* Display: Master */
  $handler = $view->new_display('default', 'Master', 'default');
  $handler->display->display_options['use_more_always'] = FALSE;
  $handler->display->display_options['access']['type'] = 'perm';
  $handler->display->display_options['cache']['type'] = 'none';
  $handler->display->display_options['query']['type'] = 'views_query';
  $handler->display->display_options['exposed_form']['type'] = 'basic';
  $handler->display->display_options['pager']['type'] = 'full';
  $handler->display->display_options['style_plugin'] = 'default';
  $handler->display->display_options['row_plugin'] = 'fields';
  /* Field: Content: Nid */
  $handler->display->display_options['fields']['nid']['id'] = 'nid';
  $handler->display->display_options['fields']['nid']['table'] = 'node';
  $handler->display->display_options['fields']['nid']['field'] = 'nid';
  $handler->display->display_options['fields']['nid']['label'] = '';
  $handler->display->display_options['fields']['nid']['element_label_colon'] = FALSE;
  /* Sort criterion: Content: Post date */
  $handler->display->display_options['sorts']['created']['id'] = 'created';
  $handler->display->display_options['sorts']['created']['table'] = 'node';
  $handler->display->display_options['sorts']['created']['field'] = 'created';
  $handler->display->display_options['sorts']['created']['order'] = 'DESC';
  /* Contextual filter: Content: Product variations (field_product) */
  $handler->display->display_options['arguments']['field_product_product_id']['id'] = 'field_product_product_id';
  $handler->display->display_options['arguments']['field_product_product_id']['table'] = 'field_data_field_product';
  $handler->display->display_options['arguments']['field_product_product_id']['field'] = 'field_product_product_id';
  $handler->display->display_options['arguments']['field_product_product_id']['default_action'] = 'empty';
  $handler->display->display_options['arguments']['field_product_product_id']['default_argument_type'] = 'fixed';
  $handler->display->display_options['arguments']['field_product_product_id']['summary']['number_of_records'] = '0';
  $handler->display->display_options['arguments']['field_product_product_id']['summary']['format'] = 'default_summary';
  $handler->display->display_options['arguments']['field_product_product_id']['summary_options']['items_per_page'] = '25';
  /* Filter criterion: Content: Published */
  $handler->display->display_options['filters']['status']['id'] = 'status';
  $handler->display->display_options['filters']['status']['table'] = 'node';
  $handler->display->display_options['filters']['status']['field'] = 'status';
  $handler->display->display_options['filters']['status']['value'] = 1;
  $handler->display->display_options['filters']['status']['group'] = 1;
  $handler->display->display_options['filters']['status']['expose']['operator'] = FALSE;
  /* Filter criterion: Content: Type */
  $handler->display->display_options['filters']['type']['id'] = 'type';
  $handler->display->display_options['filters']['type']['table'] = 'node';
  $handler->display->display_options['filters']['type']['field'] = 'type';
  $handler->display->display_options['filters']['type']['value'] = array(
    'epesi_products' => 'epesi_products',
    );
    
    /* Display: Services */
    $handler = $view->new_display('services', 'Services', 'services_1');
    $translatables['epesi_products_search_by_product_id'] = array(
      t('Master'),
        t('more'),
          t('Apply'),
            t('Reset'),
              t('Sort by'),
                t('Asc'),
                  t('Desc'),
                    t('Items per page'),
                      t('- All -'),
                        t('Offset'),
                          t('« first'),
                            t('‹ previous'),
                              t('next ›'),
                                t('last »'),
                                  t('All'),
                                    t('Services'),
                                    );
                                    

$endpoint = new stdClass();
$endpoint->disabled = FALSE; /* Edit this to true to make a default endpoint disabled initially */
$endpoint->api_version = 3;
$endpoint->name = 'epesi';
$endpoint->server = 'rest_server';
$endpoint->path = 'epesi';
$endpoint->authentication = array(
  'services' => 'services',
);
$endpoint->server_settings = array(
  'formatters' => array(
    'bencode' => TRUE,
    'json' => TRUE,
    'php' => TRUE,
    'xml' => TRUE,
    'jsonp' => FALSE,
  ),
  'parsers' => array(
    'application/json' => TRUE,
    'application/vnd.php.serialized' => TRUE,
    'application/xml' => TRUE,
    'multipart/form-data' => TRUE,
    'text/xml' => TRUE,
    'application/x-www-form-urlencoded' => FALSE,
  ),
);
$endpoint->resources = array(
  'product-display' => array(
    'operations' => array(
      'index' => array(
        'enabled' => '1',
      ),
      'retrieve' => array(
        'enabled' => '1',
      ),
    ),
  ),
  'product' => array(
    'operations' => array(
      'index' => array(
        'enabled' => '1',
      ),
      'retrieve' => array(
        'enabled' => '1',
      ),
      'create' => array(
        'enabled' => '1',
      ),
      'update' => array(
        'enabled' => '1',
      ),
      'delete' => array(
        'enabled' => '1',
      ),
    ),
  ),
  'order' => array(
    'operations' => array(
      'index' => array(
        'enabled' => '1',
      ),
      'retrieve' => array(
        'enabled' => '1',
      ),
      'update' => array(
        'enabled' => '1',
      ),
      'delete' => array(
        'enabled' => '1',
      ),
    ),
    'relationships' => array(
      'line-items' => array(
        'enabled' => '1',
      ),
    ),
  ),
  'line-item' => array(
    'operations' => array(
      'index' => array(
        'enabled' => '1',
      ),
      'retrieve' => array(
        'enabled' => '1',
      ),
      'create' => array(
        'enabled' => '1',
      ),
      'update' => array(
        'enabled' => '1',
      ),
      'delete' => array(
        'enabled' => '1',
      ),
    ),
  ),
  'file' => array(
    'operations' => array(
      'create' => array(
        'enabled' => '1',
      ),
    ),
    'actions' => array(
      'create_raw' => array(
        'enabled' => '1',
      ),
    ),
  ),
  'node' => array(
    'operations' => array(
      'retrieve' => array(
        'enabled' => '1',
      ),
      'create' => array(
        'enabled' => '1',
      ),
      'update' => array(
        'enabled' => '1',
      ),
      'delete' => array(
        'enabled' => '1',
      ),
      'index' => array(
        'enabled' => '1',
      ),
    ),
    'relationships' => array(
      'files' => array(
        'enabled' => '1',
      ),
      'comments' => array(
        'enabled' => '1',
      ),
    ),
    'targeted_actions' => array(
      'attach_file' => array(
        'enabled' => '1',
      ),
    ),
  ),
  'taxonomy_term' => array(
    'operations' => array(
      'retrieve' => array(
        'enabled' => '1',
      ),
      'create' => array(
        'enabled' => '1',
      ),
      'update' => array(
        'enabled' => '1',
      ),
      'delete' => array(
        'enabled' => '1',
      ),
      'index' => array(
        'enabled' => '1',
      ),
    ),
    'actions' => array(
      'selectNodes' => array(
        'enabled' => '1',
      ),
    ),
  ),
  'taxonomy_vocabulary' => array(
    'operations' => array(
      'index' => array(
        'enabled' => '1',
      ),
    ),
    'actions' => array(
      'getTree' => array(
        'enabled' => '1',
      ),
    ),
  ),
  'user' => array(
    'operations' => array(
      'retrieve' => array(
        'enabled' => '1',
      ),
    ),
    'actions' => array(
      'login' => array(
        'enabled' => '1',
        'settings' => array(
          'services' => array(
            'resource_api_version' => '1.0',
          ),
        ),
      ),
      'logout' => array(
        'enabled' => '1',
        'settings' => array(
          'services' => array(
            'resource_api_version' => '1.0',
          ),
        ),
      ),
      'token' => array(
        'enabled' => '1',
      ),
    ),
  ),
  'entity_translation' => array(
    'actions' => array(
      'translate' => array(
        'enabled' => '1',
      ),
    ),
  ),
  'views' => array(
    'operations' => array(
      'retrieve' => array(
        'enabled' => '1',
      ),
    ),
  ),
);
$endpoint->debug = 0;

  services_endpoint_save($endpoint);
}
